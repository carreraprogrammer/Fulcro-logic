{"version":3,"sources":["com/fulcrologic/guardrails/impl/externs.cljc"],"mappings":";AAMA,GAAA,QAAAA,gCAAAC,4CAAAC,uDAAAC,4DAAAC,oEAAAC;AAAA;AAAA,AAAA,AAASC,2DAAiB,6CAAA,7CAACC;;AAC3B,GAAA,QAAAP,gCAAAC,4CAAAC,uDAAAC,4DAAAC,oEAAAI;AAAA;AAAA,AAAA,AAASC,wDAAc,6CAAA,7CAACF;;AACxB,GAAA,QAAAP,gCAAAC,4CAAAC,uDAAAC,4DAAAC,oEAAAM;AAAA;AAAA,AAAA,AAASC,4DAAkB,6CAAA,7CAACJ;;AAC5B,GAAA,QAAAP,gCAAAC,4CAAAC,uDAAAC,4DAAAC,oEAAAQ;AAAA;AAAA,AAAA,AAASC,qEAA2B,6CAAA,7CAACN;;AA6CrC,iEAAA,jEAAMO,0IAAmBC,GAAGC,QAAQC;AAApC,AACE,sIAAA,/HAACC,mDAAMZ,yDAAiBa,sGAAUJ,GAAGC,gBAASC;;AAEhD,+DAAA,/DAAMG,sIAAiBC;AAAvB,AACE,OAACH,mDAAMT,sDAAca,gBAAM,AAAA,0KAAwBD;;AAErD,yDAAA,zDAAME,0HAAgBF;AAAtB,qGACMA,/CACF,yDAAA,zDAACG,yLACC,0FAAA,WAAAC,rGAACC,gDAAQC,/RACX,OAACC;AADC,AAAyB,sDAAAH,iBAAA,hEAACG;KAC5B;;AAEJ,kEAAA,lEAAMC,4IAAoBd,GAAGC,QAAQK;AAArC,AACE,AAACD,6DAAgBC;;AACjB,uIAAA,hIAACH,mDAAMP,0DAAkBQ,sGAAUJ,GAAGC,gBACpC,AAACO,uDAAeF;;AAEpB,4DAAA,uEAAAS,nIAAMI,gIAAcnB,YAA0CE;AAA9D,AAAA,IAAAc,aAAAD;IAAAC,iBAAA,AAAAC,4BAAAD;gBAAAA,ZAA4BV;cAA5B,AAAAY,4CAAAF,eAAA,rEAAoDf;AAApD,AACE,AAACF,+DAAkBC,GAAGC,QAAQC;;AAC9B,OAACY,gEAAmBd,GAAGC,QAAQK;;AAEjC,2EAAA,mFAAAc,9JAAME;AAAN,AAAA,IAAAD,aAAAD;IAAAC,iBAAA,AAAAJ,4BAAAI;wBAAAA,pBAAwCE;eAAxC,AAAAL,4CAAAG,eAAA,tEAAyEG;AAAzE,AACE,OAACrB,mDAAML,mEAA2B2B,gBAAMD,SACtC,AAAChB,uDAAee;;AAEpB,4DAAA,5DAAMG,gIAAcH;AAApB,AACE,AAAClB,6DAAgBkB;;AACjB,OAACD,yEAA4BC","names":["js/com","js/com.fulcrologic","js/com.fulcrologic.guardrails","js/com.fulcrologic.guardrails.impl","js/com.fulcrologic.guardrails.impl.externs","js/com.fulcrologic.guardrails.impl.externs.externs-registry","com.fulcrologic.guardrails.impl.externs/externs-registry","cljs.core.atom","js/com.fulcrologic.guardrails.impl.externs.spec-registry","com.fulcrologic.guardrails.impl.externs/spec-registry","js/com.fulcrologic.guardrails.impl.externs.function-registry","com.fulcrologic.guardrails.impl.externs/function-registry","js/com.fulcrologic.guardrails.impl.externs.external-function-registry","com.fulcrologic.guardrails.impl.externs/external-function-registry","com.fulcrologic.guardrails.impl.externs/register-externs!","NS","fn-name","externs","cljs.core.swap_BANG_","cljs.core/assoc-in","com.fulcrologic.guardrails.impl.externs/register-specs!","function","cljs.core/merge","com.fulcrologic.guardrails.impl.externs/clean-function","cljs.core.update","p1__47685#","cljs.core.partial","com.fulcrologic.guardrails.utils/map-vals","cljs.core.dissoc","com.fulcrologic.guardrails.impl.externs/register-function!","p__47686","map__47687","cljs.core/--destructure-map","cljs.core.get","com.fulcrologic.guardrails.impl.externs/record-defn!","p__47688","map__47690","com.fulcrologic.guardrails.impl.externs/register-external-function!","external-function","var-name","cljs.core/assoc","com.fulcrologic.guardrails.impl.externs/record-fdef!"],"sourcesContent":["(ns com.fulcrologic.guardrails.impl.externs\n  (:require\n    #?@(:clj [[clojure.walk :as walk]])\n    [com.fulcrologic.guardrails.registry :as gr.reg]\n    [com.fulcrologic.guardrails.utils :as utils]))\n\n(defonce externs-registry (atom {}))\n(defonce spec-registry (atom {}))\n(defonce function-registry (atom {}))\n(defonce external-function-registry (atom {}))\n\n#?(:clj (try (require 'cljs.analyzer.api) (catch Exception _)))\n\n#?(:clj\n   (defn compiling-cljs? [env]\n     (and (:ns env) (utils/compiling-cljs?))))\n\n#?(:clj\n   (defn cljc-resolve [env s]\n     (letfn [(cljs-resolve []\n               (let [rslv     (some-> (find-ns 'cljs.analyzer.api) (ns-resolve 'resolve))\n                     ast-node (when rslv (rslv env s))\n                     macro?   (boolean (:macro ast-node))]\n                 (when ast-node\n                   (cond-> {::gr.reg/extern-name `(quote ~(:name ast-node))\n                            ::gr.reg/macro?      macro?}\n                     (not macro?) (assoc ::gr.reg/extern-value s)))))\n             (clojure-resolve []\n               (if (contains? env s)\n                 {::gr.reg/extern-name  `(quote ~s)\n                  ::gr.reg/extern-value s}\n                 (let [sym-var (ns-resolve *ns* env s)\n                       cls?    (class? sym-var)\n                       macro?  (boolean (some-> sym-var meta :macro))]\n                   (when (and sym-var (not cls?))\n                     (cond-> {::gr.reg/extern-name  `(quote ~(symbol sym-var))\n                              ::gr.reg/macro?       macro?}\n                       (not macro?)\n                       (assoc ::gr.reg/extern-value (symbol sym-var)))))))]\n       (if (compiling-cljs? env)\n         (cljs-resolve)\n         (clojure-resolve)))))\n\n#?(:clj\n   (defn extern-symbols [env body]\n     (let [externs (atom {})\n           record! (fn [x]\n                     (when (symbol? x)\n                       (when-let [extern (cljc-resolve env x)]\n                         (swap! externs assoc `(quote ~x) extern)))\n                     x)]\n       (walk/postwalk record! body)\n       @externs)))\n\n(defn register-externs! [NS fn-name externs]\n  (swap! externs-registry assoc-in [NS fn-name] externs))\n\n(defn register-specs! [function]\n  (swap! spec-registry merge (::gr.reg/spec-registry function)))\n\n(defn clean-function [function]\n  (-> function\n    (update ::gr.reg/arities\n      (partial utils/map-vals #(dissoc % ::gr.reg/body)))\n    (dissoc ::gr.reg/spec-registry)))\n\n(defn register-function! [NS fn-name function]\n  (register-specs! function)\n  (swap! function-registry assoc-in [NS fn-name]\n    (clean-function function)))\n\n(defn record-defn! [NS {:as function ::gr.reg/keys [fn-name]} externs]\n  (register-externs! NS fn-name externs)\n  (register-function! NS fn-name function))\n\n(defn register-external-function! [{:as external-function ::gr.reg/keys [var-name]}]\n  (swap! external-function-registry assoc var-name\n    (clean-function external-function)))\n\n(defn record-fdef! [external-function]\n  (register-specs! external-function)\n  (register-external-function! external-function))\n"]}