["^ ","~:output",["^ ","~:js","goog.provide('com.fulcrologic.fulcro.algorithms.tx_processing');\r\n\r\n\r\n/**\r\n * Returns the remotes map from an app\r\n */\r\ncom.fulcrologic.fulcro.algorithms.tx_processing.app__GT_remotes = (function com$fulcrologic$fulcro$algorithms$tx_processing$app__GT_remotes(app__$1){\r\nnew cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"app\",\"com.fulcrologic.fulcro.application/app\",-1014694064),com.fulcrologic.guardrails.core._EQ__GT_,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"remotes\",\"com.fulcrologic.fulcro.application/remotes\",1823703517)], null);\r\n\r\nreturn new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"remotes\",\"com.fulcrologic.fulcro.application/remotes\",1823703517).cljs$core$IFn$_invoke$arity$1(cljs.core.deref(new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"runtime-atom\",\"com.fulcrologic.fulcro.application/runtime-atom\",-1167397772).cljs$core$IFn$_invoke$arity$1(app__$1)));\r\n});\r\n/**\r\n * Returns a set of the names of the remotes from an app\r\n */\r\ncom.fulcrologic.fulcro.algorithms.tx_processing.app__GT_remote_names = (function com$fulcrologic$fulcro$algorithms$tx_processing$app__GT_remote_names(app__$1){\r\nnew cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"app\",\"com.fulcrologic.fulcro.application/app\",-1014694064),com.fulcrologic.guardrails.core._EQ__GT_,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"remote-names\",\"com.fulcrologic.fulcro.application/remote-names\",1017468926)], null);\r\n\r\nreturn cljs.core.set(cljs.core.keys(new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"remotes\",\"com.fulcrologic.fulcro.application/remotes\",1823703517).cljs$core$IFn$_invoke$arity$1(cljs.core.deref(new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"runtime-atom\",\"com.fulcrologic.fulcro.application/runtime-atom\",-1167397772).cljs$core$IFn$_invoke$arity$1(app__$1)))));\r\n});\r\n/**\r\n * Splits the given send queue into two send queues:\r\n *   [parallel-items sequential-items].\r\n */\r\ncom.fulcrologic.fulcro.algorithms.tx_processing.extract_parallel = (function com$fulcrologic$fulcro$algorithms$tx_processing$extract_parallel(sends){\r\nnew cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.spec.alpha.every_impl.cljs$core$IFn$_invoke$arity$4(new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-node\",1624648157),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-node\",1624648157),new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(\"cljs.spec.alpha\",\"kind-form\",\"cljs.spec.alpha/kind-form\",-1047104697),new cljs.core.Symbol(\"cljs.core\",\"vector?\",\"cljs.core/vector?\",-1550392028,null),new cljs.core.Keyword(\"cljs.spec.alpha\",\"cpred\",\"cljs.spec.alpha/cpred\",-693471218),(function (G__59418){\r\nreturn cljs.core.vector_QMARK_(G__59418);\r\n}),new cljs.core.Keyword(null,\"kind\",\"kind\",-717265803),cljs.core.vector_QMARK_,new cljs.core.Keyword(\"cljs.spec.alpha\",\"conform-all\",\"cljs.spec.alpha/conform-all\",45201917),true,new cljs.core.Keyword(\"cljs.spec.alpha\",\"describe\",\"cljs.spec.alpha/describe\",1883026911),cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"coll-of\",\"cljs.spec.alpha/coll-of\",1019430407,null),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-node\",1624648157),new cljs.core.Keyword(null,\"kind\",\"kind\",-717265803),new cljs.core.Symbol(\"cljs.core\",\"vector?\",\"cljs.core/vector?\",-1550392028,null))], null),null),com.fulcrologic.guardrails.core._EQ__GT_,cljs.spec.alpha.cat_impl(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"rest\",\"rest\",-1241696419)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-queue\",-1602123421),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-queue\",-1602123421)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-queue\",-1602123421),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-queue\",-1602123421)], null))], null);\r\n\r\nvar parallel_QMARK_ = (function (p__59421){\r\nvar map__59422 = p__59421;\r\nvar map__59422__$1 = cljs.core.__destructure_map(map__59422);\r\nvar options = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__59422__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"options\",\"com.fulcrologic.fulcro.algorithms.tx-processing/options\",2016767420));\r\nreturn cljs.core.boolean$((function (){var or__4253__auto__ = new cljs.core.Keyword(null,\"parallel?\",\"parallel?\",-25273892).cljs$core$IFn$_invoke$arity$1(options);\r\nif(cljs.core.truth_(or__4253__auto__)){\r\nreturn or__4253__auto__;\r\n} else {\r\nreturn new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"parallel?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/parallel?\",1623289535).cljs$core$IFn$_invoke$arity$1(options);\r\n}\r\n})());\r\n});\r\nvar map__59419 = cljs.core.group_by(parallel_QMARK_,sends);\r\nvar map__59419__$1 = cljs.core.__destructure_map(map__59419);\r\nvar parallel = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__59419__$1,true);\r\nvar sequential = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__59419__$1,false);\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.vec(parallel),cljs.core.vec(sequential)], null);\r\n});\r\n/**\r\n * Check if the given `test` predicate is true for an AST node or for all the immediate children of an AST tree.\r\n */\r\ncom.fulcrologic.fulcro.algorithms.tx_processing.every_ast_QMARK_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$every_ast_QMARK_(ast_node_or_tree,test){\r\nnew cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"ast\",\"com.fulcrologic.fulcro.algorithms.tx-processing/ast\",1718830373),cljs.core.fn_QMARK_,com.fulcrologic.guardrails.core._EQ__GT_,cljs.core.boolean_QMARK_], null);\r\n\r\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"root\",\"root\",-448657453),new cljs.core.Keyword(null,\"type\",\"type\",1174270348).cljs$core$IFn$_invoke$arity$1(ast_node_or_tree))){\r\nreturn cljs.core.every_QMARK_(test,new cljs.core.Keyword(null,\"children\",\"children\",-940561982).cljs$core$IFn$_invoke$arity$1(ast_node_or_tree));\r\n} else {\r\nreturn (test.cljs$core$IFn$_invoke$arity$1 ? test.cljs$core$IFn$_invoke$arity$1(ast_node_or_tree) : test.call(null,ast_node_or_tree));\r\n}\r\n});\r\n/**\r\n * Returns true if the given AST node or tree represents a mutation or sequence of mutations.\r\n */\r\ncom.fulcrologic.fulcro.algorithms.tx_processing.mutation_ast_QMARK_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$mutation_ast_QMARK_(ast_node_or_tree){\r\nnew cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"ast\",\"com.fulcrologic.fulcro.algorithms.tx-processing/ast\",1718830373),com.fulcrologic.guardrails.core._EQ__GT_,cljs.core.boolean_QMARK_], null);\r\n\r\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.every_ast_QMARK_(ast_node_or_tree,(function (p1__59436_SHARP_){\r\nreturn cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"call\",\"call\",-519999866),new cljs.core.Keyword(null,\"type\",\"type\",1174270348).cljs$core$IFn$_invoke$arity$1(p1__59436_SHARP_));\r\n}));\r\n});\r\n/**\r\n * Returns true if the given AST node or tree represents a mutation or sequence of mutations.\r\n */\r\ncom.fulcrologic.fulcro.algorithms.tx_processing.query_ast_QMARK_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$query_ast_QMARK_(ast_node_or_tree){\r\nnew cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"ast\",\"com.fulcrologic.fulcro.algorithms.tx-processing/ast\",1718830373),com.fulcrologic.guardrails.core._EQ__GT_,cljs.core.boolean_QMARK_], null);\r\n\r\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.every_ast_QMARK_(ast_node_or_tree,(function (p1__59439_SHARP_){\r\nreturn cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"call\",\"call\",-519999866),new cljs.core.Keyword(null,\"type\",\"type\",1174270348).cljs$core$IFn$_invoke$arity$1(p1__59439_SHARP_));\r\n}));\r\n});\r\n/**\r\n * Sort function on a send queue. Leaves any active nodes in front, and sorts the remainder of the queue so that writes\r\n *   appear before reads, without changing the relative order in blocks of reads/writes.\r\n */\r\ncom.fulcrologic.fulcro.algorithms.tx_processing.sort_queue_writes_before_reads = (function com$fulcrologic$fulcro$algorithms$tx_processing$sort_queue_writes_before_reads(send_queue){\r\nnew cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-queue\",-1602123421),com.fulcrologic.guardrails.core._EQ__GT_,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-queue\",-1602123421)], null);\r\n\r\nvar vec__59446 = cljs.core.split_with(new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"active?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/active?\",966679517),send_queue);\r\nvar active_queue = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__59446,(0),null);\r\nvar send_queue__$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__59446,(1),null);\r\nvar id_sequence = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2((function (n){\r\nreturn new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423).cljs$core$IFn$_invoke$arity$1(cljs.core.first(n));\r\n}),cljs.core.partition_by.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423),send_queue__$1));\r\nvar clusters = cljs.core.group_by(new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423),cljs.core.vec(send_queue__$1));\r\nvar map__59449 = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (result,id){\r\nvar vec__59452 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(clusters,id);\r\nvar seq__59453 = cljs.core.seq(vec__59452);\r\nvar first__59454 = cljs.core.first(seq__59453);\r\nvar seq__59453__$1 = cljs.core.next(seq__59453);\r\nvar map__59455 = first__59454;\r\nvar map__59455__$1 = cljs.core.__destructure_map(map__59455);\r\nvar n = map__59455__$1;\r\nvar ast = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__59455__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"ast\",\"com.fulcrologic.fulcro.algorithms.tx-processing/ast\",1718830373));\r\nvar _ = seq__59453__$1;\r\nvar cluster = vec__59452;\r\nif((ast == null)){\r\nreturn result;\r\n} else {\r\nif(cljs.core.truth_(com.fulcrologic.fulcro.algorithms.tx_processing.query_ast_QMARK_(ast))){\r\nreturn cljs.core.update.cljs$core$IFn$_invoke$arity$4(result,new cljs.core.Keyword(null,\"reads\",\"reads\",-1215067361),cljs.core.into,cluster);\r\n} else {\r\nif(cljs.core.truth_(com.fulcrologic.fulcro.algorithms.tx_processing.mutation_ast_QMARK_(ast))){\r\nreturn cljs.core.update.cljs$core$IFn$_invoke$arity$4(result,new cljs.core.Keyword(null,\"writes\",\"writes\",-102226269),cljs.core.into,cluster);\r\n} else {\r\nreturn result;\r\n\r\n}\r\n}\r\n}\r\n}),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"reads\",\"reads\",-1215067361),cljs.core.PersistentVector.EMPTY,new cljs.core.Keyword(null,\"writes\",\"writes\",-102226269),cljs.core.PersistentVector.EMPTY], null),id_sequence);\r\nvar map__59449__$1 = cljs.core.__destructure_map(map__59449);\r\nvar reads = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__59449__$1,new cljs.core.Keyword(null,\"reads\",\"reads\",-1215067361));\r\nvar writes = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__59449__$1,new cljs.core.Keyword(null,\"writes\",\"writes\",-102226269));\r\nvar send_queue__$2 = cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentVector.EMPTY,cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic(active_queue,writes,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([reads], 0)));\r\nreturn send_queue__$2;\r\n});\r\ncom.fulcrologic.fulcro.algorithms.tx_processing.top_keys = (function com$fulcrologic$fulcro$algorithms$tx_processing$top_keys(p__59463){\r\nvar map__59464 = p__59463;\r\nvar map__59464__$1 = cljs.core.__destructure_map(map__59464);\r\nvar ast = map__59464__$1;\r\nvar type = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__59464__$1,new cljs.core.Keyword(null,\"type\",\"type\",1174270348));\r\nvar key = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__59464__$1,new cljs.core.Keyword(null,\"key\",\"key\",-1516042587));\r\nvar children = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__59464__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\r\nnew cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"ast\",\"com.fulcrologic.fulcro.algorithms.tx-processing/ast\",1718830373),com.fulcrologic.guardrails.core._EQ__GT_,cljs.spec.alpha.every_impl.cljs$core$IFn$_invoke$arity$4(new cljs.core.Keyword(\"edn-query-language.ast\",\"key\",\"edn-query-language.ast/key\",973476796),new cljs.core.Keyword(\"edn-query-language.ast\",\"key\",\"edn-query-language.ast/key\",973476796),new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(\"cljs.spec.alpha\",\"kind-form\",\"cljs.spec.alpha/kind-form\",-1047104697),null,new cljs.core.Keyword(\"cljs.spec.alpha\",\"cpred\",\"cljs.spec.alpha/cpred\",-693471218),(function (G__59465){\r\nreturn cljs.core.coll_QMARK_(G__59465);\r\n}),new cljs.core.Keyword(\"cljs.spec.alpha\",\"conform-all\",\"cljs.spec.alpha/conform-all\",45201917),true,new cljs.core.Keyword(\"cljs.spec.alpha\",\"describe\",\"cljs.spec.alpha/describe\",1883026911),cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"coll-of\",\"cljs.spec.alpha/coll-of\",1019430407,null),new cljs.core.Keyword(\"edn-query-language.ast\",\"key\",\"edn-query-language.ast/key\",973476796))], null),null)], null);\r\n\r\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"root\",\"root\",-448657453),type)){\r\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$3(cljs.core.PersistentHashSet.EMPTY,cljs.core.map.cljs$core$IFn$_invoke$arity$1(new cljs.core.Keyword(null,\"key\",\"key\",-1516042587)),children);\r\n} else {\r\nreturn cljs.core.PersistentHashSet.createAsIfByAssoc([key]);\r\n}\r\n});\r\n/**\r\n * Takes a send queue and returns a map containing a new combined send node that can act as a single network request,\r\n *   along with the updated send queue.\r\n */\r\ncom.fulcrologic.fulcro.algorithms.tx_processing.combine_sends = (function com$fulcrologic$fulcro$algorithms$tx_processing$combine_sends(app__$1,remote_name,send_queue){\r\nnew cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"app\",\"com.fulcrologic.fulcro.application/app\",-1014694064),new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"remote-name\",\"com.fulcrologic.fulcro.application/remote-name\",-1179129128),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-queue\",-1602123421),com.fulcrologic.guardrails.core._EQ__GT_,cljs.spec.alpha.map_spec_impl(cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"req-un\",\"req-un\",1074571008),new cljs.core.Keyword(null,\"opt-un\",\"opt-un\",883442496),new cljs.core.Keyword(null,\"gfn\",\"gfn\",791517474),new cljs.core.Keyword(null,\"pred-exprs\",\"pred-exprs\",1792271395),new cljs.core.Keyword(null,\"keys-pred\",\"keys-pred\",858984739),new cljs.core.Keyword(null,\"opt-keys\",\"opt-keys\",1262688261),new cljs.core.Keyword(null,\"req-specs\",\"req-specs\",553962313),new cljs.core.Keyword(null,\"req\",\"req\",-326448303),new cljs.core.Keyword(null,\"req-keys\",\"req-keys\",514319221),new cljs.core.Keyword(null,\"opt-specs\",\"opt-specs\",-384905450),new cljs.core.Keyword(null,\"pred-forms\",\"pred-forms\",172611832),new cljs.core.Keyword(null,\"opt\",\"opt\",-794706369)],[null,null,null,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (G__59473){\r\nreturn cljs.core.map_QMARK_(G__59473);\r\n}),(function (G__59473){\r\nreturn cljs.core.contains_QMARK_(G__59473,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-queue\",-1602123421));\r\n})], null),(function (G__59473){\r\nreturn ((cljs.core.map_QMARK_(G__59473)) && (cljs.core.contains_QMARK_(G__59473,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-queue\",-1602123421))));\r\n}),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-node\",1624648157)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-queue\",-1602123421)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-queue\",-1602123421)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-queue\",-1602123421)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-node\",1624648157)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"fn\",\"cljs.core/fn\",-1065745098,null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"%\",\"%\",-950237169,null)], null),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"map?\",\"cljs.core/map?\",-1390345523,null),new cljs.core.Symbol(null,\"%\",\"%\",-950237169,null))),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"fn\",\"cljs.core/fn\",-1065745098,null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"%\",\"%\",-950237169,null)], null),cljs.core.list(new cljs.core.Symbol(\"cljs.core\",\"contains?\",\"cljs.core/contains?\",-976526835,null),new cljs.core.Symbol(null,\"%\",\"%\",-950237169,null),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-queue\",-1602123421)))], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-node\",1624648157)], null)]))], null);\r\n\r\nvar vec__59503 = cljs.core.split_with(new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"active?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/active?\",966679517),send_queue);\r\nvar active_nodes = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__59503,(0),null);\r\nvar send_queue__$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__59503,(1),null);\r\nvar send_queue__$2 = com.fulcrologic.fulcro.algorithms.tx_processing.sort_queue_writes_before_reads(cljs.core.vec(send_queue__$1));\r\nvar id_to_send = new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423).cljs$core$IFn$_invoke$arity$1(cljs.core.first(send_queue__$2));\r\nvar options = new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"options\",\"com.fulcrologic.fulcro.algorithms.tx-processing/options\",2016767420).cljs$core$IFn$_invoke$arity$1(cljs.core.first(send_queue__$2));\r\nvar vec__59506 = cljs.core.split_with((function (p1__59467_SHARP_){\r\nreturn cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(id_to_send,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423).cljs$core$IFn$_invoke$arity$1(p1__59467_SHARP_));\r\n}),send_queue__$2);\r\nvar to_send = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__59506,(0),null);\r\nvar to_defer = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__59506,(1),null);\r\nvar tx = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (acc,p__59512){\r\nvar map__59513 = p__59512;\r\nvar map__59513__$1 = cljs.core.__destructure_map(map__59513);\r\nvar ast = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__59513__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"ast\",\"com.fulcrologic.fulcro.algorithms.tx-processing/ast\",1718830373));\r\nvar tx = com.fulcrologic.fulcro.algorithms.do_not_use.ast__GT_query(ast);\r\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$2(acc,tx);\r\n}),cljs.core.PersistentVector.EMPTY,to_send);\r\nvar ast = edn_query_language.core.query__GT_ast(tx);\r\nvar combined_node_id = com.fulcrologic.fulcro.algorithms.tempid.uuid.cljs$core$IFn$_invoke$arity$0();\r\nvar combined_node_idx = (0);\r\nvar combined_node = new cljs.core.PersistentArrayMap(null, 7, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423),combined_node_id,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"idx\",\"com.fulcrologic.fulcro.algorithms.tx-processing/idx\",-1121773698),combined_node_idx,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"ast\",\"com.fulcrologic.fulcro.algorithms.tx-processing/ast\",1718830373),ast,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"options\",\"com.fulcrologic.fulcro.algorithms.tx-processing/options\",2016767420),options,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"update-handler\",\"com.fulcrologic.fulcro.algorithms.tx-processing/update-handler\",-1256285755),(function (p__59514){\r\nvar map__59515 = p__59514;\r\nvar map__59515__$1 = cljs.core.__destructure_map(map__59515);\r\nvar combined_result = map__59515__$1;\r\nvar body = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__59515__$1,new cljs.core.Keyword(null,\"body\",\"body\",-2049205669));\r\nvar seq__59521 = cljs.core.seq(to_send);\r\nvar chunk__59522 = null;\r\nvar count__59523 = (0);\r\nvar i__59524 = (0);\r\nwhile(true){\r\nif((i__59524 < count__59523)){\r\nvar map__59531 = chunk__59522.cljs$core$IIndexed$_nth$arity$2(null,i__59524);\r\nvar map__59531__$1 = cljs.core.__destructure_map(map__59531);\r\nvar update_handler = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__59531__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"update-handler\",\"com.fulcrologic.fulcro.algorithms.tx-processing/update-handler\",-1256285755));\r\nif(cljs.core.truth_(update_handler)){\r\n(update_handler.cljs$core$IFn$_invoke$arity$1 ? update_handler.cljs$core$IFn$_invoke$arity$1(combined_result) : update_handler.call(null,combined_result));\r\n} else {\r\n}\r\n\r\n\r\nvar G__60178 = seq__59521;\r\nvar G__60179 = chunk__59522;\r\nvar G__60180 = count__59523;\r\nvar G__60181 = (i__59524 + (1));\r\nseq__59521 = G__60178;\r\nchunk__59522 = G__60179;\r\ncount__59523 = G__60180;\r\ni__59524 = G__60181;\r\ncontinue;\r\n} else {\r\nvar temp__5753__auto__ = cljs.core.seq(seq__59521);\r\nif(temp__5753__auto__){\r\nvar seq__59521__$1 = temp__5753__auto__;\r\nif(cljs.core.chunked_seq_QMARK_(seq__59521__$1)){\r\nvar c__4679__auto__ = cljs.core.chunk_first(seq__59521__$1);\r\nvar G__60182 = cljs.core.chunk_rest(seq__59521__$1);\r\nvar G__60183 = c__4679__auto__;\r\nvar G__60184 = cljs.core.count(c__4679__auto__);\r\nvar G__60185 = (0);\r\nseq__59521 = G__60182;\r\nchunk__59522 = G__60183;\r\ncount__59523 = G__60184;\r\ni__59524 = G__60185;\r\ncontinue;\r\n} else {\r\nvar map__59534 = cljs.core.first(seq__59521__$1);\r\nvar map__59534__$1 = cljs.core.__destructure_map(map__59534);\r\nvar update_handler = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__59534__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"update-handler\",\"com.fulcrologic.fulcro.algorithms.tx-processing/update-handler\",-1256285755));\r\nif(cljs.core.truth_(update_handler)){\r\n(update_handler.cljs$core$IFn$_invoke$arity$1 ? update_handler.cljs$core$IFn$_invoke$arity$1(combined_result) : update_handler.call(null,combined_result));\r\n} else {\r\n}\r\n\r\n\r\nvar G__60186 = cljs.core.next(seq__59521__$1);\r\nvar G__60187 = null;\r\nvar G__60188 = (0);\r\nvar G__60189 = (0);\r\nseq__59521 = G__60186;\r\nchunk__59522 = G__60187;\r\ncount__59523 = G__60188;\r\ni__59524 = G__60189;\r\ncontinue;\r\n}\r\n} else {\r\nreturn null;\r\n}\r\n}\r\nbreak;\r\n}\r\n}),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"result-handler\",\"com.fulcrologic.fulcro.algorithms.tx-processing/result-handler\",-114902209),(function (p__59535){\r\nvar map__59536 = p__59535;\r\nvar map__59536__$1 = cljs.core.__destructure_map(map__59536);\r\nvar combined_result = map__59536__$1;\r\nvar body = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__59536__$1,new cljs.core.Keyword(null,\"body\",\"body\",-2049205669));\r\nvar seq__59538_60190 = cljs.core.seq(to_send);\r\nvar chunk__59539_60191 = null;\r\nvar count__59540_60192 = (0);\r\nvar i__59541_60193 = (0);\r\nwhile(true){\r\nif((i__59541_60193 < count__59540_60192)){\r\nvar map__59563_60195 = chunk__59539_60191.cljs$core$IIndexed$_nth$arity$2(null,i__59541_60193);\r\nvar map__59563_60196__$1 = cljs.core.__destructure_map(map__59563_60195);\r\nvar ast_60197__$1 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__59563_60196__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"ast\",\"com.fulcrologic.fulcro.algorithms.tx-processing/ast\",1718830373));\r\nvar result_handler_60198 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__59563_60196__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"result-handler\",\"com.fulcrologic.fulcro.algorithms.tx-processing/result-handler\",-114902209));\r\nvar new_body_60199 = ((cljs.core.map_QMARK_(body))?cljs.core.select_keys(body,com.fulcrologic.fulcro.algorithms.tx_processing.top_keys(ast_60197__$1)):body);\r\nvar result_60200 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(combined_result,new cljs.core.Keyword(null,\"body\",\"body\",-2049205669),new_body_60199);\r\nif(cljs.core.truth_((function (){var and__4251__auto__ = (function (){var or__4253__auto__ = goog.DEBUG;\r\nif(cljs.core.truth_(or__4253__auto__)){\r\nreturn or__4253__auto__;\r\n} else {\r\nreturn com.fulcrologic.fulcro.inspect.inspect_client.INSPECT;\r\n}\r\n})();\r\nif(cljs.core.truth_(and__4251__auto__)){\r\nreturn cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(\"disabled\",com.fulcrologic.fulcro.inspect.inspect_client.INSPECT);\r\n} else {\r\nreturn and__4251__auto__;\r\n}\r\n})())){\r\ntry{var map__59565_60203 = result_60200;\r\nvar map__59565_60204__$1 = cljs.core.__destructure_map(map__59565_60203);\r\nvar status_code_60205 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__59565_60204__$1,new cljs.core.Keyword(null,\"status-code\",\"status-code\",-1060410130));\r\nvar body_60206__$1 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__59565_60204__$1,new cljs.core.Keyword(null,\"body\",\"body\",-2049205669));\r\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2((200),status_code_60205)){\r\ncom.fulcrologic.fulcro.inspect.inspect_client.send_finished_BANG_(app__$1,remote_name,combined_node_id,body_60206__$1);\r\n} else {\r\ncom.fulcrologic.fulcro.inspect.inspect_client.send_failed_BANG_(app__$1,combined_node_id,cljs.core.str.cljs$core$IFn$_invoke$arity$1(status_code_60205));\r\n}\r\n}catch (e59564){var e_60207 = e59564;\r\n}} else {\r\n}\r\n\r\n(result_handler_60198.cljs$core$IFn$_invoke$arity$1 ? result_handler_60198.cljs$core$IFn$_invoke$arity$1(result_60200) : result_handler_60198.call(null,result_60200));\r\n\r\n\r\nvar G__60208 = seq__59538_60190;\r\nvar G__60209 = chunk__59539_60191;\r\nvar G__60210 = count__59540_60192;\r\nvar G__60211 = (i__59541_60193 + (1));\r\nseq__59538_60190 = G__60208;\r\nchunk__59539_60191 = G__60209;\r\ncount__59540_60192 = G__60210;\r\ni__59541_60193 = G__60211;\r\ncontinue;\r\n} else {\r\nvar temp__5753__auto___60212 = cljs.core.seq(seq__59538_60190);\r\nif(temp__5753__auto___60212){\r\nvar seq__59538_60213__$1 = temp__5753__auto___60212;\r\nif(cljs.core.chunked_seq_QMARK_(seq__59538_60213__$1)){\r\nvar c__4679__auto___60214 = cljs.core.chunk_first(seq__59538_60213__$1);\r\nvar G__60215 = cljs.core.chunk_rest(seq__59538_60213__$1);\r\nvar G__60216 = c__4679__auto___60214;\r\nvar G__60217 = cljs.core.count(c__4679__auto___60214);\r\nvar G__60218 = (0);\r\nseq__59538_60190 = G__60215;\r\nchunk__59539_60191 = G__60216;\r\ncount__59540_60192 = G__60217;\r\ni__59541_60193 = G__60218;\r\ncontinue;\r\n} else {\r\nvar map__59569_60219 = cljs.core.first(seq__59538_60213__$1);\r\nvar map__59569_60220__$1 = cljs.core.__destructure_map(map__59569_60219);\r\nvar ast_60221__$1 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__59569_60220__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"ast\",\"com.fulcrologic.fulcro.algorithms.tx-processing/ast\",1718830373));\r\nvar result_handler_60222 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__59569_60220__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"result-handler\",\"com.fulcrologic.fulcro.algorithms.tx-processing/result-handler\",-114902209));\r\nvar new_body_60223 = ((cljs.core.map_QMARK_(body))?cljs.core.select_keys(body,com.fulcrologic.fulcro.algorithms.tx_processing.top_keys(ast_60221__$1)):body);\r\nvar result_60224 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(combined_result,new cljs.core.Keyword(null,\"body\",\"body\",-2049205669),new_body_60223);\r\nif(cljs.core.truth_((function (){var and__4251__auto__ = (function (){var or__4253__auto__ = goog.DEBUG;\r\nif(cljs.core.truth_(or__4253__auto__)){\r\nreturn or__4253__auto__;\r\n} else {\r\nreturn com.fulcrologic.fulcro.inspect.inspect_client.INSPECT;\r\n}\r\n})();\r\nif(cljs.core.truth_(and__4251__auto__)){\r\nreturn cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(\"disabled\",com.fulcrologic.fulcro.inspect.inspect_client.INSPECT);\r\n} else {\r\nreturn and__4251__auto__;\r\n}\r\n})())){\r\ntry{var map__59575_60225 = result_60224;\r\nvar map__59575_60226__$1 = cljs.core.__destructure_map(map__59575_60225);\r\nvar status_code_60227 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__59575_60226__$1,new cljs.core.Keyword(null,\"status-code\",\"status-code\",-1060410130));\r\nvar body_60228__$1 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__59575_60226__$1,new cljs.core.Keyword(null,\"body\",\"body\",-2049205669));\r\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2((200),status_code_60227)){\r\ncom.fulcrologic.fulcro.inspect.inspect_client.send_finished_BANG_(app__$1,remote_name,combined_node_id,body_60228__$1);\r\n} else {\r\ncom.fulcrologic.fulcro.inspect.inspect_client.send_failed_BANG_(app__$1,combined_node_id,cljs.core.str.cljs$core$IFn$_invoke$arity$1(status_code_60227));\r\n}\r\n}catch (e59574){var e_60231 = e59574;\r\n}} else {\r\n}\r\n\r\n(result_handler_60222.cljs$core$IFn$_invoke$arity$1 ? result_handler_60222.cljs$core$IFn$_invoke$arity$1(result_60224) : result_handler_60222.call(null,result_60224));\r\n\r\n\r\nvar G__60232 = cljs.core.next(seq__59538_60213__$1);\r\nvar G__60233 = null;\r\nvar G__60234 = (0);\r\nvar G__60235 = (0);\r\nseq__59538_60190 = G__60232;\r\nchunk__59539_60191 = G__60233;\r\ncount__59540_60192 = G__60234;\r\ni__59541_60193 = G__60235;\r\ncontinue;\r\n}\r\n} else {\r\n}\r\n}\r\nbreak;\r\n}\r\n\r\nreturn (com.fulcrologic.fulcro.algorithms.tx_processing.remove_send_BANG_.cljs$core$IFn$_invoke$arity$4 ? com.fulcrologic.fulcro.algorithms.tx_processing.remove_send_BANG_.cljs$core$IFn$_invoke$arity$4(app__$1,remote_name,combined_node_id,combined_node_idx) : com.fulcrologic.fulcro.algorithms.tx_processing.remove_send_BANG_.call(null,app__$1,remote_name,combined_node_id,combined_node_idx));\r\n}),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"active?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/active?\",966679517),true], null);\r\nif(cljs.core.seq(to_send)){\r\nreturn new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-node\",1624648157),combined_node,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-queue\",-1602123421),cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentVector.EMPTY,cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic(active_nodes,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [combined_node], null),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([to_defer], 0)))], null);\r\n} else {\r\nreturn new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-queue\",-1602123421),send_queue__$2], null);\r\n}\r\n});\r\n/**\r\n * Process the send against the user-defined remote. Catches exceptions and calls error handler with status code 500\r\n *   if the remote itself throws exceptions.\r\n */\r\ncom.fulcrologic.fulcro.algorithms.tx_processing.net_send_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$net_send_BANG_(app__$1,send_node,remote_name){\r\nnew cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"app\",\"com.fulcrologic.fulcro.application/app\",-1014694064),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-node\",1624648157),new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"remote-name\",\"com.fulcrologic.fulcro.application/remote-name\",-1179129128),com.fulcrologic.guardrails.core._EQ__GT_,cljs.core.any_QMARK_], null);\r\n\r\nvar b2__40629__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(com.fulcrologic.fulcro.algorithms.tx_processing.app__GT_remotes(app__$1),remote_name);\r\nif(cljs.core.truth_(b2__40629__auto__)){\r\nvar remote = b2__40629__auto__;\r\nvar b2__40629__auto____$1 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(remote,new cljs.core.Keyword(null,\"transmit!\",\"transmit!\",-107149039));\r\nif(cljs.core.truth_(b2__40629__auto____$1)){\r\nvar transmit_BANG_ = b2__40629__auto____$1;\r\ntry{if(cljs.core.truth_((function (){var and__4251__auto__ = (function (){var or__4253__auto__ = goog.DEBUG;\r\nif(cljs.core.truth_(or__4253__auto__)){\r\nreturn or__4253__auto__;\r\n} else {\r\nreturn com.fulcrologic.fulcro.inspect.inspect_client.INSPECT;\r\n}\r\n})();\r\nif(cljs.core.truth_(and__4251__auto__)){\r\nreturn cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(\"disabled\",com.fulcrologic.fulcro.inspect.inspect_client.INSPECT);\r\n} else {\r\nreturn and__4251__auto__;\r\n}\r\n})())){\r\ntry{var tx_60238 = com.fulcrologic.fulcro.algorithms.do_not_use.ast__GT_query(new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"ast\",\"com.fulcrologic.fulcro.algorithms.tx-processing/ast\",1718830373).cljs$core$IFn$_invoke$arity$1(send_node));\r\ncom.fulcrologic.fulcro.inspect.inspect_client.send_started_BANG_(app__$1,remote_name,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423).cljs$core$IFn$_invoke$arity$1(send_node),tx_60238);\r\n}catch (e59594){var e_60240 = e59594;\r\n}} else {\r\n}\r\n\r\nreturn (transmit_BANG_.cljs$core$IFn$_invoke$arity$2 ? transmit_BANG_.cljs$core$IFn$_invoke$arity$2(remote,send_node) : transmit_BANG_.call(null,remote,send_node));\r\n}catch (e59577){var e = e59577;\r\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$11(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.algorithms.tx-processing\",null,154,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay((function (){\r\nreturn new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [e,\"Send threw an exception for tx:\",com.fulcrologic.fulcro.algorithms.do_not_use.ast__GT_query(new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"ast\",\"com.fulcrologic.fulcro.algorithms.tx-processing/ast\",1718830373).cljs$core$IFn$_invoke$arity$1(send_node)),\"See https://book.fulcrologic.com/#err-txp-send-exc\"], null);\r\n}),null)),null,-509281813,null);\r\n\r\ntry{if(cljs.core.truth_((function (){var and__4251__auto__ = (function (){var or__4253__auto__ = goog.DEBUG;\r\nif(cljs.core.truth_(or__4253__auto__)){\r\nreturn or__4253__auto__;\r\n} else {\r\nreturn com.fulcrologic.fulcro.inspect.inspect_client.INSPECT;\r\n}\r\n})();\r\nif(cljs.core.truth_(and__4251__auto__)){\r\nreturn cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(\"disabled\",com.fulcrologic.fulcro.inspect.inspect_client.INSPECT);\r\n} else {\r\nreturn and__4251__auto__;\r\n}\r\n})())){\r\ntry{com.fulcrologic.fulcro.inspect.inspect_client.send_failed_BANG_(app__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423).cljs$core$IFn$_invoke$arity$1(send_node),\"Transmit Exception\");\r\n}catch (e59579){var e_60244__$1 = e59579;\r\n}} else {\r\n}\r\n\r\nvar G__59585 = new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"status-code\",\"status-code\",-1060410130),(500),new cljs.core.Keyword(null,\"client-exception\",\"client-exception\",-1357213384),e], null);\r\nvar fexpr__59584 = new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"result-handler\",\"com.fulcrologic.fulcro.algorithms.tx-processing/result-handler\",-114902209).cljs$core$IFn$_invoke$arity$1(send_node);\r\nreturn (fexpr__59584.cljs$core$IFn$_invoke$arity$1 ? fexpr__59584.cljs$core$IFn$_invoke$arity$1(G__59585) : fexpr__59584.call(null,G__59585));\r\n}catch (e59578){var e__$1 = e59578;\r\nreturn taoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$11(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"fatal\",\"fatal\",1874419888),\"com.fulcrologic.fulcro.algorithms.tx-processing\",null,161,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay((function (){\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [e__$1,\"Error handler failed to handle exception!\"], null);\r\n}),null)),null,426264314,null);\r\n}}} else {\r\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$11(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.algorithms.tx-processing\",null,163,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay((function (){\r\nreturn new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"Transmit was not defined on remote\",remote_name,\"See https://book.fulcrologic.com/#err-txp-remote-lacks-transmit\"], null);\r\n}),null)),null,-489714662,null);\r\n\r\nvar G__59608 = new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"status-code\",\"status-code\",-1060410130),(500),new cljs.core.Keyword(null,\"message\",\"message\",-406056002),\"Transmit missing on remote.\"], null);\r\nvar fexpr__59607 = new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"result-handler\",\"com.fulcrologic.fulcro.algorithms.tx-processing/result-handler\",-114902209).cljs$core$IFn$_invoke$arity$1(send_node);\r\nreturn (fexpr__59607.cljs$core$IFn$_invoke$arity$1 ? fexpr__59607.cljs$core$IFn$_invoke$arity$1(G__59608) : fexpr__59607.call(null,G__59608));\r\n}\r\n} else {\r\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$11(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.algorithms.tx-processing\",null,163,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay((function (){\r\nreturn new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"Transmit was not defined on remote\",remote_name,\"See https://book.fulcrologic.com/#err-txp-remote-lacks-transmit\"], null);\r\n}),null)),null,2082504314,null);\r\n\r\nvar G__59661 = new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"status-code\",\"status-code\",-1060410130),(500),new cljs.core.Keyword(null,\"message\",\"message\",-406056002),\"Transmit missing on remote.\"], null);\r\nvar fexpr__59660 = new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"result-handler\",\"com.fulcrologic.fulcro.algorithms.tx-processing/result-handler\",-114902209).cljs$core$IFn$_invoke$arity$1(send_node);\r\nreturn (fexpr__59660.cljs$core$IFn$_invoke$arity$1 ? fexpr__59660.cljs$core$IFn$_invoke$arity$1(G__59661) : fexpr__59660.call(null,G__59661));\r\n}\r\n});\r\n/**\r\n * Process the send queues against the remotes. Updates the send queues on the app and returns the updated send queues.\r\n */\r\ncom.fulcrologic.fulcro.algorithms.tx_processing.process_send_queues_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$process_send_queues_BANG_(p__59695){\r\nvar map__59700 = p__59695;\r\nvar map__59700__$1 = cljs.core.__destructure_map(map__59700);\r\nvar app__$1 = map__59700__$1;\r\nvar runtime_atom = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__59700__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"runtime-atom\",\"com.fulcrologic.fulcro.application/runtime-atom\",-1167397772));\r\nnew cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"app\",\"com.fulcrologic.fulcro.application/app\",-1014694064),com.fulcrologic.guardrails.core._EQ__GT_,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-queues\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-queues\",-1776480807)], null);\r\n\r\nvar send_queues = new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-queues\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-queues\",-1776480807).cljs$core$IFn$_invoke$arity$1(cljs.core.deref(runtime_atom));\r\nvar remote_names = com.fulcrologic.fulcro.algorithms.tx_processing.app__GT_remote_names(app__$1);\r\nvar operations = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentVector.EMPTY);\r\nvar new_send_queues = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (new_send_queues,remote){\r\nvar send_queue = cljs.core.get.cljs$core$IFn$_invoke$arity$3(send_queues,remote,cljs.core.PersistentVector.EMPTY);\r\nvar vec__59703 = com.fulcrologic.fulcro.algorithms.tx_processing.extract_parallel(send_queue);\r\nvar p = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__59703,(0),null);\r\nvar serial = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__59703,(1),null);\r\nvar front = cljs.core.first(serial);\r\nvar seq__59715_60245 = cljs.core.seq(p);\r\nvar chunk__59716_60246 = null;\r\nvar count__59717_60247 = (0);\r\nvar i__59718_60248 = (0);\r\nwhile(true){\r\nif((i__59718_60248 < count__59717_60247)){\r\nvar item_60249 = chunk__59716_60246.cljs$core$IIndexed$_nth$arity$2(null,i__59718_60248);\r\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(operations,cljs.core.conj,((function (seq__59715_60245,chunk__59716_60246,count__59717_60247,i__59718_60248,item_60249,send_queue,vec__59703,p,serial,front,send_queues,remote_names,operations,map__59700,map__59700__$1,app__$1,runtime_atom){\r\nreturn (function (){\r\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.net_send_BANG_(app__$1,item_60249,remote);\r\n});})(seq__59715_60245,chunk__59716_60246,count__59717_60247,i__59718_60248,item_60249,send_queue,vec__59703,p,serial,front,send_queues,remote_names,operations,map__59700,map__59700__$1,app__$1,runtime_atom))\r\n);\r\n\r\n\r\nvar G__60250 = seq__59715_60245;\r\nvar G__60251 = chunk__59716_60246;\r\nvar G__60252 = count__59717_60247;\r\nvar G__60253 = (i__59718_60248 + (1));\r\nseq__59715_60245 = G__60250;\r\nchunk__59716_60246 = G__60251;\r\ncount__59717_60247 = G__60252;\r\ni__59718_60248 = G__60253;\r\ncontinue;\r\n} else {\r\nvar temp__5753__auto___60254 = cljs.core.seq(seq__59715_60245);\r\nif(temp__5753__auto___60254){\r\nvar seq__59715_60255__$1 = temp__5753__auto___60254;\r\nif(cljs.core.chunked_seq_QMARK_(seq__59715_60255__$1)){\r\nvar c__4679__auto___60256 = cljs.core.chunk_first(seq__59715_60255__$1);\r\nvar G__60257 = cljs.core.chunk_rest(seq__59715_60255__$1);\r\nvar G__60258 = c__4679__auto___60256;\r\nvar G__60259 = cljs.core.count(c__4679__auto___60256);\r\nvar G__60260 = (0);\r\nseq__59715_60245 = G__60257;\r\nchunk__59716_60246 = G__60258;\r\ncount__59717_60247 = G__60259;\r\ni__59718_60248 = G__60260;\r\ncontinue;\r\n} else {\r\nvar item_60261 = cljs.core.first(seq__59715_60255__$1);\r\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(operations,cljs.core.conj,((function (seq__59715_60245,chunk__59716_60246,count__59717_60247,i__59718_60248,item_60261,seq__59715_60255__$1,temp__5753__auto___60254,send_queue,vec__59703,p,serial,front,send_queues,remote_names,operations,map__59700,map__59700__$1,app__$1,runtime_atom){\r\nreturn (function (){\r\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.net_send_BANG_(app__$1,item_60261,remote);\r\n});})(seq__59715_60245,chunk__59716_60246,count__59717_60247,i__59718_60248,item_60261,seq__59715_60255__$1,temp__5753__auto___60254,send_queue,vec__59703,p,serial,front,send_queues,remote_names,operations,map__59700,map__59700__$1,app__$1,runtime_atom))\r\n);\r\n\r\n\r\nvar G__60262 = cljs.core.next(seq__59715_60255__$1);\r\nvar G__60263 = null;\r\nvar G__60264 = (0);\r\nvar G__60265 = (0);\r\nseq__59715_60245 = G__60262;\r\nchunk__59716_60246 = G__60263;\r\ncount__59717_60247 = G__60264;\r\ni__59718_60248 = G__60265;\r\ncontinue;\r\n}\r\n} else {\r\n}\r\n}\r\nbreak;\r\n}\r\n\r\nif(cljs.core.truth_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"active?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/active?\",966679517).cljs$core$IFn$_invoke$arity$1(front))){\r\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(new_send_queues,remote,serial);\r\n} else {\r\nvar map__59747 = com.fulcrologic.fulcro.algorithms.tx_processing.combine_sends(app__$1,remote,serial);\r\nvar map__59747__$1 = cljs.core.__destructure_map(map__59747);\r\nvar send_queue__$1 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__59747__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-queue\",-1602123421));\r\nvar send_node = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__59747__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-node\",1624648157));\r\nif(cljs.core.truth_(send_node)){\r\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(operations,cljs.core.conj,(function (){\r\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.net_send_BANG_(app__$1,send_node,remote);\r\n}));\r\n} else {\r\n}\r\n\r\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(new_send_queues,remote,send_queue__$1);\r\n}\r\n}),cljs.core.PersistentArrayMap.EMPTY,remote_names);\r\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(runtime_atom,cljs.core.assoc,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-queues\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-queues\",-1776480807),new_send_queues);\r\n\r\nvar seq__59749_60268 = cljs.core.seq(cljs.core.deref(operations));\r\nvar chunk__59750_60269 = null;\r\nvar count__59751_60270 = (0);\r\nvar i__59752_60271 = (0);\r\nwhile(true){\r\nif((i__59752_60271 < count__59751_60270)){\r\nvar op_60272 = chunk__59750_60269.cljs$core$IIndexed$_nth$arity$2(null,i__59752_60271);\r\n(op_60272.cljs$core$IFn$_invoke$arity$0 ? op_60272.cljs$core$IFn$_invoke$arity$0() : op_60272.call(null));\r\n\r\n\r\nvar G__60273 = seq__59749_60268;\r\nvar G__60274 = chunk__59750_60269;\r\nvar G__60275 = count__59751_60270;\r\nvar G__60276 = (i__59752_60271 + (1));\r\nseq__59749_60268 = G__60273;\r\nchunk__59750_60269 = G__60274;\r\ncount__59751_60270 = G__60275;\r\ni__59752_60271 = G__60276;\r\ncontinue;\r\n} else {\r\nvar temp__5753__auto___60277 = cljs.core.seq(seq__59749_60268);\r\nif(temp__5753__auto___60277){\r\nvar seq__59749_60280__$1 = temp__5753__auto___60277;\r\nif(cljs.core.chunked_seq_QMARK_(seq__59749_60280__$1)){\r\nvar c__4679__auto___60281 = cljs.core.chunk_first(seq__59749_60280__$1);\r\nvar G__60282 = cljs.core.chunk_rest(seq__59749_60280__$1);\r\nvar G__60283 = c__4679__auto___60281;\r\nvar G__60284 = cljs.core.count(c__4679__auto___60281);\r\nvar G__60285 = (0);\r\nseq__59749_60268 = G__60282;\r\nchunk__59750_60269 = G__60283;\r\ncount__59751_60270 = G__60284;\r\ni__59752_60271 = G__60285;\r\ncontinue;\r\n} else {\r\nvar op_60286 = cljs.core.first(seq__59749_60280__$1);\r\n(op_60286.cljs$core$IFn$_invoke$arity$0 ? op_60286.cljs$core$IFn$_invoke$arity$0() : op_60286.call(null));\r\n\r\n\r\nvar G__60287 = cljs.core.next(seq__59749_60280__$1);\r\nvar G__60288 = null;\r\nvar G__60289 = (0);\r\nvar G__60290 = (0);\r\nseq__59749_60268 = G__60287;\r\nchunk__59750_60269 = G__60288;\r\ncount__59751_60270 = G__60289;\r\ni__59752_60271 = G__60290;\r\ncontinue;\r\n}\r\n} else {\r\n}\r\n}\r\nbreak;\r\n}\r\n\r\nreturn new_send_queues;\r\n});\r\ncom.fulcrologic.fulcro.algorithms.tx_processing.tx_node = (function com$fulcrologic$fulcro$algorithms$tx_processing$tx_node(var_args){\r\nvar G__59764 = arguments.length;\r\nswitch (G__59764) {\r\ncase 1:\r\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.tx_node.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\r\n\r\nbreak;\r\ncase 2:\r\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.tx_node.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\r\n\r\nbreak;\r\ndefault:\r\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\r\n\r\n}\r\n});\r\n\r\n(com.fulcrologic.fulcro.algorithms.tx_processing.tx_node.cljs$core$IFn$_invoke$arity$1 = (function (tx){\r\nnew cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx\",-1165026763),com.fulcrologic.guardrails.core._EQ__GT_,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-node\",67879378)], null);\r\n\r\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.tx_node.cljs$core$IFn$_invoke$arity$2(tx,cljs.core.PersistentArrayMap.EMPTY);\r\n}));\r\n\r\n(com.fulcrologic.fulcro.algorithms.tx_processing.tx_node.cljs$core$IFn$_invoke$arity$2 = (function (tx,options){\r\nnew cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx\",-1165026763),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"options\",\"com.fulcrologic.fulcro.algorithms.tx-processing/options\",2016767420),com.fulcrologic.guardrails.core._EQ__GT_,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-node\",67879378)], null);\r\n\r\nvar ast = edn_query_language.core.query__GT_ast(tx);\r\nvar ast_nodes = new cljs.core.Keyword(null,\"children\",\"children\",-940561982).cljs$core$IFn$_invoke$arity$1(ast);\r\nvar elements = cljs.core.into.cljs$core$IFn$_invoke$arity$3(cljs.core.PersistentVector.EMPTY,cljs.core.comp.cljs$core$IFn$_invoke$arity$2(cljs.core.filter.cljs$core$IFn$_invoke$arity$1((function com$fulcrologic$fulcro$algorithms$tx_processing$txfilt_STAR_(n){\r\nreturn cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"call\",\"call\",-519999866),new cljs.core.Keyword(null,\"type\",\"type\",1174270348).cljs$core$IFn$_invoke$arity$1(n));\r\n})),cljs.core.map_indexed.cljs$core$IFn$_invoke$arity$1((function com$fulcrologic$fulcro$algorithms$tx_processing$__GT_txnode_STAR_(idx,ast_node){\r\nreturn new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"idx\",\"com.fulcrologic.fulcro.algorithms.tx-processing/idx\",-1121773698),idx,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"original-ast-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/original-ast-node\",2080944477),ast_node,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"started?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/started?\",1421241366),cljs.core.PersistentHashSet.EMPTY,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"complete?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/complete?\",-311612706),cljs.core.PersistentHashSet.EMPTY,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"results\",\"com.fulcrologic.fulcro.algorithms.tx-processing/results\",-1876101852),cljs.core.PersistentArrayMap.EMPTY,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"dispatch\",\"com.fulcrologic.fulcro.algorithms.tx-processing/dispatch\",-262239660),cljs.core.PersistentArrayMap.EMPTY], null);\r\n}))),ast_nodes);\r\nreturn new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423),com.fulcrologic.fulcro.algorithms.tempid.uuid.cljs$core$IFn$_invoke$arity$0(),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"created\",\"com.fulcrologic.fulcro.algorithms.tx-processing/created\",859806789),com.fulcrologic.fulcro.algorithms.do_not_use.now(),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"options\",\"com.fulcrologic.fulcro.algorithms.tx-processing/options\",2016767420),options,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx\",-1165026763),tx,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330),elements], null);\r\n}));\r\n\r\n(com.fulcrologic.fulcro.algorithms.tx_processing.tx_node.cljs$lang$maxFixedArity = 2);\r\n\r\ncom.fulcrologic.fulcro.algorithms.tx_processing.build_env = (function com$fulcrologic$fulcro$algorithms$tx_processing$build_env(var_args){\r\nvar G__59770 = arguments.length;\r\nswitch (G__59770) {\r\ncase 3:\r\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.build_env.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\r\n\r\nbreak;\r\ncase 2:\r\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.build_env.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\r\n\r\nbreak;\r\ndefault:\r\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\r\n\r\n}\r\n});\r\n\r\n(com.fulcrologic.fulcro.algorithms.tx_processing.build_env.cljs$core$IFn$_invoke$arity$3 = (function (app__$1,p__59771,addl){\r\nvar map__59772 = p__59771;\r\nvar map__59772__$1 = cljs.core.__destructure_map(map__59772);\r\nvar tx_node = map__59772__$1;\r\nvar options = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__59772__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"options\",\"com.fulcrologic.fulcro.algorithms.tx-processing/options\",2016767420));\r\nnew cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"app\",\"com.fulcrologic.fulcro.application/app\",-1014694064),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-node\",67879378),cljs.core.map_QMARK_,com.fulcrologic.guardrails.core._EQ__GT_,cljs.core.map_QMARK_], null);\r\n\r\nvar map__59773 = options;\r\nvar map__59773__$1 = cljs.core.__destructure_map(map__59773);\r\nvar ref = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__59773__$1,new cljs.core.Keyword(null,\"ref\",\"ref\",1289896967));\r\nvar component = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__59773__$1,new cljs.core.Keyword(null,\"component\",\"component\",1555936782));\r\nvar G__59774 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([addl,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"state\",\"state\",-1988618099),new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"state-atom\",\"com.fulcrologic.fulcro.application/state-atom\",648128366).cljs$core$IFn$_invoke$arity$1(app__$1),new cljs.core.Keyword(null,\"app\",\"app\",-560961707),app__$1], null)], 0));\r\nvar G__59774__$1 = (cljs.core.truth_(options)?cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__59774,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"options\",\"com.fulcrologic.fulcro.algorithms.tx-processing/options\",2016767420),options):G__59774);\r\nvar G__59774__$2 = (cljs.core.truth_(ref)?cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__59774__$1,new cljs.core.Keyword(null,\"ref\",\"ref\",1289896967),ref):G__59774__$1);\r\nif(cljs.core.truth_(component)){\r\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__59774__$2,new cljs.core.Keyword(null,\"component\",\"component\",1555936782),component);\r\n} else {\r\nreturn G__59774__$2;\r\n}\r\n}));\r\n\r\n(com.fulcrologic.fulcro.algorithms.tx_processing.build_env.cljs$core$IFn$_invoke$arity$2 = (function (app__$1,p__59775){\r\nvar map__59780 = p__59775;\r\nvar map__59780__$1 = cljs.core.__destructure_map(map__59780);\r\nvar tx_node = map__59780__$1;\r\nvar options = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__59780__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"options\",\"com.fulcrologic.fulcro.algorithms.tx-processing/options\",2016767420));\r\nnew cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"app\",\"com.fulcrologic.fulcro.application/app\",-1014694064),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-node\",67879378),com.fulcrologic.guardrails.core._EQ__GT_,cljs.core.map_QMARK_], null);\r\n\r\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.build_env.cljs$core$IFn$_invoke$arity$3(app__$1,tx_node,cljs.core.PersistentArrayMap.EMPTY);\r\n}));\r\n\r\n(com.fulcrologic.fulcro.algorithms.tx_processing.build_env.cljs$lang$maxFixedArity = 3);\r\n\r\n/**\r\n * Run through the elements on the given tx-node and do the side-effect-free dispatch. This generates the dispatch map\r\n *   of things to do on that node.\r\n */\r\ncom.fulcrologic.fulcro.algorithms.tx_processing.dispatch_elements = (function com$fulcrologic$fulcro$algorithms$tx_processing$dispatch_elements(tx_node,env,dispatch_fn){\r\nnew cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-node\",67879378),cljs.core.map_QMARK_,cljs.core.any_QMARK_,com.fulcrologic.guardrails.core._EQ__GT_,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-node\",67879378)], null);\r\n\r\nvar do_dispatch = (function com$fulcrologic$fulcro$algorithms$tx_processing$dispatch_elements_$_run_STAR_(env__$1){\r\ntry{return (dispatch_fn.cljs$core$IFn$_invoke$arity$1 ? dispatch_fn.cljs$core$IFn$_invoke$arity$1(env__$1) : dispatch_fn.call(null,env__$1));\r\n}catch (e59781){var e = e59781;\r\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$11(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.algorithms.tx-processing\",null,247,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay((function (){\r\nreturn new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [e,\"Dispatch for mutation\",(function (){var G__59782 = env__$1;\r\nvar G__59782__$1 = (((G__59782 == null))?null:new cljs.core.Keyword(null,\"ast\",\"ast\",-860334068).cljs$core$IFn$_invoke$arity$1(G__59782));\r\nif((G__59782__$1 == null)){\r\nreturn null;\r\n} else {\r\nreturn com.fulcrologic.fulcro.algorithms.do_not_use.ast__GT_query(G__59782__$1);\r\n}\r\n})(),\"failed with an exception. No dispatch generated. See https://book.fulcrologic.com/#err-txp-mut-dispatch-exc\"], null);\r\n}),null)),null,-1687124253,null);\r\n\r\nreturn cljs.core.PersistentArrayMap.EMPTY;\r\n}});\r\nvar dispatch = (function com$fulcrologic$fulcro$algorithms$tx_processing$dispatch_elements_$_dispatch_STAR_(p__59783){\r\nvar map__59788 = p__59783;\r\nvar map__59788__$1 = cljs.core.__destructure_map(map__59788);\r\nvar ele = map__59788__$1;\r\nvar original_ast_node = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__59788__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"original-ast-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/original-ast-node\",2080944477));\r\nvar map__59789 = original_ast_node;\r\nvar map__59789__$1 = cljs.core.__destructure_map(map__59789);\r\nvar type = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__59789__$1,new cljs.core.Keyword(null,\"type\",\"type\",1174270348));\r\nvar env__$1 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(env,new cljs.core.Keyword(null,\"ast\",\"ast\",-860334068),original_ast_node);\r\nvar G__59790 = ele;\r\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"call\",\"call\",-519999866),type)){\r\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__59790,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"dispatch\",\"com.fulcrologic.fulcro.algorithms.tx-processing/dispatch\",-262239660),do_dispatch(env__$1));\r\n} else {\r\nreturn G__59790;\r\n}\r\n});\r\nvar dispatch_all = (function (eles){\r\nreturn cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(dispatch,eles);\r\n});\r\nreturn cljs.core.update.cljs$core$IFn$_invoke$arity$3(tx_node,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330),dispatch_all);\r\n});\r\n/**\r\n * Should be called after the application renders to ensure that transactions blocked until the next render become\r\n * unblocked. Schedules an activation.\r\n */\r\ncom.fulcrologic.fulcro.algorithms.tx_processing.application_rendered_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$application_rendered_BANG_(p__59792,options){\r\nvar map__59793 = p__59792;\r\nvar map__59793__$1 = cljs.core.__destructure_map(map__59793);\r\nvar app__$1 = map__59793__$1;\r\nvar runtime_atom = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__59793__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"runtime-atom\",\"com.fulcrologic.fulcro.application/runtime-atom\",-1167397772));\r\nif(cljs.core.truth_(cljs.core.some((function (p1__59791_SHARP_){\r\nreturn cljs.core.boolean$(new cljs.core.Keyword(null,\"after-render?\",\"after-render?\",595994030).cljs$core$IFn$_invoke$arity$1(new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"options\",\"com.fulcrologic.fulcro.algorithms.tx-processing/options\",2016767420).cljs$core$IFn$_invoke$arity$1(p1__59791_SHARP_)));\r\n}),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"submission-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing/submission-queue\",-175778154).cljs$core$IFn$_invoke$arity$1(cljs.core.deref(runtime_atom))))){\r\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(runtime_atom,cljs.core.update,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"submission-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing/submission-queue\",-175778154),(function (queue){\r\nreturn cljs.core.mapv.cljs$core$IFn$_invoke$arity$2((function (node){\r\nreturn cljs.core.update.cljs$core$IFn$_invoke$arity$4(node,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"options\",\"com.fulcrologic.fulcro.algorithms.tx-processing/options\",2016767420),cljs.core.dissoc,new cljs.core.Keyword(null,\"after-render?\",\"after-render?\",595994030));\r\n}),queue);\r\n}));\r\n\r\nreturn (com.fulcrologic.fulcro.algorithms.tx_processing.schedule_activation_BANG_.cljs$core$IFn$_invoke$arity$2 ? com.fulcrologic.fulcro.algorithms.tx_processing.schedule_activation_BANG_.cljs$core$IFn$_invoke$arity$2(app__$1,(0)) : com.fulcrologic.fulcro.algorithms.tx_processing.schedule_activation_BANG_.call(null,app__$1,(0)));\r\n} else {\r\nreturn null;\r\n}\r\n});\r\n/**\r\n * Activate all of the transactions that have been submitted since the last activation. After the items are activated\r\n *   a single processing step will run for the active queue.\r\n * \r\n *   Activation can be blocked by the tx-node options for things like waiting for the next render frame.\r\n */\r\ncom.fulcrologic.fulcro.algorithms.tx_processing.activate_submissions_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$activate_submissions_BANG_(p__59798){\r\nvar map__59799 = p__59798;\r\nvar map__59799__$1 = cljs.core.__destructure_map(map__59799);\r\nvar app__$1 = map__59799__$1;\r\nvar runtime_atom = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__59799__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"runtime-atom\",\"com.fulcrologic.fulcro.application/runtime-atom\",-1167397772));\r\nnew cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"app\",\"com.fulcrologic.fulcro.application/app\",-1014694064),com.fulcrologic.guardrails.core._EQ__GT_,cljs.core.any_QMARK_], null);\r\n\r\nvar map__59801 = cljs.core.group_by(cljs.core.comp.cljs$core$IFn$_invoke$arity$3(cljs.core.boolean$,new cljs.core.Keyword(null,\"after-render?\",\"after-render?\",595994030),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"options\",\"com.fulcrologic.fulcro.algorithms.tx-processing/options\",2016767420)),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"submission-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing/submission-queue\",-175778154).cljs$core$IFn$_invoke$arity$1(cljs.core.deref(runtime_atom)));\r\nvar map__59801__$1 = cljs.core.__destructure_map(map__59801);\r\nvar blocked = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__59801__$1,true);\r\nvar ready = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__59801__$1,false);\r\nvar dispatched_nodes = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2((function (p1__59796_SHARP_){\r\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.dispatch_elements(p1__59796_SHARP_,com.fulcrologic.fulcro.algorithms.tx_processing.build_env.cljs$core$IFn$_invoke$arity$2(app__$1,p1__59796_SHARP_),com.fulcrologic.fulcro.mutations.mutate);\r\n}),ready);\r\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(runtime_atom,(function (a){\r\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(cljs.core.update.cljs$core$IFn$_invoke$arity$3(a,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"active-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing/active-queue\",162531286),(function (p1__59797_SHARP_){\r\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.conj,p1__59797_SHARP_,dispatched_nodes);\r\n})),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"submission-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing/submission-queue\",-175778154),cljs.core.vec(blocked));\r\n}));\r\n\r\nreturn (com.fulcrologic.fulcro.algorithms.tx_processing.process_queue_BANG_.cljs$core$IFn$_invoke$arity$1 ? com.fulcrologic.fulcro.algorithms.tx_processing.process_queue_BANG_.cljs$core$IFn$_invoke$arity$1(app__$1) : com.fulcrologic.fulcro.algorithms.tx_processing.process_queue_BANG_.call(null,app__$1));\r\n});\r\n/**\r\n * Schedule activation of submitted transactions.  The default implementation copies all submitted transactions onto\r\n * the active queue and immediately does an active queue processing step.  If `tm` is not supplied (in ms) it defaults to 10ms.\r\n */\r\ncom.fulcrologic.fulcro.algorithms.tx_processing.schedule_activation_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$schedule_activation_BANG_(var_args){\r\nvar G__59807 = arguments.length;\r\nswitch (G__59807) {\r\ncase 2:\r\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.schedule_activation_BANG_.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\r\n\r\nbreak;\r\ncase 1:\r\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.schedule_activation_BANG_.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\r\n\r\nbreak;\r\ndefault:\r\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\r\n\r\n}\r\n});\r\n\r\n(com.fulcrologic.fulcro.algorithms.tx_processing.schedule_activation_BANG_.cljs$core$IFn$_invoke$arity$2 = (function (app__$1,tm){\r\nnew cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"app\",\"com.fulcrologic.fulcro.application/app\",-1014694064),cljs.core.int_QMARK_,com.fulcrologic.guardrails.core._EQ__GT_,cljs.core.any_QMARK_], null);\r\n\r\nreturn com.fulcrologic.fulcro.algorithms.scheduling.schedule_BANG_.cljs$core$IFn$_invoke$arity$4(app__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"activation-scheduled?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/activation-scheduled?\",-955561668),com.fulcrologic.fulcro.algorithms.tx_processing.activate_submissions_BANG_,tm);\r\n}));\r\n\r\n(com.fulcrologic.fulcro.algorithms.tx_processing.schedule_activation_BANG_.cljs$core$IFn$_invoke$arity$1 = (function (app__$1){\r\nnew cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"app\",\"com.fulcrologic.fulcro.application/app\",-1014694064),com.fulcrologic.guardrails.core._EQ__GT_,cljs.core.any_QMARK_], null);\r\n\r\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.schedule_activation_BANG_.cljs$core$IFn$_invoke$arity$2(app__$1,(0));\r\n}));\r\n\r\n(com.fulcrologic.fulcro.algorithms.tx_processing.schedule_activation_BANG_.cljs$lang$maxFixedArity = 2);\r\n\r\n/**\r\n * Schedule a processing of the active queue, which will advance the active transactions by a step.\r\n * If `tm` is not supplied (in ms) it defaults to 10ms.\r\n */\r\ncom.fulcrologic.fulcro.algorithms.tx_processing.schedule_queue_processing_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$schedule_queue_processing_BANG_(var_args){\r\nvar G__59811 = arguments.length;\r\nswitch (G__59811) {\r\ncase 2:\r\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.schedule_queue_processing_BANG_.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\r\n\r\nbreak;\r\ncase 1:\r\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.schedule_queue_processing_BANG_.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\r\n\r\nbreak;\r\ndefault:\r\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\r\n\r\n}\r\n});\r\n\r\n(com.fulcrologic.fulcro.algorithms.tx_processing.schedule_queue_processing_BANG_.cljs$core$IFn$_invoke$arity$2 = (function (app__$1,tm){\r\nnew cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"app\",\"com.fulcrologic.fulcro.application/app\",-1014694064),cljs.core.int_QMARK_,com.fulcrologic.guardrails.core._EQ__GT_,cljs.core.any_QMARK_], null);\r\n\r\nreturn com.fulcrologic.fulcro.algorithms.scheduling.schedule_BANG_.cljs$core$IFn$_invoke$arity$4(app__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"queue-processing-scheduled?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/queue-processing-scheduled?\",-2065549690),com.fulcrologic.fulcro.algorithms.tx_processing.process_queue_BANG_,tm);\r\n}));\r\n\r\n(com.fulcrologic.fulcro.algorithms.tx_processing.schedule_queue_processing_BANG_.cljs$core$IFn$_invoke$arity$1 = (function (app__$1){\r\nnew cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"app\",\"com.fulcrologic.fulcro.application/app\",-1014694064),com.fulcrologic.guardrails.core._EQ__GT_,cljs.core.any_QMARK_], null);\r\n\r\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.schedule_queue_processing_BANG_.cljs$core$IFn$_invoke$arity$2(app__$1,(0));\r\n}));\r\n\r\n(com.fulcrologic.fulcro.algorithms.tx_processing.schedule_queue_processing_BANG_.cljs$lang$maxFixedArity = 2);\r\n\r\n/**\r\n * Schedule actual network activity. If `tm` is not supplied (in ms) it defaults to 0ms.\r\n */\r\ncom.fulcrologic.fulcro.algorithms.tx_processing.schedule_sends_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$schedule_sends_BANG_(var_args){\r\nvar G__59816 = arguments.length;\r\nswitch (G__59816) {\r\ncase 2:\r\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.schedule_sends_BANG_.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\r\n\r\nbreak;\r\ncase 1:\r\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.schedule_sends_BANG_.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\r\n\r\nbreak;\r\ndefault:\r\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\r\n\r\n}\r\n});\r\n\r\n(com.fulcrologic.fulcro.algorithms.tx_processing.schedule_sends_BANG_.cljs$core$IFn$_invoke$arity$2 = (function (app__$1,tm){\r\nnew cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"app\",\"com.fulcrologic.fulcro.application/app\",-1014694064),cljs.core.int_QMARK_,com.fulcrologic.guardrails.core._EQ__GT_,cljs.core.any_QMARK_], null);\r\n\r\nreturn com.fulcrologic.fulcro.algorithms.scheduling.schedule_BANG_.cljs$core$IFn$_invoke$arity$4(app__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"sends-scheduled?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/sends-scheduled?\",-844941333),com.fulcrologic.fulcro.algorithms.tx_processing.process_send_queues_BANG_,tm);\r\n}));\r\n\r\n(com.fulcrologic.fulcro.algorithms.tx_processing.schedule_sends_BANG_.cljs$core$IFn$_invoke$arity$1 = (function (app__$1){\r\nnew cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"app\",\"com.fulcrologic.fulcro.application/app\",-1014694064),com.fulcrologic.guardrails.core._EQ__GT_,cljs.core.any_QMARK_], null);\r\n\r\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.schedule_sends_BANG_.cljs$core$IFn$_invoke$arity$2(app__$1,(0));\r\n}));\r\n\r\n(com.fulcrologic.fulcro.algorithms.tx_processing.schedule_sends_BANG_.cljs$lang$maxFixedArity = 2);\r\n\r\n/**\r\n * Runs any incomplete and non-blocked optimistic operations on a node.\r\n */\r\ncom.fulcrologic.fulcro.algorithms.tx_processing.advance_actions_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$advance_actions_BANG_(app__$1,p__59819){\r\nvar map__59820 = p__59819;\r\nvar map__59820__$1 = cljs.core.__destructure_map(map__59820);\r\nvar node = map__59820__$1;\r\nvar id = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__59820__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423));\r\nvar elements = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__59820__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330));\r\nnew cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"app\",\"com.fulcrologic.fulcro.application/app\",-1014694064),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-node\",67879378),com.fulcrologic.guardrails.core._EQ__GT_,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-node\",67879378)], null);\r\n\r\nvar remotes = com.fulcrologic.fulcro.algorithms.tx_processing.app__GT_remote_names(app__$1);\r\nvar reduction = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (p__59821,element){\r\nvar map__59822 = p__59821;\r\nvar map__59822__$1 = cljs.core.__destructure_map(map__59822);\r\nvar acc = map__59822__$1;\r\nvar done_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__59822__$1,new cljs.core.Keyword(null,\"done?\",\"done?\",-1847001718));\r\nvar new_elements = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__59822__$1,new cljs.core.Keyword(null,\"new-elements\",\"new-elements\",-378003171));\r\nif(cljs.core.truth_(done_QMARK_)){\r\nreturn cljs.core.update.cljs$core$IFn$_invoke$arity$4(acc,new cljs.core.Keyword(null,\"new-elements\",\"new-elements\",-378003171),cljs.core.conj,element);\r\n} else {\r\nvar map__59823 = element;\r\nvar map__59823__$1 = cljs.core.__destructure_map(map__59823);\r\nvar complete_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__59823__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"complete?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/complete?\",-311612706));\r\nvar dispatch = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__59823__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"dispatch\",\"com.fulcrologic.fulcro.algorithms.tx-processing/dispatch\",-262239660));\r\nvar original_ast_node = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__59823__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"original-ast-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/original-ast-node\",2080944477));\r\nvar idx = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__59823__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"idx\",\"com.fulcrologic.fulcro.algorithms.tx-processing/idx\",-1121773698));\r\nvar map__59824 = dispatch;\r\nvar map__59824__$1 = cljs.core.__destructure_map(map__59824);\r\nvar action = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__59824__$1,new cljs.core.Keyword(null,\"action\",\"action\",-811238024));\r\nvar remote_set = clojure.set.intersection.cljs$core$IFn$_invoke$arity$2(remotes,cljs.core.set(cljs.core.keys(dispatch)));\r\nvar exec_QMARK_ = (function (){var and__4251__auto__ = action;\r\nif(cljs.core.truth_(and__4251__auto__)){\r\nreturn cljs.core.not((function (){var or__4253__auto__ = done_QMARK_;\r\nif(cljs.core.truth_(or__4253__auto__)){\r\nreturn or__4253__auto__;\r\n} else {\r\nreturn (complete_QMARK_.cljs$core$IFn$_invoke$arity$1 ? complete_QMARK_.cljs$core$IFn$_invoke$arity$1(new cljs.core.Keyword(null,\"action\",\"action\",-811238024)) : complete_QMARK_.call(null,new cljs.core.Keyword(null,\"action\",\"action\",-811238024)));\r\n}\r\n})());\r\n} else {\r\nreturn and__4251__auto__;\r\n}\r\n})();\r\nvar fully_complete_QMARK_ = (function (){var and__4251__auto__ = (function (){var or__4253__auto__ = exec_QMARK_;\r\nif(cljs.core.truth_(or__4253__auto__)){\r\nreturn or__4253__auto__;\r\n} else {\r\nreturn (complete_QMARK_.cljs$core$IFn$_invoke$arity$1 ? complete_QMARK_.cljs$core$IFn$_invoke$arity$1(new cljs.core.Keyword(null,\"action\",\"action\",-811238024)) : complete_QMARK_.call(null,new cljs.core.Keyword(null,\"action\",\"action\",-811238024)));\r\n}\r\n})();\r\nif(cljs.core.truth_(and__4251__auto__)){\r\nreturn cljs.core.empty_QMARK_(clojure.set.difference.cljs$core$IFn$_invoke$arity$2(remote_set,complete_QMARK_));\r\n} else {\r\nreturn and__4251__auto__;\r\n}\r\n})();\r\nvar state_id_before = com.fulcrologic.fulcro.inspect.inspect_client.current_history_id(app__$1);\r\nvar state = new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"state-atom\",\"com.fulcrologic.fulcro.application/state-atom\",648128366).cljs$core$IFn$_invoke$arity$1(app__$1);\r\nvar state_before = cljs.core.deref(state);\r\nvar updated_element = (cljs.core.truth_(exec_QMARK_)?cljs.core.update.cljs$core$IFn$_invoke$arity$4(cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(element,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"state-before-action\",\"com.fulcrologic.fulcro.algorithms.tx-processing/state-before-action\",-1800721778),state_before),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"complete?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/complete?\",-311612706),cljs.core.conj,new cljs.core.Keyword(null,\"action\",\"action\",-811238024)):element);\r\nvar done_QMARK___$1 = cljs.core.not(fully_complete_QMARK_);\r\nvar new_acc = new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"done?\",\"done?\",-1847001718),done_QMARK___$1,new cljs.core.Keyword(null,\"new-elements\",\"new-elements\",-378003171),cljs.core.conj.cljs$core$IFn$_invoke$arity$2(new_elements,updated_element)], null);\r\nvar env = com.fulcrologic.fulcro.algorithms.tx_processing.build_env.cljs$core$IFn$_invoke$arity$3(app__$1,node,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"ast\",\"ast\",-860334068),original_ast_node], null));\r\nif(cljs.core.truth_(exec_QMARK_)){\r\ntry{if(cljs.core.truth_(action)){\r\n(action.cljs$core$IFn$_invoke$arity$1 ? action.cljs$core$IFn$_invoke$arity$1(env) : action.call(null,env));\r\n} else {\r\n}\r\n}catch (e59825){var e_60348 = e59825;\r\nvar mutation_symbol_60349 = new cljs.core.Keyword(null,\"dispatch-key\",\"dispatch-key\",733619510).cljs$core$IFn$_invoke$arity$1(original_ast_node);\r\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$11(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.algorithms.tx-processing\",null,340,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay((function (){\r\nreturn new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [e_60348,\"The `action` section of mutation\",mutation_symbol_60349,\"threw an exception. See https://book.fulcrologic.com/#err-txp-mut-action-exc\"], null);\r\n}),null)),null,-2113729143,null);\r\n}\r\nif(cljs.core.truth_((function (){var and__4251__auto__ = (function (){var or__4253__auto__ = goog.DEBUG;\r\nif(cljs.core.truth_(or__4253__auto__)){\r\nreturn or__4253__auto__;\r\n} else {\r\nreturn com.fulcrologic.fulcro.inspect.inspect_client.INSPECT;\r\n}\r\n})();\r\nif(cljs.core.truth_(and__4251__auto__)){\r\nreturn cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(\"disabled\",com.fulcrologic.fulcro.inspect.inspect_client.INSPECT);\r\n} else {\r\nreturn and__4251__auto__;\r\n}\r\n})())){\r\ntry{var tx_60350 = edn_query_language.core.ast__GT_expr.cljs$core$IFn$_invoke$arity$2(original_ast_node,true);\r\ncom.fulcrologic.fulcro.inspect.inspect_client.optimistic_action_finished_BANG_(app__$1,env,new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,\"tx-id\",\"tx-id\",638275288),[cljs.core.str.cljs$core$IFn$_invoke$arity$1(id),\"-\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(idx)].join(''),new cljs.core.Keyword(null,\"state-id-before\",\"state-id-before\",-1436953055),state_id_before,new cljs.core.Keyword(null,\"db-before\",\"db-before\",-553691536),state_before,new cljs.core.Keyword(null,\"db-after\",\"db-after\",-571884666),cljs.core.deref(state),new cljs.core.Keyword(null,\"tx\",\"tx\",466630418),tx_60350], null));\r\n}catch (e59826){var e_60351 = e59826;\r\n}} else {\r\n}\r\n} else {\r\n}\r\n\r\nreturn new_acc;\r\n}\r\n}),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"done?\",\"done?\",-1847001718),false,new cljs.core.Keyword(null,\"new-elements\",\"new-elements\",-378003171),cljs.core.PersistentVector.EMPTY], null),elements);\r\nvar new_elements = new cljs.core.Keyword(null,\"new-elements\",\"new-elements\",-378003171).cljs$core$IFn$_invoke$arity$1(reduction);\r\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(node,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330),new_elements);\r\n});\r\ncom.fulcrologic.fulcro.algorithms.tx_processing.run_actions_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$run_actions_BANG_(app__$1,p__59827){\r\nvar map__59828 = p__59827;\r\nvar map__59828__$1 = cljs.core.__destructure_map(map__59828);\r\nvar node = map__59828__$1;\r\nvar id = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__59828__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423));\r\nvar elements = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__59828__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330));\r\nnew cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"app\",\"com.fulcrologic.fulcro.application/app\",-1014694064),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-node\",67879378),com.fulcrologic.guardrails.core._EQ__GT_,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-node\",67879378)], null);\r\n\r\nvar new_elements = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (new_elements,element){\r\nvar map__59837 = element;\r\nvar map__59837__$1 = cljs.core.__destructure_map(map__59837);\r\nvar idx = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__59837__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"idx\",\"com.fulcrologic.fulcro.algorithms.tx-processing/idx\",-1121773698));\r\nvar complete_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__59837__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"complete?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/complete?\",-311612706));\r\nvar dispatch = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__59837__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"dispatch\",\"com.fulcrologic.fulcro.algorithms.tx-processing/dispatch\",-262239660));\r\nvar original_ast_node = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__59837__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"original-ast-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/original-ast-node\",2080944477));\r\nvar map__59838 = dispatch;\r\nvar map__59838__$1 = cljs.core.__destructure_map(map__59838);\r\nvar action = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__59838__$1,new cljs.core.Keyword(null,\"action\",\"action\",-811238024));\r\nvar exec_QMARK_ = (function (){var and__4251__auto__ = action;\r\nif(cljs.core.truth_(and__4251__auto__)){\r\nreturn cljs.core.not((complete_QMARK_.cljs$core$IFn$_invoke$arity$1 ? complete_QMARK_.cljs$core$IFn$_invoke$arity$1(new cljs.core.Keyword(null,\"action\",\"action\",-811238024)) : complete_QMARK_.call(null,new cljs.core.Keyword(null,\"action\",\"action\",-811238024))));\r\n} else {\r\nreturn and__4251__auto__;\r\n}\r\n})();\r\nvar state_id_before = com.fulcrologic.fulcro.inspect.inspect_client.current_history_id(app__$1);\r\nvar state = new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"state-atom\",\"com.fulcrologic.fulcro.application/state-atom\",648128366).cljs$core$IFn$_invoke$arity$1(app__$1);\r\nvar state_before = cljs.core.deref(state);\r\nvar updated_node = (cljs.core.truth_(exec_QMARK_)?cljs.core.update.cljs$core$IFn$_invoke$arity$4(cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(element,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"state-before-action\",\"com.fulcrologic.fulcro.algorithms.tx-processing/state-before-action\",-1800721778),state_before),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"complete?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/complete?\",-311612706),cljs.core.conj,new cljs.core.Keyword(null,\"action\",\"action\",-811238024)):element);\r\nvar new_acc = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(new_elements,updated_node);\r\nvar env = com.fulcrologic.fulcro.algorithms.tx_processing.build_env.cljs$core$IFn$_invoke$arity$3(app__$1,node,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"ast\",\"ast\",-860334068),original_ast_node], null));\r\nif(cljs.core.truth_(exec_QMARK_)){\r\ntry{(action.cljs$core$IFn$_invoke$arity$1 ? action.cljs$core$IFn$_invoke$arity$1(env) : action.call(null,env));\r\n}catch (e59842){var e_60360 = e59842;\r\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$11(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.algorithms.tx-processing\",null,373,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay((function (){\r\nreturn new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [e_60360,\"The `action` section threw an exception for mutation: \",new cljs.core.Keyword(null,\"dispatch-key\",\"dispatch-key\",733619510).cljs$core$IFn$_invoke$arity$1(original_ast_node),\"See https://book.fulcrologic.com/#err-txp-mut-action-exc2\"], null);\r\n}),null)),null,1834623915,null);\r\n}\r\nif(cljs.core.truth_((function (){var and__4251__auto__ = (function (){var or__4253__auto__ = goog.DEBUG;\r\nif(cljs.core.truth_(or__4253__auto__)){\r\nreturn or__4253__auto__;\r\n} else {\r\nreturn com.fulcrologic.fulcro.inspect.inspect_client.INSPECT;\r\n}\r\n})();\r\nif(cljs.core.truth_(and__4251__auto__)){\r\nreturn cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(\"disabled\",com.fulcrologic.fulcro.inspect.inspect_client.INSPECT);\r\n} else {\r\nreturn and__4251__auto__;\r\n}\r\n})())){\r\ntry{var tx_60361 = edn_query_language.core.ast__GT_expr.cljs$core$IFn$_invoke$arity$2(original_ast_node,true);\r\ncom.fulcrologic.fulcro.inspect.inspect_client.optimistic_action_finished_BANG_(app__$1,env,new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,\"tx-id\",\"tx-id\",638275288),[cljs.core.str.cljs$core$IFn$_invoke$arity$1(id),\"-\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(idx)].join(''),new cljs.core.Keyword(null,\"state-id-before\",\"state-id-before\",-1436953055),state_id_before,new cljs.core.Keyword(null,\"db-before\",\"db-before\",-553691536),state_before,new cljs.core.Keyword(null,\"db-after\",\"db-after\",-571884666),cljs.core.deref(state),new cljs.core.Keyword(null,\"tx\",\"tx\",466630418),tx_60361], null));\r\n}catch (e59844){var e_60363 = e59844;\r\n}} else {\r\n}\r\n} else {\r\n}\r\n\r\nreturn new_acc;\r\n}),cljs.core.PersistentVector.EMPTY,elements);\r\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(node,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330),new_elements);\r\n});\r\ncom.fulcrologic.fulcro.algorithms.tx_processing.fully_complete_QMARK_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$fully_complete_QMARK_(app__$1,p__59846){\r\nvar map__59847 = p__59846;\r\nvar map__59847__$1 = cljs.core.__destructure_map(map__59847);\r\nvar tx_node = map__59847__$1;\r\nvar elements = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__59847__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330));\r\nnew cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"app\",\"com.fulcrologic.fulcro.application/app\",-1014694064),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-node\",67879378),com.fulcrologic.guardrails.core._EQ__GT_,cljs.core.boolean_QMARK_], null);\r\n\r\nvar element_complete_QMARK_ = (function (p__59848){\r\nvar map__59851 = p__59848;\r\nvar map__59851__$1 = cljs.core.__destructure_map(map__59851);\r\nvar dispatch = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__59851__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"dispatch\",\"com.fulcrologic.fulcro.algorithms.tx-processing/dispatch\",-262239660));\r\nvar complete_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__59851__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"complete?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/complete?\",-311612706));\r\nvar remotes = com.fulcrologic.fulcro.algorithms.tx_processing.app__GT_remote_names(app__$1);\r\nvar active_keys = clojure.set.union.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"action\",\"action\",-811238024),null], null), null),remotes);\r\nvar desired_set = clojure.set.intersection.cljs$core$IFn$_invoke$arity$2(active_keys,cljs.core.set(cljs.core.keys(dispatch)));\r\nreturn cljs.core.empty_QMARK_(clojure.set.difference.cljs$core$IFn$_invoke$arity$2(desired_set,complete_QMARK_));\r\n});\r\nreturn cljs.core.every_QMARK_(element_complete_QMARK_,elements);\r\n});\r\n/**\r\n * Removes the send node (if present) from the send queue on the given remote.\r\n */\r\ncom.fulcrologic.fulcro.algorithms.tx_processing.remove_send_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$remove_send_BANG_(p__59855,remote,txn_id,ele_idx){\r\nvar map__59856 = p__59855;\r\nvar map__59856__$1 = cljs.core.__destructure_map(map__59856);\r\nvar app__$1 = map__59856__$1;\r\nvar runtime_atom = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__59856__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"runtime-atom\",\"com.fulcrologic.fulcro.application/runtime-atom\",-1167397772));\r\nnew cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"app\",\"com.fulcrologic.fulcro.application/app\",-1014694064),new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"remote-name\",\"com.fulcrologic.fulcro.application/remote-name\",-1179129128),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"idx\",\"com.fulcrologic.fulcro.algorithms.tx-processing/idx\",-1121773698),com.fulcrologic.guardrails.core._EQ__GT_,cljs.core.any_QMARK_], null);\r\n\r\nvar map__59857 = cljs.core.deref(runtime_atom);\r\nvar map__59857__$1 = cljs.core.__destructure_map(map__59857);\r\nvar send_queues = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__59857__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-queues\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-queues\",-1776480807));\r\nvar old_queue = cljs.core.get.cljs$core$IFn$_invoke$arity$2(send_queues,remote);\r\nvar queue = cljs.core.filterv((function (p__59858){\r\nvar map__59859 = p__59858;\r\nvar map__59859__$1 = cljs.core.__destructure_map(map__59859);\r\nvar id = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__59859__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423));\r\nvar idx = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__59859__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"idx\",\"com.fulcrologic.fulcro.algorithms.tx-processing/idx\",-1121773698));\r\nreturn (!(((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(txn_id,id)) && (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(ele_idx,idx)))));\r\n}),old_queue);\r\nreturn cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(runtime_atom,cljs.core.assoc_in,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-queues\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-queues\",-1776480807),remote], null),queue);\r\n});\r\n/**\r\n * Record a network result on the given txn/element.\r\n * If result-key is given it is used, otherwise defaults to ::results. Also removes the network send from the send\r\n * queue so that remaining items can proceed, and schedules send processing.\r\n */\r\ncom.fulcrologic.fulcro.algorithms.tx_processing.record_result_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$record_result_BANG_(var_args){\r\nvar G__59864 = arguments.length;\r\nswitch (G__59864) {\r\ncase 6:\r\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.record_result_BANG_.cljs$core$IFn$_invoke$arity$6((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]),(arguments[(4)]),(arguments[(5)]));\r\n\r\nbreak;\r\ncase 5:\r\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.record_result_BANG_.cljs$core$IFn$_invoke$arity$5((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]),(arguments[(4)]));\r\n\r\nbreak;\r\ndefault:\r\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\r\n\r\n}\r\n});\r\n\r\n(com.fulcrologic.fulcro.algorithms.tx_processing.record_result_BANG_.cljs$core$IFn$_invoke$arity$6 = (function (p__59866,txn_id,ele_idx,remote,result,result_key){\r\nvar map__59867 = p__59866;\r\nvar map__59867__$1 = cljs.core.__destructure_map(map__59867);\r\nvar app__$1 = map__59867__$1;\r\nvar runtime_atom = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__59867__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"runtime-atom\",\"com.fulcrologic.fulcro.application/runtime-atom\",-1167397772));\r\nnew cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"app\",\"com.fulcrologic.fulcro.application/app\",-1014694064),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423),cljs.core.int_QMARK_,cljs.core.keyword_QMARK_,cljs.core.any_QMARK_,cljs.core.keyword_QMARK_,com.fulcrologic.guardrails.core._EQ__GT_,cljs.core.any_QMARK_], null);\r\n\r\nvar active_queue = new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"active-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing/active-queue\",162531286).cljs$core$IFn$_invoke$arity$1(cljs.core.deref(runtime_atom));\r\nvar txn_idx = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (idx,p__59868){\r\nvar map__59869 = p__59868;\r\nvar map__59869__$1 = cljs.core.__destructure_map(map__59869);\r\nvar id = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__59869__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423));\r\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(id,txn_id)){\r\nreturn cljs.core.reduced(idx);\r\n} else {\r\nreturn (idx + (1));\r\n}\r\n}),(0),active_queue);\r\nvar not_found_QMARK_ = (((txn_idx >= cljs.core.count(active_queue))) || (cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(txn_id,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423).cljs$core$IFn$_invoke$arity$1(cljs.core.get.cljs$core$IFn$_invoke$arity$2(active_queue,txn_idx)))));\r\nif(not_found_QMARK_){\r\nreturn taoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$11(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.algorithms.tx-processing\",null,421,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay((function (){\r\nreturn new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"Network result for\",remote,\"does not have a valid node on the active queue! See https://book.fulcrologic.com/#err-txp-res-lacks-valid-node\"], null);\r\n}),null)),null,-1175197185,null);\r\n} else {\r\nreturn cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(runtime_atom,cljs.core.assoc_in,new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"active-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing/active-queue\",162531286),txn_idx,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330),ele_idx,result_key,remote], null),result);\r\n}\r\n}));\r\n\r\n(com.fulcrologic.fulcro.algorithms.tx_processing.record_result_BANG_.cljs$core$IFn$_invoke$arity$5 = (function (app__$1,txn_id,ele_idx,remote,result){\r\nnew cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"app\",\"com.fulcrologic.fulcro.application/app\",-1014694064),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423),cljs.core.int_QMARK_,cljs.core.keyword_QMARK_,cljs.core.any_QMARK_,com.fulcrologic.guardrails.core._EQ__GT_,cljs.core.any_QMARK_], null);\r\n\r\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.record_result_BANG_.cljs$core$IFn$_invoke$arity$6(app__$1,txn_id,ele_idx,remote,result,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"results\",\"com.fulcrologic.fulcro.algorithms.tx-processing/results\",-1876101852));\r\n}));\r\n\r\n(com.fulcrologic.fulcro.algorithms.tx_processing.record_result_BANG_.cljs$lang$maxFixedArity = 6);\r\n\r\n/**\r\n * Add the ::desired-ast-nodes and ::transmitted-ast-nodes for `remote` to the tx-element based on the dispatch for the `remote` of the original mutation.\r\n */\r\ncom.fulcrologic.fulcro.algorithms.tx_processing.compute_desired_ast_node = (function com$fulcrologic$fulcro$algorithms$tx_processing$compute_desired_ast_node(app__$1,remote,tx_node,tx_element){\r\nnew cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"app\",\"com.fulcrologic.fulcro.application/app\",-1014694064),new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"remote-name\",\"com.fulcrologic.fulcro.application/remote-name\",-1179129128),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-node\",67879378),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-element\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-element\",-1533905811),com.fulcrologic.guardrails.core._EQ__GT_,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-element\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-element\",-1533905811)], null);\r\n\r\nvar map__59930 = tx_element;\r\nvar map__59930__$1 = cljs.core.__destructure_map(map__59930);\r\nvar dispatch = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__59930__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"dispatch\",\"com.fulcrologic.fulcro.algorithms.tx-processing/dispatch\",-262239660));\r\nvar original_ast_node = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__59930__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"original-ast-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/original-ast-node\",2080944477));\r\nvar state_before_action = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__59930__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"state-before-action\",\"com.fulcrologic.fulcro.algorithms.tx-processing/state-before-action\",-1800721778));\r\nvar env = com.fulcrologic.fulcro.algorithms.tx_processing.build_env.cljs$core$IFn$_invoke$arity$3(app__$1,tx_node,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"ast\",\"ast\",-860334068),original_ast_node,new cljs.core.Keyword(null,\"state-before-action\",\"state-before-action\",104906671),state_before_action], null));\r\nvar remote_fn = cljs.core.get.cljs$core$IFn$_invoke$arity$2(dispatch,remote);\r\nvar remote_desire = (cljs.core.truth_(remote_fn)?(remote_fn.cljs$core$IFn$_invoke$arity$1 ? remote_fn.cljs$core$IFn$_invoke$arity$1(env) : remote_fn.call(null,env)):null);\r\nvar desired_ast = ((((remote_desire === false) || ((remote_desire == null))))?null:((remote_desire === true)?original_ast_node:((((cljs.core.map_QMARK_(remote_desire)) && (cljs.core.contains_QMARK_(remote_desire,new cljs.core.Keyword(null,\"ast\",\"ast\",-860334068)))))?new cljs.core.Keyword(null,\"ast\",\"ast\",-860334068).cljs$core$IFn$_invoke$arity$1(remote_desire):((((cljs.core.map_QMARK_(remote_desire)) && (cljs.core.contains_QMARK_(remote_desire,new cljs.core.Keyword(null,\"type\",\"type\",1174270348)))))?remote_desire:(function (){\r\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$11(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.algorithms.tx-processing\",null,442,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay((function (){\r\nreturn new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"Remote dispatch for\",remote,\"returned an invalid value.\",remote_desire,\"See https://book.fulcrologic.com/#err-txp-remote-dispatch-invalid-res\"], null);\r\n}),null)),null,2544310,null);\r\n\r\nreturn remote_desire;\r\n})()\r\n\r\n))));\r\nvar query_transform = com.fulcrologic.fulcro.algorithms.lookup.app_algorithm(app__$1,new cljs.core.Keyword(null,\"global-eql-transform\",\"global-eql-transform\",145441548));\r\nvar ast = (cljs.core.truth_((function (){var and__4251__auto__ = desired_ast;\r\nif(cljs.core.truth_(and__4251__auto__)){\r\nreturn query_transform;\r\n} else {\r\nreturn and__4251__auto__;\r\n}\r\n})())?(query_transform.cljs$core$IFn$_invoke$arity$1 ? query_transform.cljs$core$IFn$_invoke$arity$1(desired_ast) : query_transform.call(null,desired_ast)):desired_ast);\r\nvar G__59944 = tx_element;\r\nvar G__59944__$1 = (cljs.core.truth_(desired_ast)?cljs.core.assoc_in(G__59944,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"desired-ast-nodes\",\"com.fulcrologic.fulcro.algorithms.tx-processing/desired-ast-nodes\",-1718643425),remote], null),desired_ast):G__59944);\r\nif(cljs.core.truth_(ast)){\r\nreturn cljs.core.assoc_in(G__59944__$1,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"transmitted-ast-nodes\",\"com.fulcrologic.fulcro.algorithms.tx-processing/transmitted-ast-nodes\",1065250687),remote], null),ast);\r\n} else {\r\nreturn G__59944__$1;\r\n}\r\n});\r\n/**\r\n * Generate a new send node and add it to the appropriate send queue. Returns the new send node.\r\n */\r\ncom.fulcrologic.fulcro.algorithms.tx_processing.add_send_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$add_send_BANG_(p__59945,p__59946,ele_idx,remote){\r\nvar map__59947 = p__59945;\r\nvar map__59947__$1 = cljs.core.__destructure_map(map__59947);\r\nvar app__$1 = map__59947__$1;\r\nvar runtime_atom = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__59947__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"runtime-atom\",\"com.fulcrologic.fulcro.application/runtime-atom\",-1167397772));\r\nvar map__59948 = p__59946;\r\nvar map__59948__$1 = cljs.core.__destructure_map(map__59948);\r\nvar tx_node = map__59948__$1;\r\nvar id = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__59948__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423));\r\nvar options = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__59948__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"options\",\"com.fulcrologic.fulcro.algorithms.tx-processing/options\",2016767420));\r\nnew cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"app\",\"com.fulcrologic.fulcro.application/app\",-1014694064),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-node\",67879378),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"idx\",\"com.fulcrologic.fulcro.algorithms.tx-processing/idx\",-1121773698),new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"remote-name\",\"com.fulcrologic.fulcro.application/remote-name\",-1179129128),com.fulcrologic.guardrails.core._EQ__GT_,cljs.spec.alpha.nilable_impl(new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-node\",1624648157),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-node\",1624648157),null)], null);\r\n\r\nvar update_handler = (function com$fulcrologic$fulcro$algorithms$tx_processing$add_send_BANG__$_progress_handler_STAR_(result){\r\ncom.fulcrologic.fulcro.algorithms.tx_processing.record_result_BANG_.cljs$core$IFn$_invoke$arity$6(app__$1,id,ele_idx,remote,result,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"progress\",\"com.fulcrologic.fulcro.algorithms.tx-processing/progress\",1012736442));\r\n\r\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.schedule_queue_processing_BANG_.cljs$core$IFn$_invoke$arity$2(app__$1,(0));\r\n});\r\nvar ast = cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(tx_node,new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330),ele_idx,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"transmitted-ast-nodes\",\"com.fulcrologic.fulcro.algorithms.tx-processing/transmitted-ast-nodes\",1065250687),remote], null));\r\nvar handler = (function com$fulcrologic$fulcro$algorithms$tx_processing$add_send_BANG__$_result_handler_STAR_(result){\r\ncom.fulcrologic.fulcro.algorithms.tx_processing.record_result_BANG_.cljs$core$IFn$_invoke$arity$5(app__$1,id,ele_idx,remote,result);\r\n\r\ncom.fulcrologic.fulcro.algorithms.tx_processing.remove_send_BANG_(app__$1,remote,id,ele_idx);\r\n\r\ncom.fulcrologic.fulcro.algorithms.tx_processing.schedule_sends_BANG_.cljs$core$IFn$_invoke$arity$2(app__$1,(1));\r\n\r\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.schedule_queue_processing_BANG_.cljs$core$IFn$_invoke$arity$2(app__$1,(0));\r\n});\r\nvar send_node = new cljs.core.PersistentArrayMap(null, 7, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423),id,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"idx\",\"com.fulcrologic.fulcro.algorithms.tx-processing/idx\",-1121773698),ele_idx,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"ast\",\"com.fulcrologic.fulcro.algorithms.tx-processing/ast\",1718830373),ast,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"options\",\"com.fulcrologic.fulcro.algorithms.tx-processing/options\",2016767420),options,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"active?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/active?\",966679517),false,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"result-handler\",\"com.fulcrologic.fulcro.algorithms.tx-processing/result-handler\",-114902209),handler,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"update-handler\",\"com.fulcrologic.fulcro.algorithms.tx-processing/update-handler\",-1256285755),update_handler], null);\r\nif(cljs.core.truth_(ast)){\r\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$variadic(runtime_atom,cljs.core.update_in,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-queues\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-queues\",-1776480807),remote], null),cljs.core.fnil.cljs$core$IFn$_invoke$arity$2(cljs.core.conj,cljs.core.PersistentVector.EMPTY),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([send_node], 0));\r\n\r\nreturn send_node;\r\n} else {\r\nhandler(new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"status-code\",\"status-code\",-1060410130),(200),new cljs.core.Keyword(null,\"body\",\"body\",-2049205669),cljs.core.PersistentArrayMap.EMPTY], null));\r\n\r\nreturn null;\r\n}\r\n});\r\n/**\r\n * Queue all (unqueued) remote actions for the given element.  Returns the (possibly updated) node.\r\n */\r\ncom.fulcrologic.fulcro.algorithms.tx_processing.queue_element_sends_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$queue_element_sends_BANG_(app__$1,tx_node,p__59950){\r\nvar map__59951 = p__59950;\r\nvar map__59951__$1 = cljs.core.__destructure_map(map__59951);\r\nvar idx = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__59951__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"idx\",\"com.fulcrologic.fulcro.algorithms.tx-processing/idx\",-1121773698));\r\nvar dispatch = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__59951__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"dispatch\",\"com.fulcrologic.fulcro.algorithms.tx-processing/dispatch\",-262239660));\r\nvar started_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__59951__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"started?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/started?\",1421241366));\r\nnew cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"app\",\"com.fulcrologic.fulcro.application/app\",-1014694064),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-node\",67879378),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-element\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-element\",-1533905811),com.fulcrologic.guardrails.core._EQ__GT_,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-node\",67879378)], null);\r\n\r\nvar remotes = clojure.set.intersection.cljs$core$IFn$_invoke$arity$2(cljs.core.set(cljs.core.keys(dispatch)),com.fulcrologic.fulcro.algorithms.tx_processing.app__GT_remote_names(app__$1));\r\nvar to_dispatch = clojure.set.difference.cljs$core$IFn$_invoke$arity$2(remotes,started_QMARK_);\r\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (node,remote){\r\nif(cljs.core.contains_QMARK_(cljs.core.get_in.cljs$core$IFn$_invoke$arity$3(node,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330),idx,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"started?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/started?\",1421241366)], null),cljs.core.PersistentHashSet.EMPTY),remote)){\r\nreturn node;\r\n} else {\r\nvar updated_node = cljs.core.update_in.cljs$core$IFn$_invoke$arity$4(cljs.core.update_in.cljs$core$IFn$_invoke$arity$3(node,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330),idx], null),(function (tx_element){\r\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.compute_desired_ast_node(app__$1,remote,node,tx_element);\r\n})),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330),idx,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"started?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/started?\",1421241366)], null),cljs.core.conj,remote);\r\ncom.fulcrologic.fulcro.algorithms.tx_processing.add_send_BANG_(app__$1,updated_node,idx,remote);\r\n\r\nreturn updated_node;\r\n}\r\n}),tx_node,to_dispatch);\r\n});\r\n/**\r\n * Returns true if the given node has no active network operations.\r\n */\r\ncom.fulcrologic.fulcro.algorithms.tx_processing.idle_node_QMARK_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$idle_node_QMARK_(p__59952){\r\nvar map__59953 = p__59952;\r\nvar map__59953__$1 = cljs.core.__destructure_map(map__59953);\r\nvar tx_node = map__59953__$1;\r\nvar elements = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__59953__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330));\r\nnew cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-node\",67879378),com.fulcrologic.guardrails.core._EQ__GT_,cljs.core.boolean_QMARK_], null);\r\n\r\nreturn cljs.core.every_QMARK_((function com$fulcrologic$fulcro$algorithms$tx_processing$idle_node_QMARK__$_idle_QMARK__STAR_(p__59954){\r\nvar map__59955 = p__59954;\r\nvar map__59955__$1 = cljs.core.__destructure_map(map__59955);\r\nvar started_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__59955__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"started?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/started?\",1421241366));\r\nvar complete_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__59955__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"complete?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/complete?\",-311612706));\r\nvar in_progress = clojure.set.difference.cljs$core$IFn$_invoke$arity$2(started_QMARK_,complete_QMARK_);\r\nreturn cljs.core.empty_QMARK_(in_progress);\r\n}),elements);\r\n});\r\n/**\r\n * Returns a txnode element iff it has remaining (remote) work that has not been queued. Returns nil if there\r\n * is no such element.\r\n * \r\n *   remote-names is the set of legal remote names.\r\n */\r\ncom.fulcrologic.fulcro.algorithms.tx_processing.element_with_work = (function com$fulcrologic$fulcro$algorithms$tx_processing$element_with_work(remote_names,p__59958){\r\nvar map__59959 = p__59958;\r\nvar map__59959__$1 = cljs.core.__destructure_map(map__59959);\r\nvar element = map__59959__$1;\r\nvar dispatch = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__59959__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"dispatch\",\"com.fulcrologic.fulcro.algorithms.tx-processing/dispatch\",-262239660));\r\nvar started_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__59959__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"started?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/started?\",1421241366));\r\nnew cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"remote-names\",\"com.fulcrologic.fulcro.application/remote-names\",1017468926),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-element\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-element\",-1533905811),com.fulcrologic.guardrails.core._EQ__GT_,cljs.spec.alpha.nilable_impl(new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-element\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-element\",-1533905811),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-element\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-element\",-1533905811),null)], null);\r\n\r\nvar todo = clojure.set.intersection.cljs$core$IFn$_invoke$arity$2(remote_names,cljs.core.set(cljs.core.keys(dispatch)));\r\nvar remaining = clojure.set.difference.cljs$core$IFn$_invoke$arity$2(todo,started_QMARK_);\r\nif(cljs.core.seq(remaining)){\r\nreturn element;\r\n} else {\r\nreturn null;\r\n}\r\n});\r\n/**\r\n * Assumes tx-node is to be processed pessimistically. Queues the next send if the node is currently idle\r\n *   on the network and there are any sends left to do. Adds to the send queue, and returns the updated\r\n *   tx-node.\r\n */\r\ncom.fulcrologic.fulcro.algorithms.tx_processing.queue_next_send_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$queue_next_send_BANG_(app__$1,p__59966){\r\nvar map__59967 = p__59966;\r\nvar map__59967__$1 = cljs.core.__destructure_map(map__59967);\r\nvar tx_node = map__59967__$1;\r\nvar elements = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__59967__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330));\r\nnew cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"app\",\"com.fulcrologic.fulcro.application/app\",-1014694064),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-node\",67879378),com.fulcrologic.guardrails.core._EQ__GT_,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-node\",67879378)], null);\r\n\r\nif(com.fulcrologic.fulcro.algorithms.tx_processing.idle_node_QMARK_(tx_node)){\r\nvar remotes = com.fulcrologic.fulcro.algorithms.tx_processing.app__GT_remote_names(app__$1);\r\nvar with_work = cljs.core.partial.cljs$core$IFn$_invoke$arity$2(com.fulcrologic.fulcro.algorithms.tx_processing.element_with_work,remotes);\r\nvar element = cljs.core.some(with_work,elements);\r\nif(cljs.core.truth_(element)){\r\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.queue_element_sends_BANG_(app__$1,tx_node,element);\r\n} else {\r\nreturn tx_node;\r\n}\r\n} else {\r\nreturn tx_node;\r\n}\r\n});\r\n/**\r\n * Finds any item(s) on the given node that are ready to be placed on the network queues and adds them. Non-optimistic\r\n *   multi-element nodes will only queue one remote operation at a time.\r\n */\r\ncom.fulcrologic.fulcro.algorithms.tx_processing.queue_sends_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$queue_sends_BANG_(app__$1,p__59972){\r\nvar map__59973 = p__59972;\r\nvar map__59973__$1 = cljs.core.__destructure_map(map__59973);\r\nvar tx_node = map__59973__$1;\r\nvar options = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__59973__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"options\",\"com.fulcrologic.fulcro.algorithms.tx-processing/options\",2016767420));\r\nvar elements = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__59973__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330));\r\nnew cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"app\",\"com.fulcrologic.fulcro.application/app\",-1014694064),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-node\",67879378),com.fulcrologic.guardrails.core._EQ__GT_,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-node\",67879378)], null);\r\n\r\nvar optimistic_QMARK_ = cljs.core.boolean$(new cljs.core.Keyword(null,\"optimistic?\",\"optimistic?\",1829830869).cljs$core$IFn$_invoke$arity$1(options));\r\ncom.fulcrologic.fulcro.algorithms.tx_processing.schedule_sends_BANG_.cljs$core$IFn$_invoke$arity$2(app__$1,(0));\r\n\r\nif(optimistic_QMARK_){\r\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (node,element){\r\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.queue_element_sends_BANG_(app__$1,node,element);\r\n}),tx_node,elements);\r\n} else {\r\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.queue_next_send_BANG_(app__$1,tx_node);\r\n}\r\n});\r\n/**\r\n * Figure out the dispatch routine to trigger for the given network result.  If it exists, send the result\r\n *   to it.\r\n * \r\n *   Returns the tx-element with the remote marked complete.\r\n */\r\ncom.fulcrologic.fulcro.algorithms.tx_processing.dispatch_result_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$dispatch_result_BANG_(app__$1,tx_node,p__59980,remote){\r\nvar map__59981 = p__59980;\r\nvar map__59981__$1 = cljs.core.__destructure_map(map__59981);\r\nvar tx_element = map__59981__$1;\r\nvar results = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__59981__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"results\",\"com.fulcrologic.fulcro.algorithms.tx-processing/results\",-1876101852));\r\nvar dispatch = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__59981__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"dispatch\",\"com.fulcrologic.fulcro.algorithms.tx-processing/dispatch\",-262239660));\r\nvar desired_ast_nodes = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__59981__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"desired-ast-nodes\",\"com.fulcrologic.fulcro.algorithms.tx-processing/desired-ast-nodes\",-1718643425));\r\nvar transmitted_ast_nodes = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__59981__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"transmitted-ast-nodes\",\"com.fulcrologic.fulcro.algorithms.tx-processing/transmitted-ast-nodes\",1065250687));\r\nvar original_ast_node = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__59981__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"original-ast-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/original-ast-node\",2080944477));\r\nnew cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"app\",\"com.fulcrologic.fulcro.application/app\",-1014694064),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-node\",67879378),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-element\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-element\",-1533905811),cljs.core.keyword_QMARK_,com.fulcrologic.guardrails.core._EQ__GT_,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-element\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-element\",-1533905811)], null);\r\n\r\ncom.fulcrologic.fulcro.algorithms.tx_processing.schedule_queue_processing_BANG_.cljs$core$IFn$_invoke$arity$2(app__$1,(0));\r\n\r\nvar result_60404 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(results,remote);\r\nvar handler_60405 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(dispatch,new cljs.core.Keyword(null,\"result-action\",\"result-action\",-1254630246));\r\nif(cljs.core.truth_(handler_60405)){\r\nvar env_60406 = com.fulcrologic.fulcro.algorithms.tx_processing.build_env.cljs$core$IFn$_invoke$arity$3(app__$1,tx_node,new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,\"dispatch\",\"dispatch\",1319337009),dispatch,new cljs.core.Keyword(null,\"transacted-ast\",\"transacted-ast\",-442737948),original_ast_node,new cljs.core.Keyword(null,\"mutation-ast\",\"mutation-ast\",1077959891),cljs.core.get.cljs$core$IFn$_invoke$arity$2(desired_ast_nodes,remote),new cljs.core.Keyword(null,\"transmitted-ast\",\"transmitted-ast\",1828931690),cljs.core.get.cljs$core$IFn$_invoke$arity$2(transmitted_ast_nodes,remote),new cljs.core.Keyword(null,\"result\",\"result\",1415092211),result_60404], null));\r\ntry{(handler_60405.cljs$core$IFn$_invoke$arity$1 ? handler_60405.cljs$core$IFn$_invoke$arity$1(env_60406) : handler_60405.call(null,env_60406));\r\n}catch (e59986){var e_60407 = e59986;\r\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$11(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.algorithms.tx-processing\",null,574,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay((function (){\r\nreturn new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [e_60407,\"The result-action mutation handler for mutation\",new cljs.core.Keyword(null,\"dispatch-key\",\"dispatch-key\",733619510).cljs$core$IFn$_invoke$arity$1(original_ast_node),\"threw an exception. See https://book.fulcrologic.com/#err-txp-mut-res-action-exc\"], null);\r\n}),null)),null,1449087274,null);\r\n}} else {\r\n}\r\n\r\nreturn cljs.core.update.cljs$core$IFn$_invoke$arity$4(tx_element,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"complete?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/complete?\",-311612706),cljs.core.conj,remote);\r\n});\r\n/**\r\n * Distribute results and mark the remotes for those elements as complete.\r\n */\r\ncom.fulcrologic.fulcro.algorithms.tx_processing.distribute_element_results_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$distribute_element_results_BANG_(app__$1,tx_node,p__59989){\r\nvar map__59990 = p__59989;\r\nvar map__59990__$1 = cljs.core.__destructure_map(map__59990);\r\nvar tx_element = map__59990__$1;\r\nvar results = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__59990__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"results\",\"com.fulcrologic.fulcro.algorithms.tx-processing/results\",-1876101852));\r\nvar complete_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__59990__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"complete?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/complete?\",-311612706));\r\nnew cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"app\",\"com.fulcrologic.fulcro.application/app\",-1014694064),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-node\",67879378),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-element\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-element\",-1533905811),com.fulcrologic.guardrails.core._EQ__GT_,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-element\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-element\",-1533905811)], null);\r\n\r\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (new_element,remote){\r\nif(cljs.core.truth_((complete_QMARK_.cljs$core$IFn$_invoke$arity$1 ? complete_QMARK_.cljs$core$IFn$_invoke$arity$1(remote) : complete_QMARK_.call(null,remote)))){\r\nreturn new_element;\r\n} else {\r\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.dispatch_result_BANG_(app__$1,tx_node,new_element,remote);\r\n}\r\n}),tx_element,cljs.core.keys(results));\r\n});\r\n/**\r\n * Walk all elements of the tx-node and call result dispatch handlers for any results that have\r\n *   not been distributed.\r\n */\r\ncom.fulcrologic.fulcro.algorithms.tx_processing.distribute_results_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$distribute_results_BANG_(app__$1,p__59991){\r\nvar map__59992 = p__59991;\r\nvar map__59992__$1 = cljs.core.__destructure_map(map__59992);\r\nvar tx_node = map__59992__$1;\r\nvar elements = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__59992__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330));\r\nnew cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"app\",\"com.fulcrologic.fulcro.application/app\",-1014694064),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-node\",67879378),com.fulcrologic.guardrails.core._EQ__GT_,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-node\",67879378)], null);\r\n\r\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(tx_node,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330),cljs.core.mapv.cljs$core$IFn$_invoke$arity$2((function (element){\r\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.distribute_element_results_BANG_(app__$1,tx_node,element);\r\n}),elements));\r\n});\r\n/**\r\n * Report all progress items to any registered progress dispatch and clear them from the tx-node.\r\n *   Returns the updated tx-node.\r\n */\r\ncom.fulcrologic.fulcro.algorithms.tx_processing.update_progress_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$update_progress_BANG_(app__$1,p__59993){\r\nvar map__59994 = p__59993;\r\nvar map__59994__$1 = cljs.core.__destructure_map(map__59994);\r\nvar tx_node = map__59994__$1;\r\nvar elements = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__59994__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330));\r\nnew cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"app\",\"com.fulcrologic.fulcro.application/app\",-1014694064),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-node\",67879378),com.fulcrologic.guardrails.core._EQ__GT_,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-node\",67879378)], null);\r\n\r\nvar get_env = (function com$fulcrologic$fulcro$algorithms$tx_processing$update_progress_BANG__$_get_env_STAR_(remote,progress){\r\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.build_env.cljs$core$IFn$_invoke$arity$3(app__$1,tx_node,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"remote\",\"remote\",-1593576576),remote,new cljs.core.Keyword(null,\"progress\",\"progress\",244323547),progress], null));\r\n});\r\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (node,p__60000){\r\nvar map__60001 = p__60000;\r\nvar map__60001__$1 = cljs.core.__destructure_map(map__60001);\r\nvar element = map__60001__$1;\r\nvar idx = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60001__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"idx\",\"com.fulcrologic.fulcro.algorithms.tx-processing/idx\",-1121773698));\r\nvar progress = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60001__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"progress\",\"com.fulcrologic.fulcro.algorithms.tx-processing/progress\",1012736442));\r\nvar dispatch = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60001__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"dispatch\",\"com.fulcrologic.fulcro.algorithms.tx-processing/dispatch\",-262239660));\r\nvar original_ast_node = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60001__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"original-ast-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/original-ast-node\",2080944477));\r\nvar seq__60002_60412 = cljs.core.seq(progress);\r\nvar chunk__60003_60413 = null;\r\nvar count__60004_60414 = (0);\r\nvar i__60005_60416 = (0);\r\nwhile(true){\r\nif((i__60005_60416 < count__60004_60414)){\r\nvar vec__60015_60418 = chunk__60003_60413.cljs$core$IIndexed$_nth$arity$2(null,i__60005_60416);\r\nvar remote_60419 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__60015_60418,(0),null);\r\nvar value_60420 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__60015_60418,(1),null);\r\nvar env_60421 = get_env(remote_60419,value_60420);\r\nvar action_60422 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(dispatch,new cljs.core.Keyword(null,\"progress-action\",\"progress-action\",1342780181));\r\nif(cljs.core.truth_(action_60422)){\r\ntry{(action_60422.cljs$core$IFn$_invoke$arity$1 ? action_60422.cljs$core$IFn$_invoke$arity$1(env_60421) : action_60422.call(null,env_60421));\r\n}catch (e60018){var e_60426 = e60018;\r\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$11(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.algorithms.tx-processing\",null,614,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay(((function (seq__60002_60412,chunk__60003_60413,count__60004_60414,i__60005_60416,e_60426,env_60421,action_60422,vec__60015_60418,remote_60419,value_60420,map__60001,map__60001__$1,element,idx,progress,dispatch,original_ast_node,get_env,map__59994,map__59994__$1,tx_node,elements){\r\nreturn (function (){\r\nreturn new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [e_60426,\"Progress action threw an exception in mutation\",new cljs.core.Keyword(null,\"dispatch-key\",\"dispatch-key\",733619510).cljs$core$IFn$_invoke$arity$1(original_ast_node),\"See https://book.fulcrologic.com/#err-txp-progress-action-exc\"], null);\r\n});})(seq__60002_60412,chunk__60003_60413,count__60004_60414,i__60005_60416,e_60426,env_60421,action_60422,vec__60015_60418,remote_60419,value_60420,map__60001,map__60001__$1,element,idx,progress,dispatch,original_ast_node,get_env,map__59994,map__59994__$1,tx_node,elements))\r\n,null)),null,1522236118,null);\r\n}} else {\r\n}\r\n\r\n\r\nvar G__60431 = seq__60002_60412;\r\nvar G__60432 = chunk__60003_60413;\r\nvar G__60433 = count__60004_60414;\r\nvar G__60434 = (i__60005_60416 + (1));\r\nseq__60002_60412 = G__60431;\r\nchunk__60003_60413 = G__60432;\r\ncount__60004_60414 = G__60433;\r\ni__60005_60416 = G__60434;\r\ncontinue;\r\n} else {\r\nvar temp__5753__auto___60435 = cljs.core.seq(seq__60002_60412);\r\nif(temp__5753__auto___60435){\r\nvar seq__60002_60436__$1 = temp__5753__auto___60435;\r\nif(cljs.core.chunked_seq_QMARK_(seq__60002_60436__$1)){\r\nvar c__4679__auto___60437 = cljs.core.chunk_first(seq__60002_60436__$1);\r\nvar G__60438 = cljs.core.chunk_rest(seq__60002_60436__$1);\r\nvar G__60439 = c__4679__auto___60437;\r\nvar G__60440 = cljs.core.count(c__4679__auto___60437);\r\nvar G__60441 = (0);\r\nseq__60002_60412 = G__60438;\r\nchunk__60003_60413 = G__60439;\r\ncount__60004_60414 = G__60440;\r\ni__60005_60416 = G__60441;\r\ncontinue;\r\n} else {\r\nvar vec__60019_60443 = cljs.core.first(seq__60002_60436__$1);\r\nvar remote_60444 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__60019_60443,(0),null);\r\nvar value_60445 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__60019_60443,(1),null);\r\nvar env_60446 = get_env(remote_60444,value_60445);\r\nvar action_60447 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(dispatch,new cljs.core.Keyword(null,\"progress-action\",\"progress-action\",1342780181));\r\nif(cljs.core.truth_(action_60447)){\r\ntry{(action_60447.cljs$core$IFn$_invoke$arity$1 ? action_60447.cljs$core$IFn$_invoke$arity$1(env_60446) : action_60447.call(null,env_60446));\r\n}catch (e60022){var e_60448 = e60022;\r\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$11(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.algorithms.tx-processing\",null,614,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay(((function (seq__60002_60412,chunk__60003_60413,count__60004_60414,i__60005_60416,e_60448,env_60446,action_60447,vec__60019_60443,remote_60444,value_60445,seq__60002_60436__$1,temp__5753__auto___60435,map__60001,map__60001__$1,element,idx,progress,dispatch,original_ast_node,get_env,map__59994,map__59994__$1,tx_node,elements){\r\nreturn (function (){\r\nreturn new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [e_60448,\"Progress action threw an exception in mutation\",new cljs.core.Keyword(null,\"dispatch-key\",\"dispatch-key\",733619510).cljs$core$IFn$_invoke$arity$1(original_ast_node),\"See https://book.fulcrologic.com/#err-txp-progress-action-exc\"], null);\r\n});})(seq__60002_60412,chunk__60003_60413,count__60004_60414,i__60005_60416,e_60448,env_60446,action_60447,vec__60019_60443,remote_60444,value_60445,seq__60002_60436__$1,temp__5753__auto___60435,map__60001,map__60001__$1,element,idx,progress,dispatch,original_ast_node,get_env,map__59994,map__59994__$1,tx_node,elements))\r\n,null)),null,258825193,null);\r\n}} else {\r\n}\r\n\r\n\r\nvar G__60449 = cljs.core.next(seq__60002_60436__$1);\r\nvar G__60450 = null;\r\nvar G__60451 = (0);\r\nvar G__60452 = (0);\r\nseq__60002_60412 = G__60449;\r\nchunk__60003_60413 = G__60450;\r\ncount__60004_60414 = G__60451;\r\ni__60005_60416 = G__60452;\r\ncontinue;\r\n}\r\n} else {\r\n}\r\n}\r\nbreak;\r\n}\r\n\r\nreturn cljs.core.update_in.cljs$core$IFn$_invoke$arity$4(node,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330),idx], null),cljs.core.dissoc,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"progress\",\"com.fulcrologic.fulcro.algorithms.tx-processing/progress\",1012736442));\r\n}),tx_node,elements);\r\n});\r\ncom.fulcrologic.fulcro.algorithms.tx_processing.process_tx_node_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$process_tx_node_BANG_(app__$1,p__60023){\r\nvar map__60024 = p__60023;\r\nvar map__60024__$1 = cljs.core.__destructure_map(map__60024);\r\nvar tx_node = map__60024__$1;\r\nvar options = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60024__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"options\",\"com.fulcrologic.fulcro.algorithms.tx-processing/options\",2016767420));\r\nnew cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"app\",\"com.fulcrologic.fulcro.application/app\",-1014694064),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-node\",67879378),com.fulcrologic.guardrails.core._EQ__GT_,cljs.spec.alpha.nilable_impl(new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-node\",67879378),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-node\",67879378),null)], null);\r\n\r\nvar optimistic_QMARK_ = cljs.core.boolean$(new cljs.core.Keyword(null,\"optimistic?\",\"optimistic?\",1829830869).cljs$core$IFn$_invoke$arity$1(options));\r\nif(com.fulcrologic.fulcro.algorithms.tx_processing.fully_complete_QMARK_(app__$1,tx_node)){\r\nreturn null;\r\n} else {\r\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.distribute_results_BANG_(app__$1,com.fulcrologic.fulcro.algorithms.tx_processing.update_progress_BANG_(app__$1,com.fulcrologic.fulcro.algorithms.tx_processing.queue_sends_BANG_(app__$1,(function (){var G__60025 = tx_node;\r\nvar G__60025__$1 = ((optimistic_QMARK_)?com.fulcrologic.fulcro.algorithms.tx_processing.run_actions_BANG_(app__$1,G__60025):G__60025);\r\nif((!(optimistic_QMARK_))){\r\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.advance_actions_BANG_(app__$1,G__60025__$1);\r\n} else {\r\nreturn G__60025__$1;\r\n}\r\n})())));\r\n}\r\n});\r\ncom.fulcrologic.fulcro.algorithms.tx_processing.requested_refreshes = (function com$fulcrologic$fulcro$algorithms$tx_processing$requested_refreshes(app__$1,queue){\r\nnew cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"app\",\"com.fulcrologic.fulcro.application/app\",-1014694064),cljs.spec.alpha.every_impl.cljs$core$IFn$_invoke$arity$4(new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-node\",67879378),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-node\",67879378),new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(\"cljs.spec.alpha\",\"kind-form\",\"cljs.spec.alpha/kind-form\",-1047104697),null,new cljs.core.Keyword(\"cljs.spec.alpha\",\"cpred\",\"cljs.spec.alpha/cpred\",-693471218),(function (G__60026){\r\nreturn cljs.core.coll_QMARK_(G__60026);\r\n}),new cljs.core.Keyword(\"cljs.spec.alpha\",\"conform-all\",\"cljs.spec.alpha/conform-all\",45201917),true,new cljs.core.Keyword(\"cljs.spec.alpha\",\"describe\",\"cljs.spec.alpha/describe\",1883026911),cljs.core.list(new cljs.core.Symbol(\"cljs.spec.alpha\",\"coll-of\",\"cljs.spec.alpha/coll-of\",1019430407,null),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-node\",67879378))], null),null),com.fulcrologic.guardrails.core._EQ__GT_,cljs.core.set_QMARK_], null);\r\n\r\n\r\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (outer_acc,tx_node){\r\nvar env = com.fulcrologic.fulcro.algorithms.tx_processing.build_env.cljs$core$IFn$_invoke$arity$2(app__$1,tx_node);\r\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (acc,element){\r\nvar map__60027 = element;\r\nvar map__60027__$1 = cljs.core.__destructure_map(map__60027);\r\nvar dispatch = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60027__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"dispatch\",\"com.fulcrologic.fulcro.algorithms.tx-processing/dispatch\",-262239660));\r\nvar refresh = new cljs.core.Keyword(null,\"refresh\",\"refresh\",1947415525).cljs$core$IFn$_invoke$arity$1(dispatch);\r\nif(cljs.core.truth_(refresh)){\r\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$2(acc,cljs.core.set((refresh.cljs$core$IFn$_invoke$arity$1 ? refresh.cljs$core$IFn$_invoke$arity$1(env) : refresh.call(null,env))));\r\n} else {\r\nreturn acc;\r\n}\r\n}),outer_acc,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330).cljs$core$IFn$_invoke$arity$1(tx_node));\r\n}),cljs.core.PersistentHashSet.EMPTY,queue);\r\n});\r\n/**\r\n * Given a tx node and the set of legal remotes: returns a set of remotes that are active on that node.\r\n */\r\ncom.fulcrologic.fulcro.algorithms.tx_processing.remotes_active_on_node = (function com$fulcrologic$fulcro$algorithms$tx_processing$remotes_active_on_node(p__60028,remotes){\r\nvar map__60029 = p__60028;\r\nvar map__60029__$1 = cljs.core.__destructure_map(map__60029);\r\nvar tx_node = map__60029__$1;\r\nvar elements = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60029__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330));\r\nnew cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx-node\",67879378),new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"remote-names\",\"com.fulcrologic.fulcro.application/remote-names\",1017468926),com.fulcrologic.guardrails.core._EQ__GT_,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"remote-names\",\"com.fulcrologic.fulcro.application/remote-names\",1017468926)], null);\r\n\r\nvar active_on_element = (function (p__60030){\r\nvar map__60031 = p__60030;\r\nvar map__60031__$1 = cljs.core.__destructure_map(map__60031);\r\nvar dispatch = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60031__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"dispatch\",\"com.fulcrologic.fulcro.algorithms.tx-processing/dispatch\",-262239660));\r\nvar complete_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60031__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"complete?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/complete?\",-311612706));\r\nvar remotes__$1 = cljs.core.set(remotes);\r\nreturn clojure.set.difference.cljs$core$IFn$_invoke$arity$2(clojure.set.intersection.cljs$core$IFn$_invoke$arity$2(remotes__$1,cljs.core.set(cljs.core.keys(dispatch))),complete_QMARK_);\r\n});\r\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (acc,ele){\r\nreturn clojure.set.union.cljs$core$IFn$_invoke$arity$2(acc,active_on_element(ele));\r\n}),cljs.core.PersistentHashSet.EMPTY,elements);\r\n});\r\n/**\r\n * Calculate which remotes still have network activity to do on the given active queue.\r\n */\r\ncom.fulcrologic.fulcro.algorithms.tx_processing.active_remotes = (function com$fulcrologic$fulcro$algorithms$tx_processing$active_remotes(queue,remotes){\r\nnew cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"active-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing/active-queue\",162531286),new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"remote-names\",\"com.fulcrologic.fulcro.application/remote-names\",1017468926),com.fulcrologic.guardrails.core._EQ__GT_,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"active-remotes\",\"com.fulcrologic.fulcro.application/active-remotes\",873903005)], null);\r\n\r\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (ra,n){\r\nreturn clojure.set.union.cljs$core$IFn$_invoke$arity$2(ra,com.fulcrologic.fulcro.algorithms.tx_processing.remotes_active_on_node(n,remotes));\r\n}),cljs.core.PersistentHashSet.EMPTY,queue);\r\n});\r\n/**\r\n * Run through the active queue and do a processing step.\r\n */\r\ncom.fulcrologic.fulcro.algorithms.tx_processing.process_queue_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$process_queue_BANG_(p__60032){\r\nvar map__60033 = p__60032;\r\nvar map__60033__$1 = cljs.core.__destructure_map(map__60033);\r\nvar app__$1 = map__60033__$1;\r\nvar state_atom = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60033__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"state-atom\",\"com.fulcrologic.fulcro.application/state-atom\",648128366));\r\nvar runtime_atom = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60033__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"runtime-atom\",\"com.fulcrologic.fulcro.application/runtime-atom\",-1167397772));\r\nnew cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"app\",\"com.fulcrologic.fulcro.application/app\",-1014694064),com.fulcrologic.guardrails.core._EQ__GT_,cljs.core.any_QMARK_], null);\r\n\r\nvar new_queue = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function com$fulcrologic$fulcro$algorithms$tx_processing$process_queue_BANG__$__STAR_pstep(new_queue,n){\r\nvar temp__5751__auto__ = com.fulcrologic.fulcro.algorithms.tx_processing.process_tx_node_BANG_(app__$1,n);\r\nif(cljs.core.truth_(temp__5751__auto__)){\r\nvar new_node = temp__5751__auto__;\r\nreturn cljs.core.conj.cljs$core$IFn$_invoke$arity$2(new_queue,new_node);\r\n} else {\r\nreturn new_queue;\r\n}\r\n}),cljs.core.PersistentVector.EMPTY,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"active-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing/active-queue\",162531286).cljs$core$IFn$_invoke$arity$1(cljs.core.deref(runtime_atom)));\r\nvar accumulate = (function (r,items){\r\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.set(r),items);\r\n});\r\nvar remotes = com.fulcrologic.fulcro.algorithms.tx_processing.app__GT_remote_names(app__$1);\r\nvar schedule_render_BANG_ = com.fulcrologic.fulcro.algorithms.lookup.app_algorithm(app__$1,new cljs.core.Keyword(null,\"schedule-render!\",\"schedule-render!\",2095050350));\r\nvar explicit_refresh = com.fulcrologic.fulcro.algorithms.tx_processing.requested_refreshes(app__$1,new_queue);\r\nvar remotes_active_QMARK_ = com.fulcrologic.fulcro.algorithms.tx_processing.active_remotes(new_queue,remotes);\r\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(state_atom,cljs.core.assoc,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"active-remotes\",\"com.fulcrologic.fulcro.application/active-remotes\",873903005),remotes_active_QMARK_);\r\n\r\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(runtime_atom,cljs.core.assoc,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"active-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing/active-queue\",162531286),new_queue);\r\n\r\nif(cljs.core.seq(explicit_refresh)){\r\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$variadic(runtime_atom,cljs.core.update,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"to-refresh\",\"com.fulcrologic.fulcro.application/to-refresh\",-967758829),accumulate,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([explicit_refresh], 0));\r\n} else {\r\n}\r\n\r\n(schedule_render_BANG_.cljs$core$IFn$_invoke$arity$1 ? schedule_render_BANG_.cljs$core$IFn$_invoke$arity$1(app__$1) : schedule_render_BANG_.call(null,app__$1));\r\n\r\nreturn null;\r\n});\r\n/**\r\n * Run the optimistic action(s) of a transaction synchronously. It is primarily used to deal with controlled inputs, since they\r\n * have issues working asynchronously, so ideally the mutation in question will *not* have remote action (though they\r\n * are allowed to).\r\n * \r\n * NOTE: any *remote* behaviors of `tx` will *still be async*.\r\n * \r\n * This function:\r\n * \r\n * * Runs the optimistic side of the mutation(s)\r\n * * IF (and only if) one or more of the mutations has more sections than just an `action` then it submits the mutation to the normal transaction queue,\r\n *   but with the optimistic part already done.\r\n * * This functions *does not* queue a render refresh (though if the normal transaction queue is updated, it will queue tx remote processing, which will trigger a UI refresh).\r\n * \r\n * If you pass it an on-screen instance that has a query and ident, then this function tunnel updated UI props synchronously to that\r\n * component so it can refresh immediately and avoid DOM input issues.\r\n * \r\n * Returns the new component props or the final state map if no component was used in the transaction.\r\n * \r\n */\r\ncom.fulcrologic.fulcro.algorithms.tx_processing.transact_sync_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$transact_sync_BANG_(app__$1,tx,p__60035){\r\nvar map__60036 = p__60035;\r\nvar map__60036__$1 = cljs.core.__destructure_map(map__60036);\r\nvar options = map__60036__$1;\r\nvar component = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60036__$1,new cljs.core.Keyword(null,\"component\",\"component\",1555936782));\r\nvar ref = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60036__$1,new cljs.core.Keyword(null,\"ref\",\"ref\",1289896967));\r\nvar mutation_nodes = new cljs.core.Keyword(null,\"children\",\"children\",-940561982).cljs$core$IFn$_invoke$arity$1(edn_query_language.core.query__GT_ast(tx));\r\nvar ast_node__GT_operation = cljs.core.zipmap(mutation_nodes,cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (ast_node){\r\nreturn com.fulcrologic.fulcro.mutations.mutate.cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"ast\",\"ast\",-860334068),ast_node], null));\r\n}),mutation_nodes));\r\nvar map__60037 = cljs.core.group_by((function (p1__60034_SHARP_){\r\nreturn cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"action\",\"action\",-811238024),null,new cljs.core.Keyword(null,\"result-action\",\"result-action\",-1254630246),null], null), null),cljs.core.set(cljs.core.keys((ast_node__GT_operation.cljs$core$IFn$_invoke$arity$1 ? ast_node__GT_operation.cljs$core$IFn$_invoke$arity$1(p1__60034_SHARP_) : ast_node__GT_operation.call(null,p1__60034_SHARP_)))));\r\n}),mutation_nodes);\r\nvar map__60037__$1 = cljs.core.__destructure_map(map__60037);\r\nvar optimistic = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60037__$1,true);\r\nvar mixed = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60037__$1,false);\r\nvar optimistic_tx_node = ((cljs.core.seq(optimistic))?(function (){var node = com.fulcrologic.fulcro.algorithms.tx_processing.tx_node.cljs$core$IFn$_invoke$arity$2(edn_query_language.core.ast__GT_query(new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),new cljs.core.Keyword(null,\"root\",\"root\",-448657453),new cljs.core.Keyword(null,\"children\",\"children\",-940561982),optimistic], null)),options);\r\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.dispatch_elements(node,com.fulcrologic.fulcro.algorithms.tx_processing.build_env.cljs$core$IFn$_invoke$arity$2(app__$1,node),com.fulcrologic.fulcro.mutations.mutate);\r\n})():null);\r\nvar mixed_tx_node = ((cljs.core.seq(mixed))?(function (){var node = com.fulcrologic.fulcro.algorithms.tx_processing.tx_node.cljs$core$IFn$_invoke$arity$2(edn_query_language.core.ast__GT_query(new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),new cljs.core.Keyword(null,\"root\",\"root\",-448657453),new cljs.core.Keyword(null,\"children\",\"children\",-940561982),mixed], null)),options);\r\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.dispatch_elements(node,com.fulcrologic.fulcro.algorithms.tx_processing.build_env.cljs$core$IFn$_invoke$arity$2(app__$1,node),com.fulcrologic.fulcro.mutations.mutate);\r\n})():null);\r\nvar resulting_node_id = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(null);\r\nif(cljs.core.truth_(optimistic_tx_node)){\r\ncom.fulcrologic.fulcro.algorithms.tx_processing.run_actions_BANG_(app__$1,optimistic_tx_node);\r\n} else {\r\n}\r\n\r\nif(cljs.core.truth_(mixed_tx_node)){\r\nvar node_60472 = com.fulcrologic.fulcro.algorithms.tx_processing.run_actions_BANG_(app__$1,mixed_tx_node);\r\nvar runtime_atom_60473 = new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"runtime-atom\",\"com.fulcrologic.fulcro.application/runtime-atom\",-1167397772).cljs$core$IFn$_invoke$arity$1(app__$1);\r\ncljs.core.reset_BANG_(resulting_node_id,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423).cljs$core$IFn$_invoke$arity$1(node_60472));\r\n\r\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$variadic(runtime_atom_60473,cljs.core.update,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"active-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing/active-queue\",162531286),cljs.core.conj,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([node_60472], 0));\r\n\r\ncom.fulcrologic.fulcro.algorithms.tx_processing.schedule_queue_processing_BANG_.cljs$core$IFn$_invoke$arity$2(app__$1,(20));\r\n} else {\r\n}\r\n\r\nif(cljs.core.truth_((function (){var and__4251__auto__ = component;\r\nif(cljs.core.truth_(and__4251__auto__)){\r\nvar and__4251__auto____$1 = (com.fulcrologic.fulcro.components.component_QMARK_.cljs$core$IFn$_invoke$arity$1 ? com.fulcrologic.fulcro.components.component_QMARK_.cljs$core$IFn$_invoke$arity$1(component) : com.fulcrologic.fulcro.components.component_QMARK_.call(null,component));\r\nif(cljs.core.truth_(and__4251__auto____$1)){\r\nreturn com.fulcrologic.fulcro.components.has_ident_QMARK_(component);\r\n} else {\r\nreturn and__4251__auto____$1;\r\n}\r\n} else {\r\nreturn and__4251__auto__;\r\n}\r\n})())){\r\ncom.fulcrologic.fulcro.components.refresh_component_BANG_(component);\r\n} else {\r\nif(cljs.core.truth_(ref)){\r\nvar r_BANG__60478 = com.fulcrologic.fulcro.algorithms.lookup.app_algorithm(app__$1,new cljs.core.Keyword(null,\"render!\",\"render!\",-1848688504));\r\nif(cljs.core.truth_(r_BANG__60478)){\r\n(r_BANG__60478.cljs$core$IFn$_invoke$arity$1 ? r_BANG__60478.cljs$core$IFn$_invoke$arity$1(app__$1) : r_BANG__60478.call(null,app__$1));\r\n} else {\r\n}\r\n} else {\r\nif(cljs.core.truth_(goog.DEBUG)){\r\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$11(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"warn\",\"warn\",-436710552),\"com.fulcrologic.fulcro.algorithms.tx-processing\",null,744,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay((function (){\r\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"Synchronous transaction was submitted on the app or a component without an ident. No UI refresh will happen. See https://book.fulcrologic.com/#warn-tx-missing-ident\"], null);\r\n}),null)),null,-1844106977,null);\r\n} else {\r\n}\r\n\r\n}\r\n}\r\n\r\nreturn cljs.core.deref(resulting_node_id);\r\n});\r\n/**\r\n * Default (Fulcro-2 compatible) transaction submission. The options map can contain any additional options\r\n *   that might be used by the transaction processing (or UI refresh).\r\n * \r\n *   Some that may be supported (depending on application settings):\r\n * \r\n *   - `:optimistic?` - boolean. Should the transaction be processed optimistically?\r\n *   - `:ref` - ident. The component ident to include in the transaction env.\r\n *   - `:component` - React element. The instance of the component that should appear in the transaction env.\r\n *   - `:refresh` - Vector containing idents (of components) and keywords (of props). Things that have changed and should be re-rendered\r\n *  on screen. Only necessary when the underlying rendering algorithm won't auto-detect, such as when UI is derived from the\r\n *  state of other components or outside of the directly queried props. Interpretation depends on the renderer selected:\r\n *  The ident-optimized render treats these as \"extras\".\r\n *   - `:only-refresh` - Vector of idents/keywords.  If the underlying rendering configured algorithm supports it: The\r\n *  components using these are the *only* things that will be refreshed in the UI.\r\n *  This can be used to avoid the overhead of looking for stale data when you know exactly what\r\n *  you want to refresh on screen as an extra optimization. Idents are *not* checked against queries.\r\n * \r\n *   WARNING: `:only-refresh` can cause missed refreshes because rendering is debounced. If you are using this for\r\n *         rapid-fire updates like drag-and-drop it is recommended that on the trailing edge (e.g. drop) of your sequence you\r\n *         force a normal refresh via `app/render!`.\r\n * \r\n *   If the `options` include `:ref` (which comp/transact! sets), then it will be auto-included on the `:refresh` list.\r\n * \r\n *   NOTE: Fulcro 2 'follow-on reads' are supported and are added to the `:refresh` entries. Your choice of rendering\r\n *   algorithm will influence their necessity.\r\n * \r\n *   Returns the transaction ID of the submitted transaction.\r\n *   \r\n */\r\ncom.fulcrologic.fulcro.algorithms.tx_processing.default_tx_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$default_tx_BANG_(var_args){\r\nvar G__60040 = arguments.length;\r\nswitch (G__60040) {\r\ncase 2:\r\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.default_tx_BANG_.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\r\n\r\nbreak;\r\ncase 3:\r\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.default_tx_BANG_.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\r\n\r\nbreak;\r\ndefault:\r\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\r\n\r\n}\r\n});\r\n\r\n(com.fulcrologic.fulcro.algorithms.tx_processing.default_tx_BANG_.cljs$core$IFn$_invoke$arity$2 = (function (app__$1,tx){\r\nnew cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"app\",\"com.fulcrologic.fulcro.application/app\",-1014694064),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx\",-1165026763),com.fulcrologic.guardrails.core._EQ__GT_,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423)], null);\r\n\r\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.default_tx_BANG_.cljs$core$IFn$_invoke$arity$3(app__$1,tx,cljs.core.PersistentArrayMap.EMPTY);\r\n}));\r\n\r\n(com.fulcrologic.fulcro.algorithms.tx_processing.default_tx_BANG_.cljs$core$IFn$_invoke$arity$3 = (function (p__60041,tx,p__60042){\r\nvar map__60043 = p__60041;\r\nvar map__60043__$1 = cljs.core.__destructure_map(map__60043);\r\nvar app__$1 = map__60043__$1;\r\nvar runtime_atom = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60043__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"runtime-atom\",\"com.fulcrologic.fulcro.application/runtime-atom\",-1167397772));\r\nvar map__60044 = p__60042;\r\nvar map__60044__$1 = cljs.core.__destructure_map(map__60044);\r\nvar options = map__60044__$1;\r\nvar synchronous_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60044__$1,new cljs.core.Keyword(null,\"synchronous?\",\"synchronous?\",1705588391));\r\nnew cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"app\",\"com.fulcrologic.fulcro.application/app\",-1014694064),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"tx\",\"com.fulcrologic.fulcro.algorithms.tx-processing/tx\",-1165026763),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"options\",\"com.fulcrologic.fulcro.algorithms.tx-processing/options\",2016767420),com.fulcrologic.guardrails.core._EQ__GT_,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423)], null);\r\n\r\nif(cljs.core.truth_(synchronous_QMARK_)){\r\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.transact_sync_BANG_(app__$1,tx,options);\r\n} else {\r\ncom.fulcrologic.fulcro.algorithms.tx_processing.schedule_activation_BANG_.cljs$core$IFn$_invoke$arity$1(app__$1);\r\n\r\nvar map__60045 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"optimistic?\",\"optimistic?\",1829830869),true], null),options], 0));\r\nvar map__60045__$1 = cljs.core.__destructure_map(map__60045);\r\nvar options__$1 = map__60045__$1;\r\nvar refresh = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60045__$1,new cljs.core.Keyword(null,\"refresh\",\"refresh\",1947415525));\r\nvar only_refresh = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60045__$1,new cljs.core.Keyword(null,\"only-refresh\",\"only-refresh\",548241249));\r\nvar ref = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60045__$1,new cljs.core.Keyword(null,\"ref\",\"ref\",1289896967));\r\nvar follow_on_reads = cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentHashSet.EMPTY,cljs.core.filter.cljs$core$IFn$_invoke$arity$2((function (p1__60038_SHARP_){\r\nreturn (((p1__60038_SHARP_ instanceof cljs.core.Keyword)) || (edn_query_language.core.ident_QMARK_(p1__60038_SHARP_)));\r\n}),tx));\r\nvar node = com.fulcrologic.fulcro.algorithms.tx_processing.tx_node.cljs$core$IFn$_invoke$arity$2(tx,options__$1);\r\nvar accumulate = (function (r,items){\r\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.set(r),items);\r\n});\r\nvar refresh__$1 = (function (){var G__60046 = cljs.core.set(refresh);\r\nvar G__60046__$1 = ((cljs.core.seq(follow_on_reads))?cljs.core.into.cljs$core$IFn$_invoke$arity$2(G__60046,follow_on_reads):G__60046);\r\nif(cljs.core.truth_(ref)){\r\nreturn cljs.core.conj.cljs$core$IFn$_invoke$arity$2(G__60046__$1,ref);\r\n} else {\r\nreturn G__60046__$1;\r\n}\r\n})();\r\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(runtime_atom,(function (s){\r\nvar G__60047 = cljs.core.update.cljs$core$IFn$_invoke$arity$4(s,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"submission-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing/submission-queue\",-175778154),(function (v,n){\r\nreturn cljs.core.conj.cljs$core$IFn$_invoke$arity$2(cljs.core.vec(v),n);\r\n}),node);\r\nvar G__60047__$1 = ((cljs.core.seq(refresh__$1))?cljs.core.update.cljs$core$IFn$_invoke$arity$4(G__60047,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"to-refresh\",\"com.fulcrologic.fulcro.application/to-refresh\",-967758829),accumulate,refresh__$1):G__60047);\r\nif(cljs.core.seq(only_refresh)){\r\nreturn cljs.core.update.cljs$core$IFn$_invoke$arity$4(G__60047__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"only-refresh\",\"com.fulcrologic.fulcro.application/only-refresh\",1300408206),accumulate,only_refresh);\r\n} else {\r\nreturn G__60047__$1;\r\n}\r\n}));\r\n\r\nreturn new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423).cljs$core$IFn$_invoke$arity$1(node);\r\n}\r\n}));\r\n\r\n(com.fulcrologic.fulcro.algorithms.tx_processing.default_tx_BANG_.cljs$lang$maxFixedArity = 3);\r\n\r\n/**\r\n * Abort any elements in the given send-queue that have the given abort id.\r\n * \r\n *   Aborting will cause the network to abort (which will report a result), or if the item is not yet active a\r\n *   virtual result will still be sent for that node.\r\n * \r\n *   Returns a new send-queue that no longer contains the aborted nodes.\r\n */\r\ncom.fulcrologic.fulcro.algorithms.tx_processing.abort_elements_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$abort_elements_BANG_(p__60048,send_queue,abort_id){\r\nvar map__60049 = p__60048;\r\nvar map__60049__$1 = cljs.core.__destructure_map(map__60049);\r\nvar remote = map__60049__$1;\r\nvar abort_BANG_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60049__$1,new cljs.core.Keyword(null,\"abort!\",\"abort!\",-220883953));\r\nif(cljs.core.truth_(abort_BANG_)){\r\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (result,p__60050){\r\nvar map__60051 = p__60050;\r\nvar map__60051__$1 = cljs.core.__destructure_map(map__60051);\r\nvar send_node = map__60051__$1;\r\nvar active_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60051__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"active?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/active?\",966679517));\r\nvar options = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60051__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"options\",\"com.fulcrologic.fulcro.algorithms.tx-processing/options\",2016767420));\r\nvar result_handler = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60051__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"result-handler\",\"com.fulcrologic.fulcro.algorithms.tx-processing/result-handler\",-114902209));\r\nvar aid = (function (){var or__4253__auto__ = new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"abort-id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/abort-id\",2068829184).cljs$core$IFn$_invoke$arity$1(options);\r\nif(cljs.core.truth_(or__4253__auto__)){\r\nreturn or__4253__auto__;\r\n} else {\r\nreturn new cljs.core.Keyword(null,\"abort-id\",\"abort-id\",1559937819).cljs$core$IFn$_invoke$arity$1(options);\r\n}\r\n})();\r\nif(cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(aid,abort_id)){\r\nreturn cljs.core.conj.cljs$core$IFn$_invoke$arity$2(result,send_node);\r\n} else {\r\nif(cljs.core.truth_(active_QMARK_)){\r\n(abort_BANG_.cljs$core$IFn$_invoke$arity$2 ? abort_BANG_.cljs$core$IFn$_invoke$arity$2(remote,abort_id) : abort_BANG_.call(null,remote,abort_id));\r\n\r\nreturn result;\r\n} else {\r\nvar G__60052_60488 = new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"status-text\",\"status-text\",-1834235478),\"Cancelled\",new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"aborted?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/aborted?\",2086149958),true], null);\r\n(result_handler.cljs$core$IFn$_invoke$arity$1 ? result_handler.cljs$core$IFn$_invoke$arity$1(G__60052_60488) : result_handler.call(null,G__60052_60488));\r\n\r\nreturn result;\r\n\r\n}\r\n}\r\n}),cljs.core.PersistentVector.EMPTY,send_queue);\r\n} else {\r\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$11(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.algorithms.tx-processing\",null,822,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay((function (){\r\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"Cannot abort network requests. The remote has no abort support! See https://book.fulcrologic.com/#err-txp-cant-abort\"], null);\r\n}),null)),null,-502173782,null);\r\n\r\nreturn send_queue;\r\n}\r\n});\r\n/**\r\n * Implementation of abort when using this tx processing\r\n */\r\ncom.fulcrologic.fulcro.algorithms.tx_processing.abort_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$abort_BANG_(app__$1,abort_id){\r\nvar map__60053 = com.fulcrologic.fulcro.components.any__GT_app(app__$1);\r\nvar map__60053__$1 = cljs.core.__destructure_map(map__60053);\r\nvar runtime_atom = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60053__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"runtime-atom\",\"com.fulcrologic.fulcro.application/runtime-atom\",-1167397772));\r\nvar runtime_state = cljs.core.deref(runtime_atom);\r\nvar map__60054 = runtime_state;\r\nvar map__60054__$1 = cljs.core.__destructure_map(map__60054);\r\nvar remotes = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60054__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"remotes\",\"com.fulcrologic.fulcro.application/remotes\",1823703517));\r\nvar send_queues = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60054__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-queues\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-queues\",-1776480807));\r\nvar remote_names = cljs.core.keys(send_queues);\r\nvar new_send_queues = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (result,remote_name){\r\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(result,remote_name,com.fulcrologic.fulcro.algorithms.tx_processing.abort_elements_BANG_(cljs.core.get.cljs$core$IFn$_invoke$arity$2(remotes,remote_name),cljs.core.get.cljs$core$IFn$_invoke$arity$2(send_queues,remote_name),abort_id));\r\n}),cljs.core.PersistentArrayMap.EMPTY,remote_names);\r\nreturn cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(runtime_atom,cljs.core.assoc,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-queues\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-queues\",-1776480807),new_send_queues);\r\n});\r\n/**\r\n * Cause everything in the active network queue for remote to be cancelled. Any result that (finally) appears for aborted\r\n *   items will be ignored. This will cause a hard error to be \"received\" as the result for everything\r\n *   that is in the send queue of the given remote.\r\n * \r\n *   This function is mainly meant for use in development mode when dealing with a buggy remote implementation.\r\n */\r\ncom.fulcrologic.fulcro.algorithms.tx_processing.abort_remote_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$abort_remote_BANG_(app_ish,remote){\r\nvar app__$1 = com.fulcrologic.fulcro.components.any__GT_app(app_ish);\r\nvar map__60055 = com.fulcrologic.fulcro.components.any__GT_app(app__$1);\r\nvar map__60055__$1 = cljs.core.__destructure_map(map__60055);\r\nvar state_atom = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60055__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"state-atom\",\"com.fulcrologic.fulcro.application/state-atom\",648128366));\r\nvar runtime_atom = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60055__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"runtime-atom\",\"com.fulcrologic.fulcro.application/runtime-atom\",-1167397772));\r\nvar map__60056 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(cljs.core.deref(runtime_atom),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"remotes\",\"com.fulcrologic.fulcro.application/remotes\",1823703517),remote], null));\r\nvar map__60056__$1 = cljs.core.__destructure_map(map__60056);\r\nvar the_remote = map__60056__$1;\r\nvar abort_network_BANG_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60056__$1,new cljs.core.Keyword(null,\"abort!\",\"abort!\",-220883953));\r\nvar old_send_queue = cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(cljs.core.deref(runtime_atom),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-queues\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-queues\",-1776480807),remote], null));\r\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(runtime_atom,cljs.core.assoc_in,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-queues\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-queues\",-1776480807),remote], null),cljs.core.PersistentVector.EMPTY);\r\n\r\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$variadic(state_atom,cljs.core.update,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"active-remotes\",\"com.fulcrologic.fulcro.application/active-remotes\",873903005),cljs.core.fnil.cljs$core$IFn$_invoke$arity$2(cljs.core.disj,cljs.core.PersistentHashSet.EMPTY),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([remote], 0));\r\n\r\nvar seq__60057 = cljs.core.seq(old_send_queue);\r\nvar chunk__60062 = null;\r\nvar count__60063 = (0);\r\nvar i__60064 = (0);\r\nwhile(true){\r\nif((i__60064 < count__60063)){\r\nvar map__60115 = chunk__60062.cljs$core$IIndexed$_nth$arity$2(null,i__60064);\r\nvar map__60115__$1 = cljs.core.__destructure_map(map__60115);\r\nvar send_node = map__60115__$1;\r\nvar active_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60115__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"active?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/active?\",966679517));\r\nvar options = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60115__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"options\",\"com.fulcrologic.fulcro.algorithms.tx-processing/options\",2016767420));\r\nvar result_handler = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60115__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"result-handler\",\"com.fulcrologic.fulcro.algorithms.tx-processing/result-handler\",-114902209));\r\nvar seq__60065_60494 = cljs.core.seq((function (){var or__4253__auto__ = new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"abort-id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/abort-id\",2068829184).cljs$core$IFn$_invoke$arity$1(options);\r\nif(cljs.core.truth_(or__4253__auto__)){\r\nreturn or__4253__auto__;\r\n} else {\r\nreturn new cljs.core.Keyword(null,\"abort-id\",\"abort-id\",1559937819).cljs$core$IFn$_invoke$arity$1(options);\r\n}\r\n})());\r\nvar chunk__60066_60495 = null;\r\nvar count__60067_60496 = (0);\r\nvar i__60068_60497 = (0);\r\nwhile(true){\r\nif((i__60068_60497 < count__60067_60496)){\r\nvar aid_60498 = chunk__60066_60495.cljs$core$IIndexed$_nth$arity$2(null,i__60068_60497);\r\ntry{if(cljs.core.truth_(active_QMARK_)){\r\nif(cljs.core.truth_(abort_network_BANG_)){\r\n(abort_network_BANG_.cljs$core$IFn$_invoke$arity$2 ? abort_network_BANG_.cljs$core$IFn$_invoke$arity$2(the_remote,aid_60498) : abort_network_BANG_.call(null,the_remote,aid_60498));\r\n} else {\r\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$11(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"warn\",\"warn\",-436710552),\"com.fulcrologic.fulcro.algorithms.tx-processing\",null,862,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay(((function (seq__60065_60494,chunk__60066_60495,count__60067_60496,i__60068_60497,seq__60057,chunk__60062,count__60063,i__60064,aid_60498,map__60115,map__60115__$1,send_node,active_QMARK_,options,result_handler,app__$1,map__60055,map__60055__$1,state_atom,runtime_atom,map__60056,map__60056__$1,the_remote,abort_network_BANG_,old_send_queue){\r\nreturn (function (){\r\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"Remote does not support abort. Clearing the queue, but a spurious result may still appear. See https://book.fulcrologic.com/#warn-tx-remote-abort-not-supported\"], null);\r\n});})(seq__60065_60494,chunk__60066_60495,count__60067_60496,i__60068_60497,seq__60057,chunk__60062,count__60063,i__60064,aid_60498,map__60115,map__60115__$1,send_node,active_QMARK_,options,result_handler,app__$1,map__60055,map__60055__$1,state_atom,runtime_atom,map__60056,map__60056__$1,the_remote,abort_network_BANG_,old_send_queue))\r\n,null)),null,-1776266106,null);\r\n}\r\n} else {\r\n}\r\n\r\nvar G__60130_60499 = new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,\"status-code\",\"status-code\",-1060410130),(500),new cljs.core.Keyword(null,\"body\",\"body\",-2049205669),cljs.core.PersistentArrayMap.EMPTY,new cljs.core.Keyword(null,\"status-text\",\"status-text\",-1834235478),\"Globally Aborted\",new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"aborted?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/aborted?\",2086149958),true], null);\r\n(result_handler.cljs$core$IFn$_invoke$arity$1 ? result_handler.cljs$core$IFn$_invoke$arity$1(G__60130_60499) : result_handler.call(null,G__60130_60499));\r\n}catch (e60124){var e_60501 = e60124;\r\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$11(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.algorithms.tx-processing\",null,868,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay(((function (seq__60065_60494,chunk__60066_60495,count__60067_60496,i__60068_60497,seq__60057,chunk__60062,count__60063,i__60064,e_60501,aid_60498,map__60115,map__60115__$1,send_node,active_QMARK_,options,result_handler,app__$1,map__60055,map__60055__$1,state_atom,runtime_atom,map__60056,map__60056__$1,the_remote,abort_network_BANG_,old_send_queue){\r\nreturn (function (){\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [e_60501,\"Failed to abort send node. See https://book.fulcrologic.com/#err-txp-abort-failed\"], null);\r\n});})(seq__60065_60494,chunk__60066_60495,count__60067_60496,i__60068_60497,seq__60057,chunk__60062,count__60063,i__60064,e_60501,aid_60498,map__60115,map__60115__$1,send_node,active_QMARK_,options,result_handler,app__$1,map__60055,map__60055__$1,state_atom,runtime_atom,map__60056,map__60056__$1,the_remote,abort_network_BANG_,old_send_queue))\r\n,null)),null,229846338,null);\r\n}\r\n\r\nvar G__60502 = seq__60065_60494;\r\nvar G__60503 = chunk__60066_60495;\r\nvar G__60504 = count__60067_60496;\r\nvar G__60505 = (i__60068_60497 + (1));\r\nseq__60065_60494 = G__60502;\r\nchunk__60066_60495 = G__60503;\r\ncount__60067_60496 = G__60504;\r\ni__60068_60497 = G__60505;\r\ncontinue;\r\n} else {\r\nvar temp__5753__auto___60506 = cljs.core.seq(seq__60065_60494);\r\nif(temp__5753__auto___60506){\r\nvar seq__60065_60507__$1 = temp__5753__auto___60506;\r\nif(cljs.core.chunked_seq_QMARK_(seq__60065_60507__$1)){\r\nvar c__4679__auto___60508 = cljs.core.chunk_first(seq__60065_60507__$1);\r\nvar G__60509 = cljs.core.chunk_rest(seq__60065_60507__$1);\r\nvar G__60510 = c__4679__auto___60508;\r\nvar G__60511 = cljs.core.count(c__4679__auto___60508);\r\nvar G__60512 = (0);\r\nseq__60065_60494 = G__60509;\r\nchunk__60066_60495 = G__60510;\r\ncount__60067_60496 = G__60511;\r\ni__60068_60497 = G__60512;\r\ncontinue;\r\n} else {\r\nvar aid_60513 = cljs.core.first(seq__60065_60507__$1);\r\ntry{if(cljs.core.truth_(active_QMARK_)){\r\nif(cljs.core.truth_(abort_network_BANG_)){\r\n(abort_network_BANG_.cljs$core$IFn$_invoke$arity$2 ? abort_network_BANG_.cljs$core$IFn$_invoke$arity$2(the_remote,aid_60513) : abort_network_BANG_.call(null,the_remote,aid_60513));\r\n} else {\r\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$11(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"warn\",\"warn\",-436710552),\"com.fulcrologic.fulcro.algorithms.tx-processing\",null,862,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay(((function (seq__60065_60494,chunk__60066_60495,count__60067_60496,i__60068_60497,seq__60057,chunk__60062,count__60063,i__60064,aid_60513,seq__60065_60507__$1,temp__5753__auto___60506,map__60115,map__60115__$1,send_node,active_QMARK_,options,result_handler,app__$1,map__60055,map__60055__$1,state_atom,runtime_atom,map__60056,map__60056__$1,the_remote,abort_network_BANG_,old_send_queue){\r\nreturn (function (){\r\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"Remote does not support abort. Clearing the queue, but a spurious result may still appear. See https://book.fulcrologic.com/#warn-tx-remote-abort-not-supported\"], null);\r\n});})(seq__60065_60494,chunk__60066_60495,count__60067_60496,i__60068_60497,seq__60057,chunk__60062,count__60063,i__60064,aid_60513,seq__60065_60507__$1,temp__5753__auto___60506,map__60115,map__60115__$1,send_node,active_QMARK_,options,result_handler,app__$1,map__60055,map__60055__$1,state_atom,runtime_atom,map__60056,map__60056__$1,the_remote,abort_network_BANG_,old_send_queue))\r\n,null)),null,543214406,null);\r\n}\r\n} else {\r\n}\r\n\r\nvar G__60132_60516 = new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,\"status-code\",\"status-code\",-1060410130),(500),new cljs.core.Keyword(null,\"body\",\"body\",-2049205669),cljs.core.PersistentArrayMap.EMPTY,new cljs.core.Keyword(null,\"status-text\",\"status-text\",-1834235478),\"Globally Aborted\",new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"aborted?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/aborted?\",2086149958),true], null);\r\n(result_handler.cljs$core$IFn$_invoke$arity$1 ? result_handler.cljs$core$IFn$_invoke$arity$1(G__60132_60516) : result_handler.call(null,G__60132_60516));\r\n}catch (e60131){var e_60517 = e60131;\r\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$11(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.algorithms.tx-processing\",null,868,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay(((function (seq__60065_60494,chunk__60066_60495,count__60067_60496,i__60068_60497,seq__60057,chunk__60062,count__60063,i__60064,e_60517,aid_60513,seq__60065_60507__$1,temp__5753__auto___60506,map__60115,map__60115__$1,send_node,active_QMARK_,options,result_handler,app__$1,map__60055,map__60055__$1,state_atom,runtime_atom,map__60056,map__60056__$1,the_remote,abort_network_BANG_,old_send_queue){\r\nreturn (function (){\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [e_60517,\"Failed to abort send node. See https://book.fulcrologic.com/#err-txp-abort-failed\"], null);\r\n});})(seq__60065_60494,chunk__60066_60495,count__60067_60496,i__60068_60497,seq__60057,chunk__60062,count__60063,i__60064,e_60517,aid_60513,seq__60065_60507__$1,temp__5753__auto___60506,map__60115,map__60115__$1,send_node,active_QMARK_,options,result_handler,app__$1,map__60055,map__60055__$1,state_atom,runtime_atom,map__60056,map__60056__$1,the_remote,abort_network_BANG_,old_send_queue))\r\n,null)),null,-505522367,null);\r\n}\r\n\r\nvar G__60519 = cljs.core.next(seq__60065_60507__$1);\r\nvar G__60520 = null;\r\nvar G__60521 = (0);\r\nvar G__60522 = (0);\r\nseq__60065_60494 = G__60519;\r\nchunk__60066_60495 = G__60520;\r\ncount__60067_60496 = G__60521;\r\ni__60068_60497 = G__60522;\r\ncontinue;\r\n}\r\n} else {\r\n}\r\n}\r\nbreak;\r\n}\r\n\r\nvar G__60523 = seq__60057;\r\nvar G__60524 = chunk__60062;\r\nvar G__60525 = count__60063;\r\nvar G__60526 = (i__60064 + (1));\r\nseq__60057 = G__60523;\r\nchunk__60062 = G__60524;\r\ncount__60063 = G__60525;\r\ni__60064 = G__60526;\r\ncontinue;\r\n} else {\r\nvar temp__5753__auto__ = cljs.core.seq(seq__60057);\r\nif(temp__5753__auto__){\r\nvar seq__60057__$1 = temp__5753__auto__;\r\nif(cljs.core.chunked_seq_QMARK_(seq__60057__$1)){\r\nvar c__4679__auto__ = cljs.core.chunk_first(seq__60057__$1);\r\nvar G__60527 = cljs.core.chunk_rest(seq__60057__$1);\r\nvar G__60528 = c__4679__auto__;\r\nvar G__60529 = cljs.core.count(c__4679__auto__);\r\nvar G__60530 = (0);\r\nseq__60057 = G__60527;\r\nchunk__60062 = G__60528;\r\ncount__60063 = G__60529;\r\ni__60064 = G__60530;\r\ncontinue;\r\n} else {\r\nvar map__60133 = cljs.core.first(seq__60057__$1);\r\nvar map__60133__$1 = cljs.core.__destructure_map(map__60133);\r\nvar send_node = map__60133__$1;\r\nvar active_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60133__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"active?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/active?\",966679517));\r\nvar options = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60133__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"options\",\"com.fulcrologic.fulcro.algorithms.tx-processing/options\",2016767420));\r\nvar result_handler = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60133__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"result-handler\",\"com.fulcrologic.fulcro.algorithms.tx-processing/result-handler\",-114902209));\r\nvar seq__60058_60533 = cljs.core.seq((function (){var or__4253__auto__ = new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"abort-id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/abort-id\",2068829184).cljs$core$IFn$_invoke$arity$1(options);\r\nif(cljs.core.truth_(or__4253__auto__)){\r\nreturn or__4253__auto__;\r\n} else {\r\nreturn new cljs.core.Keyword(null,\"abort-id\",\"abort-id\",1559937819).cljs$core$IFn$_invoke$arity$1(options);\r\n}\r\n})());\r\nvar chunk__60059_60534 = null;\r\nvar count__60060_60535 = (0);\r\nvar i__60061_60536 = (0);\r\nwhile(true){\r\nif((i__60061_60536 < count__60060_60535)){\r\nvar aid_60537 = chunk__60059_60534.cljs$core$IIndexed$_nth$arity$2(null,i__60061_60536);\r\ntry{if(cljs.core.truth_(active_QMARK_)){\r\nif(cljs.core.truth_(abort_network_BANG_)){\r\n(abort_network_BANG_.cljs$core$IFn$_invoke$arity$2 ? abort_network_BANG_.cljs$core$IFn$_invoke$arity$2(the_remote,aid_60537) : abort_network_BANG_.call(null,the_remote,aid_60537));\r\n} else {\r\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$11(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"warn\",\"warn\",-436710552),\"com.fulcrologic.fulcro.algorithms.tx-processing\",null,862,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay(((function (seq__60058_60533,chunk__60059_60534,count__60060_60535,i__60061_60536,seq__60057,chunk__60062,count__60063,i__60064,aid_60537,map__60133,map__60133__$1,send_node,active_QMARK_,options,result_handler,seq__60057__$1,temp__5753__auto__,app__$1,map__60055,map__60055__$1,state_atom,runtime_atom,map__60056,map__60056__$1,the_remote,abort_network_BANG_,old_send_queue){\r\nreturn (function (){\r\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"Remote does not support abort. Clearing the queue, but a spurious result may still appear. See https://book.fulcrologic.com/#warn-tx-remote-abort-not-supported\"], null);\r\n});})(seq__60058_60533,chunk__60059_60534,count__60060_60535,i__60061_60536,seq__60057,chunk__60062,count__60063,i__60064,aid_60537,map__60133,map__60133__$1,send_node,active_QMARK_,options,result_handler,seq__60057__$1,temp__5753__auto__,app__$1,map__60055,map__60055__$1,state_atom,runtime_atom,map__60056,map__60056__$1,the_remote,abort_network_BANG_,old_send_queue))\r\n,null)),null,-1556343286,null);\r\n}\r\n} else {\r\n}\r\n\r\nvar G__60142_60538 = new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,\"status-code\",\"status-code\",-1060410130),(500),new cljs.core.Keyword(null,\"body\",\"body\",-2049205669),cljs.core.PersistentArrayMap.EMPTY,new cljs.core.Keyword(null,\"status-text\",\"status-text\",-1834235478),\"Globally Aborted\",new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"aborted?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/aborted?\",2086149958),true], null);\r\n(result_handler.cljs$core$IFn$_invoke$arity$1 ? result_handler.cljs$core$IFn$_invoke$arity$1(G__60142_60538) : result_handler.call(null,G__60142_60538));\r\n}catch (e60141){var e_60540 = e60141;\r\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$11(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.algorithms.tx-processing\",null,868,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay(((function (seq__60058_60533,chunk__60059_60534,count__60060_60535,i__60061_60536,seq__60057,chunk__60062,count__60063,i__60064,e_60540,aid_60537,map__60133,map__60133__$1,send_node,active_QMARK_,options,result_handler,seq__60057__$1,temp__5753__auto__,app__$1,map__60055,map__60055__$1,state_atom,runtime_atom,map__60056,map__60056__$1,the_remote,abort_network_BANG_,old_send_queue){\r\nreturn (function (){\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [e_60540,\"Failed to abort send node. See https://book.fulcrologic.com/#err-txp-abort-failed\"], null);\r\n});})(seq__60058_60533,chunk__60059_60534,count__60060_60535,i__60061_60536,seq__60057,chunk__60062,count__60063,i__60064,e_60540,aid_60537,map__60133,map__60133__$1,send_node,active_QMARK_,options,result_handler,seq__60057__$1,temp__5753__auto__,app__$1,map__60055,map__60055__$1,state_atom,runtime_atom,map__60056,map__60056__$1,the_remote,abort_network_BANG_,old_send_queue))\r\n,null)),null,1382877337,null);\r\n}\r\n\r\nvar G__60542 = seq__60058_60533;\r\nvar G__60543 = chunk__60059_60534;\r\nvar G__60544 = count__60060_60535;\r\nvar G__60545 = (i__60061_60536 + (1));\r\nseq__60058_60533 = G__60542;\r\nchunk__60059_60534 = G__60543;\r\ncount__60060_60535 = G__60544;\r\ni__60061_60536 = G__60545;\r\ncontinue;\r\n} else {\r\nvar temp__5753__auto___60546__$1 = cljs.core.seq(seq__60058_60533);\r\nif(temp__5753__auto___60546__$1){\r\nvar seq__60058_60547__$1 = temp__5753__auto___60546__$1;\r\nif(cljs.core.chunked_seq_QMARK_(seq__60058_60547__$1)){\r\nvar c__4679__auto___60548 = cljs.core.chunk_first(seq__60058_60547__$1);\r\nvar G__60549 = cljs.core.chunk_rest(seq__60058_60547__$1);\r\nvar G__60550 = c__4679__auto___60548;\r\nvar G__60551 = cljs.core.count(c__4679__auto___60548);\r\nvar G__60552 = (0);\r\nseq__60058_60533 = G__60549;\r\nchunk__60059_60534 = G__60550;\r\ncount__60060_60535 = G__60551;\r\ni__60061_60536 = G__60552;\r\ncontinue;\r\n} else {\r\nvar aid_60553 = cljs.core.first(seq__60058_60547__$1);\r\ntry{if(cljs.core.truth_(active_QMARK_)){\r\nif(cljs.core.truth_(abort_network_BANG_)){\r\n(abort_network_BANG_.cljs$core$IFn$_invoke$arity$2 ? abort_network_BANG_.cljs$core$IFn$_invoke$arity$2(the_remote,aid_60553) : abort_network_BANG_.call(null,the_remote,aid_60553));\r\n} else {\r\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$11(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"warn\",\"warn\",-436710552),\"com.fulcrologic.fulcro.algorithms.tx-processing\",null,862,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay(((function (seq__60058_60533,chunk__60059_60534,count__60060_60535,i__60061_60536,seq__60057,chunk__60062,count__60063,i__60064,aid_60553,seq__60058_60547__$1,temp__5753__auto___60546__$1,map__60133,map__60133__$1,send_node,active_QMARK_,options,result_handler,seq__60057__$1,temp__5753__auto__,app__$1,map__60055,map__60055__$1,state_atom,runtime_atom,map__60056,map__60056__$1,the_remote,abort_network_BANG_,old_send_queue){\r\nreturn (function (){\r\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"Remote does not support abort. Clearing the queue, but a spurious result may still appear. See https://book.fulcrologic.com/#warn-tx-remote-abort-not-supported\"], null);\r\n});})(seq__60058_60533,chunk__60059_60534,count__60060_60535,i__60061_60536,seq__60057,chunk__60062,count__60063,i__60064,aid_60553,seq__60058_60547__$1,temp__5753__auto___60546__$1,map__60133,map__60133__$1,send_node,active_QMARK_,options,result_handler,seq__60057__$1,temp__5753__auto__,app__$1,map__60055,map__60055__$1,state_atom,runtime_atom,map__60056,map__60056__$1,the_remote,abort_network_BANG_,old_send_queue))\r\n,null)),null,-694787146,null);\r\n}\r\n} else {\r\n}\r\n\r\nvar G__60144_60556 = new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,\"status-code\",\"status-code\",-1060410130),(500),new cljs.core.Keyword(null,\"body\",\"body\",-2049205669),cljs.core.PersistentArrayMap.EMPTY,new cljs.core.Keyword(null,\"status-text\",\"status-text\",-1834235478),\"Globally Aborted\",new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"aborted?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/aborted?\",2086149958),true], null);\r\n(result_handler.cljs$core$IFn$_invoke$arity$1 ? result_handler.cljs$core$IFn$_invoke$arity$1(G__60144_60556) : result_handler.call(null,G__60144_60556));\r\n}catch (e60143){var e_60558 = e60143;\r\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$11(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.algorithms.tx-processing\",null,868,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay(((function (seq__60058_60533,chunk__60059_60534,count__60060_60535,i__60061_60536,seq__60057,chunk__60062,count__60063,i__60064,e_60558,aid_60553,seq__60058_60547__$1,temp__5753__auto___60546__$1,map__60133,map__60133__$1,send_node,active_QMARK_,options,result_handler,seq__60057__$1,temp__5753__auto__,app__$1,map__60055,map__60055__$1,state_atom,runtime_atom,map__60056,map__60056__$1,the_remote,abort_network_BANG_,old_send_queue){\r\nreturn (function (){\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [e_60558,\"Failed to abort send node. See https://book.fulcrologic.com/#err-txp-abort-failed\"], null);\r\n});})(seq__60058_60533,chunk__60059_60534,count__60060_60535,i__60061_60536,seq__60057,chunk__60062,count__60063,i__60064,e_60558,aid_60553,seq__60058_60547__$1,temp__5753__auto___60546__$1,map__60133,map__60133__$1,send_node,active_QMARK_,options,result_handler,seq__60057__$1,temp__5753__auto__,app__$1,map__60055,map__60055__$1,state_atom,runtime_atom,map__60056,map__60056__$1,the_remote,abort_network_BANG_,old_send_queue))\r\n,null)),null,577345243,null);\r\n}\r\n\r\nvar G__60559 = cljs.core.next(seq__60058_60547__$1);\r\nvar G__60560 = null;\r\nvar G__60561 = (0);\r\nvar G__60562 = (0);\r\nseq__60058_60533 = G__60559;\r\nchunk__60059_60534 = G__60560;\r\ncount__60060_60535 = G__60561;\r\ni__60061_60536 = G__60562;\r\ncontinue;\r\n}\r\n} else {\r\n}\r\n}\r\nbreak;\r\n}\r\n\r\nvar G__60563 = cljs.core.next(seq__60057__$1);\r\nvar G__60564 = null;\r\nvar G__60565 = (0);\r\nvar G__60566 = (0);\r\nseq__60057 = G__60563;\r\nchunk__60062 = G__60564;\r\ncount__60063 = G__60565;\r\ni__60064 = G__60566;\r\ncontinue;\r\n}\r\n} else {\r\nreturn null;\r\n}\r\n}\r\nbreak;\r\n}\r\n});\r\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:doc","The transaction processing in Fulcro is (intended to be) pluggable. This namespace is the\n  implementation for the default transaction processing . At the present time there is no documentation on how\n  such an override would be written, nor is it necessarily recommended since many of the desirable and built-in\n  behaviors of Fulcro are codified here. ","~:file","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",52],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$clojure.spec.alpha","~$cljs.spec.alpha","~$clojure.core.async","~$cljs.core.async","~$clojure.pprint","~$cljs.pprint"],"~:use-macros",["^ ","~$ido","~$com.fulcrologic.fulcro.inspect.inspect-client","~$ilet","^G","~$>defn","~$com.fulcrologic.guardrails.core"],"~:excludes",["~#set",[]],"~:name","~$com.fulcrologic.fulcro.algorithms.tx-processing","~:reader-aliases",["^ "],"~:op","~:ns","~:imports",null,"~:requires",["^ ","~$ah","~$com.fulcrologic.fulcro.algorithms.lookup","~$set","~$clojure.set","~$edn-query-language.core","^X","^?","^@","^J","^J","~$log","~$taoensso.timbre","~$comp","~$com.fulcrologic.fulcro.components","~$eql","^X","~$com.fulcrologic.fulcro.algorithms.denormalize","^12","~$cljs.core","^13","^G","^G","~$goog","^14","~$com.fulcrologic.fulcro.specs","^15","~$inspect","^G","^W","^W","~$com.fulcrologic.fulcro.algorithms.tempid","^17","~$m","~$com.fulcrologic.fulcro.mutations","~$com.fulcrologic.fulcro.algorithms.scheduling","^19","~$sched","^19","~$enc","~$taoensso.encore","^18","^18","~$s","^@","^U","^U","^10","^10","^Z","^Z","~$futil","~$com.fulcrologic.fulcro.algorithms.do-not-use","^1<","^1<","^@","^@","~$fdn","^12","~$tempid","^17","^1>","^1>"],"~:seen",["^L",["~:require"]],"~:uses",["^ ","~$schedule!","^19","^F","^G","^H","^G","^I","^J","~$=>","^J","~$|","^J"],"~:require-macros",["^ ","^?","^@","^J","^J","^Y","^Z","^[","^10","^13","^13","^G","^G","^16","^G","~$m","^18","^1;","^1<","^18","^18","~$s","^@","^10","^10","^Z","^Z","^1<","^1<","^@","^@"],"~:form",["~#list",["~$ns","^N","The transaction processing in Fulcro is (intended to be) pluggable. This namespace is the\n  implementation for the default transaction processing . At the present time there is no documentation on how\n  such an override would be written, nor is it necessarily recommended since many of the desirable and built-in\n  behaviors of Fulcro are codified here. ",["^1H",["^1B",["^W","~:as","^V"],["^?","^1J","~$s"],["^U","^1J","^T"],["^17","^1J","^1@"],["^12","^1J","^1?"],["^1>","^1J","^1="],["^19","^1J","^1:","~:refer",["^1D"]],["^18","^1J","~$m"],["^10","^1J","^["],["^15"],["^G","^1J","^16","^1K",["^F","^H"]],"^15",["^J","^1K",["^I","^1E","~$|"]],["^X","^1J","^11"],["^1<","^1J","^1;"],["^Z","^1J","^Y"]]]]],"~:flags",["^ ","^1B",["^L",[]]],"~:js-deps",["^ "],"~:deps",["^14","^13","^W","^@","^U","^17","^12","^1>","^19","^18","^10","^15","^G","^J","^X","^1<","^Z"]],"^Q","^N","~:resource-id",["~:shadow.build.classpath/resource","com/fulcrologic/fulcro/algorithms/tx_processing.cljc"],"~:compiled-at",1676260446387,"^O",["^ ","^T","^U","^V","^W","^X","^X","^?","^@","^J","^J","^Y","^Z","^[","^10","^11","^X","^12","^12","^13","^13","^G","^G","^14","^14","^15","^15","^16","^G","^W","^W","^17","^17","~$m","^18","^19","^19","^1:","^19","^1;","^1<","^18","^18","~$s","^@","^U","^U","^10","^10","^Z","^Z","^1=","^1>","^1<","^1<","^@","^@","^1?","^12","^1@","^17","^1>","^1>"],"~:resource-name","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","~:warnings",[],"~:source","(ns com.fulcrologic.fulcro.algorithms.tx-processing\n  \"The transaction processing in Fulcro is (intended to be) pluggable. This namespace is the\n  implementation for the default transaction processing . At the present time there is no documentation on how\n  such an override would be written, nor is it necessarily recommended since many of the desirable and built-in\n  behaviors of Fulcro are codified here. \"\n  (:require\n    [clojure.set :as set]\n    [clojure.spec.alpha :as s]\n    [com.fulcrologic.fulcro.algorithms.lookup :as ah]\n    [com.fulcrologic.fulcro.algorithms.tempid :as tempid]\n    [com.fulcrologic.fulcro.algorithms.denormalize :as fdn]\n    [com.fulcrologic.fulcro.algorithms.do-not-use :as futil]\n    [com.fulcrologic.fulcro.algorithms.scheduling :as sched :refer [schedule!]]\n    [com.fulcrologic.fulcro.mutations :as m]\n    [com.fulcrologic.fulcro.components :as comp]\n    [com.fulcrologic.fulcro.specs]\n    [com.fulcrologic.fulcro.inspect.inspect-client :as inspect :refer [ido ilet]]\n    com.fulcrologic.fulcro.specs\n    [com.fulcrologic.guardrails.core :refer [>defn => |]]\n    [edn-query-language.core :as eql]\n    [taoensso.encore :as enc]\n    [taoensso.timbre :as log]))\n\n(declare schedule-activation! process-queue! remove-send!)\n\n(defn app->remotes\n  \"Returns the remotes map from an app\"\n  [app]\n  [:com.fulcrologic.fulcro.application/app => :com.fulcrologic.fulcro.application/remotes]\n  (-> app :com.fulcrologic.fulcro.application/runtime-atom deref :com.fulcrologic.fulcro.application/remotes))\n\n(defn app->remote-names\n  \"Returns a set of the names of the remotes from an app\"\n  [app]\n  [:com.fulcrologic.fulcro.application/app => :com.fulcrologic.fulcro.application/remote-names]\n  (-> app :com.fulcrologic.fulcro.application/runtime-atom deref :com.fulcrologic.fulcro.application/remotes keys set))\n\n(defn extract-parallel\n  \"Splits the given send queue into two send queues:\n  [parallel-items sequential-items].\"\n  [sends]\n  [(s/coll-of ::send-node :kind vector?) => (s/cat :p ::send-queue :rest ::send-queue)]\n  (let [parallel? (fn [{:keys [::options]}]\n                    (boolean (or (:parallel? options) (::parallel? options))))\n        {parallel   true\n         sequential false} (group-by parallel? sends)]\n    [(vec parallel) (vec sequential)]))\n\n(defn every-ast?\n  \"Check if the given `test` predicate is true for an AST node or for all the immediate children of an AST tree.\"\n  [ast-node-or-tree test]\n  [::ast fn? => boolean?]\n  (if (= :root (:type ast-node-or-tree))\n    (every? test (:children ast-node-or-tree))\n    (test ast-node-or-tree)))\n\n(defn mutation-ast?\n  \"Returns true if the given AST node or tree represents a mutation or sequence of mutations.\"\n  [ast-node-or-tree]\n  [::ast => boolean?]\n  (every-ast? ast-node-or-tree #(= :call (:type %))))\n\n(defn query-ast?\n  \"Returns true if the given AST node or tree represents a mutation or sequence of mutations.\"\n  [ast-node-or-tree]\n  [::ast => boolean?]\n  (every-ast? ast-node-or-tree #(not= :call (:type %))))\n\n(defn sort-queue-writes-before-reads\n  \"Sort function on a send queue. Leaves any active nodes in front, and sorts the remainder of the queue so that writes\n  appear before reads, without changing the relative order in blocks of reads/writes.\"\n  [send-queue]\n  [::send-queue => ::send-queue]\n  (let [[active-queue send-queue] (split-with ::active? send-queue)\n        id-sequence (mapv (fn [n] (-> n first ::id)) (partition-by ::id send-queue))\n        clusters    (group-by ::id (vec send-queue))\n        {:keys [reads writes]} (reduce\n                                 (fn [result id]\n                                   (let [[{:keys [::ast] :as n} & _ :as cluster] (get clusters id)]\n                                     (cond\n                                       (nil? ast) result\n                                       (query-ast? ast) (update result :reads into cluster)\n                                       (mutation-ast? ast) (update result :writes into cluster)\n                                       :else result)))\n                                 {:reads [] :writes []}\n                                 id-sequence)\n        send-queue  (into [] (concat active-queue writes reads))]\n    send-queue))\n\n(defn top-keys\n  [{:keys [type key children] :as ast}]\n  [::ast => (s/coll-of :edn-query-language.ast/key)]\n  (if (= :root type)\n    (into #{} (map :key) children)\n    #{key}))\n\n(defn combine-sends\n  \"Takes a send queue and returns a map containing a new combined send node that can act as a single network request,\n  along with the updated send queue.\"\n  [app remote-name send-queue]\n  [:com.fulcrologic.fulcro.application/app :com.fulcrologic.fulcro.application/remote-name ::send-queue => (s/keys :opt [::send-node] :req [::send-queue])]\n  (let [[active-nodes send-queue] (split-with ::active? send-queue)\n        send-queue        (sort-queue-writes-before-reads (vec send-queue))\n        id-to-send        (-> send-queue first ::id)\n        options           (-> send-queue first ::options)\n        [to-send to-defer] (split-with #(= id-to-send (::id %)) send-queue)\n        tx                (reduce\n                            (fn [acc {:keys [::ast]}]\n                              (let [tx (futil/ast->query ast)]\n                                (into acc tx)))\n                            []\n                            to-send)\n        ast               (eql/query->ast tx)\n        combined-node-id  (tempid/uuid)\n        combined-node-idx 0\n        combined-node     {::id             combined-node-id\n                           ::idx            combined-node-idx\n                           ::ast            ast\n                           ::options        options\n                           ::update-handler (fn [{:keys [body] :as combined-result}]\n                                              (doseq [{::keys [update-handler]} to-send]\n                                                (when update-handler\n                                                  (update-handler combined-result))))\n                           ::result-handler (fn [{:keys [body] :as combined-result}]\n                                              (doseq [{::keys [ast result-handler]} to-send]\n                                                (let [new-body (if (map? body)\n                                                                 (select-keys body (top-keys ast))\n                                                                 body)\n                                                      result   (assoc combined-result :body new-body)]\n                                                  (inspect/ilet [{:keys [status-code body]} result]\n                                                    (if (= 200 status-code)\n                                                      (inspect/send-finished! app remote-name combined-node-id body)\n                                                      (inspect/send-failed! app combined-node-id (str status-code))))\n                                                  (result-handler result)))\n                                              (remove-send! app remote-name combined-node-id combined-node-idx))\n                           ::active?        true}]\n    (if (seq to-send)\n      {::send-node  combined-node\n       ::send-queue (into [] (concat active-nodes [combined-node] to-defer))}\n      {::send-queue send-queue})))\n\n(defn net-send!\n  \"Process the send against the user-defined remote. Catches exceptions and calls error handler with status code 500\n  if the remote itself throws exceptions.\"\n  [app send-node remote-name]\n  [:com.fulcrologic.fulcro.application/app ::send-node :com.fulcrologic.fulcro.application/remote-name => any?]\n  (enc/if-let [remote    (get (app->remotes app) remote-name)\n               transmit! (get remote :transmit!)]\n    (try\n      (inspect/ilet [tx (futil/ast->query (::ast send-node))]\n        (inspect/send-started! app remote-name (::id send-node) tx))\n      (transmit! remote send-node)\n      (catch #?(:cljs :default :clj Exception) e\n        (log/error e \"Send threw an exception for tx:\" (futil/ast->query (::ast send-node)) \"See https://book.fulcrologic.com/#err-txp-send-exc\")\n        (try\n          (inspect/ido\n            (inspect/send-failed! app (::id send-node) \"Transmit Exception\"))\n          ((::result-handler send-node) {:status-code      500\n                                         :client-exception e})\n          (catch #?(:cljs :default :clj Exception) e\n            (log/fatal e \"Error handler failed to handle exception!\")))))\n    (do\n      (log/error \"Transmit was not defined on remote\" remote-name \"See https://book.fulcrologic.com/#err-txp-remote-lacks-transmit\")\n      ((::result-handler send-node) {:status-code 500\n                                     :message     \"Transmit missing on remote.\"}))))\n\n(defn process-send-queues!\n  \"Process the send queues against the remotes. Updates the send queues on the app and returns the updated send queues.\"\n  [{:com.fulcrologic.fulcro.application/keys [runtime-atom] :as app}]\n  [:com.fulcrologic.fulcro.application/app => ::send-queues]\n  (let [send-queues     (-> runtime-atom deref ::send-queues)\n        remote-names    (app->remote-names app)\n        operations      (atom [])\n        new-send-queues (reduce\n                          (fn [new-send-queues remote]\n                            (let [send-queue (get send-queues remote [])\n                                  [p serial] (extract-parallel send-queue)\n                                  front      (first serial)]\n                              ;; parallel items are removed from the queues, since they don't block anything\n                              (doseq [item p]\n                                (swap! operations conj #(net-send! app item remote)))\n                              ;; sequential items are kept in queue to prevent out-of-order operation\n                              (if (::active? front)\n                                (assoc new-send-queues remote serial)\n                                (let [{::keys [send-queue send-node]} (combine-sends app remote serial)]\n                                  (when send-node\n                                    (swap! operations conj #(net-send! app send-node remote)))\n                                  (assoc new-send-queues remote send-queue)))))\n                          {}\n                          remote-names)]\n    (swap! runtime-atom assoc ::send-queues new-send-queues)\n    ;; Actual net sends are done after we set the queues, in case the remote behave synchronously and immediately gives\n    ;; results (like errors). Otherwise, the queue updates of those handlers would be overwritten by our swap on the\n    ;; prior line\n    (doseq [op @operations]\n      (op))\n    new-send-queues))\n\n(defn tx-node\n  ([tx]\n   [::tx => ::tx-node]\n   (tx-node tx {}))\n  ([tx options]\n   [::tx ::options => ::tx-node]\n   (let [ast       (eql/query->ast tx)\n         ast-nodes (:children ast)\n         elements  (into []\n                     (comp\n                       (filter (fn txfilt* [n] (= :call (:type n))))\n                       (map-indexed\n                         (fn ->txnode* [idx ast-node]\n                           {::idx               idx\n                            ::original-ast-node ast-node\n                            ::started?          #{}\n                            ::complete?         #{}\n                            ::results           {}\n                            ::dispatch          {}})))\n                     ast-nodes)]\n     {::id       (tempid/uuid)\n      ::created  (futil/now)\n      ::options  options\n      ::tx       tx\n      ::elements elements})))\n\n(defn build-env\n  ([app {::keys [options] :as tx-node} addl]\n   [:com.fulcrologic.fulcro.application/app ::tx-node map? => map?]\n   (let [{:keys [ref component]} options]\n     (cond-> (merge addl {:state (-> app :com.fulcrologic.fulcro.application/state-atom)\n                          :app   app})\n       options (assoc ::options options)\n       ref (assoc :ref ref)\n       component (assoc :component component))))\n  ([app {:keys [::options] :as tx-node}]\n   [:com.fulcrologic.fulcro.application/app ::tx-node => map?]\n   (build-env app tx-node {})))\n\n(defn dispatch-elements\n  \"Run through the elements on the given tx-node and do the side-effect-free dispatch. This generates the dispatch map\n  of things to do on that node.\"\n  [tx-node env dispatch-fn]\n  [::tx-node map? any? => ::tx-node]\n  (let [do-dispatch  (fn run* [env]\n                       (try\n                         (dispatch-fn env)\n                         (catch #?(:clj Exception :cljs :default) e\n                           (log/error e \"Dispatch for mutation\" (some-> env :ast futil/ast->query) \"failed with an exception. No dispatch generated. See https://book.fulcrologic.com/#err-txp-mut-dispatch-exc\")\n                           {})))\n        dispatch     (fn dispatch* [{:keys [::original-ast-node] :as ele}]\n                       (let [{:keys [type]} original-ast-node\n                             env (assoc env :ast original-ast-node)]\n                         (cond-> ele\n                           (= :call type) (assoc ::dispatch (do-dispatch env)))))\n        dispatch-all (fn [eles] (mapv dispatch eles))]\n    (update tx-node ::elements dispatch-all)))\n\n(defn application-rendered!\n  \"Should be called after the application renders to ensure that transactions blocked until the next render become\n   unblocked. Schedules an activation.\"\n  [{:keys [:com.fulcrologic.fulcro.application/runtime-atom] :as app} options]\n  (when (some #(boolean (-> % ::options :after-render?)) (-> runtime-atom deref ::submission-queue))\n    (swap! runtime-atom update ::submission-queue\n      (fn [queue] (mapv (fn [node] (update node ::options dissoc :after-render?)) queue)))\n    (schedule-activation! app 0)))\n\n(defn activate-submissions!\n  \"Activate all of the transactions that have been submitted since the last activation. After the items are activated\n  a single processing step will run for the active queue.\n\n  Activation can be blocked by the tx-node options for things like waiting for the next render frame.\"\n  [{:keys [:com.fulcrologic.fulcro.application/runtime-atom] :as app}]\n  [:com.fulcrologic.fulcro.application/app => any?]\n  (let [{blocked true ready false} (group-by (comp boolean :after-render? ::options) (::submission-queue @runtime-atom))\n        dispatched-nodes (mapv #(dispatch-elements % (build-env app %) m/mutate) ready)]\n    (swap! runtime-atom (fn [a]\n                          (-> a\n                            (update ::active-queue #(reduce conj % dispatched-nodes))\n                            (assoc ::submission-queue (vec blocked)))))\n    (process-queue! app)))\n\n(defn schedule-activation!\n  \"Schedule activation of submitted transactions.  The default implementation copies all submitted transactions onto\n   the active queue and immediately does an active queue processing step.  If `tm` is not supplied (in ms) it defaults to 10ms.\"\n  ([app tm]\n   [:com.fulcrologic.fulcro.application/app int? => any?]\n   (schedule! app ::activation-scheduled? activate-submissions! tm))\n  ([app]\n   [:com.fulcrologic.fulcro.application/app => any?]\n   (schedule-activation! app 0)))\n\n(defn schedule-queue-processing!\n  \"Schedule a processing of the active queue, which will advance the active transactions by a step.\n   If `tm` is not supplied (in ms) it defaults to 10ms.\"\n  ([app tm]\n   [:com.fulcrologic.fulcro.application/app int? => any?]\n   (schedule! app ::queue-processing-scheduled? process-queue! tm))\n  ([app]\n   [:com.fulcrologic.fulcro.application/app => any?]\n   (schedule-queue-processing! app 0)))\n\n(defn schedule-sends!\n  \"Schedule actual network activity. If `tm` is not supplied (in ms) it defaults to 0ms.\"\n  ([app tm]\n   [:com.fulcrologic.fulcro.application/app int? => any?]\n   (schedule! app ::sends-scheduled? process-send-queues! tm))\n  ([app]\n   [:com.fulcrologic.fulcro.application/app => any?]\n   (schedule-sends! app 0)))\n\n(defn advance-actions!\n  \"Runs any incomplete and non-blocked optimistic operations on a node.\"\n  [app {::keys [id elements] :as node}]\n  [:com.fulcrologic.fulcro.application/app ::tx-node => ::tx-node]\n  (let [remotes      (app->remote-names app)\n        reduction    (reduce\n                       (fn [{:keys [done? new-elements] :as acc} element]\n                         (if done?\n                           (update acc :new-elements conj element)\n                           (let [{::keys [complete? dispatch original-ast-node idx]} element\n                                 {:keys [action]} dispatch\n                                 remote-set      (set/intersection remotes (set (keys dispatch)))\n                                 exec?           (and action (not (or done? (complete? :action))))\n                                 fully-complete? (and (or exec? (complete? :action)) (empty? (set/difference remote-set complete?)))\n                                 state-id-before (inspect/current-history-id app)\n                                 state           (:com.fulcrologic.fulcro.application/state-atom app)\n                                 state-before    @state\n                                 updated-element (if exec? (-> element\n                                                             (assoc ::state-before-action state-before)\n                                                             (update ::complete? conj :action)) element)\n                                 done?           (not fully-complete?)\n                                 new-acc         {:done?        done?\n                                                  :new-elements (conj new-elements updated-element)}\n                                 env             (build-env app node {:ast original-ast-node})]\n                             (when exec?\n                               (try\n                                 (when action\n                                   (action env))\n                                 (catch #?(:cljs :default :clj Exception) e\n                                   (let [mutation-symbol (:dispatch-key original-ast-node)]\n                                     (log/error e \"The `action` section of mutation\" mutation-symbol \"threw an exception. See https://book.fulcrologic.com/#err-txp-mut-action-exc\"))))\n                               (ilet [tx (eql/ast->expr original-ast-node true)]\n                                 (inspect/optimistic-action-finished! app env {:tx-id           (str id \"-\" idx)\n                                                                               :state-id-before state-id-before\n                                                                               :db-before       state-before\n                                                                               :db-after        @state\n                                                                               :tx              tx})))\n                             new-acc)))\n                       {:done? false :new-elements []}\n                       elements)\n        new-elements (:new-elements reduction)]\n    (assoc node ::elements new-elements)))\n\n(defn run-actions!\n  [app {::keys [id elements] :as node}]\n  [:com.fulcrologic.fulcro.application/app ::tx-node => ::tx-node]\n  (let [new-elements (reduce\n                       (fn [new-elements element]\n                         (let [{::keys [idx complete? dispatch original-ast-node]} element\n                               {:keys [action]} dispatch\n                               exec?           (and action (not (complete? :action)))\n                               state-id-before (inspect/current-history-id app)\n                               state           (:com.fulcrologic.fulcro.application/state-atom app)\n                               state-before    @state\n                               updated-node    (if exec? (-> element\n                                                           (assoc ::state-before-action state-before)\n                                                           (update ::complete? conj :action)) element)\n                               new-acc         (conj new-elements updated-node)\n                               env             (build-env app node {:ast original-ast-node})]\n                           (when exec?\n                             (try\n                               (action env)\n                               (catch #?(:cljs :default :clj Exception) e\n                                 (log/error e \"The `action` section threw an exception for mutation: \" (:dispatch-key original-ast-node) \"See https://book.fulcrologic.com/#err-txp-mut-action-exc2\")))\n                             (ilet [tx (eql/ast->expr original-ast-node true)]\n                               (inspect/optimistic-action-finished! app env {:tx-id           (str id \"-\" idx)\n                                                                             :state-id-before state-id-before\n                                                                             :db-before       state-before\n                                                                             :db-after        @state\n                                                                             :tx              tx})))\n                           new-acc))\n                       []\n                       elements)]\n    (assoc node ::elements new-elements)))\n\n(defn fully-complete?\n  [app {:keys [::elements] :as tx-node}]\n  [:com.fulcrologic.fulcro.application/app ::tx-node => boolean?]\n  (let [element-complete? (fn [{:keys [::dispatch ::complete?]}]\n                            (let [remotes     (app->remote-names app)\n                                  active-keys (set/union #{:action} remotes)\n                                  desired-set (set/intersection active-keys (set (keys dispatch)))]\n                              (empty? (set/difference desired-set complete?))))]\n    (every? element-complete? elements)))\n\n(defn remove-send!\n  \"Removes the send node (if present) from the send queue on the given remote.\"\n  [{:com.fulcrologic.fulcro.application/keys [runtime-atom] :as app} remote txn-id ele-idx]\n  [:com.fulcrologic.fulcro.application/app :com.fulcrologic.fulcro.application/remote-name ::id ::idx => any?]\n  (let [{:keys [::send-queues]} @runtime-atom\n        old-queue (get send-queues remote)\n        queue     (filterv (fn [{:keys [::id ::idx]}]\n                             (not (and (= txn-id id) (= ele-idx idx)))) old-queue)]\n    (swap! runtime-atom assoc-in [::send-queues remote] queue)))\n\n(defn record-result!\n  \"Record a network result on the given txn/element.\n   If result-key is given it is used, otherwise defaults to ::results. Also removes the network send from the send\n   queue so that remaining items can proceed, and schedules send processing.\"\n  ([{:com.fulcrologic.fulcro.application/keys [runtime-atom] :as app} txn-id ele-idx remote result result-key]\n   [:com.fulcrologic.fulcro.application/app ::id int? keyword? any? keyword? => any?]\n   (let [active-queue (::active-queue @runtime-atom)\n         txn-idx      (reduce\n                        (fn [idx {:keys [::id]}]\n                          (if (= id txn-id)\n                            (reduced idx)\n                            (inc idx)))\n                        0\n                        active-queue)\n         not-found?   (or (>= txn-idx (count active-queue)) (not= txn-id (::id (get active-queue txn-idx))))]\n     (if not-found?\n       (log/error \"Network result for\" remote \"does not have a valid node on the active queue! See https://book.fulcrologic.com/#err-txp-res-lacks-valid-node\")\n       (swap! runtime-atom assoc-in [::active-queue txn-idx ::elements ele-idx result-key remote] result))))\n  ([app txn-id ele-idx remote result]\n   [:com.fulcrologic.fulcro.application/app ::id int? keyword? any? => any?]\n   (record-result! app txn-id ele-idx remote result ::results)))\n\n(defn compute-desired-ast-node\n  \"Add the ::desired-ast-nodes and ::transmitted-ast-nodes for `remote` to the tx-element based on the dispatch for the `remote` of the original mutation.\"\n  [app remote tx-node tx-element]\n  [:com.fulcrologic.fulcro.application/app :com.fulcrologic.fulcro.application/remote-name ::tx-node ::tx-element => ::tx-element]\n  (let [{::keys [dispatch original-ast-node state-before-action]} tx-element\n        env             (build-env app tx-node {:ast                 original-ast-node\n                                                :state-before-action state-before-action})\n        remote-fn       (get dispatch remote)\n        remote-desire   (when remote-fn (remote-fn env))\n        desired-ast     (cond\n                          (or (false? remote-desire) (nil? remote-desire)) nil\n                          (true? remote-desire) original-ast-node\n                          (and (map? remote-desire) (contains? remote-desire :ast)) (:ast remote-desire)\n                          (and (map? remote-desire) (contains? remote-desire :type)) remote-desire\n                          :else (do\n                                  (log/error \"Remote dispatch for\" remote \"returned an invalid value.\" remote-desire \"See https://book.fulcrologic.com/#err-txp-remote-dispatch-invalid-res\")\n                                  remote-desire))\n        ;; The EQL transform from fulcro app config ONLY affects the network layer (the AST we put on the send node).\n        ;; The response gets dispatched on network return, but the original query\n        ;; is needed at the top app layer so that :pre-merge can use the complete query\n        ;; as opposed to the pruned one.\n        query-transform (ah/app-algorithm app :global-eql-transform)\n        ast             (if (and desired-ast query-transform)\n                          (query-transform desired-ast)\n                          desired-ast)]\n    (cond-> tx-element\n      desired-ast (assoc-in [::desired-ast-nodes remote] desired-ast)\n      ast (assoc-in [::transmitted-ast-nodes remote] ast))))\n\n(defn add-send!\n  \"Generate a new send node and add it to the appropriate send queue. Returns the new send node.\"\n  [{:com.fulcrologic.fulcro.application/keys [runtime-atom] :as app} {::keys [id options] :as tx-node} ele-idx remote]\n  [:com.fulcrologic.fulcro.application/app ::tx-node ::idx :com.fulcrologic.fulcro.application/remote-name\n   => (s/nilable ::send-node)]\n  (let [update-handler (fn progress-handler* [result]\n                         (record-result! app id ele-idx remote result ::progress)\n                         (schedule-queue-processing! app 0))\n        ast            (get-in tx-node [::elements ele-idx ::transmitted-ast-nodes remote])\n        handler        (fn result-handler* [result]\n                         (record-result! app id ele-idx remote result)\n                         (remove-send! app remote id ele-idx)\n                         (schedule-sends! app 1)\n                         (schedule-queue-processing! app 0))\n        send-node      {::id             id\n                        ::idx            ele-idx\n                        ::ast            ast\n                        ::options        options\n                        ::active?        false\n                        ::result-handler handler\n                        ::update-handler update-handler}]\n    (if ast\n      (do\n        (swap! runtime-atom update-in [::send-queues remote] (fnil conj []) send-node)\n        send-node)\n      (do\n        (handler {:status-code 200 :body {}})\n        nil))))\n\n(defn queue-element-sends!\n  \"Queue all (unqueued) remote actions for the given element.  Returns the (possibly updated) node.\"\n  [app tx-node {:keys [::idx ::dispatch ::started?]}]\n  [:com.fulcrologic.fulcro.application/app ::tx-node ::tx-element => ::tx-node]\n  (let [remotes     (set/intersection (set (keys dispatch)) (app->remote-names app))\n        to-dispatch (set/difference remotes started?)]\n    (reduce\n      (fn [node remote]\n        (if (contains? (get-in node [::elements idx ::started?] #{}) remote)\n          node\n          (let [updated-node (-> node\n                               (update-in [::elements idx] (fn [tx-element] (compute-desired-ast-node app remote node tx-element)))\n                               (update-in [::elements idx ::started?] conj remote))]\n            (add-send! app updated-node idx remote)\n            updated-node)))\n      tx-node\n      to-dispatch)))\n\n(defn idle-node?\n  \"Returns true if the given node has no active network operations.\"\n  [{:keys [::elements] :as tx-node}]\n  [::tx-node => boolean?]\n  (every?\n    (fn idle?* [{:keys [::started? ::complete?]}]\n      (let [in-progress (set/difference started? complete?)]\n        (empty? in-progress)))\n    elements))\n\n(defn element-with-work\n  \"Returns a txnode element iff it has remaining (remote) work that has not been queued. Returns nil if there\n   is no such element.\n\n  remote-names is the set of legal remote names.\"\n  [remote-names {:keys [::dispatch ::started?] :as element}]\n  [:com.fulcrologic.fulcro.application/remote-names ::tx-element => (s/nilable ::tx-element)]\n  (let [todo      (set/intersection remote-names (set (keys dispatch)))\n        remaining (set/difference todo started?)]\n    (when (seq remaining)\n      element)))\n\n(defn queue-next-send!\n  \"Assumes tx-node is to be processed pessimistically. Queues the next send if the node is currently idle\n  on the network and there are any sends left to do. Adds to the send queue, and returns the updated\n  tx-node.\"\n  [app {:keys [::elements] :as tx-node}]\n  [:com.fulcrologic.fulcro.application/app ::tx-node => ::tx-node]\n  (if (idle-node? tx-node)\n    (let [remotes   (app->remote-names app)\n          with-work (partial element-with-work remotes)\n          element   (some with-work elements)]\n      (if element\n        (queue-element-sends! app tx-node element)\n        tx-node))\n    tx-node))\n\n(defn queue-sends!\n  \"Finds any item(s) on the given node that are ready to be placed on the network queues and adds them. Non-optimistic\n  multi-element nodes will only queue one remote operation at a time.\"\n  [app {:keys [::options ::elements] :as tx-node}]\n  [:com.fulcrologic.fulcro.application/app ::tx-node => ::tx-node]\n  (let [optimistic? (boolean (:optimistic? options))]\n    (schedule-sends! app 0)\n    (if optimistic?\n      (reduce\n        (fn [node element]\n          (queue-element-sends! app node element))\n        tx-node\n        elements)\n      (queue-next-send! app tx-node))))\n\n(defn dispatch-result!\n  \"Figure out the dispatch routine to trigger for the given network result.  If it exists, send the result\n  to it.\n\n  Returns the tx-element with the remote marked complete.\"\n  [app tx-node {::keys [results dispatch desired-ast-nodes transmitted-ast-nodes original-ast-node] :as tx-element} remote]\n  [:com.fulcrologic.fulcro.application/app ::tx-node ::tx-element keyword? => ::tx-element]\n  (schedule-queue-processing! app 0)\n  (let [result  (get results remote)\n        handler (get dispatch :result-action)]\n    (when handler\n      (let [env (build-env app tx-node {:dispatch        dispatch\n                                        :transacted-ast  original-ast-node\n                                        :mutation-ast    (get desired-ast-nodes remote)\n                                        :transmitted-ast (get transmitted-ast-nodes remote)\n                                        :result          result})]\n        (try\n          (handler env)\n          (catch #?(:cljs :default :clj Exception) e\n            (log/error e \"The result-action mutation handler for mutation\" (:dispatch-key original-ast-node) \"threw an exception. See https://book.fulcrologic.com/#err-txp-mut-res-action-exc\"))))))\n  (update tx-element ::complete? conj remote))\n\n(defn distribute-element-results!\n  \"Distribute results and mark the remotes for those elements as complete.\"\n  [app tx-node {:keys [::results ::complete?] :as tx-element}]\n  [:com.fulcrologic.fulcro.application/app ::tx-node ::tx-element => ::tx-element]\n  (reduce\n    (fn [new-element remote]\n      (if (complete? remote)\n        new-element\n        (dispatch-result! app tx-node new-element remote)))\n    tx-element\n    (keys results)))\n\n(defn distribute-results!\n  \"Walk all elements of the tx-node and call result dispatch handlers for any results that have\n  not been distributed.\"\n  [app {:keys [::elements] :as tx-node}]\n  [:com.fulcrologic.fulcro.application/app ::tx-node => ::tx-node]\n  (assoc tx-node\n    ::elements (mapv\n                 (fn [element] (distribute-element-results! app tx-node element))\n                 elements)))\n\n(defn update-progress!\n  \"Report all progress items to any registered progress dispatch and clear them from the tx-node.\n  Returns the updated tx-node.\"\n  [app {:keys [::elements] :as tx-node}]\n  [:com.fulcrologic.fulcro.application/app ::tx-node => ::tx-node]\n  (let [get-env (fn get-env* [remote progress] (build-env app tx-node {:remote remote :progress progress}))]\n    (reduce\n      (fn [node {::keys [idx progress dispatch original-ast-node] :as element}]\n        (doseq [[remote value] progress]\n          (let [env    (get-env remote value)\n                action (get dispatch :progress-action)]\n            (when action\n              (try\n                (action env)\n                (catch #?(:cljs :default :clj Exception) e\n                  (log/error e \"Progress action threw an exception in mutation\" (:dispatch-key original-ast-node) \"See https://book.fulcrologic.com/#err-txp-progress-action-exc\"))))))\n        (update-in node [::elements idx] dissoc ::progress))\n      tx-node\n      elements)))\n\n(defn process-tx-node!\n  [app {:keys [::options] :as tx-node}]\n  [:com.fulcrologic.fulcro.application/app ::tx-node => (s/nilable ::tx-node)]\n  (let [optimistic? (boolean (:optimistic? options))]\n    (if (fully-complete? app tx-node)\n      nil\n      (-> tx-node\n        (cond->>\n          optimistic? (run-actions! app)\n          (not optimistic?) (advance-actions! app))\n        (->>\n          (queue-sends! app)\n          (update-progress! app)\n          (distribute-results! app))))))\n\n(defn requested-refreshes [app queue]\n  [:com.fulcrologic.fulcro.application/app (s/coll-of ::tx-node) => set?]\n  \"Returns a set of refreshes that have been requested by active mutations in the queue\"\n  (reduce\n    (fn [outer-acc tx-node]\n      (let [env (build-env app tx-node)]\n        (reduce\n          (fn [acc element]\n            (let [{::keys [dispatch]} element\n                  refresh (:refresh dispatch)]\n              (if refresh\n                (into acc (set (refresh env)))\n                acc)))\n          outer-acc\n          (::elements tx-node))))\n    #{}\n    queue))\n\n(defn remotes-active-on-node\n  \"Given a tx node and the set of legal remotes: returns a set of remotes that are active on that node.\"\n  [{::keys [elements] :as tx-node} remotes]\n  [::tx-node :com.fulcrologic.fulcro.application/remote-names\n   => :com.fulcrologic.fulcro.application/remote-names]\n  (let [active-on-element (fn [{::keys [dispatch complete?]}]\n                            (let [remotes (set remotes)]\n                              (-> remotes\n                                (set/intersection (set (keys dispatch)))\n                                (set/difference complete?))))]\n    (reduce\n      (fn [acc ele]\n        (set/union acc (active-on-element ele)))\n      #{}\n      elements)))\n\n(defn active-remotes\n  \"Calculate which remotes still have network activity to do on the given active queue.\"\n  [queue remotes]\n  [::active-queue :com.fulcrologic.fulcro.application/remote-names\n   => :com.fulcrologic.fulcro.application/active-remotes]\n  (reduce\n    (fn [ra n]\n      (set/union ra (remotes-active-on-node n remotes)))\n    #{}\n    queue))\n\n(defn process-queue!\n  \"Run through the active queue and do a processing step.\"\n  [{:com.fulcrologic.fulcro.application/keys [state-atom runtime-atom] :as app}]\n  [:com.fulcrologic.fulcro.application/app => any?]\n  (let [new-queue        (reduce\n                           (fn *pstep [new-queue n]\n                             (if-let [new-node (process-tx-node! app n)]\n                               (conj new-queue new-node)\n                               new-queue))\n                           []\n                           (::active-queue @runtime-atom))\n        accumulate       (fn [r items] (into (set r) items))\n        remotes          (app->remote-names app)\n        schedule-render! (ah/app-algorithm app :schedule-render!)\n        explicit-refresh (requested-refreshes app new-queue)\n        remotes-active?  (active-remotes new-queue remotes)]\n    (swap! state-atom assoc :com.fulcrologic.fulcro.application/active-remotes remotes-active?)\n    (swap! runtime-atom assoc ::active-queue new-queue)\n    (when (seq explicit-refresh)\n      (swap! runtime-atom update :com.fulcrologic.fulcro.application/to-refresh accumulate explicit-refresh))\n    (schedule-render! app)\n    nil))\n\n(defn transact-sync!\n  \"Run the optimistic action(s) of a transaction synchronously. It is primarily used to deal with controlled inputs, since they\n   have issues working asynchronously, so ideally the mutation in question will *not* have remote action (though they\n   are allowed to).\n\n   NOTE: any *remote* behaviors of `tx` will *still be async*.\n\n   This function:\n\n   * Runs the optimistic side of the mutation(s)\n   * IF (and only if) one or more of the mutations has more sections than just an `action` then it submits the mutation to the normal transaction queue,\n     but with the optimistic part already done.\n   * This functions *does not* queue a render refresh (though if the normal transaction queue is updated, it will queue tx remote processing, which will trigger a UI refresh).\n\n   If you pass it an on-screen instance that has a query and ident, then this function tunnel updated UI props synchronously to that\n   component so it can refresh immediately and avoid DOM input issues.\n\n   Returns the new component props or the final state map if no component was used in the transaction.\n   \"\n  [app tx {:keys [component ref] :as options}]\n  (let [mutation-nodes      (:children (eql/query->ast tx))\n        ast-node->operation (zipmap mutation-nodes (map (fn [ast-node] (m/mutate {:ast ast-node})) mutation-nodes))\n        {optimistic true\n         mixed      false} (group-by #(= #{:action :result-action} (-> (ast-node->operation %) keys set)) mutation-nodes)\n        optimistic-tx-node  (when (seq optimistic)\n                              (let [node (tx-node (eql/ast->query {:type :root :children optimistic}) options)]\n                                (dispatch-elements node (build-env app node) m/mutate)))\n        mixed-tx-node       (when (seq mixed)\n                              (let [node (tx-node (eql/ast->query {:type :root :children mixed}) options)]\n                                (dispatch-elements node (build-env app node) m/mutate)))\n        resulting-node-id   (atom nil)]\n    (when optimistic-tx-node (run-actions! app optimistic-tx-node))\n    (when mixed-tx-node\n      (let [node         (run-actions! app mixed-tx-node)\n            runtime-atom (:com.fulcrologic.fulcro.application/runtime-atom app)]\n        (reset! resulting-node-id (::id node))\n        (swap! runtime-atom update ::active-queue conj node)\n        (schedule-queue-processing! app 20)))\n    (cond\n      (and component (comp/component? component) (comp/has-ident? component)) (comp/refresh-component! component)\n      ref (let [r! (ah/app-algorithm app :render!)] (when r! (r! app)))\n      :else (when #?(:cljs js/goog.DEBUG :clj true)\n              (log/warn \"Synchronous transaction was submitted on the app or a component without an ident. No UI refresh will happen. See https://book.fulcrologic.com/#warn-tx-missing-ident\")))\n    @resulting-node-id))\n\n(defn default-tx!\n  \"Default (Fulcro-2 compatible) transaction submission. The options map can contain any additional options\n  that might be used by the transaction processing (or UI refresh).\n\n  Some that may be supported (depending on application settings):\n\n  - `:optimistic?` - boolean. Should the transaction be processed optimistically?\n  - `:ref` - ident. The component ident to include in the transaction env.\n  - `:component` - React element. The instance of the component that should appear in the transaction env.\n  - `:refresh` - Vector containing idents (of components) and keywords (of props). Things that have changed and should be re-rendered\n    on screen. Only necessary when the underlying rendering algorithm won't auto-detect, such as when UI is derived from the\n    state of other components or outside of the directly queried props. Interpretation depends on the renderer selected:\n    The ident-optimized render treats these as \\\"extras\\\".\n  - `:only-refresh` - Vector of idents/keywords.  If the underlying rendering configured algorithm supports it: The\n    components using these are the *only* things that will be refreshed in the UI.\n    This can be used to avoid the overhead of looking for stale data when you know exactly what\n    you want to refresh on screen as an extra optimization. Idents are *not* checked against queries.\n\n  WARNING: `:only-refresh` can cause missed refreshes because rendering is debounced. If you are using this for\n           rapid-fire updates like drag-and-drop it is recommended that on the trailing edge (e.g. drop) of your sequence you\n           force a normal refresh via `app/render!`.\n\n  If the `options` include `:ref` (which comp/transact! sets), then it will be auto-included on the `:refresh` list.\n\n  NOTE: Fulcro 2 'follow-on reads' are supported and are added to the `:refresh` entries. Your choice of rendering\n  algorithm will influence their necessity.\n\n  Returns the transaction ID of the submitted transaction.\n  \"\n  ([app tx]\n   [:com.fulcrologic.fulcro.application/app ::tx => ::id]\n   (default-tx! app tx {}))\n  ([{:com.fulcrologic.fulcro.application/keys [runtime-atom] :as app} tx {:keys [synchronous?] :as options}]\n   [:com.fulcrologic.fulcro.application/app ::tx ::options => ::id]\n   (if synchronous?\n     (transact-sync! app tx options)\n     (do\n       (schedule-activation! app)\n       (let [{:keys [refresh only-refresh ref] :as options} (merge {:optimistic? true} options)\n             follow-on-reads (into #{} (filter #(or (keyword? %) (eql/ident? %)) tx))\n             node            (tx-node tx options)\n             accumulate      (fn [r items] (into (set r) items))\n             refresh         (cond-> (set refresh)\n                               (seq follow-on-reads) (into follow-on-reads)\n                               ref (conj ref))]\n         (swap! runtime-atom (fn [s] (cond-> (update s ::submission-queue (fn [v n] (conj (vec v) n)) node)\n                                       ;; refresh sets are cumulative because rendering is debounced\n                                       (seq refresh) (update :com.fulcrologic.fulcro.application/to-refresh accumulate refresh)\n                                       (seq only-refresh) (update :com.fulcrologic.fulcro.application/only-refresh accumulate only-refresh))))\n         (::id node))))))\n\n(defn- abort-elements!\n  \"Abort any elements in the given send-queue that have the given abort id.\n\n  Aborting will cause the network to abort (which will report a result), or if the item is not yet active a\n  virtual result will still be sent for that node.\n\n  Returns a new send-queue that no longer contains the aborted nodes.\"\n  [{:keys [abort!] :as remote} send-queue abort-id]\n  (if abort!\n    (reduce\n      (fn [result {::keys [active? options result-handler] :as send-node}]\n        (let [aid (or (-> options ::abort-id) (-> options :abort-id))]\n          (cond\n            (not= aid abort-id) (do\n                                  (conj result send-node))\n            active? (do\n                      (abort! remote abort-id)\n                      result)\n            :otherwise (do\n                         (result-handler {:status-text \"Cancelled\" ::aborted? true})\n                         result))))\n      []\n      send-queue)\n    (do\n      (log/error \"Cannot abort network requests. The remote has no abort support! See https://book.fulcrologic.com/#err-txp-cant-abort\")\n      send-queue)))\n\n(defn abort!\n  \"Implementation of abort when using this tx processing\"\n  [app abort-id]\n  (let [{:com.fulcrologic.fulcro.application/keys [runtime-atom]} (comp/any->app app)\n        runtime-state   @runtime-atom\n        {:com.fulcrologic.fulcro.application/keys [remotes]\n         ::keys                                   [send-queues]} runtime-state\n        remote-names    (keys send-queues)\n        new-send-queues (reduce\n                          (fn [result remote-name]\n                            (assoc result remote-name (abort-elements!\n                                                        (get remotes remote-name)\n                                                        (get send-queues remote-name) abort-id)))\n                          {}\n                          remote-names)]\n    (swap! runtime-atom assoc ::send-queues new-send-queues)))\n\n(defn abort-remote!\n  \"Cause everything in the active network queue for remote to be cancelled. Any result that (finally) appears for aborted\n  items will be ignored. This will cause a hard error to be \\\"received\\\" as the result for everything\n  that is in the send queue of the given remote.\n\n  This function is mainly meant for use in development mode when dealing with a buggy remote implementation.\"\n  [app-ish remote]\n  (let [app            (comp/any->app app-ish)\n        {:com.fulcrologic.fulcro.application/keys [state-atom runtime-atom]} (comp/any->app app)\n        {abort-network! :abort!\n         :as            the-remote} (get @runtime-atom [:com.fulcrologic.fulcro.application/remotes remote])\n        old-send-queue (get-in @runtime-atom [::send-queues remote])]\n    (swap! runtime-atom assoc-in [::send-queues remote] [])\n    (swap! state-atom update :com.fulcrologic.fulcro.application/active-remotes (fnil disj #{}) remote)\n    (doseq [{::keys [active? options result-handler] :as send-node} old-send-queue\n            aid (or (-> options ::abort-id) (-> options :abort-id))]\n      (try\n        (when active?\n          (if abort-network!\n            (abort-network! the-remote aid)\n            (log/warn \"Remote does not support abort. Clearing the queue, but a spurious result may still appear. See https://book.fulcrologic.com/#warn-tx-remote-abort-not-supported\")))\n        (result-handler {:status-code 500\n                         :body        {}\n                         :status-text \"Globally Aborted\"\n                         ::aborted?   true})\n        (catch #?(:clj Exception :cljs :default) e\n          (log/error e \"Failed to abort send node. See https://book.fulcrologic.com/#err-txp-abort-failed\"))))))\n","~:reader-features",["^L",["~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings",";AAuBA,AAAA;AAAA;AAAA,AAEA;;;kEAAA,lEAAMA,4IAEHC;AAFH,AAAA,mFAAA,gKAAA,zCAG2CC;;AACzC,OAAA,4JAAA,gBAAA,AAAA,uKAAID,vLAAqDE;;AAE3D;;;uEAAA,vEAAMC,sJAEHH;AAFH,AAAA,mFAAA,gKAAA,zCAG2CC;;AACzC,qBAAA,eAAA,AAAA,4JAAA,gBAAA,AAAA,uKAAID,vLAAqDE,3KAAkDE,dAAKC;;AAElH;;;;mEAAA,nEAAMC,8IAGHC;AAHH,AAAA,mFAIG,AAAAC,yDAAA,AAAA,4JAAA,4JAAA,2CAAA,6FAAA,AAAA,iFAAA,oFAAA,WAAAC;AAAA,AAAA,+BAAAA,xBAA6BC;GAA7B,6EAAA,8FAAA,KAAA,0FAAA,AAAA,sZAAA,3mBAA6BA,inBAAST,yCAAG,AAAAU,yBAAA,mFAAA,8CAAA,8DAAA,mFAAA,+JAAA,uKAAA,AAAA;;AAC1C,IAAMI,kBAAU,WAAAC;AAAA,AAAA,IAAAC,aAAAD;IAAAC,iBAAA,AAAAJ,4BAAAI;IAAAC,UAAA,AAAAJ,4CAAAG,eAAA;AAAA,AACE,OAACE,mBAAQ,iBAAAC,mBAAI,AAAA,4FAAYF;AAAhB,AAAA,oBAAAE;AAAAA;;AAAyB,OAAA,0LAAaF;;;;IADjEN,aAGyB,AAACW,mBAASR,gBAAUR;IAH7CK,iBAAA,AAAAC,4BAAAD;eAAA,AAAAE,4CAAAF,eAAA,tEAEOS;iBAFP,AAAAP,4CAAAF,eAAA,xEAGOU;AAHP,AAAA,0FAIG,AAACE,cAAIH,UAAU,AAACG,cAAIF;;AAEzB;;;mEAAA,nEAAMG,8IAEHC,iBAAiBC;AAFpB,AAAA,mFAAA,gJAGSC,oBAAI3B,yCAAG4B;;AACd,GAAI,6CAAA,7CAACC,kGAAQ,AAAA,mFAAOJ;AAClB,OAACK,uBAAOJ,KAAK,AAAA,2FAAWD;;AACxB,QAACC,qCAAAA,uDAAAA,pBAAKD,mCAAAA;;;AAEV;;;sEAAA,tEAAMM,oJAEHN;AAFH,AAAA,mFAAA,gJAGSzB,yCAAG4B;;AACV,yFAAA,WAAAI,7FAACR,iEAAWC;AAAZ,AAA8B,oDAAA,7CAACI,kGAAQ,AAAA,mFAAAG;;;AAEzC;;;mEAAA,nEAAMC,8IAEHR;AAFH,AAAA,mFAAA,gJAGSzB,yCAAG4B;;AACV,yFAAA,WAAAM,7FAACV,iEAAWC;AAAZ,AAA8B,uDAAA,hDAACU,qGAAW,AAAA,mFAAAD;;;AAE5C;;;;iFAAA,jFAAME,0KAGHC;AAHH,AAAA,mFAAA,wMAAA,zCAIgBrC;;AACd,IAAAsC,aAAgC,qBAAA,rBAACI,4KAAqBL;mBAAtD,AAAAE,4CAAAD,WAAA,IAAA,1EAAOG;qBAAP,AAAAF,4CAAAD,WAAA,IAAA,5EAAoBD;IACdM,cAAY,AAACC,6CAAK,WAAKC;AAAL,AAAQ,OAAA,4KAAA,gBAAIA,hBAAEC;GAAa,qDAAA,rDAACC,mMAAkBV;IAChEW,WAAY,mBAAA,nBAAC1B,iKAAc,AAACC,cAAIc;IAFtCG,aAG6B,AAACW,+CACC,WAAKC,OAAOC;AAAZ,AACE,IAAAC,aAA8C,AAACzC,4CAAImC,SAASK;IAA5DE,aAAA,AAAAC,cAAAF;IAAAG,eAAA,AAAAX,gBAAAS;IAAAA,iBAAA,AAAAG,eAAAH;IAAAI,aAAAF;IAAAE,iBAAA,AAAA/C,4BAAA+C;QAAAA,JAA0Bd;IAA1Be,MAAA,AAAA/C,4CAAA8C,eAAA;QAAAJ,JAA+BM;cAA/BP,VAAqCQ;AAArC,AACE,GACE,QAAA,PAAMF;AAAKR;;AADb,oBAEE,AAACnB,iEAAW2B;AAAK,6DAAA,tDAACG,+CAAOX,+DAAcY,eAAKF;;AAF9C,oBAGE,AAAC/B,oEAAc6B;AAAK,6DAAA,tDAACG,+CAAOX,gEAAeY,eAAKF;;AAHlD,AAIQV;;;;;GAPd,2CAAA,wDAAA,iCAAA,yDAAA,yCASET;IAZ/BH,iBAAA,AAAA5B,4BAAA4B;YAAA,AAAA3B,4CAAA2B,eAAA,nEAGcS;aAHd,AAAApC,4CAAA2B,eAAA,pEAGoBU;IAUdb,iBAAY,6CAAA,7CAAC4B,8EAAQ,AAACC,sDAAOzB,aAAaS,yDAAOD;AAbvD,AAcEZ;;AAEJ,2DAAA,mEAAA8B,9HAAME;AAAN,AAAA,IAAAD,aAAAD;IAAAC,iBAAA,AAAAxD,4BAAAwD;UAAAA,NACkCR;WADlC,AAAA/C,4CAAAuD,eAAA,lEACWE;UADX,AAAAzD,4CAAAuD,eAAA,jEACgBG;eADhB,AAAA1D,4CAAAuD,eAAA,tEACoBI;AADpB,AAAA,mFAAA,gJAESxE,yCAAG,AAAAO,yDAAA,AAAA,6FAAA,6FAAA,2CAAA,6FAAA,AAAA,KAAA,oFAAA,WAAAkE;AAAA,AAAA,OAAAC,sBAAAD;GAAA,8FAAA,KAAA,0FAAA,AAAA,iNAAA;;AACV,GAAI,6CAAA,7CAAC5C,kGAAQyC;AACX,oDAAA,7CAACL,+EAAS,4CAAA,5CAACU,iGAAUH;;AADvB,sDAEID;;;AAEN;;;;gEAAA,hEAAMK,wIAGH7E,QAAI8E,YAAYxC;AAHnB,AAAA,mFAAA,uHAAA,uIAAA,+JAIwGrC,yCAAG,AAAA8E,8BAAA,wCAAA,yDAAA,wDAAA,kDAAA,iEAAA,8DAAA,6DAAA,8DAAA,mDAAA,4DAAA,+DAAA,gEAAA,qDAAA,AAAA,KAAA,AAAA,KAAA,KAAA,mFAAA,WAAAC;AAAA,AAAA,OAAAC,qBAAAD;GAAA,WAAAA;AAAA,AAAA,OAAAE,0BAAAF,SAAA;WAAA,WAAAA;AAAA,AAAA,SAAA,AAAAC,qBAAAD,eAAA,AAAAE,0BAAAF,SAAA;GAAA,AAAA,uPAAA,AAAA,0PAAA,AAAA,0PAAA,AAAA,0PAAA,AAAA,uPAAA,AAAA,y+BAAA,AAAA;;AACzG,IAAAG,aAAgC,qBAAA,rBAACxC,4KAAqBL;mBAAtD,AAAAE,4CAAA2C,WAAA,IAAA,1EAAOE;qBAAP,AAAA7C,4CAAA2C,WAAA,IAAA,5EAAoB7C;IACdA,iBAAkB,AAACD,+EAA+B,AAACb,cAAIc;IACvDgD,aAAkB,AAAA,4KAAA,gBAAIhD,hBAAWS;IACjC7B,UAAkB,AAAA,sLAAA,gBAAIoB,hBAAWS;IAHvCqC,aAIyB,qBAAA,WAAAK,hCAAC9C;AAAD,AAAa,OAACb,6CAAEwD,WAAW,AAAA,4KAAAG;GAAUnD;cAJ9D,AAAAE,4CAAA4C,WAAA,IAAA,rEAIOG;eAJP,AAAA/C,4CAAA4C,WAAA,IAAA,tEAIeI;IACTE,KAAkB,AAACtC,+CACC,eAAAuC,JAAKE;AAAL,AAAA,IAAAD,aAAAD;IAAAC,iBAAA,AAAA/E,4BAAA+E;IAAA/B,MAAA,AAAA/C,4CAAA8E,eAAA;AAAA,AACE,IAAMF,KAAG,AAACI,2DAAiBjC;AAA3B,AACE,OAACK,6CAAK2B,IAAIH;GAHhB,iCAKEH;IACpB1B,MAAkB,AAACkC,sCAAeL;IAClCM,mBAAkB,AAACC;wBAZzB,pBAaMC;oBAbN,2CAAA,+JAAA,mKAAA,oJAAA,gKAAA,jrBAcMC,yMAAoCH,kKACAE,kKACArC,4JACA3C,+KACA,WAAAkF;AAAA,AAAA,IAAAC,aAAAD;IAAAC,iBAAA,AAAAxF,4BAAAwF;sBAAAA,lBAAuBE;WAAvB,AAAAzF,4CAAAuF,eAAA,lEAAaC;AAAb,AACE,IAAAE,aAAA,AAAA/C,cAAkC8B;IAAlCkB,eAAA;IAAAC,eAAA;IAAAC,WAAA;;AAAA,AAAA,GAAA,AAAA,CAAAA,WAAAD;AAAA,IAAAE,aAAA,AAAAH,kDAAAE;IAAAC,iBAAA,AAAA/F,4BAAA+F;qBAAA,AAAA9F,4CAAA8F,eAAA,5EAAiBQ;AAAjB,AAAA,AACE,oBAAMA;AAAN,AACE,CAACA,+CAAAA,gEAAAA,nBAAeb,4CAAAA;;AADlB;;AADF;AAAA,eAAAC;eAAAC;eAAAC;eAAA,CAAAC,WAAA;;;;;;;AAAA,IAAAE,qBAAA,AAAApD,cAAA+C;AAAA,AAAA,GAAAK;AAAA,AAAA,IAAAL,iBAAAK;AAAA,AAAA,GAAA,AAAAC,6BAAAN;AAAA,IAAAO,kBAAA,AAAAC,sBAAAR;AAAA,AAAA,eAAA,AAAAS,qBAAAT;eAAAO;eAAA,AAAAG,gBAAAH;eAAA;;;;;;;AAAA,IAAAI,aAAA,AAAApE,gBAAAyD;IAAAW,iBAAA,AAAAtG,4BAAAsG;qBAAA,AAAArG,4CAAAqG,eAAA,5EAAiBC;AAAjB,AAAA,AACE,oBAAMA;AAAN,AACE,CAACA,+CAAAA,gEAAAA,nBAAeb,4CAAAA;;AADlB;;AADF;AAAA,eAAA,AAAA5C,eAAA6C;eAAA;eAAA;eAAA;;;;;;;;AAAA;;;;;GAnB5C,sKAsB0C,WAAAa;AAAA,AAAA,IAAAC,aAAAD;IAAAC,iBAAA,AAAAzG,4BAAAyG;sBAAAA,lBAAuBf;WAAvB,AAAAzF,4CAAAwG,eAAA,lEAAahB;AAAb,AACE,IAAAiB,mBAAA,AAAA9D,cAAsC8B;IAAtCiC,qBAAA;IAAAC,qBAAA;IAAAC,iBAAA;;AAAA,AAAA,GAAA,AAAA,CAAAA,iBAAAD;AAAA,IAAAE,mBAAA,AAAAH,wDAAAE;IAAAC,uBAAA,AAAA9G,4BAAA8G;oBAAA,AAAA7G,4CAAA6G,qBAAA,jFAAiB9D;2BAAjB,AAAA/C,4CAAA6G,qBAAA,xFAAqBE;AAArB,AAAA,AACE,IAAMC,iBAAS,EAAI,AAAC7C,qBAAKqB,OACR,AAACyB,sBAAYzB,KAAK,AAAChC,yDAAST,gBAC5ByC;IACXjD,eAAS,8DAAA,9DAAC2E,8CAAMzB,sEAAsBuB;AAH5C,AAIE,oBAAA,iBAAAG,oBAAA,iBAAA7G,mBAAA8G;AAAA,AAAA,oBAAA9G;AAAAA;;AAAA+G;;;AAAA,AAAA,oBAAAF;AAAA,OAAA7F,gDAAA,WAAA+F;;AAAAF;;;AAAA,AAAA,IAAA,AAAA,IAAAG,mBAA0C/E;IAA1C+E,uBAAA,AAAAvH,4BAAAuH;wBAAA,AAAAtH,4CAAAsH,qBAAA,rFAAuBK;qBAAvB,AAAA3H,4CAAAsH,qBAAA,lFAAmC9B;AAAnC,AACE,GAAI,6CAAA,7CAACxE,mDAAM2G;AACT,AAACC,kEAAuB1I,QAAI8E,YAAYkB,iBAAiBM;;AACzD,AAACqC,gEAAqB3I,QAAIgG,iBAAiB,4CAAKyC;;gBAHpD,IAAAJ,UAAAC;AAAA,AAAA;AAAA;;AAIA,CAACT,qDAAAA,mEAAAA,hBAAexE,+CAAAA;;AATpB;AAAA,eAAAkE;eAAAC;eAAAC;eAAA,CAAAC,iBAAA;;;;;;;AAAA,IAAAb,2BAAA,AAAApD,cAAA8D;AAAA,AAAA,GAAAV;AAAA,AAAA,IAAAU,uBAAAV;AAAA,AAAA,GAAA,AAAAC,6BAAAS;AAAA,IAAAR,wBAAA,AAAAC,sBAAAO;AAAA,AAAA,eAAA,AAAAN,qBAAAM;eAAAR;eAAA,AAAAG,gBAAAH;eAAA;;;;;;;AAAA,IAAAa,mBAAA,AAAA7E,gBAAAwE;IAAAK,uBAAA,AAAA/G,4BAAA+G;oBAAA,AAAA9G,4CAAA8G,qBAAA,jFAAiB/D;2BAAjB,AAAA/C,4CAAA8G,qBAAA,xFAAqBC;AAArB,AAAA,AACE,IAAMC,iBAAS,EAAI,AAAC7C,qBAAKqB,OACR,AAACyB,sBAAYzB,KAAK,AAAChC,yDAAST,gBAC5ByC;IACXjD,eAAS,8DAAA,9DAAC2E,8CAAMzB,sEAAsBuB;AAH5C,AAIE,oBAAA,iBAAAG,oBAAA,iBAAA7G,mBAAA8G;AAAA,AAAA,oBAAA9G;AAAAA;;AAAA+G;;;AAAA,AAAA,oBAAAF;AAAA,OAAA7F,gDAAA,WAAA+F;;AAAAF;;;AAAA,AAAA,IAAA,AAAA,IAAAM,mBAA0ClF;IAA1CkF,uBAAA,AAAA1H,4BAAA0H;wBAAA,AAAAzH,4CAAAyH,qBAAA,rFAAuBE;qBAAvB,AAAA3H,4CAAAyH,qBAAA,lFAAmCjC;AAAnC,AACE,GAAI,6CAAA,7CAACxE,mDAAM2G;AACT,AAACC,kEAAuB1I,QAAI8E,YAAYkB,iBAAiBM;;AACzD,AAACqC,gEAAqB3I,QAAIgG,iBAAiB,4CAAKyC;;gBAHpD,IAAAJ,UAAAG;AAAA,AAAA;AAAA;;AAIA,CAACX,qDAAAA,mEAAAA,hBAAexE,+CAAAA;;AATpB;AAAA,eAAA,AAAAM,eAAA4D;eAAA;eAAA;eAAA;;;;;;;;AAAA;;;;;AAUA,QAACqB,kGAAAA,0JAAAA,1DAAa5I,sIAAAA,9HAAI8E,sIAAAA,1HAAYkB,sIAAAA,rHAAiBE,sIAAAA;GAjC3F,uJAAA;AAAA,AAmCE,GAAI,AAACzC,cAAI8B;AAAT,kDAAA,0KAAA,dACgBY,6KACA,6CAAA,7CAACjC,8EAAQ,mEAAA,nEAACC,sDAAOkB,gGAAcc,wEAAeX;;AAF9D,kDAAA,+JAGgBlD;;;AAEpB;;;;iEAAA,jEAAMuG,0IAGH7I,QAAI8I,UAAUhE;AAHjB,AAAA,mFAAA,uHAAA,4JAAA,uIAIuG7E,yCAAG8I;;AACxG,IAAAC,oBAAuB,AAAClI,4CAAI,AAACf,gEAAaC,SAAK8E;AAA/C,AAAA,oBAAAkE;AAAA,aAAAA,TAAaC;AAAb,AAAA,IAAAD,wBACuB,mDAAA,nDAAClI,4CAAImI;AAD5B,AAAA,oBAAAD;AAAA,qBAAAA,jBACaE;AADb,AAEE,IAAA,AACE,oBAAA,iBAAAjB,oBAAA,iBAAA7G,mBAAA8G;AAAA,AAAA,oBAAA9G;AAAAA;;AAAA+G;;;AAAA,AAAA,oBAAAF;AAAA,OAAA7F,gDAAA,WAAA+F;;AAAAF;;;AAAA,AAAA,IAAA,AAAA,IAAevC,WAAG,AAACI,2DAAiB,AAAA,8KAAOgD;AAA3C,AACE,AAACO,iEAAsBrJ,QAAI8E,YAAY,AAAA,4KAAMgE,WAAWpD;gBAD1D,IAAA2C,UAAAe;AAAA,AAAA;AAAA;;AAEA,QAACF,+CAAAA,iEAAAA,pBAAUD,6CAAAA,tCAAOH,6CAAAA;gBAHpB,QAAAK,JAI2Cd;AAJ3C,AAKI,AAAAiB,0DAAAC,mCAAA,uDAAA,kDAAA,KAAA,IAAA,8CAAA,qDAAA,KAAAC,gBAAA;AAAA,AAAA,4FAAA,uRAAA,zRAAWnB,oCAAoC,AAACvC,2DAAiB,AAAA,8KAAOgD;GAAxE,OAAA,KAAA,WAAA;;AACA,IAAA,AACE,oBAAA,iBAAAb,oBAAA,iBAAA7G,mBAAA8G;AAAA,AAAA,oBAAA9G;AAAAA;;AAAA+G;;;AAAA,AAAA,oBAAAF;AAAA,OAAA7F,gDAAA,WAAA+F;;AAAAF;;;AAAA,AAAA,IAAA,AACE,+PAAA,/PAACU,gEAAqB3I,QAAI,AAAA,4KAAM8I;gBADlC,IAAAT,cAAAqB;AAAA,AAAA;AAAA;;AAEA,IAAAC,WAAA,2CAAA,oEAAA,MAAA,8EACiDtB;IADjDuB,eAAC,AAAA,oMAAkBd;AAAnB,AAAA,QAAAc,6CAAAA,2CAAAD,YAAAC,uBAAAD;gBAHF,YAAAF,RAK2CpB;AAL3C,AAMI,OAAAiB,0DAAAC,mCAAA,uDAAA,kDAAA,KAAA,IAAA,8CAAA,qDAAA,KAAAC,gBAAA;AAAA,AAAA,gGAAA,NAAWnB;GAAX,OAAA,KAAA,UAAA;;AACR,AACE,AAAAiB,0DAAAC,mCAAA,uDAAA,kDAAA,KAAA,IAAA,8CAAA,qDAAA,KAAAC,gBAAA;AAAA,AAAA,0FAAA,iDAAA,ZAAgD1E;GAAhD,OAAA,KAAA,WAAA;;AACA,IAAA+E,WAAA,2CAAA,oEAAA,MAAA,2DAAA;IAAAC,eAAC,AAAA,oMAAkBhB;AAAnB,AAAA,QAAAgB,6CAAAA,2CAAAD,YAAAC,uBAAAD;;;AAFF,AACE,AAAAP,0DAAAC,mCAAA,uDAAA,kDAAA,KAAA,IAAA,8CAAA,qDAAA,KAAAC,gBAAA;AAAA,AAAA,0FAAA,iDAAA,ZAAgD1E;GAAhD,OAAA,KAAA,WAAA;;AACA,IAAAiF,WAAA,2CAAA,oEAAA,MAAA,2DAAA;IAAAC,eAAC,AAAA,oMAAkBlB;AAAnB,AAAA,QAAAkB,6CAAAA,2CAAAD,YAAAC,uBAAAD;;;AAGN;;;4EAAA,oFAAAE,hKAAME;AAAN,AAAA,IAAAD,aAAAD;IAAAC,iBAAA,AAAArJ,4BAAAqJ;cAAAA,VAEgElK;mBAFhE,AAAAc,4CAAAoJ,eAAA,1EAE8CE;AAF9C,AAAA,mFAAA,gKAAA,zCAG2CnK;;AACzC,IAAMoK,cAAgB,AAAA,+LAAA,gBAAID,hBAAalK;IACjCoK,eAAgB,AAACnK,qEAAkBH;IACnCuK,aAAgB,6CAAA,7CAACC;IACjBC,kBAAgB,AAACrH,+CACC,WAAKqH,gBAAgBxB;AAArB,AACE,IAAM3G,aAAW,+DAAA,/DAACxB,4CAAIuJ,YAAYpB;IAAlCyB,aACiB,AAACpK,iEAAiBgC;QADnC,AAAAE,4CAAAkI,WAAA,IAAA,/DACOC;aADP,AAAAnI,4CAAAkI,WAAA,IAAA,pEACSE;IACHC,QAAW,AAAC9H,gBAAM6H;AAFxB,AAIE,IAAAE,mBAAA,AAAArH,cAAakH;IAAbI,qBAAA;IAAAC,qBAAA;IAAAC,iBAAA;;AAAA,AAAA,GAAA,AAAA,CAAAA,iBAAAD;AAAA,iBAAA,AAAAD,wDAAAE,rEAAQC;AAAR,AAAA,AACE,6EAAA,7EAACC,mDAAMZ,WAAWa;;AAAlB,AAAwB,OAACvC,+DAAU7I,QAAIkL,WAAKjC;;;;AAD9C;AAAA,eAAA6B;eAAAC;eAAAC;eAAA,CAAAC,iBAAA;;;;;;;AAAA,IAAApE,2BAAA,AAAApD,cAAAqH;AAAA,AAAA,GAAAjE;AAAA,AAAA,IAAAiE,uBAAAjE;AAAA,AAAA,GAAA,AAAAC,6BAAAgE;AAAA,IAAA/D,wBAAA,AAAAC,sBAAA8D;AAAA,AAAA,eAAA,AAAA7D,qBAAA6D;eAAA/D;eAAA,AAAAG,gBAAAH;eAAA;;;;;;;AAAA,iBAAA,AAAAhE,gBAAA+H,7BAAQI;AAAR,AAAA,AACE,6EAAA,7EAACC,mDAAMZ,WAAWa;;AAAlB,AAAwB,OAACvC,+DAAU7I,QAAIkL,WAAKjC;;;;AAD9C;AAAA,eAAA,AAAAtF,eAAAmH;eAAA;eAAA;eAAA;;;;;;;;AAAA;;;;;AAGA,oBAAI,AAAA,qLAAWD;AACb,OAAC7C,8CAAMyC,gBAAgBxB,OAAO2B;;AAC9B,IAAAS,aAAsC,AAACxG,8DAAc7E,QAAIiJ,OAAO2B;IAAhES,iBAAA,AAAAxK,4BAAAwK;qBAAA,AAAAvK,4CAAAuK,eAAA,5EAAe/I;gBAAf,AAAAxB,4CAAAuK,eAAA,vEAA0BvC;AAA1B,AACE,oBAAMA;AAAN,AACE,6EAAA,7EAACqC,mDAAMZ,WAAWa;AAAlB,AAAwB,OAACvC,+DAAU7I,QAAI8I,UAAUG;;;AADnD;;AAEA,OAACjB,8CAAMyC,gBAAgBxB,OAAO3G;;GAdxC,mCAgBEgI;AAnBxB,AAoBE,gFAAA,hFAACa,mDAAMf,aAAakB,iLAAoBb;;AAIxC,IAAAc,mBAAA,AAAA9H,cAAA,AAAAvD,gBAAYqK;IAAZiB,qBAAA;IAAAC,qBAAA;IAAAC,iBAAA;;AAAA,AAAA,GAAA,AAAA,CAAAA,iBAAAD;AAAA,eAAA,AAAAD,wDAAAE,nEAAQC;AAAR,AAAA,AACE,CAACA,yCAAAA,2CAAAA;;AADH;AAAA,eAAAJ;eAAAC;eAAAC;eAAA,CAAAC,iBAAA;;;;;;;AAAA,IAAA7E,2BAAA,AAAApD,cAAA8H;AAAA,AAAA,GAAA1E;AAAA,AAAA,IAAA0E,uBAAA1E;AAAA,AAAA,GAAA,AAAAC,6BAAAyE;AAAA,IAAAxE,wBAAA,AAAAC,sBAAAuE;AAAA,AAAA,eAAA,AAAAtE,qBAAAsE;eAAAxE;eAAA,AAAAG,gBAAAH;eAAA;;;;;;;AAAA,eAAA,AAAAhE,gBAAAwI,3BAAQI;AAAR,AAAA,AACE,CAACA,yCAAAA,2CAAAA;;AADH;AAAA,eAAA,AAAAhI,eAAA4H;eAAA;eAAA;eAAA;;;;;;;;AAAA;;;;;AAEAd;;AAEJ,AAAA,0DAAA,kEAAAmB,5HAAME;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,sFAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,sFAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAC,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,wFAAA,xFAAMD,mGACFpG;AADJ,AAAA,mFAAA,wLAAA,zCAESzF;;AACN,gGAAA,zFAAC+L,sFAAQtG;;;AAHZ,CAAA,wFAAA,xFAAMoG,mGAIFpG,GAAGxE;AAJP,AAAA,mFAAA,+IAAA,iMAAA,zCAKmBjB;;AAChB,IAAM4D,MAAU,AAACkC,sCAAeL;IAC1BuG,YAAU,AAAA,2FAAWpI;IACrBqI,WAAU,6CAAA,7CAAChI,8EACC,AAACiI,6CACC,AAACC,+CAAO,uEAAatJ;AAAb,AAAgB,oDAAA,7CAAChB,kGAAQ,AAAA,mFAAOgB;IACxC,AAACuJ,oDACC,4EAAeC,IAAIC;AAAnB,AAAA,kDAAA,qJAAA,qLAAA,0JAAA,kCAAA,4JAAA,kCAAA,yJAAA,mCAAA,0JAAA,z4BACuBD,gLACAC;KAK3BN;AAblB,AAAA,kDAAA,4NAAA,0MAAA,gKAAA,kJAAA,1kBAcc,AAAChG,qOACD,AAACuG,2MACDtL,uJACAwE,6JACAwG;;;AAxBjB,CAAA,kFAAA,lFAAMJ;;AAAN,AA0BA,AAAA,4DAAA,oEAAAF,hIAAMc;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,wFAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,wFAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAX,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,0FAAA,mBAAAY,7GAAMD,qGACF1M,iBAAmCgN;AADvC,AAAA,IAAAJ,aAAAD;IAAAC,iBAAA,AAAA/L,4BAAA+L;cAAAA,VAC8BG;cAD9B,AAAAjM,4CAAA8L,eAAA,rEACiB1L;AADjB,AAAA,mFAAA,uHAAA,sJAEsD+D,qBAAKhF,yCAAGgF;;AAC3D,IAAAgI,aAA8B/L;IAA9B+L,iBAAA,AAAApM,4BAAAoM;UAAA,AAAAnM,4CAAAmM,eAAA,jEAAcC;gBAAd,AAAApM,4CAAAmM,eAAA,vEAAkBE;AAAlB,AACE,IAAAC,WAAQ,4GAAA,2CAAA,kOAAA,zXAACC,uGAAML,wGAAa,AAAA,iKAAIhN,4DACJA;IAD5BoN,eAAA,mPAAAA,jOAEElM,SAAQ,8CAAAkM,SAAA,vDAACpF,+MAAgB9G;IAF3BkM,eAAA,0IAAAA,xHAGEF,KAAI,8CAAAE,aAAA,3DAACpF,8GAAWkF;AAHlB,AAAA,oBAIEC;AAAU,qDAAAC,aAAA,3DAACpF,0HAAiBmF;;AAJ9BC;;;;AAJL,CAAA,0FAAA,mBAAAP,7GAAMH,qGASF1M;AATJ,AAAA,IAAA8M,aAAAD;IAAAC,iBAAA,AAAAjM,4BAAAiM;cAAAA,VAS+BC;IAT/B7L,UAAA,AAAAJ,4CAAAgM,eAAA;AAAA,AAAA,mFAAA,uHAAA,sJAUsD7M,yCAAGgF;;AACtD,+GAAA,xGAACqI,wFAAUtN,QAAI+M;;;AAXlB,CAAA,oFAAA,pFAAML;;AAAN,AAaA;;;;oEAAA,pEAAMa,gJAGHR,QAAQS,IAAIC;AAHf,AAAA,mFAAA,yOAAA,nFAIaxI,qBAAK8D,qBAAK9I;;AACrB,IAAMyN,cAAa,wFAAUF;AAAV,AACE,IAAA,AACE,QAACC,4CAAAA,qDAAAA,XAAYD,iCAAAA;gBADf,QAAAG,JAE2CtF;AAF3C,AAGI,AAAAiB,0DAAAC,mCAAA,uDAAA,kDAAA,KAAA,IAAA,8CAAA,qDAAA,KAAAC,gBAAA;AAAA,AAAA,4FAAA,FAAWnB,0BAA0B,iBAAAuF,WAAQJ;IAARI,eAAA,EAAA,CAAAA,YAAA,OAAA,KAAA,AAAA,iFAAAA;AAAA,AAAA,GAAA,CAAAA,gBAAA;AAAA;;AAAA,kEAAAA,3DAAiB9H;;KAAtD;GAAA,OAAA,KAAA,YAAA;;AAHJ;;IAKf+H,WAAa,6FAAAC;AAAA,AAAA,IAAAC,aAAAD;IAAAC,iBAAA,AAAAlN,4BAAAkN;UAAAA,NAAgDE;IAAhDD,oBAAA,AAAAlN,4CAAAiN,eAAA;AAAA,AACE,IAAAG,aAAqBF;IAArBE,iBAAA,AAAArN,4BAAAqN;WAAA,AAAApN,4CAAAoN,eAAA,lEAAc3J;IACRiJ,UAAI,kDAAA,lDAACxF,8CAAMwF,uDAASQ;AAD1B,AAEE,IAAAG,WAAQF;AAAR,AAAA,GACE,6CAAA,7CAACnM,kGAAQyC;AAAM,qDAAA4J,SAAA,vDAACnG,iNAAiB,AAAC0F,YAAYF;;AADhDW;;;IAEjBC,eAAa,WAAKC;AAAL,AAAW,OAACxL,6CAAKgL,SAASQ;;AAX7C,AAYE,8DAAA,vDAACrK,+CAAO+I,kKAAmBqB;;AAE/B;;;;6EAAA,qFAAAE,lKAAME,2KAGgEtN;AAHtE,AAAA,IAAAqN,aAAAD;IAAAC,iBAAA,AAAA1N,4BAAA0N;cAAAA,VAGiEvO;IAHjEoK,eAAA,AAAAtJ,4CAAAyN,eAAA;AAAA,AAIE,oBAAM,eAAA,WAAAE,1BAACC;AAAD,AAAO,OAACvN,mBAAQ,AAAA,oGAAA,AAAA,sLAAAsN;GAAiC,AAAA,wMAAA,gBAAIrE,hBAAalK;AAAxE,AACE,iFAAA,jFAACiL,mDAAMf,aAAauE,2LAClB,WAAKC;AAAL,AAAY,OAAC/L,6CAAK,WAAKgM;AAAL,AAAW,2DAAA,yKAAA,7NAAC7K,+CAAO6K,6JAAeC;GAAwBF;;;AAC9E,kOAAA,mGAAA,7TAACG,0GAAAA,uHAAAA,fAAqB/O,mGAAAA;;AAHxB;;;AAKF;;;;;;6EAAA,qFAAAgP,lKAAME;AAAN,AAAA,IAAAD,aAAAD;IAAAC,iBAAA,AAAApO,4BAAAoO;cAAAA,VAKiEjP;IALjEoK,eAAA,AAAAtJ,4CAAAmO,eAAA;AAAA,AAAA,mFAAA,uHAM2ChP,yCAAG8I;;AAC5C,IAAAoG,aAAiC,AAAC5N,mBAAS,gEAAA,sEAAA,tIAAC4K,6CAAKhL,kPAAkC,AAAA,wMAAA,AAAAjB,gBAAqBkK;IAAxG+E,iBAAA,AAAAtO,4BAAAsO;cAAA,AAAArO,4CAAAqO,eAAA,rEAAOC;YAAP,AAAAtO,4CAAAqO,eAAA,nEAAoBE;IACdC,mBAAiB,6CAAA,WAAAC,xDAAC1M;AAAD,AAAO,yEAAA0M,lEAAChC,mFAAoB,gGAAAgC,hGAACjC,wFAAUtN,0BAAOwP;GAAUH;AAD/E,AAEE,AAAClE,mDAAMf,aAAa,WAAKqF;AAAL,oGACMA,/CACF,iDAAA,iKAAA,WAAAC,7NAAC1L,rDACD,OAACgE;AADD,AAAwB,qEAAA0H,9DAACtM,+CAAOgI,gCAAOkE;IACvC,0KAA0B,AAAC9N,cAAI4N;;;AACvD,QAACO,oGAAAA,6GAAAA,XAAe3P,yFAAAA;;AAEpB,AAAA;;;;4EAAA,oFAAA4L,hKAAMmD;AAAN,AAAA,IAAAa,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAb,wGAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,wGAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAhD,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,0GAAA,1GAAMgD,qHAGF/O,QAAI6P;AAHR,AAAA,mFAAA,uHAI4CC,qBAAK7P,yCAAG8I;;AACjD,yGAAA,lGAACgH,0FAAU/P,4LAA4BkP,2EAAsBW;;;AALhE,CAAA,0GAAA,1GAAMd,qHAMF/O;AANJ,AAAA,mFAAA,uHAO4CC,yCAAG8I;;AAC5C,uHAAA,hHAACiH,wGAAqBhQ;;;AARzB,CAAA,oGAAA,pGAAM+O;;AAAN,AAUA,AAAA;;;;kFAAA,0FAAAnD,5KAAMsE;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,8GAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,8GAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAnE,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,gHAAA,hHAAMmE,2HAGFlQ,QAAI6P;AAHR,AAAA,mFAAA,uHAI4CC,qBAAK7P,yCAAG8I;;AACjD,yGAAA,lGAACgH,0FAAU/P,yMAAkC2P,oEAAeE;;;AAL/D,CAAA,gHAAA,hHAAMK,2HAMFlQ;AANJ,AAAA,mFAAA,uHAO4CC,yCAAG8I;;AAC5C,6HAAA,tHAACoH,8GAA2BnQ;;;AAR/B,CAAA,0GAAA,1GAAMkQ;;AAAN,AAUA,AAAA;;;uEAAA,+EAAAtE,tJAAMyE;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,mGAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,mGAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAtE,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,qGAAA,rGAAMsE,gHAEFrQ,QAAI6P;AAFR,AAAA,mFAAA,uHAG4CC,qBAAK7P,yCAAG8I;;AACjD,yGAAA,lGAACgH,0FAAU/P,kLAAuBmK,0EAAqB0F;;;AAJ1D,CAAA,qGAAA,rGAAMQ,gHAKFrQ;AALJ,AAAA,mFAAA,uHAM4CC,yCAAG8I;;AAC5C,kHAAA,3GAACuH,mGAAgBtQ;;;AAPpB,CAAA,+FAAA,/FAAMqQ;;AAAN,AASA;;;wEAAA,wFAAAE,hKAAME,wJAEHzQ;AAFH,AAAA,IAAAwQ,aAAAD;IAAAC,iBAAA,AAAA3P,4BAAA2P;WAAAA,PAEiC3B;SAFjC,AAAA/N,4CAAA0P,eAAA,hEAEgBlN;eAFhB,AAAAxC,4CAAA0P,eAAA,tEAEmBtE;AAFnB,AAAA,mFAAA,uHAAA,+LAAA,zCAGqDjM;;AACnD,IAAMyQ,UAAa,AAACvQ,qEAAkBH;IAChC2Q,YAAa,AAACvN,+CACC,WAAAwN,SAA0CI;AAA1C,AAAA,IAAAH,aAAAD;IAAAC,iBAAA,AAAAhQ,4BAAAgQ;UAAAA,NAAqChL;kBAArC,AAAA/E,4CAAA+P,eAAA,zEAAaC;mBAAb,AAAAhQ,4CAAA+P,eAAA,1EAAmBE;AAAnB,AACE,oBAAID;AACF,0DAAA,nDAAC9M,+CAAO6B,yEAAkBuF,eAAK4F;;AAC/B,IAAAC,aAA0DD;IAA1DC,iBAAA,AAAApQ,4BAAAoQ;sBAAA,AAAAnQ,4CAAAmQ,eAAA,7EAAeE;eAAf,AAAArQ,4CAAAmQ,eAAA,tEAAyBpD;wBAAzB,AAAA/M,4CAAAmQ,eAAA,/EAAkCjD;UAAlC,AAAAlN,4CAAAmQ,eAAA,jEAAoD3E;IAApD4E,aACuBrD;IADvBqD,iBAAA,AAAArQ,4BAAAqQ;aAAA,AAAApQ,4CAAAoQ,eAAA,pEACcE;IACRC,aAAgB,AAACC,uDAAiBZ,QAAQ,AAACrQ,cAAI,AAACD,eAAKyN;IACrD0D,cAAgB,iBAAAtJ,oBAAKmJ;AAAL,AAAA,oBAAAnJ;AAAY,OAACuJ,cAAI,iBAAApQ,mBAAI0P;AAAJ,AAAA,oBAAA1P;AAAAA;;AAAU,sGAAA,sFAAA,pLAAC+P,gDAAAA,0GAAAA;;;;AAA5BlJ;;;IAChBwJ,wBAAgB,iBAAAxJ,oBAAK,iBAAA7G,mBAAImQ;AAAJ,AAAA,oBAAAnQ;AAAAA;;AAAU,sGAAA,sFAAA,pLAAC+P,gDAAAA,0GAAAA;;;AAAhB,AAAA,oBAAAlJ;AAAoC,OAACyJ,uBAAO,AAACC,qDAAeN,WAAWF;;AAAvElJ;;;IAChB2J,kBAAgB,AAACC,iEAA2B7R;IAC5C8R,QAAgB,AAAA,iKAAgD9R;mBANtE,AAAAE,fAOM6R,+BAAiBD;IACjBE,kBAAgB,kBAAIT,0GAAUP,9CACF,sDAAA,tDAAChJ,uOAA4B+J,tRAC7B,oSAAA,2KAAA,/cAAC/N,gcAAmBoH,yEAAe4F;IAC/DF,kBAAgB,AAACU,cAAIC;cAX3B,2CAAA,wEAAA,7HAYMQ,6GAA+BnB,qFACA,AAACoB,6CAAKnB,aAAaiB;IAClDxE,MAAgB,qGAAA,2CAAA,hJAACF,wFAAUtN,QAAI6O,mGAAWb;AAdhD,AAeE,oBAAMuD;AAAN,AACE,IAAA,AACE,oBAAMH;AAAN,AACE,CAACA,uCAAAA,4CAAAA,PAAO5D,wBAAAA;;AADV;gBADF,cAAA2E,VAG2C9J;AAH3C,AAII,IAAM+J,wBAAgB,AAAA,kGAAepE;AAArC,AACE,AAAA1E,0DAAAC,mCAAA,uDAAA,kDAAA,KAAA,IAAA,8CAAA,qDAAA,KAAAC,gBAAA;AAAA,AAAA,kGAAA,yDAAA,jEAAWnB,2CAAqC+J;GAAhD,OAAA,KAAA,YAAA;;AACN,oBAAA,iBAAAnK,oBAAA,iBAAA7G,mBAAA8G;AAAA,AAAA,oBAAA9G;AAAAA;;AAAA+G;;;AAAA,AAAA,oBAAAF;AAAA,OAAA7F,gDAAA,WAAA+F;;AAAAF;;;AAAA,AAAA,IAAA,AAAA,IAAOvC,WAAG,qFAAA,rFAAC4M,mEAActE;AAAzB,AACE,2FAAA,2CAAA,sKAAA,4FAAA,4EAAA,6DAAA,AAAA9N,uBAAA,xiBAACqS,+EAAoCvS,QAAIwN,qGAAsB,iDAAA,JAAKlK,oDAAOgJ,2FACZsF,+EACAG,0FACCD,uDACDpM;gBALjE,IAAA2C,UAAAgK;AAAA,AAAA;AAAA;;AAPF;;AAaAJ;;GAhCR,2CAAA,wDAAA,MAAA,qEAAA,yCAkCE/F;IACf6E,eAAa,AAAA,mGAAeJ;AApClC,AAqCE,0DAAA,nDAAC3I,8CAAM6G,+JAAgBkC;;AAE3B,oEAAA,oFAAAyB,xJAAME,gJACH1S;AADH,AAAA,IAAAyS,aAAAD;IAAAC,iBAAA,AAAA5R,4BAAA4R;WAAAA,PACiC5D;SADjC,AAAA/N,4CAAA2R,eAAA,hEACgBnP;eADhB,AAAAxC,4CAAA2R,eAAA,tEACmBvG;AADnB,AAAA,mFAAA,uHAAA,+LAAA,zCAEqDjM;;AACnD,IAAM8Q,eAAa,AAAC3N,+CACC,WAAK2N,aAAaC;AAAlB,AACE,IAAA2B,aAA0D3B;IAA1D2B,iBAAA,AAAA9R,4BAAA8R;UAAA,AAAA7R,4CAAA6R,eAAA,jEAAerG;sBAAf,AAAAxL,4CAAA6R,eAAA,7EAAmBxB;eAAnB,AAAArQ,4CAAA6R,eAAA,tEAA6B9E;wBAA7B,AAAA/M,4CAAA6R,eAAA,/EAAsC3E;IAAtC4E,aACuB/E;IADvB+E,iBAAA,AAAA/R,4BAAA+R;aAAA,AAAA9R,4CAAA8R,eAAA,pEACcxB;IACRG,cAAgB,iBAAAtJ,oBAAKmJ;AAAL,AAAA,oBAAAnJ;AAAY,OAACuJ,cAAI,+FAAA,sFAAA,pLAACL,gDAAAA,0GAAAA;;AAAlBlJ;;;IAChB2J,kBAAgB,AAACC,iEAA2B7R;IAC5C8R,QAAgB,AAAA,iKAAgD9R;mBAJtE,AAAAE,fAKM6R,+BAAiBD;IACjBe,eAAgB,kBAAItB,0GAAUP,9CACF,sDAAA,tDAAChJ,uOAA4B+J,tRAC7B,oSAAA,2KAAA,/cAAC/N,gcAAmBoH,yEAAe4F;IAC/DiB,UAAgB,AAACC,6CAAKnB,aAAa8B;IACnCrF,MAAgB,qGAAA,2CAAA,hJAACF,wFAAUtN,QAAI6O,mGAAWb;AAVhD,AAWE,oBAAMuD;AAAN,AACE,IAAA,AACE,CAACH,uCAAAA,4CAAAA,PAAO5D,wBAAAA;gBADV,cAAAsF,VAE2CzK;AAF3C,AAGI,AAAAiB,0DAAAC,mCAAA,uDAAA,kDAAA,KAAA,IAAA,8CAAA,qDAAA,KAAAC,gBAAA;AAAA,AAAA,kGAAA,8KAAA,tLAAWnB,iEAA2D,AAAA,kGAAe2F;GAArF,OAAA,KAAA,WAAA;;AACJ,oBAAA,iBAAA/F,oBAAA,iBAAA7G,mBAAA8G;AAAA,AAAA,oBAAA9G;AAAAA;;AAAA+G;;;AAAA,AAAA,oBAAAF;AAAA,OAAA7F,gDAAA,WAAA+F;;AAAAF;;;AAAA,AAAA,IAAA,AAAA,IAAOvC,WAAG,qFAAA,rFAAC4M,mEAActE;AAAzB,AACE,2FAAA,2CAAA,sKAAA,4FAAA,4EAAA,6DAAA,AAAA9N,uBAAA,xiBAACqS,+EAAoCvS,QAAIwN,qGAAsB,iDAAA,JAAKlK,oDAAOgJ,2FACZsF,+EACAG,0FACCD,uDACDpM;gBALjE,IAAA2C,UAAA0K;AAAA,AAAA;AAAA;;AALF;;AAWAd;GAxBN,iCA0BE/F;AA1BrB,AA2BE,0DAAA,nDAAClE,8CAAM6G,+JAAgBkC;;AAE3B,wEAAA,wFAAAiC,hKAAME,wJACHlT;AADH,AAAA,IAAAiT,aAAAD;IAAAC,iBAAA,AAAApS,4BAAAoS;cAAAA,VAC+BlG;IAD/Bb,WAAA,AAAApL,4CAAAmS,eAAA;AAAA,AAAA,mFAAA,uHAAA,sJAEqDhT,yCAAG4B;;AACtD,IAAMsR,0BAAkB,WAAAC;AAAA,AAAA,IAAAC,aAAAD;IAAAC,iBAAA,AAAAxS,4BAAAwS;IAAAxF,WAAA,AAAA/M,4CAAAuS,eAAA;IAAAlC,kBAAA,AAAArQ,4CAAAuS,eAAA;AAAA,AACE,IAAM3C,UAAY,AAACvQ,qEAAkBH;IAC/BsT,cAAY,gDAAA,iFAAA,jIAACC,8MAAqB7C;IAClC8C,cAAY,AAAClC,uDAAiBgC,YAAY,AAACjT,cAAI,AAACD,eAAKyN;AAF3D,AAGE,OAAC6D,uBAAO,AAACC,qDAAe6B,YAAYrC;;AAJhE,AAKE,OAACpP,uBAAOoR,wBAAkBjH;;AAE9B;;;oEAAA,4EAAAuH,hJAAM7K,yJAE+DK,OAAO0K,OAAOC;AAFnF,AAAA,IAAAF,aAAAD;IAAAC,iBAAA,AAAA7S,4BAAA6S;cAAAA,VAEgE1T;mBAFhE,AAAAc,4CAAA4S,eAAA,1EAE8CtJ;AAF9C,AAAA,mFAAA,uHAAA,uIAAA,8IAAA,iJAGsGnK,yCAAG8I;;AACvG,IAAA8K,aAAA,AAAA3T,gBAA+BkK;IAA/ByJ,iBAAA,AAAAhT,4BAAAgT;IAAAxJ,cAAA,AAAAvJ,4CAAA+S,eAAA;IACMC,YAAU,AAAChT,4CAAIuJ,YAAYpB;IAC3B2F,QAAU,AAACmF,kBAAQ,WAAAC;AAAA,AAAA,IAAAC,aAAAD;IAAAC,iBAAA,AAAApT,4BAAAoT;IAAA3Q,KAAA,AAAAxC,4CAAAmT,eAAA;IAAA3H,MAAA,AAAAxL,4CAAAmT,eAAA;AAAA,AACE,UAAK,EAAK,AAACnS,6CAAE6R,OAAOrQ,SAAI,AAACxB,6CAAE8R,QAAQtH;GAAQwH;AAHtE,AAIE,0FAAA,mFAAA,tKAAC3I,mDAAMf,aAAa8J,uQAAwBjL,eAAQ2F;;AAExD,AAAA;;;;;sEAAA,8EAAAhD,pJAAMwI;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,kGAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,kGAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAArI,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,oGAAA,WAAAsI,/GAAMD,wHAIgET,OAAOC,QAAQ3K,OAAO5F,OAAOkR;AAJnG,AAAA,IAAAD,aAAAD;IAAAC,iBAAA,AAAAzT,4BAAAyT;cAAAA,VAIiEtU;mBAJjE,AAAAc,4CAAAwT,eAAA,1EAI+ClK;AAJ/C,AAAA,mFAAA,uHAAA,8IAKiD0F,qBAAK0E,yBAASzL,qBAAKyL,yBAASvU,yCAAG8I;;AAC7E,IAAMrG,eAAa,AAAA,+LAAA,AAAAxC,gBAAiBkK;IAC9BqK,UAAa,AAACrR,+CACC,eAAAsR,JAAKpI;AAAL,AAAA,IAAAqI,aAAAD;IAAAC,iBAAA,AAAA9T,4BAAA8T;IAAArR,KAAA,AAAAxC,4CAAA6T,eAAA;AAAA,AACE,GAAI,AAAC7S,6CAAEwB,GAAGqQ;AACR,OAACiB,kBAAQtI;;AACT,cAAA,NAAKA;;GAJX,IAME5J;IACfmS,mBAAa,EAAI,CAAIJ,WAAQ,AAACvN,gBAAMxE,oBAAe,AAACN,gDAAKuR,OAAO,AAAA,4KAAM,AAAC7S,4CAAI4B,aAAa+R;AAR9F,AASE,GAAII;AACF,OAAAvL,0DAAAC,mCAAA,uDAAA,kDAAA,KAAA,IAAA,8CAAA,qDAAA,KAAAC,gBAAA;AAAA,AAAA,0FAAA,4BAAA,PAAgCP;GAAhC,OAAA,KAAA,YAAA;;AACA,0FAAA,mFAAA,yKAAA,/UAACkC,mDAAMf,aAAa8J,uQAAyBO,kKAAmBb,QAAQW,WAAWtL,eAAQ5F;;;;AAjBlG,CAAA,oGAAA,pGAAM+Q,+GAkBFpU,QAAI2T,OAAOC,QAAQ3K,OAAO5F;AAlB9B,AAAA,mFAAA,uHAAA,8IAmBiDyM,qBAAK0E,yBAASzL,qBAAK9I,yCAAG8I;;AACpE,8IAAA,vIAAC+L,kGAAe9U,QAAI2T,OAAOC,QAAQ3K,OAAO5F;;;AApB7C,CAAA,8FAAA,9FAAM+Q;;AAAN,AAsBA;;;2EAAA,3EAAMW,8JAEH/U,QAAIiJ,OAAO8D,QAAQiI;AAFtB,AAAA,mFAAA,uHAAA,uIAAA,sJAAA,wMAAA,zCAGkH/U;;AAChH,IAAAgV,aAAgED;IAAhEC,iBAAA,AAAApU,4BAAAoU;eAAA,AAAAnU,4CAAAmU,eAAA,tEAAepH;wBAAf,AAAA/M,4CAAAmU,eAAA,/EAAwBjH;0BAAxB,AAAAlN,4CAAAmU,eAAA,jFAA0CC;IACpC1H,MAAgB,wGAAA,2CAAA,qEAAA,xNAACF,wFAAUtN,QAAI+M,sGAA8BiB,oGACAkH;IAC7DC,YAAgB,AAACrU,4CAAI+M,SAAS5E;IAC9BmM,gBAAgB,6BAAA,oHAAA,/HAAMD,WAAU,CAACA,0CAAAA,+CAAAA,PAAU3H,2BAAAA;IAC3C6H,cAAgB,4DAAA,KAAA,4CAAA,4OAAA,4JAAA,nfACE,EAAI,AAAQD,6BAAe,kBAAA,jBAAMA,iCACjC,AAAOA,wBAAepH,oBACtB,EAAK,AAAC/I,qBAAKmQ,oBAAe,wCAAA,xCAAClQ,0BAAUkQ,qEAAqB,AAAA,iFAAMA,iBAChE,EAAK,AAACnQ,qBAAKmQ,oBAAe,wCAAA,xCAAClQ,0BAAUkQ,uEAAsBA,cACrD;AACE,AAAA9L,0DAAAC,mCAAA,uDAAA,kDAAA,KAAA,IAAA,8CAAA,qDAAA,KAAAC,gBAAA;AAAA,AAAA,0FAAA,6BAAA,2CAAA,lDAAiCP,oCAAoCmM;GAArE,OAAA,KAAA,QAAA;;AACAA;;;;IAK1BE,kBAAgB,+DAAA,/DAACC,uDAAiBvV;IAClC6D,MAAgB,kBAAI,iBAAAoE,oBAAKoN;AAAL,AAAA,oBAAApN;AAAiBqN;;AAAjBrN;;MACF,CAACqN,gDAAAA,6DAAAA,fAAgBD,yCAAAA,cACjBA;AApBxB,AAqBE,IAAAG,WAAQR;IAARQ,eAAA,uVAAAA,rUACEH,aAAY,mBAAAG,SAAA,mFAAA,/GAACtB,4RAA8BjL,eAAQoM;AADrD,AAAA,oBAEExR;AAAI,0BAAA2R,aAAA,mFAAA,nHAACtB,uSAAkCjL,eAAQpF;;AAFjD2R;;;AAIJ;;;iEAAA,yEAAAC,SAAAC,nJAAMG,4JAEiGjC,QAAQ3K;AAF/G,AAAA,IAAA0M,aAAAF;IAAAE,iBAAA,AAAA9U,4BAAA8U;cAAAA,VAEgE3V;mBAFhE,AAAAc,4CAAA6U,eAAA,1EAE8CvL;IAF9CwL,aAAAF;IAAAE,iBAAA,AAAA/U,4BAAA+U;cAAAA,VAE8F7I;SAF9F,AAAAjM,4CAAA8U,eAAA,hEAE8EtS;cAF9E,AAAAxC,4CAAA8U,eAAA,rEAEiF1U;AAFjF,AAAA,mFAAA,uHAAA,sJAAA,iJAAA,uIAIGjB,yCAAG,AAAA6V,6BAAA,AAAA,4JAAA,4JAAA;;AACJ,IAAM1O,iBAAe,kGAAuB/D;AAAvB,AACE,mIAAA,nIAACyR,kGAAe9U,QAAIsD,GAAGsQ,QAAQ3K,OAAO5F;;AACtC,6HAAA,tHAAC8M,8GAA2BnQ;;IAC7C6D,MAAe,uDAAA,mFAAA,kKAAA,5SAACkS,+CAAOhJ,qPAAoB6G,4LAAgC3K;IAC3E+M,UAAe,gGAAqB3S;AAArB,AACE,AAACyR,kGAAe9U,QAAIsD,GAAGsQ,QAAQ3K,OAAO5F;;AACtC,AAACuF,kEAAa5I,QAAIiJ,OAAO3F,GAAGsQ;;AAC5B,2GAAA,3GAACtD,mGAAgBtQ;;AACjB,6HAAA,tHAACmQ,8GAA2BnQ;;gBARnD,2CAAA,iJAAA,yJAAA,oJAAA,gKAAA,uJAAA,MAAA,8KAAA,h+BASM8I,qMAAiCxF,oJACAsQ,wJACA/P,4JACA3C,2UAEA8U,+KACA5O;AAfvC,AAgBE,oBAAIvD;AACF,AACE,2FAAA,mFAAA,9KAACsH,0DAAMf,aAAa6L,wQAAyBhN,eAAQ,4DAAA,5DAACiN,6CAAK9K,mGAAStC;;AACpEA;;AACF,AACE,QAAA,2CAAA,oEAAA,MAAA,sDAAA,nLAACkN;;AADH;;;AAIN;;;4EAAA,oGAAAG,hLAAMG,gKAEHtW,QAAI+M;AAFP,AAAA,IAAAqJ,aAAAD;IAAAC,iBAAA,AAAAvV,4BAAAuV;IAAA9J,MAAA,AAAAxL,4CAAAsV,eAAA;IAAAvI,WAAA,AAAA/M,4CAAAsV,eAAA;IAAAC,iBAAA,AAAAvV,4CAAAsV,eAAA;AAAA,AAAA,mFAAA,uHAAA,sJAAA,wMAAA,zCAGkEnW;;AAChE,IAAMyQ,UAAY,AAACY,uDAAiB,AAACjR,cAAI,AAACD,eAAKyN,WAAW,AAAC1N,qEAAkBH;IACvEuW,cAAY,AAAC5E,qDAAejB,QAAQ2F;AAD1C,AAEE,OAACjT,+CACC,WAAKyL,KAAK5F;AAAV,AACE,GAAI,AAAC/D,0BAAU,oDAAA,mFAAA,8JAAA,kKAAA,vcAAC6Q,+CAAOlH,kPAAiBvC,yMAAqBrD;AAC3D4F;;AACA,IAAMgE,mHAAiBhE,lDACF,uDAAA,mFAAA,1IAAC2H,oSAAsBlK,YAAK,WAAK0I,7WACjC,AAACwB;AAD2B,AAAiB,OAACzB,yEAAyB/U,QAAIiJ,OAAO4F,KAAKmG;IACvF,mFAAA,8JAAA,JAAuB1I,sKAAgBlB,eAAKnC;AAFjE,AAGE,AAAC4M,+DAAU7V,QAAI6S,aAAavG,IAAIrD;;AAChC4J;;GACN9F,QACAwJ;;AAEN;;;mEAAA,2EAAAE,9IAAME;AAAN,AAAA,IAAAD,aAAAD;IAAAC,iBAAA,AAAA7V,4BAAA6V;cAAAA,VAE2B3J;IAF3Bb,WAAA,AAAApL,4CAAA4V,eAAA;AAAA,AAAA,mFAAA,sJAGazW,yCAAG4B;;AACd,OAACE,uBACC,+FAAA6U;AAAA,AAAA,IAAAC,aAAAD;IAAAC,iBAAA,AAAAhW,4BAAAgW;IAAAR,iBAAA,AAAAvV,4CAAA+V,eAAA;IAAA1F,kBAAA,AAAArQ,4CAAA+V,eAAA;AAAA,AACE,IAAMC,cAAY,AAACnF,qDAAe0E,eAASlF;AAA3C,AACE,OAACO,uBAAOoF;GACZ5K;;AAEJ;;;;;;oEAAA,yFAAA6K,7JAAME,gJAKH3M;AALH,AAAA,IAAA0M,aAAAD;IAAAC,iBAAA,AAAAnW,4BAAAmW;cAAAA,VAKmDhG;IALnDnD,WAAA,AAAA/M,4CAAAkW,eAAA;IAAAX,iBAAA,AAAAvV,4CAAAkW,eAAA;AAAA,AAAA,mFAAA,wIAAA,+JAMiE/W,yCAAG,AAAA6V,6BAAA,AAAA,+JAAA,+JAAA;;AAClE,IAAMoB,OAAU,AAAC5F,uDAAiBhH,aAAa,AAACjK,cAAI,AAACD,eAAKyN;IACpDsJ,YAAU,AAACxF,qDAAeuF,KAAKb;AADrC,AAEE,GAAM,AAAC5S,cAAI0T;AAAX,AACEnG;;AADF;;;AAGJ;;;;;wEAAA,wFAAAoG,hKAAME,wJAIHtX;AAJH,AAAA,IAAAqX,aAAAD;IAAAC,iBAAA,AAAAxW,4BAAAwW;cAAAA,VAI+BtK;IAJ/Bb,WAAA,AAAApL,4CAAAuW,eAAA;AAAA,AAAA,mFAAA,uHAAA,+LAAA,zCAKqDpX;;AACnD,GAAI,AAAC0W,iEAAW5J;AACd,IAAM2D,UAAU,AAACvQ,qEAAkBH;IAC7BuX,YAAU,AAACC,gDAAQP,kEAAkBvG;IACrCM,UAAU,AAACtC,eAAK6I,UAAUrL;AAFhC,AAGE,oBAAI8E;AACF,OAACsF,0EAAqBtW,QAAI+M,QAAQiE;;AAClCjE;;;AACJA;;;AAEJ;;;;oEAAA,oFAAA0K,xJAAME,gJAGH3X;AAHH,AAAA,IAAA0X,aAAAD;IAAAC,iBAAA,AAAA7W,4BAAA6W;cAAAA,VAGyC3K;IAHzC7L,UAAA,AAAAJ,4CAAA4W,eAAA;IAAAxL,WAAA,AAAApL,4CAAA4W,eAAA;AAAA,AAAA,mFAAA,uHAAA,+LAAA,zCAIqDzX;;AACnD,IAAM2X,oBAAY,AAACzW,mBAAQ,AAAA,iGAAcD;AAAzC,AACE,2GAAA,3GAACoP,mGAAgBtQ;;AACjB,GAAI4X;AACF,OAACxU,+CACC,WAAKyL,KAAKmC;AAAV,AACE,OAACsF,0EAAqBtW,QAAI6O,KAAKmC;GACjCjE,QACAb;;AACF,OAACoL,sEAAiBtX,QAAI+M;;;AAE5B;;;;;;wEAAA,gGAAA8K,xKAAME,wJAKH/X,QAAI+M,iBAA6G9D;AALpH,AAAA,IAAA6O,aAAAD;IAAAC,iBAAA,AAAAjX,4BAAAiX;iBAAAA,bAKwG9C;cALxG,AAAAlU,4CAAAgX,eAAA,rEAKwBE;eALxB,AAAAlX,4CAAAgX,eAAA,tEAKgCjK;wBALhC,AAAA/M,4CAAAgX,eAAA,/EAKyCG;4BALzC,AAAAnX,4CAAAgX,eAAA,nFAK2DI;wBAL3D,AAAApX,4CAAAgX,eAAA,/EAKiF9J;AALjF,AAAA,mFAAA,uHAAA,sJAAA,iOAAA,lEAMkEwG,yBAASvU;;AACzE,sHAAA,tHAACkQ,8GAA2BnQ;;AAC5B,IAAMqD,eAAQ,AAACvC,4CAAIkX,QAAQ/O;IACrB+M,gBAAQ,qDAAA,rDAAClV,4CAAI+M;AADnB,AAEE,oBAAMmI;AAAN,AACE,IAAMxI,YAAI,wGAAA,2CAAA,sEAAA,2FAAA,2IAAA,qJAAA,plBAACF,wFAAUtN,QAAI+M,gHAA0Bc,kFACAG,uFACA,AAAClN,4CAAImX,kBAAkBhP,mFACvB,AAACnI,4CAAIoX,sBAAsBjP,iEAC3B5F;AAJnD,AAKE,IAAA,AACE,CAAC2S,8CAAAA,yDAAAA,bAAQxI,qCAAAA;gBADX,cAAA2K,VAE2C9P;AAF3C,AAGI,AAAAiB,0DAAAC,mCAAA,uDAAA,kDAAA,KAAA,IAAA,8CAAA,qDAAA,KAAAC,gBAAA;AAAA,AAAA,kGAAA,uKAAA,/KAAWnB,0DAAoD,AAAA,kGAAe2F;GAA9E,OAAA,KAAA,WAAA;;AATR;;AAUF,iEAAA,1DAAChK,+CAAOgR,uKAAuB5J,eAAKnC;;AAEtC;;;mFAAA,2GAAAmP,9LAAME,8KAEHtY,QAAI+M;AAFP,AAAA,IAAAsL,aAAAD;IAAAC,iBAAA,AAAAxX,4BAAAwX;iBAAAA,bAEkDrD;IAFlDgD,UAAA,AAAAlX,4CAAAuX,eAAA;IAAAlH,kBAAA,AAAArQ,4CAAAuX,eAAA;AAAA,AAAA,mFAAA,uHAAA,sJAAA,wMAAA,zCAGkEpY;;AAChE,OAACmD,+CACC,WAAKmV,YAAYtP;AAAjB,AACE,oBAAI,CAACkI,gDAAAA,wDAAAA,VAAUlI,oCAAAA;AACbsP;;AACA,OAACR,sEAAiB/X,QAAI+M,QAAQwL,YAAYtP;;GAC9C+L,WACA,AAAC5U,eAAK4X;;AAEV;;;;2EAAA,2FAAAQ,tKAAME,8JAGH1Y;AAHH,AAAA,IAAAyY,aAAAD;IAAAC,iBAAA,AAAA5X,4BAAA4X;cAAAA,VAG+B1L;IAH/Bb,WAAA,AAAApL,4CAAA2X,eAAA;AAAA,AAAA,mFAAA,uHAAA,+LAAA,zCAIqDxY;;AACnD,6DAAA,tDAAC+H,8CAAM+E,kKACM,AAAClK,6CACC,WAAKmO;AAAL,AAAc,OAACsH,iFAA4BtY,QAAI+M,QAAQiE;GACvD9E;;AAEjB;;;;wEAAA,wFAAAyM,hKAAME,wJAGH7Y;AAHH,AAAA,IAAA4Y,aAAAD;IAAAC,iBAAA,AAAA/X,4BAAA+X;cAAAA,VAG+B7L;IAH/Bb,WAAA,AAAApL,4CAAA8X,eAAA;AAAA,AAAA,mFAAA,uHAAA,+LAAA,zCAIqD3Y;;AACnD,IAAM6Y,UAAQ,gGAAc7P,OAAO8P;AAArB,AAA+B,+GAAA,2CAAA,iEAAA,pNAACzL,wFAAUtN,QAAI+M,6GAAiB9D,mEAAiB8P;;AAA9F,AACE,OAAC3V,+CACC,gBAAA4V,LAAKnK;AAAL,AAAA,IAAAoK,aAAAD;IAAAC,iBAAA,AAAApY,4BAAAoY;cAAAA,VAAgEjI;UAAhE,AAAAlQ,4CAAAmY,eAAA,jEAAmB3M;eAAnB,AAAAxL,4CAAAmY,eAAA,tEAAuBF;eAAvB,AAAAjY,4CAAAmY,eAAA,tEAAgCpL;wBAAhC,AAAA/M,4CAAAmY,eAAA,/EAAyCjL;AAAzC,AACE,IAAAkL,mBAAA,AAAAzV,cAAuBsV;IAAvBI,qBAAA;IAAAC,qBAAA;IAAAC,iBAAA;;AAAA,AAAA,GAAA,AAAA,CAAAA,iBAAAD;AAAA,IAAAE,mBAAA,AAAAH,wDAAAE;mBAAA,AAAA7W,4CAAA8W,iBAAA,IAAA,hFAASrQ;kBAAT,AAAAzG,4CAAA8W,iBAAA,IAAA,/EAAgBE;AAAhB,AAAA,AACE,IAAMhM,YAAO,AAACsL,QAAQ7P,aAAOuQ;IACvBpI,eAAO,qDAAA,rDAACtQ,4CAAI+M;AADlB,AAEE,oBAAMuD;AAAN,AACE,IAAA,AACE,CAACA,6CAAAA,wDAAAA,bAAO5D,oCAAAA;gBADV,cAAAiM,VAE2CpR;AAF3C,AAGI,AAAAiB,0DAAAC,mCAAA,uDAAA,kDAAA,KAAA,IAAA,8CAAA,qDAAA,KAAAC,gBAAA;;AAAA,AAAA,kGAAA,sKAAA,9KAAWnB,yDAAmD,AAAA,kGAAe2F;;CAA7E,OAAA,KAAA,WAAA;;AAJN;;AAHJ;AAAA,eAAAkL;eAAAC;eAAAC;eAAA,CAAAC,iBAAA;;;;;;;AAAA,IAAAxS,2BAAA,AAAApD,cAAAyV;AAAA,AAAA,GAAArS;AAAA,AAAA,IAAAqS,uBAAArS;AAAA,AAAA,GAAA,AAAAC,6BAAAoS;AAAA,IAAAnS,wBAAA,AAAAC,sBAAAkS;AAAA,AAAA,eAAA,AAAAjS,qBAAAiS;eAAAnS;eAAA,AAAAG,gBAAAH;eAAA;;;;;;;AAAA,IAAAwS,mBAAA,AAAAxW,gBAAAmW;mBAAA,AAAA1W,4CAAA+W,iBAAA,IAAA,hFAAStQ;kBAAT,AAAAzG,4CAAA+W,iBAAA,IAAA,/EAAgBC;AAAhB,AAAA,AACE,IAAMhM,YAAO,AAACsL,QAAQ7P,aAAOuQ;IACvBpI,eAAO,qDAAA,rDAACtQ,4CAAI+M;AADlB,AAEE,oBAAMuD;AAAN,AACE,IAAA,AACE,CAACA,6CAAAA,wDAAAA,bAAO5D,oCAAAA;gBADV,cAAAkM,VAE2CrR;AAF3C,AAGI,AAAAiB,0DAAAC,mCAAA,uDAAA,kDAAA,KAAA,IAAA,8CAAA,qDAAA,KAAAC,gBAAA;;AAAA,AAAA,kGAAA,sKAAA,9KAAWnB,yDAAmD,AAAA,kGAAe2F;;CAA7E,OAAA,KAAA,UAAA;;AAJN;;AAHJ;AAAA,eAAA,AAAArK,eAAAuV;eAAA;eAAA;eAAA;;;;;;;;AAAA;;;;;AAQA,8DAAA,mFAAA,uLAAA,jUAAC1C,kDAAU3H,kPAAiBvC,YAAKwC;GACnC/B,QACAb;;AAEN,wEAAA,wFAAAyN,hKAAME,wJACH7Z;AADH,AAAA,IAAA4Z,aAAAD;IAAAC,iBAAA,AAAA/Y,4BAAA+Y;cAAAA,VAC8B7M;IAD9B7L,UAAA,AAAAJ,4CAAA8Y,eAAA;AAAA,AAAA,mFAAA,uHAAA,sJAEqD3Z,yCAAG,AAAA6V,6BAAA,AAAA,sJAAA,sJAAA;;AACtD,IAAM8B,oBAAY,AAACzW,mBAAQ,AAAA,iGAAcD;AAAzC,AACE,GAAI,AAACgS,sEAAgBlT,QAAI+M;AAAzB;;4QAEMA,5BACF,iBAAA+M,3FAIE,AAACnC,kEAAa3X,hJACd,AAAC6Y,sEAAiB7Y,9JAClB,OAAC0Y,yEAAoB1Y;IANvB8Z,eAAA,yGAAAA,vGACElC,mBAAY,0EAAAkC,1EAACpH,kEAAa1S;AAD5B,AAAA,GAEE,GAAK4X;AAAa,qFAAAkC,9EAACrJ,sEAAiBzQ;;AAFtC8Z;;;;;AAQR,sEAAA,tEAAMC,oJAAqB/Z,QAAI4O;AAA/B,AAAA,mFAAA,uHAC2C,AAAApO,yDAAA,AAAA,sJAAA,sJAAA,2CAAA,6FAAA,AAAA,KAAA,oFAAA,WAAAwZ;AAAA,AAAA,OAAArV,sBAAAqV;GAAA,8FAAA,KAAA,0FAAA,AAAA,0QAAA,MAAsB/Z,yCAAGga;;AADpE;AAGE,OAAC7W,+CACC,WAAK8W,UAAUnN;AAAf,AACE,IAAMS,MAAI,AAACF,wFAAUtN,QAAI+M;AAAzB,AACE,OAAC3J,+CACC,WAAKyC,IAAImL;AAAT,AACE,IAAAmJ,aAA0BnJ;IAA1BmJ,iBAAA,AAAAtZ,4BAAAsZ;eAAA,AAAArZ,4CAAAqZ,eAAA,tEAAetM;IACTuM,UAAQ,AAAA,yFAAUvM;AADxB,AAEE,oBAAIuM;AACF,OAAClW,6CAAK2B,IAAI,AAACxF,cAAI,CAAC+Z,wCAAAA,6CAAAA,PAAQ5M,yBAAAA;;AACxB3H;;GACNqU,UACA,AAAA,wLAAYnN;GAXpB,kCAaE6B;;AAEJ;;;yEAAA,iFAAAyL,1JAAME,mKAE6B7J;AAFnC,AAAA,IAAA4J,aAAAD;IAAAC,iBAAA,AAAAzZ,4BAAAyZ;cAAAA,VAE0BvN;eAF1B,AAAAjM,4CAAAwZ,eAAA,tEAEYpO;AAFZ,AAAA,mFAAA,sJAAA,iLAAA,zCAIGjM;;AACD,IAAMua,oBAAkB,WAAAC;AAAA,AAAA,IAAAC,aAAAD;IAAAC,iBAAA,AAAA7Z,4BAAA6Z;eAAA,AAAA5Z,4CAAA4Z,eAAA,tEAAc7M;sBAAd,AAAA/M,4CAAA4Z,eAAA,7EAAuBvJ;AAAvB,AACE,IAAMT,cAAQ,AAACrQ,cAAIqQ;AAAnB,mHACMA,vDACF,AAACY,mEAAiB,AAACjR,cAAI,AAACD,eAAKyN,5JAC7B,OAAC8D,iKAAeR;;AAJ9C,AAKE,OAAC/N,+CACC,WAAKyC,IAAIoI;AAAT,AACE,OAACsF,gDAAU1N,IAAI,AAAC2U,kBAAkBvM;GAFtC,kCAIE/B;;AAEN;;;iEAAA,jEAAMyO,0IAEH/L,MAAM8B;AAFT,AAAA,mFAAA,iKAAA,iLAAA,zCAIGzQ;;AACD,OAACmD,+CACC,WAAKwX,GAAG9X;AAAR,AACE,OAACyQ,gDAAUqH,GAAG,AAACL,uEAAuBzX,EAAE4N;GAF5C,kCAIE9B;;AAEJ;;;sEAAA,8EAAAiM,pJAAMlL;AAAN,AAAA,IAAAmL,aAAAD;IAAAC,iBAAA,AAAAja,4BAAAia;cAAAA,VAE2E9a;iBAF3E,AAAAc,4CAAAga,eAAA,xEAE8CC;mBAF9C,AAAAja,4CAAAga,eAAA,1EAEyD1Q;AAFzD,AAAA,mFAAA,uHAG2CnK,yCAAG8I;;AAC5C,IAAMiS,YAAiB,AAAC5X,+CACC,4FAAY4X,UAAUlY;AAAtB,AACE,IAAAmY,qBAAkB,AAACpB,sEAAiB7Z,QAAI8C;AAAxC,AAAA,oBAAAmY;AAAA,eAAAA,XAASC;AAAT,AACE,OAAChJ,6CAAK8I,UAAUE;;AAChBF;;GAJN,iCAME,AAAA,+LAAA,AAAA9a,gBAAiBkK;IACpC+Q,aAAiB,WAAKC,EAAEC;AAAP,AAAc,OAACnX,6CAAK,AAAC7D,cAAI+a,GAAGC;;IAC7C3K,UAAiB,AAACvQ,qEAAkBH;IACpCsb,wBAAiB,+DAAA,/DAAC/F,uDAAiBvV;IACnCub,mBAAiB,AAACxB,oEAAoB/Z,QAAIgb;IAC1CQ,wBAAiB,AAACb,+DAAeK,UAAUtK;AAXjD,AAYE,8EAAA,9EAACvF,mDAAM4P,WAAWzP,2JAAyDkQ;;AAC3E,gFAAA,hFAACrQ,mDAAMf,aAAakB,iLAAqB0P;;AACzC,GAAM,AAACvX,cAAI8X;AAAX,AACE,wFAAA,xFAACpQ,0DAAMf,aAAauE,qJAAsDwM,6DAAWI;;AADvF;;AAEA,CAACD,sDAAAA,+DAAAA,XAAiBtb,2CAAAA;;AAhBpB;;AAmBF;;;;;;;;;;;;;;;;;;;;sEAAA,yFAAAyb,/JAAME,oJAmBH3b,QAAI0F;AAnBP,AAAA,IAAAgW,aAAAD;IAAAC,iBAAA,AAAA7a,4BAAA6a;cAAAA,VAmBqCxa;gBAnBrC,AAAAJ,4CAAA4a,eAAA,vEAmBkBvO;UAnBlB,AAAArM,4CAAA4a,eAAA,jEAmB4BxO;AAnB5B,AAoBE,IAAM2O,iBAAoB,AAAA,2FAAW,AAAC9V,sCAAeL;IAC/CoW,yBAAoB,AAACC,iBAAOF,eAAe,AAACjX,4CAAI,WAAK2H;AAAL,AAAe,6EAAA,2CAAA,jHAACiD,oKAAejD;GAAYsP;IADjGD,aAGyB,mBAAA,WAAAM,9BAAC3a;AAAD,AAAW,oDAAA,iFAAA,8DAAA,5LAACO,wRAA4B,cAAA,eAAI,6GAAAoa,qDAAAA,jKAACJ,uDAAAA,yEAAAA,hJAAuB1b,dAAKC;GAAMwb;IAHxGD,iBAAA,AAAA/a,4BAAA+a;iBAAA,AAAA9a,4CAAA8a,eAAA,xEAEOI;YAFP,AAAAlb,4CAAA8a,eAAA,nEAGOK;IACDE,qBAAoB,6BAAA,3BAAM,AAAC1Y,cAAIuY,aACT,iBAAMnN,OAAK,AAAC7C,sFAAQ,sCAAA,2CAAA,qDAAA,qDAAA,3LAACoQ,wPAAsCJ,oBAAa9a;AAAxE,AACE,OAACqM,kEAAkBsB,KAAK,AAACvB,wFAAUtN,QAAI6O,MAAMW;KAFjD;IAGpB6M,gBAAoB,wBAAA,tBAAM,AAAC5Y,cAAIwY,QACT,iBAAMpN,OAAK,AAAC7C,sFAAQ,sCAAA,2CAAA,qDAAA,qDAAA,3LAACoQ,wPAAsCH,eAAQ/a;AAAnE,AACE,OAACqM,kEAAkBsB,KAAK,AAACvB,wFAAUtN,QAAI6O,MAAMW;KAFjD;IAGpB8M,oBAAoB,6CAAA,7CAAC9R;AAV3B,AAWE,oBAAM2R;AAAN,AAAyB,AAACzJ,kEAAa1S,QAAImc;;AAA3C;;AACA,oBAAME;AAAN,AACE,IAAMxN,aAAa,AAAC6D,kEAAa1S,QAAIqc;IAC/BjS,qBAAa,AAAA,uKAAkDpK;AADrE,AAEE,AAACuc,sBAAOD,kBAAkB,AAAA,4KAAMzN;;AAChC,8FAAA,9FAAC1D,0DAAMf,mBAAauE,kLAAsBvD,iEAAKyD;;AAC/C,sHAAA,tHAACsB,8GAA2BnQ;;AALhC;;AAMA,oBACE,iBAAAiI,oBAAKkF;AAAL,AAAA,oBAAAlF;AAAA,IAAAA,wBAAe,CAACuU,mFAAAA,8FAAAA,bAAgBrP,0EAAAA;AAAhC,AAAA,oBAAAlF;AAA2C,OAACwU,mDAAgBtP;;AAA5DlF;;;AAAAA;;;AAAwE,AAACyU,0DAAwBvP;;AADnG,oBAEED;AAAI,IAAMyP,gBAAG,+DAAA,/DAACpH,uDAAiBvV;AAA3B,AAA0C,oBAAM2c;AAAN,AAAS,CAACA,8CAAAA,uDAAAA,XAAG3c,mCAAAA;;AAAb;;AAFhD,AAGQ,oBAAekI;AAAf,AACE,AAAAoB,0DAAAC,mCAAA,qDAAA,kDAAA,KAAA,IAAA,8CAAA,qDAAA,KAAAC,gBAAA;AAAA,AAAA,0FAAA;GAAA,OAAA,KAAA,YAAA;;AADF;;;;;AArBV,OAAAtJ,gBAuBGoc;;AAEL,AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;mEAAA,2EAAA1Q,9IAAMiR;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,+FAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,+FAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAA9Q,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,iGAAA,jGAAM8Q,4GA6BF7c,QAAI0F;AA7BR,AAAA,mFAAA,uHAAA,wLAAA,zCA8BiDzF;;AAC9C,iHAAA,1GAACid,+FAAYld,QAAI0F;;;AA/BpB,CAAA,iGAAA,WAAAoX,YAAAC,xHAAMF,qHAgCgEnX;AAhCtE,AAAA,IAAAsX,aAAAF;IAAAE,iBAAA,AAAAnc,4BAAAmc;cAAAA,VAgCiEhd;mBAhCjE,AAAAc,4CAAAkc,eAAA,1EAgC+C5S;IAhC/C6S,aAAAF;IAAAE,iBAAA,AAAApc,4BAAAoc;cAAAA,VAgCmG/b;yBAhCnG,AAAAJ,4CAAAmc,eAAA,hFAgCiFE;AAhCjF,AAAA,mFAAA,uHAAA,+IAAA,iMAAA,zCAiC2Dld;;AACxD,oBAAIkd;AACF,OAACxB,oEAAe3b,QAAI0F,GAAGxE;;AACvB,AACE,AAAC8O,wGAAqBhQ;;AACtB,IAAAod,aAAqD,uGAAA,2CAAA,mEAAA,rNAAC/P,kOAA0BnM;IAAhFkc,iBAAA,AAAAvc,4BAAAuc;kBAAAA,dAA4Clc;cAA5C,AAAAJ,4CAAAsc,eAAA,rEAAchD;mBAAd,AAAAtZ,4CAAAsc,eAAA,1EAAsBC;UAAtB,AAAAvc,4CAAAsc,eAAA,jEAAmClQ;IAC7BoQ,kBAAgB,6CAAA,7CAACpZ,+EAAS,+CAAA,WAAAqZ,1DAACnR;AAAD,AAAS,SAAI,CAAAmR,4BAAAC,wBAAa,qCAAAD,rCAACE;GAAe/X;IACpEmJ,OAAgB,AAAC7C,sFAAQtG,GAAGxE;IAC5Bia,aAAgB,WAAKC,EAAEC;AAAP,AAAc,OAACnX,6CAAK,AAAC7D,cAAI+a,GAAGC;;IAC5CjB,cAAgB,iBAAAsD,WAAQ,AAACrd,cAAI+Z;IAAbsD,eAAA,yGAAAA,vGACE,AAACja,cAAI6Z,kBAAiB,6CAAAI,7CAACxZ,sDAAKoZ;AAD9B,AAAA,oBAEEpQ;AAAI,oDAAAwQ,7CAACxL,0DAAKhF;;AAFZwQ;;;AAJtB,AAOE,AAACvS,mDAAMf,aAAa,WAAKuT;AAAL,AAAQ,IAAAC,WAAQ,iDAAA,jDAAC5Z,+CAAO2Z,4KAAqB,WAAKE,EAAE/a;AAAP,AAAU,OAACoP,6CAAK,AAAC1Q,cAAIqc,GAAG/a;GAAI+L;IAAjE+O,eAAA,kPAAAA,hPAEE,AAACna,cAAI2W,cAAS,+CAAAwD,SAAA,xDAAC5Z,4LAAsDmX,WAAWf;AAFlF,AAAA,GAGE,AAAC3W,cAAI4Z;AAAc,sDAAAO,aAAA,5DAAC5Z,oMAAwDmX,WAAWkC;;AAHzFO;;;;AAI5B,OAAA,4KAAM/O;;;;AAjDf,CAAA,2FAAA,3FAAMgO;;AAAN,AAmDA;;;;;;;;uEAAA,+EAAAiB,tJAAOE,+JAOwB1b,WAAW4b;AAP1C,AAAA,IAAAH,aAAAD;IAAAC,iBAAA,AAAAld,4BAAAkd;aAAAA,TAOuB9U;kBAPvB,AAAAnI,4CAAAid,eAAA,zEAOWE;AAPX,AAQE,oBAAIA;AACF,OAAC7a,+CACC,kBAAA+a,PAAK9a;AAAL,AAAA,IAAA+a,aAAAD;IAAAC,iBAAA,AAAAvd,4BAAAud;gBAAAA,ZAAyDtV;oBAAzD,AAAAhI,4CAAAsd,eAAA,3EAAqBC;cAArB,AAAAvd,4CAAAsd,eAAA,rEAA6Bld;qBAA7B,AAAAJ,4CAAAsd,eAAA,5EAAqCvW;AAArC,AACE,IAAMyW,MAAI,iBAAAld,mBAAI,AAAA,wLAAIF;AAAR,AAAA,oBAAAE;AAAAA;;AAA4B,OAAA,2FAAIF;;;AAA1C,AACE,GACE,AAACkB,gDAAKkc,IAAIJ;AAAU,AACE,OAAChM,6CAAK7O,OAAOyF;;AAFrC,oBAGEuV;AAAQ,AACE,CAACJ,4CAAAA,6DAAAA,nBAAOhV,yCAAAA,lCAAOiV,yCAAAA;;AACf7a;;AALZ,AAMa,AACE,IAAAkb,iBAAA,2CAAA,oEAAA,YAAA,0JAAA;AAAA,AAAA,6FAAAA,2CAAAA,vIAAC1W,+CAAAA,+DAAAA;;AACDxE;;;;GAXrB,iCAaEf;;AACF,AACE,AAAAgH,0DAAAC,mCAAA,uDAAA,kDAAA,KAAA,IAAA,8CAAA,qDAAA,KAAAC,gBAAA;AAAA,AAAA,0FAAA;GAAA,OAAA,KAAA,WAAA;;AACAlH;;;AAEN;;;8DAAA,9DAAMkc,oIAEHxe,QAAIke;AAFP,AAGE,IAAAO,aAAgE,AAACE,8CAAc3e;IAA/Eye,iBAAA,AAAA5d,4BAAA4d;mBAAA,AAAA3d,4CAAA2d,eAAA,1EAAiDrU;oBAAjD,AAAAlK,hBACM0e,gCAAiBxU;IADvBsU,aAG+DE;IAH/DF,iBAAA,AAAA7d,4BAAA6d;cAAA,AAAA5d,4CAAA4d,eAAA,rEAEiDhO;kBAFjD,AAAA5P,4CAAA4d,eAAA,zEAGiDrU;IAC3CC,eAAgB,AAAClK,eAAKiK;IACtBI,kBAAgB,AAACrH,+CACC,WAAKC,OAAOyB;AAAZ,AACE,OAACkD,8CAAM3E,OAAOyB,YAAY,AAACkZ,qEACC,AAACld,4CAAI4P,QAAQ5L,aACb,AAAChE,4CAAIuJ,YAAYvF,aAAaoZ;GAJ9D,mCAME5T;AAXxB,AAYE,uFAAA,hFAACa,mDAAMf,aAAakB,iLAAoBb;;AAE5C;;;;;;;qEAAA,rEAAMoU,kJAMHC,QAAQ7V;AANX,AAOE,IAAMjJ,UAAe,AAAC2e,8CAAcG;IAApCC,aAC2E,AAACJ,8CAAc3e;IAD1F+e,iBAAA,AAAAle,4BAAAke;iBAAA,AAAAje,4CAAAie,eAAA,xEACiDhE;mBADjD,AAAAja,4CAAAie,eAAA,1EAC4D3U;IAD5D4U,aAGkC,4CAAA,AAAA9e,8BAAA,mFAAA,7JAACY,4DAAKsJ,+NAA0DnB;IAHlG+V,iBAAA,AAAAne,4BAAAme;iBAAAA,bAGsBE;0BAHtB,AAAApe,4CAAAke,eAAA,jFAEOC;IAEDE,iBAAe,+CAAA,AAAAjf,8BAAA,mFAAA,hKAAC6V,+DAAQ3L,kQAA4BnB;AAJ1D,AAKE,mFAAA,mFAAA,gLAAA,tVAACkC,mDAAMf,aAAa8J,uQAAwBjL;;AAC5C,sFAAA,tFAACkC,0DAAM4P,WAAWpM,4JAA0D,4DAAA,5DAACuH,6CAAKkJ,oGAAUnW;;AAC5F,IAAAoW,aAAA,AAAA5b,cAAgE0b;IAAhEG,eAAA;IAAAC,eAAA;IAAAC,WAAA;;AAAA,AAAA,GAAA,AAAA,CAAAA,WAAAD;AAAA,IAAAE,aAAA,AAAAH,kDAAAE;IAAAC,iBAAA,AAAA5e,4BAAA4e;gBAAAA,ZAAqD3W;oBAArD,AAAAhI,4CAAA2e,eAAA,3EAAiBpB;cAAjB,AAAAvd,4CAAA2e,eAAA,rEAAyBve;qBAAzB,AAAAJ,4CAAA2e,eAAA,5EAAiC5X;AAAjC,AAAA,IAAA6X,mBAAA,AAAAjc,cACY,iBAAArC,mBAAI,AAAA,wLAAIF;AAAR,AAAA,oBAAAE;AAAAA;;AAA4B,OAAA,2FAAIF;;;IAD5Cye,qBAAA;IAAAC,qBAAA;IAAAC,iBAAA;;AAAA,AAAA,GAAA,AAAA,CAAAA,iBAAAD;AAAA,gBAAA,AAAAD,wDAAAE,pEACQvB;AADR,AAAA,AAEE,IAAA,AACE,oBAAMD;AAAN,AACE,oBAAIY;AACF,CAACA,oDAAAA,0EAAAA,xBAAeC,sDAAAA,3CAAWZ,sDAAAA;;AAC3B,AAAAhV,0DAAAC,mCAAA,qDAAA,kDAAA,KAAA,IAAA,8CAAA,qDAAA,KAAAC,gBAAA;;AAAA,AAAA,0FAAA;;CAAA,OAAA,KAAA,YAAA;;;AAHJ;;AAIA,IAAA+W,iBAAA,2CAAA,oEAAA,MAAA,sDAAA,mCAAA,oEAAA,mBAAA,0JAAA;AAAA,AAAA,6FAAAA,2CAAAA,vIAAC1Y,+CAAAA,+DAAAA;gBALH,cAAAsY,VAS2C9X;AAT3C,AAUI,AAAAiB,0DAAAC,mCAAA,uDAAA,kDAAA,KAAA,IAAA,8CAAA,qDAAA,KAAAC,gBAAA;;AAAA,AAAA,kGAAA,RAAWnB;;CAAX,OAAA,KAAA,UAAA;;AAZN;AAAA,eAAAqX;eAAAC;eAAAC;eAAA,CAAAC,iBAAA;;;;;;;AAAA,IAAAhZ,2BAAA,AAAApD,cAAAic;AAAA,AAAA,GAAA7Y;AAAA,AAAA,IAAA6Y,uBAAA7Y;AAAA,AAAA,GAAA,AAAAC,6BAAA4Y;AAAA,IAAA3Y,wBAAA,AAAAC,sBAAA0Y;AAAA,AAAA,eAAA,AAAAzY,qBAAAyY;eAAA3Y;eAAA,AAAAG,gBAAAH;eAAA;;;;;;;AAAA,gBAAA,AAAAhE,gBAAA2c,5BACQpB;AADR,AAAA,AAEE,IAAA,AACE,oBAAMD;AAAN,AACE,oBAAIY;AACF,CAACA,oDAAAA,0EAAAA,xBAAeC,sDAAAA,3CAAWZ,sDAAAA;;AAC3B,AAAAhV,0DAAAC,mCAAA,qDAAA,kDAAA,KAAA,IAAA,8CAAA,qDAAA,KAAAC,gBAAA;;AAAA,AAAA,0FAAA;;CAAA,OAAA,KAAA,UAAA;;;AAHJ;;AAIA,IAAAgX,iBAAA,2CAAA,oEAAA,MAAA,sDAAA,mCAAA,oEAAA,mBAAA,0JAAA;AAAA,AAAA,6FAAAA,2CAAAA,vIAAC3Y,+CAAAA,+DAAAA;gBALH,cAAAuY,VAS2C/X;AAT3C,AAUI,AAAAiB,0DAAAC,mCAAA,uDAAA,kDAAA,KAAA,IAAA,8CAAA,qDAAA,KAAAC,gBAAA;;AAAA,AAAA,kGAAA,RAAWnB;;CAAX,OAAA,KAAA,WAAA;;AAZN;AAAA,eAAA,AAAA1E,eAAA+b;eAAA;eAAA;eAAA;;;;;;;;AAAA;;;;;AAAA,eAAAL;eAAAC;eAAAC;eAAA,CAAAC,WAAA;;;;;;;AAAA,IAAA3Y,qBAAA,AAAApD,cAAA4b;AAAA,AAAA,GAAAxY;AAAA,AAAA,IAAAwY,iBAAAxY;AAAA,AAAA,GAAA,AAAAC,6BAAAuY;AAAA,IAAAtY,kBAAA,AAAAC,sBAAAqY;AAAA,AAAA,eAAA,AAAApY,qBAAAoY;eAAAtY;eAAA,AAAAG,gBAAAH;eAAA;;;;;;;AAAA,IAAA+Y,aAAA,AAAA/c,gBAAAsc;IAAAS,iBAAA,AAAAjf,4BAAAif;gBAAAA,ZAAqDhX;oBAArD,AAAAhI,4CAAAgf,eAAA,3EAAiBzB;cAAjB,AAAAvd,4CAAAgf,eAAA,rEAAyB5e;qBAAzB,AAAAJ,4CAAAgf,eAAA,5EAAiCjY;AAAjC,AAAA,IAAAkY,mBAAA,AAAAtc,cACY,iBAAArC,mBAAI,AAAA,wLAAIF;AAAR,AAAA,oBAAAE;AAAAA;;AAA4B,OAAA,2FAAIF;;;IAD5C8e,qBAAA;IAAAC,qBAAA;IAAAC,iBAAA;;AAAA,AAAA,GAAA,AAAA,CAAAA,iBAAAD;AAAA,gBAAA,AAAAD,wDAAAE,pEACQ5B;AADR,AAAA,AAEE,IAAA,AACE,oBAAMD;AAAN,AACE,oBAAIY;AACF,CAACA,oDAAAA,0EAAAA,xBAAeC,sDAAAA,3CAAWZ,sDAAAA;;AAC3B,AAAAhV,0DAAAC,mCAAA,qDAAA,kDAAA,KAAA,IAAA,8CAAA,qDAAA,KAAAC,gBAAA;;AAAA,AAAA,0FAAA;;CAAA,OAAA,KAAA,YAAA;;;AAHJ;;AAIA,IAAAiX,iBAAA,2CAAA,oEAAA,MAAA,sDAAA,mCAAA,oEAAA,mBAAA,0JAAA;AAAA,AAAA,6FAAAA,2CAAAA,vIAAC5Y,+CAAAA,+DAAAA;gBALH,cAAAwY,VAS2ChY;AAT3C,AAUI,AAAAiB,0DAAAC,mCAAA,uDAAA,kDAAA,KAAA,IAAA,8CAAA,qDAAA,KAAAC,gBAAA;;AAAA,AAAA,kGAAA,RAAWnB;;CAAX,OAAA,KAAA,WAAA;;AAZN;AAAA,eAAA0X;eAAAC;eAAAC;eAAA,CAAAC,iBAAA;;;;;;;AAAA,IAAArZ,+BAAA,AAAApD,cAAAsc;AAAA,AAAA,GAAAlZ;AAAA,AAAA,IAAAkZ,uBAAAlZ;AAAA,AAAA,GAAA,AAAAC,6BAAAiZ;AAAA,IAAAhZ,wBAAA,AAAAC,sBAAA+Y;AAAA,AAAA,eAAA,AAAA9Y,qBAAA8Y;eAAAhZ;eAAA,AAAAG,gBAAAH;eAAA;;;;;;;AAAA,gBAAA,AAAAhE,gBAAAgd,5BACQzB;AADR,AAAA,AAEE,IAAA,AACE,oBAAMD;AAAN,AACE,oBAAIY;AACF,CAACA,oDAAAA,0EAAAA,xBAAeC,sDAAAA,3CAAWZ,sDAAAA;;AAC3B,AAAAhV,0DAAAC,mCAAA,qDAAA,kDAAA,KAAA,IAAA,8CAAA,qDAAA,KAAAC,gBAAA;;AAAA,AAAA,0FAAA;;CAAA,OAAA,KAAA,WAAA;;;AAHJ;;AAIA,IAAAkX,iBAAA,2CAAA,oEAAA,MAAA,sDAAA,mCAAA,oEAAA,mBAAA,0JAAA;AAAA,AAAA,6FAAAA,2CAAAA,vIAAC7Y,+CAAAA,+DAAAA;gBALH,cAAAyY,VAS2CjY;AAT3C,AAUI,AAAAiB,0DAAAC,mCAAA,uDAAA,kDAAA,KAAA,IAAA,8CAAA,qDAAA,KAAAC,gBAAA;;AAAA,AAAA,kGAAA,RAAWnB;;CAAX,OAAA,KAAA,UAAA;;AAZN;AAAA,eAAA,AAAA1E,eAAAoc;eAAA;eAAA;eAAA;;;;;;;;AAAA;;;;;AAAA,eAAA,AAAApc,eAAA0b;eAAA;eAAA;eAAA;;;;;;;;AAAA","names",["com.fulcrologic.fulcro.algorithms.tx-processing/app->remotes","app","com.fulcrologic.guardrails.core/=>","cljs.core/deref","com.fulcrologic.fulcro.algorithms.tx-processing/app->remote-names","cljs.core/keys","cljs.core/set","com.fulcrologic.fulcro.algorithms.tx-processing/extract-parallel","sends","cljs.spec.alpha.every_impl","G__59418","cljs.core/vector?","cljs.spec.alpha/cat-impl","map__59419","cljs.core/--destructure-map","cljs.core.get","parallel?","p__59421","map__59422","options","cljs.core/boolean","or__4253__auto__","parallel","sequential","cljs.core/group-by","cljs.core/vec","com.fulcrologic.fulcro.algorithms.tx-processing/every-ast?","ast-node-or-tree","test","cljs.core/fn?","cljs.core/boolean?","cljs.core._EQ_","cljs.core/every?","com.fulcrologic.fulcro.algorithms.tx-processing/mutation-ast?","p1__59436#","com.fulcrologic.fulcro.algorithms.tx-processing/query-ast?","p1__59439#","cljs.core.not_EQ_","com.fulcrologic.fulcro.algorithms.tx-processing/sort-queue-writes-before-reads","send-queue","vec__59446","cljs.core.nth","map__59449","active-queue","cljs.core/split-with","id-sequence","cljs.core.mapv","n","cljs.core/first","cljs.core.partition_by","clusters","reads","writes","cljs.core.reduce","result","id","vec__59452","seq__59453","cljs.core/seq","first__59454","cljs.core/next","map__59455","ast","_","cluster","cljs.core.update","cljs.core/into","cljs.core.into","cljs.core.concat","p__59463","map__59464","com.fulcrologic.fulcro.algorithms.tx-processing/top-keys","type","key","children","G__59465","cljs.core/coll?","cljs.core.map","com.fulcrologic.fulcro.algorithms.tx-processing/combine-sends","remote-name","cljs.spec.alpha/map-spec-impl","G__59473","cljs.core/map?","cljs.core/contains?","vec__59503","vec__59506","active-nodes","id-to-send","to-send","to-defer","p1__59467#","tx","p__59512","map__59513","acc","com.fulcrologic.fulcro.algorithms.do-not-use/ast->query","edn-query-language.core/query->ast","combined-node-id","com.fulcrologic.fulcro.algorithms.tempid.uuid","combined-node-idx","combined-node","p__59514","map__59515","body","combined-result","seq__59521","chunk__59522","count__59523","i__59524","map__59531","temp__5753__auto__","cljs.core/chunked-seq?","c__4679__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","map__59534","update-handler","p__59535","map__59536","seq__59538","chunk__59539","count__59540","i__59541","map__59563","map__59569","result-handler","new-body","cljs.core/select-keys","cljs.core.assoc","and__4251__auto__","js/goog.DEBUG","com.fulcrologic.fulcro.inspect.inspect-client/INSPECT","map__59565","e","e59564","map__59575","e59574","status-code","com.fulcrologic.fulcro.inspect.inspect-client/send-finished!","com.fulcrologic.fulcro.inspect.inspect-client/send-failed!","com.fulcrologic.fulcro.algorithms.tx-processing/remove-send!","com.fulcrologic.fulcro.algorithms.tx-processing/net-send!","send-node","cljs.core/any?","b2__40629__auto__","remote","transmit!","e59577","e59594","com.fulcrologic.fulcro.inspect.inspect-client/send-started!","taoensso.timbre._log_BANG_","taoensso.timbre/*config*","cljs.core/Delay","e59578","e59579","G__59585","fexpr__59584","G__59608","fexpr__59607","G__59661","fexpr__59660","p__59695","map__59700","com.fulcrologic.fulcro.algorithms.tx-processing/process-send-queues!","runtime-atom","send-queues","remote-names","operations","cljs.core.atom","new-send-queues","vec__59703","p","serial","front","seq__59715","chunk__59716","count__59717","i__59718","item","cljs.core.swap_BANG_","cljs.core/conj","map__59747","cljs.core/assoc","seq__59749","chunk__59750","count__59751","i__59752","op","var_args","G__59764","com.fulcrologic.fulcro.algorithms.tx-processing/tx-node","js/Error","com.fulcrologic.fulcro.algorithms.tx_processing.tx_node","ast-nodes","elements","cljs.core.comp","cljs.core.filter","cljs.core.map_indexed","idx","ast-node","com.fulcrologic.fulcro.algorithms.do-not-use/now","G__59770","com.fulcrologic.fulcro.algorithms.tx-processing/build-env","p__59771","map__59772","p__59775","map__59780","tx-node","addl","map__59773","ref","component","G__59774","cljs.core.merge","com.fulcrologic.fulcro.algorithms.tx_processing.build_env","com.fulcrologic.fulcro.algorithms.tx-processing/dispatch-elements","env","dispatch-fn","do-dispatch","e59781","G__59782","dispatch","p__59783","map__59788","original-ast-node","ele","map__59789","G__59790","dispatch-all","eles","p__59792","map__59793","com.fulcrologic.fulcro.algorithms.tx-processing/application-rendered!","p1__59791#","cljs.core/some","cljs.core/update","queue","node","cljs.core/dissoc","com.fulcrologic.fulcro.algorithms.tx-processing/schedule-activation!","p__59798","map__59799","com.fulcrologic.fulcro.algorithms.tx-processing/activate-submissions!","map__59801","blocked","ready","dispatched-nodes","p1__59796#","com.fulcrologic.fulcro.mutations/mutate","a","p1__59797#","com.fulcrologic.fulcro.algorithms.tx-processing/process-queue!","G__59807","tm","cljs.core/int?","com.fulcrologic.fulcro.algorithms.scheduling.schedule_BANG_","com.fulcrologic.fulcro.algorithms.tx_processing.schedule_activation_BANG_","G__59811","com.fulcrologic.fulcro.algorithms.tx-processing/schedule-queue-processing!","com.fulcrologic.fulcro.algorithms.tx_processing.schedule_queue_processing_BANG_","G__59816","com.fulcrologic.fulcro.algorithms.tx-processing/schedule-sends!","com.fulcrologic.fulcro.algorithms.tx_processing.schedule_sends_BANG_","p__59819","map__59820","com.fulcrologic.fulcro.algorithms.tx-processing/advance-actions!","remotes","reduction","p__59821","map__59822","done?","new-elements","element","map__59823","map__59824","complete?","action","remote-set","clojure.set.intersection","exec?","cljs.core/not","fully-complete?","cljs.core/empty?","clojure.set.difference","state-id-before","com.fulcrologic.fulcro.inspect.inspect-client/current-history-id","state","state-before","updated-element","new-acc","cljs.core.conj","e59825","mutation-symbol","e59826","edn_query_language.core.ast__GT_expr","com.fulcrologic.fulcro.inspect.inspect-client/optimistic-action-finished!","p__59827","map__59828","com.fulcrologic.fulcro.algorithms.tx-processing/run-actions!","map__59837","map__59838","updated-node","e59842","e59844","p__59846","map__59847","com.fulcrologic.fulcro.algorithms.tx-processing/fully-complete?","element-complete?","p__59848","map__59851","active-keys","clojure.set.union","desired-set","p__59855","map__59856","txn-id","ele-idx","map__59857","old-queue","cljs.core/filterv","p__59858","map__59859","cljs.core/assoc-in","G__59864","com.fulcrologic.fulcro.algorithms.tx-processing/record-result!","p__59866","map__59867","result-key","cljs.core/keyword?","txn-idx","p__59868","map__59869","cljs.core/reduced","not-found?","com.fulcrologic.fulcro.algorithms.tx_processing.record_result_BANG_","com.fulcrologic.fulcro.algorithms.tx-processing/compute-desired-ast-node","tx-element","map__59930","state-before-action","remote-fn","remote-desire","desired-ast","query-transform","com.fulcrologic.fulcro.algorithms.lookup/app-algorithm","G__59944","p__59945","p__59946","map__59947","map__59948","com.fulcrologic.fulcro.algorithms.tx-processing/add-send!","cljs.spec.alpha/nilable-impl","cljs.core.get_in","handler","cljs.core/update-in","cljs.core.fnil","p__59950","map__59951","started?","com.fulcrologic.fulcro.algorithms.tx-processing/queue-element-sends!","to-dispatch","cljs.core.update_in","p__59952","map__59953","com.fulcrologic.fulcro.algorithms.tx-processing/idle-node?","p__59954","map__59955","in-progress","p__59958","map__59959","com.fulcrologic.fulcro.algorithms.tx-processing/element-with-work","todo","remaining","p__59966","map__59967","com.fulcrologic.fulcro.algorithms.tx-processing/queue-next-send!","with-work","cljs.core.partial","p__59972","map__59973","com.fulcrologic.fulcro.algorithms.tx-processing/queue-sends!","optimistic?","p__59980","map__59981","com.fulcrologic.fulcro.algorithms.tx-processing/dispatch-result!","results","desired-ast-nodes","transmitted-ast-nodes","e59986","p__59989","map__59990","com.fulcrologic.fulcro.algorithms.tx-processing/distribute-element-results!","new-element","p__59991","map__59992","com.fulcrologic.fulcro.algorithms.tx-processing/distribute-results!","p__59993","map__59994","com.fulcrologic.fulcro.algorithms.tx-processing/update-progress!","get-env","progress","p__60000","map__60001","seq__60002","chunk__60003","count__60004","i__60005","vec__60015","vec__60019","value","e60018","e60022","p__60023","map__60024","com.fulcrologic.fulcro.algorithms.tx-processing/process-tx-node!","G__60025","com.fulcrologic.fulcro.algorithms.tx-processing/requested-refreshes","G__60026","cljs.core/set?","outer-acc","map__60027","refresh","p__60028","map__60029","com.fulcrologic.fulcro.algorithms.tx-processing/remotes-active-on-node","active-on-element","p__60030","map__60031","com.fulcrologic.fulcro.algorithms.tx-processing/active-remotes","ra","p__60032","map__60033","state-atom","new-queue","temp__5751__auto__","new-node","accumulate","r","items","schedule-render!","explicit-refresh","remotes-active?","p__60035","map__60036","com.fulcrologic.fulcro.algorithms.tx-processing/transact-sync!","map__60037","mutation-nodes","ast-node->operation","cljs.core/zipmap","optimistic","mixed","p1__60034#","optimistic-tx-node","edn-query-language.core/ast->query","mixed-tx-node","resulting-node-id","cljs.core/reset!","com.fulcrologic.fulcro.components/component?","com.fulcrologic.fulcro.components/has-ident?","com.fulcrologic.fulcro.components/refresh-component!","r!","G__60040","com.fulcrologic.fulcro.algorithms.tx-processing/default-tx!","p__60041","p__60042","map__60043","map__60044","com.fulcrologic.fulcro.algorithms.tx_processing.default_tx_BANG_","synchronous?","map__60045","only-refresh","follow-on-reads","p1__60038#","cljs.core/Keyword","edn-query-language.core/ident?","G__60046","s","G__60047","v","p__60048","map__60049","com.fulcrologic.fulcro.algorithms.tx-processing/abort-elements!","abort!","abort-id","p__60050","map__60051","active?","aid","G__60052","com.fulcrologic.fulcro.algorithms.tx-processing/abort!","map__60053","map__60054","com.fulcrologic.fulcro.components/any->app","runtime-state","com.fulcrologic.fulcro.algorithms.tx-processing/abort-remote!","app-ish","map__60055","map__60056","abort-network!","the-remote","old-send-queue","cljs.core/disj","seq__60057","chunk__60062","count__60063","i__60064","map__60115","seq__60065","chunk__60066","count__60067","i__60068","map__60133","seq__60058","chunk__60059","count__60060","i__60061","e60124","e60131","e60141","e60143","G__60130","G__60132","G__60142","G__60144"]],"~:used-vars",["^L",["~$com.fulcrologic.fulcro.algorithms.tx-processing/requested-refreshes","~$cljs.core/--destructure-map","~$cljs.core/comp","~$clojure.set/intersection","~$com.fulcrologic.fulcro.algorithms.tx-processing/top-keys","~$cljs.core/boolean?","~$cljs.core/keyword?","~$com.fulcrologic.fulcro.algorithms.tx-processing/net-send!","~$com.fulcrologic.fulcro.algorithms.tx-processing/dispatch-elements","~$edn-query-language.core/query->ast","~$cljs.spec.alpha/every-impl","~$com.fulcrologic.fulcro.algorithms.do-not-use/ast->query","~$cljs.core/vector?","~$com.fulcrologic.fulcro.algorithms.tx-processing/update-progress!","~$com.fulcrologic.fulcro.algorithms.tx-processing/remotes-active-on-node","~$com.fulcrologic.fulcro.algorithms.tx-processing/queue-next-send!","~$cljs.core/filter","~$cljs.core/=","~$cljs.core/keys","~$com.fulcrologic.fulcro.algorithms.tx-processing/app->remote-names","~$com.fulcrologic.fulcro.algorithms.tx-processing/distribute-element-results!","~$com.fulcrologic.fulcro.algorithms.tx-processing/add-send!","~$cljs.core/partial","~$taoensso.timbre/-log!","~$com.fulcrologic.fulcro.mutations/mutate","~$com.fulcrologic.fulcro.algorithms.tx-processing/process-tx-node!","~$edn-query-language.core/ident?","~$com.fulcrologic.guardrails.core/=>","~$com.fulcrologic.fulcro.algorithms.tx-processing/queue-sends!","~$cljs.core/count","~$cljs.core/deref","~$com.fulcrologic.fulcro.components/has-ident?","~$com.fulcrologic.fulcro.algorithms.tx-processing/remove-send!","~$com.fulcrologic.fulcro.algorithms.tx-processing/abort-remote!","~$cljs.core/reduce","~$cljs.core/seq","~$cljs.core/chunk-first","~$cljs.core/Keyword","~$cljs.core/int?","~$cljs.core/group-by","~$com.fulcrologic.fulcro.algorithms.tx-processing/sort-queue-writes-before-reads","~$com.fulcrologic.fulcro.algorithms.tx-processing/schedule-sends!","~$com.fulcrologic.fulcro.algorithms.tx-processing/application-rendered!","~$cljs.core/mapv","~$cljs.spec.alpha/nilable-impl","~$cljs.core/not=","~$cljs.core/dissoc","~$com.fulcrologic.fulcro.algorithms.tx-processing/abort-elements!","~$cljs.core/Delay","~$cljs.core/chunk-rest","~$cljs.core/atom","~$com.fulcrologic.fulcro.algorithms.tx-processing/schedule-activation!","~$cljs.core/concat","~$com.fulcrologic.fulcro.inspect.inspect-client/optimistic-action-finished!","~$cljs.core/set","~$com.fulcrologic.fulcro.algorithms.tx-processing/process-send-queues!","~$cljs.core/empty?","~$cljs.core/fnil","~$com.fulcrologic.fulcro.algorithms.tx-processing/record-result!","~$cljs.core/contains?","~$cljs.core/into","~$cljs.core/map?","~$cljs.spec.alpha/map-spec-impl","~$cljs.core/reset!","~$com.fulcrologic.fulcro.inspect.inspect-client/INSPECT","~$cljs.core/conj","~$com.fulcrologic.fulcro.algorithms.tempid/uuid","~$com.fulcrologic.fulcro.algorithms.tx-processing/fully-complete?","~$taoensso.timbre/*config*","~$cljs.core/zipmap","~$cljs.core/update","~$com.fulcrologic.fulcro.algorithms.tx-processing/distribute-results!","~$cljs.core/map","~$cljs.core/fn?","~$com.fulcrologic.fulcro.algorithms.tx-processing/every-ast?","~$com.fulcrologic.fulcro.algorithms.tx-processing/query-ast?","~$com.fulcrologic.fulcro.algorithms.tx-processing/run-actions!","~$cljs.core/filterv","~$com.fulcrologic.fulcro.algorithms.tx-processing/app->remotes","~$edn-query-language.core/ast->expr","~$cljs.core/get-in","~$cljs.core/swap!","~$com.fulcrologic.fulcro.algorithms.tx-processing/schedule-queue-processing!","~$cljs.core/get","~$com.fulcrologic.fulcro.algorithms.tx-processing/element-with-work","~$com.fulcrologic.fulcro.inspect.inspect-client/send-failed!","~$com.fulcrologic.fulcro.algorithms.do-not-use/now","~$com.fulcrologic.fulcro.components/component?","~$cljs.core/partition-by","~$cljs.core/-nth","~$cljs.spec.alpha/cat-impl","~$com.fulcrologic.fulcro.algorithms.tx-processing/dispatch-result!","~$com.fulcrologic.fulcro.inspect.inspect-client/send-finished!","~$clojure.set/difference","~$com.fulcrologic.fulcro.algorithms.tx-processing/transact-sync!","~$com.fulcrologic.fulcro.algorithms.tx-processing/activate-submissions!","~$com.fulcrologic.fulcro.algorithms.tx-processing/extract-parallel","~$cljs.core/reduced","~$cljs.core/set?","~$com.fulcrologic.fulcro.components/any->app","~$com.fulcrologic.fulcro.algorithms.tx-processing/default-tx!","~$cljs.core/nth","~$com.fulcrologic.fulcro.algorithms.tx-processing/advance-actions!","~$js/goog.DEBUG","~$cljs.core/split-with","~$cljs.core/next","~$cljs.core/vec","~$com.fulcrologic.fulcro.algorithms.tx-processing/queue-element-sends!","~$com.fulcrologic.fulcro.algorithms.tx-processing/build-env","~$cljs.core/select-keys","~$cljs.core/not","~$com.fulcrologic.fulcro.algorithms.lookup/app-algorithm","~$com.fulcrologic.fulcro.algorithms.tx-processing/tx-node","~$com.fulcrologic.fulcro.components/refresh-component!","~$cljs.core/disj","~$cljs.core/assoc","~$com.fulcrologic.fulcro.algorithms.tx-processing/process-queue!","~$clojure.set/union","~$cljs.core/assoc-in","~$cljs.core/map-indexed","~$com.fulcrologic.fulcro.algorithms.scheduling/schedule!","~$com.fulcrologic.fulcro.inspect.inspect-client/send-started!","~$cljs.core/coll?","~$com.fulcrologic.fulcro.inspect.inspect-client/current-history-id","~$com.fulcrologic.fulcro.algorithms.tx-processing/abort!","~$com.fulcrologic.fulcro.algorithms.tx-processing/active-remotes","~$cljs.core/first","~$edn-query-language.core/ast->query","~$com.fulcrologic.fulcro.algorithms.tx-processing/mutation-ast?","~$com.fulcrologic.fulcro.algorithms.tx-processing/compute-desired-ast-node","~$cljs.core/merge","~$cljs.core/every?","~$cljs.core/update-in","~$com.fulcrologic.fulcro.algorithms.tx-processing/idle-node?","~$js/Error","~$cljs.core/any?","~$cljs.core/boolean","~$cljs.core/some","~$cljs.core/chunked-seq?","~$com.fulcrologic.fulcro.algorithms.tx-processing/combine-sends"]]],"~:cache-keys",["~#cmap",[["^1P","com/fulcrologic/fulcro/algorithms/normalize.cljc"],["aa10be524799b8f5dcb1cab659b996577fc15d41","~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^L",[]],"~:deps-syms",["^14","^13","^1>","^X","^Z","^10"]]],["^1P","goog/dom/tagname.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","~$goog.dom.HtmlElement"]]],["^1P","goog/async/freelist.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14"]]],["^1P","cljs/core/async/impl/ioc_helpers.cljs"],["c55a0f6d67abac2efcfddf7621cac07d90298cab","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^13","~$cljs.core.async.impl.protocols"]]],["^1P","goog/i18n/datetimesymbols.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14"]]],["^1P","goog/labs/useragent/platform.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","~$goog.string.internal","~$goog.labs.userAgent.util"]]],["^1P","expound/util.cljc"],["f84ecd45aeef38fd6f1c53d8323e6abc5dc5a0e4","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^13"]]],["^1P","goog/crypt/crypt.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","~$goog.asserts"]]],["^1P","cljs/core/async.cljs"],["c55a0f6d67abac2efcfddf7621cac07d90298cab","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^13","^5?","~$cljs.core.async.impl.channels","~$cljs.core.async.impl.buffers","~$cljs.core.async.impl.timers","~$cljs.core.async.impl.dispatch","~$cljs.core.async.impl.ioc-helpers","~$goog.array"]]],["^1P","goog/timer/timer.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","~$goog.Promise","~$goog.events.EventTarget","~$goog.Thenable"]]],["^1P","com/fulcrologic/fulcro/algorithms/lookup.cljc"],["aa10be524799b8f5dcb1cab659b996577fc15d41","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^13","^Z"]]],["^1P","cljs/spec/gen/alpha.cljs"],["e2ad9a4500a5ecabaf01429c4f0d6f7fac146951","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^13","~$goog.Uri"]]],["^1P","cljs/tools/reader/impl/utils.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^13","~$clojure.string","~$goog.string"]]],["^1P","goog/math/math.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^5B"]]],["^1P","goog/html/trustedtypes.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14"]]],["^1P","goog/string/stringformat.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^5N"]]],["^1P","goog/events/eventtype.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","~$goog.events.BrowserFeature","~$goog.userAgent"]]],["^1P","goog/labs/useragent/browser.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^5H","~$goog.object","^5A","^5@"]]],["^1P","goog/html/safeurl.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^5B","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.i18n.bidi.Dir","~$goog.i18n.bidi.DirectionalString","~$goog.string.Const","~$goog.string.TypedString","^5@"]]],["^1P","goog/array/array.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^5B"]]],["^1P","com/fulcrologic/fulcro/algorithms/do_not_use.cljc"],["aa10be524799b8f5dcb1cab659b996577fc15d41","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^13","^Z","^5M","^X","^5Q","~$goog.crypt","~$goog.crypt.base64","^@"]]],["^1P","expound/problems.cljc"],["f84ecd45aeef38fd6f1c53d8323e6abc5dc5a0e4","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^13","~$expound.paths","^@"]]],["^1P","goog/useragent/useragent.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","~$goog.labs.userAgent.browser","~$goog.labs.userAgent.engine","~$goog.labs.userAgent.platform","^5A","~$goog.reflect","^5@"]]],["^1P","goog/structs/prioritypool.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","~$goog.structs.Pool","~$goog.structs.PriorityQueue"]]],["^1P","goog/events/eventlike.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","~$goog.events.Event","~$goog.events.EventId"]]],["^1P","goog/async/run.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","~$goog.async.WorkQueue","~$goog.async.nextTick","~$goog.async.throwException"]]],["^1P","com/cognitect/transit/impl/reader.js"],["f8b4f570ca4d41649190efecac27a5932cc11429","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","~$com.cognitect.transit.impl.decoder","~$com.cognitect.transit.caching"]]],["^1P","goog/debug/error.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14"]]],["^1P","goog/async/workqueue.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","~$goog.async.FreeList","^5B"]]],["^1P","com/fulcrologic/fulcro/dom/events.cljc"],["aa10be524799b8f5dcb1cab659b996577fc15d41","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^13"]]],["^1P","goog/events/events.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^5B","~$goog.debug.entryPointRegistry","~$goog.events.BrowserEvent","^5O","~$goog.events.Listenable","~$goog.events.ListenerMap","~$goog.debug.ErrorHandler","^66","~$goog.events.EventLike","~$goog.events.EventWrapper","~$goog.events.ListenableKey","~$goog.events.Listener"]]],["^1P","goog/promise/resolver.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^5I"]]],["^1P","goog/events/browserfeature.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14"]]],["^1P","cljs/tools/reader/edn.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^13","~$cljs.tools.reader.impl.errors","~$cljs.tools.reader.reader-types","~$cljs.tools.reader.impl.utils","~$cljs.tools.reader.impl.commons","~$cljs.tools.reader","^5N","~$goog.string.StringBuffer"]]],["^1P","goog/structs/priorityqueue.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","~$goog.structs.Heap"]]],["^1P","goog/net/xhrio.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","~$goog.Timer","^5H","^5B","~$goog.collections.maps","^6=","^5J","~$goog.json.hybrid","~$goog.log","~$goog.net.ErrorCode","~$goog.net.EventType","~$goog.net.HttpStatus","~$goog.net.XmlHttp","^5Q","^5N","~$goog.uri.utils","^5P","^5L","^6A","~$goog.net.XhrLike","~$goog.net.XmlHttpFactory"]]],["^1P","goog/promise/thenable.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^5I"]]],["^1P","goog/collections/iters.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14"]]],["^1P","com/fulcrologic/fulcro/algorithms/transit.cljc"],["aa10be524799b8f5dcb1cab659b996577fc15d41","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^13","~$cognitect.transit","^J","^@","^17"]]],["^1P","goog/dom/nodetype.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14"]]],["^1P","com/fulcrologic/guardrails/utils.cljc"],["1c3188d13b2f3b2324bad6f65cc78cd4b193445e","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^13","~$clojure.walk"]]],["^1P","cljs/tools/reader/impl/inspect.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^13"]]],["^1P","com/cognitect/transit/util.js"],["f8b4f570ca4d41649190efecac27a5932cc11429","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^5Q"]]],["^1P","cljs/pprint.cljs"],["e2ad9a4500a5ecabaf01429c4f0d6f7fac146951","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^13","^5M","^5N","^6K"]]],["^1P","com/fulcrologic/fulcro/algorithms/data_targeting.cljc"],["aa10be524799b8f5dcb1cab659b996577fc15d41","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^13","^W","^@","^J","^X","^Z"]]],["^1P","cljs/tools/reader.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^13","^6G","^6H","^6I","^6F","^5H","^5N","^6K"]]],["^1P","expound/alpha.cljc"],["f84ecd45aeef38fd6f1c53d8323e6abc5dc5a0e4","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^13","~$expound.problems","^@","^5M","^W","~$expound.printer","~$expound.util","~$expound.ansi"]]],["^1P","taoensso/timbre.cljc"],["ed86c0ab3cf1c4771c5f9bf201405e20c3027ced","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^13","^5M","~$goog.i18n.DateTimeFormat","^1<","~$taoensso.timbre.appenders.core"]]],["^1P","goog/net/wrapperxmlhttpfactory.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^6V","^6W"]]],["^1P","goog/date/utcdatetime.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","~$goog.date","~$goog.date.Date","~$goog.date.DateTime","~$goog.date.Interval"]]],["^1P","goog/i18n/nativelocaledigits.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14"]]],["^1P","goog/events/eventtarget.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","~$goog.Disposable","^5B","~$goog.events","^65","^6?","^6@","^5Q","^66","^6B","^6D"]]],["^1P","com/fulcrologic/guardrails/core.cljc"],["1c3188d13b2f3b2324bad6f65cc78cd4b193445e","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^13","~$com.fulcrologic.guardrails.impl.externs","~$com.fulcrologic.guardrails.utils","^B","^@","^5M","~$expound.alpha"]]],["^1P","goog/disposable/disposable.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","~$goog.disposable.IDisposable","~$goog.dispose","~$goog.disposeAll"]]],["^1P","expound/ansi.cljc"],["f84ecd45aeef38fd6f1c53d8323e6abc5dc5a0e4","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^13","^5M"]]],["^1P","goog/string/typedstring.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14"]]],["~:shadow.build.npm/resource","node_modules/react/index.js"],["1c6e82d3f9756822c3b08dd8f8e1d7c23a7f1630","3679a1a898d0c80b330819274df3fe1302fa19d1","a69a7f3d4a4636bf9035bc53c05b2d99a7b8af7f","^5:",["^ ","^5;",2,"^5<",["^L",[0,1]],"^5=",["~$shadow.js","~$module$node_modules$react$cjs$react_production_min","~$module$node_modules$react$cjs$react_development"]]],["^1P","shadow/js.js"],["dcbbe536346aae67f50c45a19f6541141d5c98c1","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14"]]],["^1P","goog/object/object.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14"]]],["^1P","goog/dom/asserts.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^5B"]]],["^1P","taoensso/encore.cljc"],["8ce32d99c08a853f8a56322b5aab80e59c3bd4d6","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^13","^5M","^W","~$cljs.reader","~$cljs.tools.reader.edn","^5Q","^5H","^5N","~$goog.string.format","^6K","^79","~$goog.net.XhrIo","~$goog.net.XhrIoPool","~$goog.Uri.QueryData","^6R","^6Q","~$taoensso.truss"]]],["^1P","goog/structs/set.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","~$goog.structs","~$goog.structs.Collection","~$goog.structs.Map","~$goog.iter.Iterator"]]],"~:SHADOW-TIMESTAMP",[1676259735000,1676259735000,1676259734000],["^7@","node_modules/react/cjs/react.development.js"],["1c6e82d3f9756822c3b08dd8f8e1d7c23a7f1630","3679a1a898d0c80b330819274df3fe1302fa19d1","1df918e8981877c2759388dfae58a059e089860d","^5:",["^ ","^5;",1,"^5<",["^L",[]],"^5=",["^7A"]]],["^1P","taoensso/timbre/appenders/core.cljc"],["ed86c0ab3cf1c4771c5f9bf201405e20c3027ced","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^13","^5M","^1<"]]],["^1P","goog/math/long.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^5B","^62"]]],["^1P","goog/events/listener.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^6D","^6?"]]],["^1P","goog/html/trustedresourceurl.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^5B","~$goog.fs.blob","^5R","~$goog.html.SafeScript","~$goog.html.trustedtypes","^5T","^5U","^5V","^5W"]]],["^1P","cljs/core/async/impl/channels.cljs"],["c55a0f6d67abac2efcfddf7621cac07d90298cab","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^13","^5?","^5F","^5D"]]],["^1P","goog/events/listenermap.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^5H","^6E","^5Q","^66","^6?","^6D"]]],["^1P","goog/events/eventid.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14"]]],["^1P","taoensso/truss.cljs"],["02c08dae83153a50eb946c4d742f574a24bb2a76","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^13","~$taoensso.truss.impl"]]],["^1P","com/fulcrologic/guardrails/registry.cljc"],["1c3188d13b2f3b2324bad6f65cc78cd4b193445e","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^13"]]],["^1P","goog/string/internal.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14"]]],["^1P","goog/events/eventwrapper.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","~$goog.events.EventHandler","~$goog.events.ListenableType"]]],["^1P","com/fulcrologic/fulcro/algorithms/merge.cljc"],["aa10be524799b8f5dcb1cab659b996577fc15d41","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^13","~$com.fulcrologic.fulcro.algorithms.data-targeting","^10","^U","~$com.fulcrologic.fulcro.algorithms.normalize","^12","^1>","^X","^Z","^17"]]],["^1P","edn_query_language/core.cljc"],["839028d06d9cc88b18b20c77c53a2bb77140d1f7","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^13","^@"]]],["^1P","goog/functions/functions.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14"]]],["^1P","cljs/core/async/impl/dispatch.cljs"],["c55a0f6d67abac2efcfddf7621cac07d90298cab","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^13","^5D","^68"]]],["^1P","goog/html/safestyle.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^5V","~$goog.html.SafeUrl","^5W","^5B","^5@"]]],["^1P","goog/dom/safe.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^5B","~$goog.dom.asserts","~$goog.functions","~$goog.html.SafeHtml","^7Q","~$goog.html.SafeStyle","^7X","^5S","~$goog.html.uncheckedconversions","^5V","^5@"]]],["^1P","expound/paths.cljc"],["f84ecd45aeef38fd6f1c53d8323e6abc5dc5a0e4","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^13","^@","^70"]]],["^1P","taoensso/truss/impl.cljs"],["02c08dae83153a50eb946c4d742f574a24bb2a76","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^13","^W"]]],["^1P","clojure/walk.cljs"],["e2ad9a4500a5ecabaf01429c4f0d6f7fac146951","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^13"]]],["^1P","goog/useragent/product.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^5[","^61","^5P"]]],["^1P","cljs/core/async/impl/protocols.cljs"],["c55a0f6d67abac2efcfddf7621cac07d90298cab","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^13"]]],["^1P","goog/net/eventtype.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14"]]],["^1P","goog/structs/map.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","~$goog.collections.iters","^7N","~$goog.iter.StopIteration","~$goog.iter.es6"]]],["^1P","goog/net/xhriopool.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^7G","~$goog.structs.PriorityPool","^7M"]]],["^1P","com/cognitect/transit/delimiters.js"],["f8b4f570ca4d41649190efecac27a5932cc11429","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14"]]],["^1P","goog/date/date.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^5B","~$goog.i18n.DateTimeSymbols","^5N"]]],["^1P","goog/html/safehtml.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^5V","^5T","^5U","^7Q","^80","~$goog.html.SafeStyleSheet","^7X","~$goog.dom.TagName","^5S","^5W","^5B","^5[","^5H","^5Q","^5@","~$goog.dom.tags","^7R"]]],["^1P","goog/dom/tags.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^5Q"]]],["^1P","goog/math/size.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14"]]],["^1P","com/fulcrologic/fulcro/raw/components.cljc"],["aa10be524799b8f5dcb1cab659b996577fc15d41","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^13","^5Q","^W","^5M","^6Y","^12","^1>","^U","~$com.fulcrologic.fulcro.algorithms.transit","^X","^1<","^Z"]]],["^1P","goog/structs/queue.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^5H"]]],["^1P","goog/labs/useragent/engine.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^5H","^5@","^5A"]]],["^1P","com/fulcrologic/fulcro/inspect/transit.cljs"],["aa10be524799b8f5dcb1cab659b996577fc15d41","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^13","^6X","~$com.cognitect.transit.types","^8:","^Z"]]],["^1P","com/cognitect/transit/impl/decoder.js"],["f8b4f570ca4d41649190efecac27a5932cc11429","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","~$com.cognitect.transit.util","~$com.cognitect.transit.delimiters","^6;","^8;"]]],["^1P","goog/fs/blob.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14"]]],["^1P","cljs/reader.cljs"],["e2ad9a4500a5ecabaf01429c4f0d6f7fac146951","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^13","^5Q","^6J","^7E","^6K"]]],["^1P","com/fulcrologic/fulcro/mutations.cljc"],["aa10be524799b8f5dcb1cab659b996577fc15d41","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^13","~$com.fulcrologic.fulcro.raw.components","~$com.fulcrologic.fulcro.dom.events","^J","^X","^Z","^1<","^@","^1>","^7V","~$com.fulcrologic.fulcro.algorithms.merge","^U","^17","^5M"]]],["^1P","goog/dom/dom.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^5H","^5B","~$goog.dom.BrowserFeature","~$goog.dom.NodeType","^88","~$goog.dom.safe","^7[","^81","~$goog.math.Coordinate","~$goog.math.Size","^5Q","^5N","^5V","~$goog.string.Unicode","^5P"]]],["^1P","com/fulcrologic/guardrails/impl/externs.cljc"],["1c3188d13b2f3b2324bad6f65cc78cd4b193445e","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^13","~$com.fulcrologic.guardrails.registry","^7;"]]],["^1P","com/fulcrologic/fulcro/components.cljc"],["aa10be524799b8f5dcb1cab659b996577fc15d41","^5:",["^ ","^5;",null,"^5<",["^L",[2]],"^5=",["^14","^13","^5Q","~$module$node_modules$react$index","^X","^@","^Z","^6Y","^5M","^1>","^12","^U","^8>","^J","^W"]]],["^1P","com/fulcrologic/fulcro/specs.cljc"],["aa10be524799b8f5dcb1cab659b996577fc15d41","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^13","^@","^J","^1>","^X"]]],["^1P","goog/asserts/asserts.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","~$goog.debug.Error","^8B"]]],["^1P","cljs/core/async/impl/buffers.cljs"],["c55a0f6d67abac2efcfddf7621cac07d90298cab","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^13","^5?"]]],["^1P","goog/i18n/timezone.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^5H","~$goog.date.DateLike","^5Q","^5N"]]],["^1P","goog/uri/uri.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^5H","^5B","^6N","^5N","^7K","^6U","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^1P","goog/net/errorcode.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14"]]],["^1P","goog/collections/maps.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14"]]],["^1P","goog/iter/es6.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","~$goog.iter.Iterable","^7N","^83"]]],["^1P","goog/i18n/bidi.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14"]]],["^1P","goog/debug/errorhandler.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^78","^5B","~$goog.debug.EntryPointMonitor","^8I"]]],["^1P","goog/disposable/idisposable.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14"]]],["^1P","goog/promise/promise.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^5K","^5B","^6<","~$goog.async.run","^69","^8I","~$goog.promise.Resolver"]]],["^1P","cljs/core/async/impl/timers.cljs"],["c55a0f6d67abac2efcfddf7621cac07d90298cab","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^13","^5?","^5C","^5F"]]],["^1P","cljs/spec/alpha.cljs"],["e2ad9a4500a5ecabaf01429c4f0d6f7fac146951","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^13","^5Q","^6Y","~$cljs.spec.gen.alpha","^5M"]]],["^1P","goog/fs/url.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14"]]],["^1P","goog/base.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",[]]],["^1P","goog/json/hybrid.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^5B","~$goog.json"]]],["^1P","goog/structs/structs.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^5H","^5Q"]]],["^1P","cljs/tools/reader/impl/errors.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^13","^6G","^5M","~$cljs.tools.reader.impl.inspect"]]],["^1P","com/fulcrologic/fulcro/algorithms/scheduling.cljc"],["aa10be524799b8f5dcb1cab659b996577fc15d41","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^13","^J","^B","^Z"]]],["^1P","goog/disposable/dispose.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14"]]],["^1P","clojure/string.cljs"],["e2ad9a4500a5ecabaf01429c4f0d6f7fac146951","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^13","^5N","^6K"]]],["^1P","com/fulcrologic/fulcro/algorithms/tempid.cljc"],["aa10be524799b8f5dcb1cab659b996577fc15d41","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^13","^Z","^6Y"]]],["^1P","goog/structs/pool.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^78","~$goog.structs.Queue","~$goog.structs.Set"]]],["^1P","com/fulcrologic/fulcro/inspect/diff.cljc"],["aa10be524799b8f5dcb1cab659b996577fc15d41","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^13","^@"]]],["^7@","node_modules/react/cjs/react.production.min.js"],["1c6e82d3f9756822c3b08dd8f8e1d7c23a7f1630","3679a1a898d0c80b330819274df3fe1302fa19d1","f5f2e0db62a5ce44eafff60d4f3577b8796734e4","^5:",["^ ","^5;",0,"^5<",["^L",[]],"^5=",["^7A"]]],["^1P","goog/net/httpstatus.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14"]]],["^1P","goog/i18n/datetimeformat.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^5B","^74","~$goog.date.UtcDateTime","^86","~$goog.i18n.LocaleFeature","~$goog.i18n.NativeLocaleDigits","~$goog.i18n.TimeZone","^5N","~$goog.i18n.DateTimeSymbolsType"]]],["^1P","com/cognitect/transit/handlers.js"],["f8b4f570ca4d41649190efecac27a5932cc11429","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^8<","^8;","~$goog.math.Long"]]],["^1P","goog/structs/heap.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^5H","^5Q","~$goog.structs.Node"]]],["^1P","goog/debug/entrypointregistry.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^5B"]]],["^1P","goog/string/string.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^8C","^81","^5V","^5@"]]],["^1P","com/cognitect/transit/types.js"],["f8b4f570ca4d41649190efecac27a5932cc11429","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^8<","~$com.cognitect.transit.eq","^8["]]],["^1P","goog/reflect/reflect.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14"]]],["^1P","goog/labs/useragent/util.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","~$goog.labs.userAgent","^5@"]]],["^1P","expound/printer.cljc"],["f84ecd45aeef38fd6f1c53d8323e6abc5dc5a0e4","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^13","^5M","^@","^D","^W","^70","^71","^5Z","^6Y","^7F","^5N"]]],["^1P","com/fulcrologic/fulcro/algorithms/tx_processing.cljc"],["aa10be524799b8f5dcb1cab659b996577fc15d41","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^13","^W","^@","^U","^17","^12","^1>","^19","^18","^10","^15","^G","^J","^X","^1<","^Z"]]],["^1P","com/cognitect/transit/eq.js"],["f8b4f570ca4d41649190efecac27a5932cc11429","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^8<"]]],["^1P","goog/debug/debug.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^5H","~$goog.debug.errorcontext"]]],["^1P","goog/string/stringbuffer.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14"]]],["^1P","goog/math/coordinate.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","~$goog.math"]]],["^1P","goog/debug/errorcontext.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14"]]],["^1P","cljs/tools/reader/reader_types.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^13","^6H","^5N","^6K"]]],["^1P","goog/iter/iter.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^5H","^5B","~$goog.debug","^7Z","^94"]]],["^1P","goog/labs/useragent/useragent.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14"]]],["^1P","goog/async/nexttick.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^6=","~$goog.dom","^88","^7Z","^5[","^60"]]],["^1P","goog/html/uncheckedconversions.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^5B","^7[","^7Q","^80","^87","^7X","^5S","^5V","^5@","^5T"]]],["^1P","com/cognitect/transit/caching.js"],["f8b4f570ca4d41649190efecac27a5932cc11429","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^8="]]],["^1P","goog/events/event.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^78","^66"]]],["^1P","cljs/tools/reader/impl/commons.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^13","^6F","^6G","^6H"]]],["^1P","goog/events/eventhandler.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^78","^79","^5Q","^65","^66","^5J","^6C"]]],["^1P","goog/dom/htmlelement.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14"]]],["^1P","cljs/core.cljs"],["e2ad9a4500a5ecabaf01429c4f0d6f7fac146951","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^8[","~$goog.math.Integer","^5N","^5Q","^5H","^5L","^6K"]]],["^1P","com/cognitect/transit.js"],["f8b4f570ca4d41649190efecac27a5932cc11429","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^8<","~$com.cognitect.transit.impl.reader","~$com.cognitect.transit.impl.writer","^8;","^91","^6:","^6;"]]],["^1P","goog/html/safescript.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^5V","^5W","^7R","^5B"]]],["^1P","goog/log/log.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^5B","^95"]]],["^1P","goog/async/throwexception.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14"]]],["^1P","goog/html/safestylesheet.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^5V","^80","^5W","^5Q","^5B","^5@"]]],["^1P","goog/structs/collection.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14"]]],["^1P","goog/events/browserevent.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^95","^65","~$goog.events.EventType","^62","^5P"]]],["^1P","goog/math/integer.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^62"]]],["^1P","goog/structs/node.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14"]]],["^1P","goog/dom/browserfeature.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^5P"]]],["^1P","clojure/set.cljs"],["e2ad9a4500a5ecabaf01429c4f0d6f7fac146951","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^13"]]],["^1P","goog/uri/utils.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^5B","^5N"]]],["^1P","goog/string/const.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^5B","^5W"]]],["^1P","goog/disposable/disposeall.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^7>"]]],["^1P","goog/json/json.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14"]]],["^1P","goog/i18n/localefeature.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14"]]],["^1P","goog/events/listenable.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^66","^6B","^6D"]]],["^1P","goog/events/listenablekey.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^6?"]]],["^1P","com/cognitect/transit/impl/writer.js"],["f8b4f570ca4d41649190efecac27a5932cc11429","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^8<","^6;","~$com.cognitect.transit.handlers","^8;","^8=","^8["]]],["^1P","goog/net/xmlhttpfactory.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^6V"]]],["^1P","com/fulcrologic/fulcro/algorithms/denormalize.cljc"],["aa10be524799b8f5dcb1cab659b996577fc15d41","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^13","^W","^X","^Z"]]],["^1P","goog/net/xmlhttp.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^5B","~$goog.net.WrapperXmlHttpFactory","^6W","^6V"]]],["^1P","com/fulcrologic/fulcro/inspect/inspect_client.cljc"],["aa10be524799b8f5dcb1cab659b996577fc15d41","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^13","^X","^U","^5Q","~$com.fulcrologic.fulcro.inspect.diff","~$com.fulcrologic.fulcro.inspect.transit","^B","^1<","^Z"]]],["^1P","goog/net/xhrlike.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14"]]],["^1P","cognitect/transit.cljs"],["ae688999ee978d238bffd4df0c0323e552d6d8dc","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^13","~$com.cognitect.transit","^8;","^91","^8["]]],["^1P","goog/crypt/base64.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5:",["^ ","^5;",null,"^5<",["^L",[]],"^5=",["^14","^5B","^5X","^5@","^5P","~$goog.userAgent.product"]]]]],"~:clj-info",["^ ","jar:file:/C:/Users/carre/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/main.clj",1675466804000,"jar:file:/C:/Users/carre/.m2/repository/com/fulcrologic/fulcro/3.5.9/fulcro-3.5.9.jar!/com/fulcrologic/fulcro/raw/components.cljc",1676259735000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader.clj",1675288215000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/impl/errors.clj",1675288215000,"jar:file:/C:/Users/carre/.m2/repository/com/taoensso/truss/1.6.0/truss-1.6.0.jar!/taoensso/truss.clj",1676259735000,"jar:file:/C:/Users/carre/.m2/repository/com/fulcrologic/guardrails/1.1.4/guardrails-1.1.4.jar!/com/fulcrologic/guardrails/impl/externs.cljc",1676259733000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/tools.analyzer/1.1.0/tools.analyzer-1.1.0.jar!/clojure/tools/analyzer/ast.clj",1675288214000,"jar:file:/C:/Users/carre/.m2/repository/com/taoensso/timbre/5.1.1/timbre-5.1.1.jar!/taoensso/timbre/appenders/core.cljc",1676259736000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/core.async/1.4.627/core.async-1.4.627.jar!/clojure/core/async/impl/ioc_macros.clj",1676259738000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/default_data_readers.clj",1675288215000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/clojurescript/1.10.914/clojurescript-1.10.914.jar!/cljs/util.cljc",1676259734000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/core.async/1.4.627/core.async-1.4.627.jar!/clojure/core/async/impl/buffers.clj",1676259738000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/data.json/2.4.0/data.json-2.4.0.jar!/clojure/data/json.clj",1675288214000,"jar:file:/C:/Users/carre/.m2/repository/com/fulcrologic/guardrails/1.1.4/guardrails-1.1.4.jar!/com/fulcrologic/guardrails/impl/parser.clj",1676259733000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/tools.analyzer/1.1.0/tools.analyzer-1.1.0.jar!/clojure/tools/analyzer/env.clj",1675288214000,"jar:file:/C:/Users/carre/.m2/repository/com/fulcrologic/fulcro/3.5.9/fulcro-3.5.9.jar!/com/fulcrologic/fulcro/algorithms/lookup.cljc",1676259735000,"jar:file:/C:/Users/carre/.m2/repository/io/aviso/pretty/0.1.37/pretty-0.1.37.jar!/io/aviso/columns.clj",1676259734000,"jar:file:/C:/Users/carre/.m2/repository/com/fulcrologic/guardrails/1.1.4/guardrails-1.1.4.jar!/com/fulcrologic/guardrails/utils.cljc",1676259733000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/clojurescript/1.10.914/clojurescript-1.10.914.jar!/cljs/reader.clj",1676259734000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/spec.alpha/0.2.194/spec.alpha-0.2.194.jar!/clojure/spec/gen/alpha.clj",1675466804000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/clojurescript/1.10.914/clojurescript-1.10.914.jar!/cljs/analyzer/passes.cljc",1676259734000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/core.async/1.4.627/core.async-1.4.627.jar!/clojure/core/async/impl/timers.clj",1676259738000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/clojurescript/1.10.914/clojurescript-1.10.914.jar!/cljs/source_map/base64.clj",1676259734000,"jar:file:/C:/Users/carre/.m2/repository/expound/expound/0.8.9/expound-0.8.9.jar!/expound/problems.cljc",1676259733000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/clojurescript/1.10.914/clojurescript-1.10.914.jar!/cljs/analyzer.cljc",1676259734000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/tools.analyzer.jvm/1.2.0/tools.analyzer.jvm-1.2.0.jar!/clojure/tools/analyzer/jvm/utils.clj",1676259734000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/clojurescript/1.10.914/clojurescript-1.10.914.jar!/cljs/source_map.clj",1676259734000,"jar:file:/C:/Users/carre/.m2/repository/edn-query-language/eql/1.0.1/eql-1.0.1.jar!/edn_query_language/core.cljc",1676259733000,"jar:file:/C:/Users/carre/.m2/repository/com/fulcrologic/fulcro/3.5.9/fulcro-3.5.9.jar!/com/fulcrologic/fulcro/components.cljc",1676259735000,"jar:file:/C:/Users/carre/.m2/repository/com/fulcrologic/fulcro/3.5.9/fulcro-3.5.9.jar!/com/fulcrologic/fulcro/algorithms/do_not_use.cljc",1676259735000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/stacktrace.clj",1675466804000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/edn.clj",1675466804000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/clojurescript/1.10.914/clojurescript-1.10.914.jar!/cljs/source_map/base64_vlq.clj",1676259734000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/impl/inspect.clj",1675288215000,"jar:file:/C:/Users/carre/.m2/repository/com/fulcrologic/guardrails/1.1.4/guardrails-1.1.4.jar!/com/fulcrologic/guardrails/core.cljc",1676259733000,"jar:file:/C:/Users/carre/.m2/repository/com/taoensso/truss/1.6.0/truss-1.6.0.jar!/taoensso/truss/impl.clj",1676259735000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/clojurescript/1.10.914/clojurescript-1.10.914.jar!/cljs/spec/alpha.cljc",1676259734000,"jar:file:/C:/Users/carre/.m2/repository/com/fulcrologic/fulcro/3.5.9/fulcro-3.5.9.jar!/com/fulcrologic/fulcro/mutations.cljc",1676259735000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/core.async/1.4.627/core.async-1.4.627.jar!/cljs/core/async/impl/ioc_macros.clj",1676259738000,"jar:file:/C:/Users/carre/.m2/repository/com/fulcrologic/fulcro/3.5.9/fulcro-3.5.9.jar!/com/fulcrologic/fulcro/algorithms/denormalize.cljc",1676259735000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/clojurescript/1.10.914/clojurescript-1.10.914.jar!/cljs/js_deps.cljc",1676259734000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/tools.analyzer/1.1.0/tools.analyzer-1.1.0.jar!/clojure/tools/analyzer/utils.clj",1675288214000,"jar:file:/C:/Users/carre/.m2/repository/com/fulcrologic/fulcro/3.5.9/fulcro-3.5.9.jar!/com/fulcrologic/fulcro/algorithms/transit.cljc",1676259735000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/cljs/tools/reader/reader_types.clj",1675288215000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/instant.clj",1675466804000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/clojurescript/1.10.914/clojurescript-1.10.914.jar!/cljs/core.cljc",1676259734000,"jar:file:/C:/Users/carre/.m2/repository/expound/expound/0.8.9/expound-0.8.9.jar!/expound/paths.cljc",1676259733000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/java/io.clj",1675466804000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/clojurescript/1.10.914/clojurescript-1.10.914.jar!/cljs/env.cljc",1676259734000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/clojurescript/1.10.914/clojurescript-1.10.914.jar!/cljs/instant.clj",1676259734000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/spec.alpha/0.2.194/spec.alpha-0.2.194.jar!/clojure/spec/alpha.clj",1675466804000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/core.async/1.4.627/core.async-1.4.627.jar!/clojure/core/async/impl/exec/threadpool.clj",1676259738000,"jar:file:/C:/Users/carre/.m2/repository/io/aviso/pretty/0.1.37/pretty-0.1.37.jar!/io/aviso/ansi.clj",1676259734000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/core.clj",1675466804000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/clojurescript/1.10.914/clojurescript-1.10.914.jar!/cljs/analyzer/passes/and_or.cljc",1676259734000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/core.async/1.4.627/core.async-1.4.627.jar!/clojure/core/async/impl/mutex.clj",1676259738000,"jar:file:/C:/Users/carre/.m2/repository/io/aviso/pretty/0.1.37/pretty-0.1.37.jar!/io/aviso/exception.clj",1676259734000,"jar:file:/C:/Users/carre/.m2/repository/expound/expound/0.8.9/expound-0.8.9.jar!/expound/util.cljc",1676259733000,"jar:file:/C:/Users/carre/.m2/repository/com/fulcrologic/fulcro/3.5.9/fulcro-3.5.9.jar!/com/fulcrologic/fulcro/algorithms/merge.cljc",1676259735000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/clojurescript/1.10.914/clojurescript-1.10.914.jar!/cljs/analyzer/impl.cljc",1676259734000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/clojurescript/1.10.914/clojurescript-1.10.914.jar!/cljs/pprint.cljc",1676259734000,"jar:file:/C:/Users/carre/.m2/repository/expound/expound/0.8.9/expound-0.8.9.jar!/expound/printer.cljc",1676259733000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/core.async/1.4.627/core.async-1.4.627.jar!/cljs/core/async.clj",1676259738000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/pprint.clj",1675466804000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/reader_types.clj",1675288215000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/core.async/1.4.627/core.async-1.4.627.jar!/clojure/core/async/impl/dispatch.clj",1676259738000,"jar:file:/C:/Users/carre/.m2/repository/com/taoensso/timbre/5.1.1/timbre-5.1.1.jar!/taoensso/timbre.cljc",1676259736000,"jar:file:/C:/Users/carre/.m2/repository/expound/expound/0.8.9/expound-0.8.9.jar!/expound/alpha.cljc",1676259733000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/core.async/1.4.627/core.async-1.4.627.jar!/clojure/core/async/impl/channels.clj",1676259738000,"jar:file:/C:/Users/carre/.m2/repository/expound/expound/0.8.9/expound-0.8.9.jar!/expound/ansi.cljc",1676259733000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/core.async/1.4.627/core.async-1.4.627.jar!/clojure/core/async/impl/concurrent.clj",1676259738000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/set.clj",1675466804000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/walk.clj",1675466804000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/string.clj",1675466804000,"jar:file:/C:/Users/carre/.m2/repository/com/fulcrologic/guardrails/1.1.4/guardrails-1.1.4.jar!/com/fulcrologic/guardrails/impl/pro.cljc",1676259733000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/clojurescript/1.10.914/clojurescript-1.10.914.jar!/cljs/tagged_literals.cljc",1676259734000,"jar:file:/C:/Users/carre/.m2/repository/com/fulcrologic/fulcro/3.5.9/fulcro-3.5.9.jar!/com/fulcrologic/fulcro/dom/events.cljc",1676259735000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/tools.analyzer/1.1.0/tools.analyzer-1.1.0.jar!/clojure/tools/analyzer.clj",1675288214000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/clojurescript/1.10.914/clojurescript-1.10.914.jar!/cljs/compiler.cljc",1676259734000,"jar:file:/C:/Users/carre/.m2/repository/com/fulcrologic/fulcro/3.5.9/fulcro-3.5.9.jar!/com/fulcrologic/fulcro/algorithms/data_targeting.cljc",1676259735000,"jar:file:/C:/Users/carre/.m2/repository/com/fulcrologic/guardrails/1.1.4/guardrails-1.1.4.jar!/com/fulcrologic/guardrails/registry.cljc",1676259733000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/reflect.clj",1675466804000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/core.async/1.4.627/core.async-1.4.627.jar!/clojure/core/async.clj",1676259738000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/clojurescript/1.10.914/clojurescript-1.10.914.jar!/cljs/spec/gen/alpha.cljc",1676259734000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/clojurescript/1.10.914/clojurescript-1.10.914.jar!/cljs/externs.clj",1676259734000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/edn.clj",1675288215000,"jar:file:/C:/Users/carre/.m2/repository/com/cognitect/transit-clj/1.0.324/transit-clj-1.0.324.jar!/cognitect/transit.clj",1676259736000,"jar:file:/C:/Users/carre/.m2/repository/com/fulcrologic/guardrails/1.1.4/guardrails-1.1.4.jar!/com/fulcrologic/guardrails/config.cljc",1676259733000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/tools.analyzer.jvm/1.2.0/tools.analyzer.jvm-1.2.0.jar!/clojure/tools/analyzer/jvm.clj",1676259734000,"jar:file:/C:/Users/carre/.m2/repository/com/taoensso/encore/3.10.1/encore-3.10.1.jar!/taoensso/encore.cljc",1676259733000,"jar:file:/C:/Users/carre/.m2/repository/com/fulcrologic/fulcro/3.5.9/fulcro-3.5.9.jar!/com/fulcrologic/fulcro/algorithms/normalize.cljc",1676259735000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/core.async/1.4.627/core.async-1.4.627.jar!/clojure/core/async/impl/protocols.clj",1676259738000,"jar:file:/C:/Users/carre/.m2/repository/com/fulcrologic/fulcro/3.5.9/fulcro-3.5.9.jar!/com/fulcrologic/fulcro/algorithms/tempid.cljc",1676259735000,"jar:file:/C:/Users/carre/.m2/repository/com/fulcrologic/fulcro/3.5.9/fulcro-3.5.9.jar!/com/fulcrologic/fulcro/inspect/inspect_client.cljc",1676259735000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","The transaction processing in Fulcro is (intended to be) pluggable. This namespace is the\n  implementation for the default transaction processing . At the present time there is no documentation on how\n  such an override would be written, nor is it necessarily recommended since many of the desirable and built-in\n  behaviors of Fulcro are codified here. ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",1,"^9",5,"^:",1,"^;",52],"^<",["^ ","^=","^>","^?","^@","^A","^B","^C","^D"],"^E",["^ ","^F","^G","^H","^G","^I","^J"],"^K",["^L",[]],"^M","^N","^O",["^ "],"^R",null,"^S",["^ ","^T","^U","^V","^W","^X","^X","^?","^@","^J","^J","^Y","^Z","^[","^10","^11","^X","^12","^12","^13","^13","^G","^G","^14","^14","^15","^15","^16","^G","^W","^W","^17","^17","~$m","^18","^19","^19","^1:","^19","^1;","^1<","^18","^18","~$s","^@","^U","^U","^10","^10","^Z","^Z","^1=","^1>","^1<","^1<","^@","^@","^1?","^12","^1@","^17","^1>","^1>"],"^1A",["^L",["^1B"]],"~:shadow/js-access-global",["^L",["Error"]],"^1C",["^ ","^1D","^19","^F","^G","^H","^G","^I","^J","^1E","^J","~$|","^J"],"~:defs",["^ ","~$net-send!",["^ ","~:protocol-inline",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",142,"^9",7,"^:",142,"^;",16,"~:arglists",["^1H",["~$quote",["^1H",[["~$app","~$send-node","~$remote-name"]]]]],"^6","Process the send against the user-defined remote. Catches exceptions and calls error handler with status code 500\n  if the remote itself throws exceptions."],"^M","^27","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",16,"~:method-params",["^1H",[["^;O","^;P","^;Q"]]],"~:protocol-impl",null,"~:arglists-meta",["^1H",[null,null]],"^9",1,"~:variadic?",false,"^8",142,"~:ret-tag",["^L",[null,"~$any"]],"^:",142,"~:max-fixed-arity",3,"~:fn-var",true,"^;M",["^1H",["^;N",["^1H",[["^;O","^;P","^;Q"]]]]],"^6","Process the send against the user-defined remote. Catches exceptions and calls error handler with status code 500\n  if the remote itself throws exceptions."],"~$distribute-element-results!",["^ ","^;L",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",577,"^9",7,"^:",577,"^;",34,"^;M",["^1H",["^;N",["^1H",[["^;O","~$tx-node",["^ ","~:keys",["~:com.fulcrologic.fulcro.algorithms.tx-processing/results","~:com.fulcrologic.fulcro.algorithms.tx-processing/complete?"],"^1J","~$tx-element"]]]]]],"^6","Distribute results and mark the remotes for those elements as complete."],"^M","^2D","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",34,"^;R",["^1H",[["^;O","^;[","~$p__59989"]]],"^;S",null,"^;T",["^1H",[null,null]],"^9",1,"^;U",false,"^8",577,"^;V",["^L",[null,"^;W"]],"^:",577,"^;X",3,"^;Y",true,"^;M",["^1H",["^;N",["^1H",[["^;O","^;[",["^ ","^<0",["^<1","^<2"],"^1J","^<3"]]]]]],"^6","Distribute results and mark the remotes for those elements as complete."],"~$update-progress!",["^ ","^;L",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",599,"^9",7,"^:",599,"^;",23,"^;M",["^1H",["^;N",["^1H",[["^;O",["^ ","^<0",["~:com.fulcrologic.fulcro.algorithms.tx-processing/elements"],"^1J","^;["]]]]]],"^6","Report all progress items to any registered progress dispatch and clear them from the tx-node.\n  Returns the updated tx-node."],"^M","^2=","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",23,"^;R",["^1H",[["^;O","~$p__59993"]]],"^;S",null,"^;T",["^1H",[null,null]],"^9",1,"^;U",false,"^8",599,"^;V",["^L",[null,"^;W"]],"^:",599,"^;X",2,"^;Y",true,"^;M",["^1H",["^;N",["^1H",[["^;O",["^ ","^<0",["^<6"],"^1J","^;["]]]]]],"^6","Report all progress items to any registered progress dispatch and clear them from the tx-node.\n  Returns the updated tx-node."],"~$remotes-active-on-node",["^ ","^;L",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",652,"^9",7,"^:",652,"^;",29,"^;M",["^1H",["^;N",["^1H",[[["^ ","~:com.fulcrologic.fulcro.algorithms.tx-processing/keys",["~$elements"],"^1J","^;["],"~$remotes"]]]]],"^6","Given a tx node and the set of legal remotes: returns a set of remotes that are active on that node."],"^M","^2>","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",29,"^;R",["^1H",[["~$p__60028","^<;"]]],"^;S",null,"^;T",["^1H",[null,null]],"^9",1,"^;U",false,"^8",652,"^;V",["^L",[null,"^;W"]],"^:",652,"^;X",2,"^;Y",true,"^;M",["^1H",["^;N",["^1H",[[["^ ","^<9",["^<:"],"^1J","^;["],"^<;"]]]]],"^6","Given a tx node and the set of legal remotes: returns a set of remotes that are active on that node."],"~$app->remote-names",["^ ","^;L",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",32,"^9",7,"^:",32,"^;",24,"^;M",["^1H",["^;N",["^1H",[["^;O"]]]]],"^6","Returns a set of the names of the remotes from an app"],"^M","^2C","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",24,"^;R",["^1H",[["^;O"]]],"^;S",null,"^;T",["^1H",[null,null]],"^9",1,"^;U",false,"^8",32,"^;V",["^L",["~$clj","^;W","~$cljs.core/ISet","~$cljs.core/MetaFn","~$clj-nil"]],"^:",32,"^;X",1,"^;Y",true,"^;M",["^1H",["^;N",["^1H",[["^;O"]]]]],"^6","Returns a set of the names of the remotes from an app"],"~$queue-next-send!",["^ ","^;L",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",525,"^9",7,"^:",525,"^;",23,"^;M",["^1H",["^;N",["^1H",[["^;O",["^ ","^<0",["^<6"],"^1J","^;["]]]]]],"^6","Assumes tx-node is to be processed pessimistically. Queues the next send if the node is currently idle\n  on the network and there are any sends left to do. Adds to the send queue, and returns the updated\n  tx-node."],"^M","^2?","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",23,"^;R",["^1H",[["^;O","~$p__59966"]]],"^;S",null,"^;T",["^1H",[null,null]],"^9",1,"^;U",false,"^8",525,"^;V",["^L",[null,"^;W"]],"^:",525,"^;X",2,"^;Y",true,"^;M",["^1H",["^;N",["^1H",[["^;O",["^ ","^<0",["^<6"],"^1J","^;["]]]]]],"^6","Assumes tx-node is to be processed pessimistically. Queues the next send if the node is currently idle\n  on the network and there are any sends left to do. Adds to the send queue, and returns the updated\n  tx-node."],"~$abort-remote!",["^ ","^;L",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",842,"^9",7,"^:",842,"^;",20,"^;M",["^1H",["^;N",["^1H",[["~$app-ish","~$remote"]]]]],"^6","Cause everything in the active network queue for remote to be cancelled. Any result that (finally) appears for aborted\n  items will be ignored. This will cause a hard error to be \"received\" as the result for everything\n  that is in the send queue of the given remote.\n\n  This function is mainly meant for use in development mode when dealing with a buggy remote implementation."],"^M","^2Q","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",20,"^;R",["^1H",[["^<E","^<F"]]],"^;S",null,"^;T",["^1H",[null,null]],"^9",1,"^;U",false,"^8",842,"^;V","^<A","^:",842,"^;X",2,"^;Y",true,"^;M",["^1H",["^;N",["^1H",[["^<E","^<F"]]]]],"^6","Cause everything in the active network queue for remote to be cancelled. Any result that (finally) appears for aborted\n  items will be ignored. This will cause a hard error to be \"received\" as the result for everything\n  that is in the send queue of the given remote.\n\n  This function is mainly meant for use in development mode when dealing with a buggy remote implementation."],"~$active-remotes",["^ ","^;L",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",668,"^9",7,"^:",668,"^;",21,"^;M",["^1H",["^;N",["^1H",[["~$queue","^<;"]]]]],"^6","Calculate which remotes still have network activity to do on the given active queue."],"^M","^4U","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",21,"^;R",["^1H",[["^<H","^<;"]]],"^;S",null,"^;T",["^1H",[null,null]],"^9",1,"^;U",false,"^8",668,"^;V",["^L",[null,"^;W"]],"^:",668,"^;X",2,"^;Y",true,"^;M",["^1H",["^;N",["^1H",[["^<H","^<;"]]]]],"^6","Calculate which remotes still have network activity to do on the given active queue."],"~$queue-sends!",["^ ","^;L",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",540,"^9",7,"^:",540,"^;",19,"^;M",["^1H",["^;N",["^1H",[["^;O",["^ ","^<0",["~:com.fulcrologic.fulcro.algorithms.tx-processing/options","^<6"],"^1J","^;["]]]]]],"^6","Finds any item(s) on the given node that are ready to be placed on the network queues and adds them. Non-optimistic\n  multi-element nodes will only queue one remote operation at a time."],"^M","^2L","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",19,"^;R",["^1H",[["^;O","~$p__59972"]]],"^;S",null,"^;T",["^1H",[null,null]],"^9",1,"^;U",false,"^8",540,"^;V",["^L",[null,"^;W"]],"^:",540,"^;X",2,"^;Y",true,"^;M",["^1H",["^;N",["^1H",[["^;O",["^ ","^<0",["^<J","^<6"],"^1J","^;["]]]]]],"^6","Finds any item(s) on the given node that are ready to be placed on the network queues and adds them. Non-optimistic\n  multi-element nodes will only queue one remote operation at a time."],"~$process-queue!",["^ ","^;L",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",679,"^9",7,"^:",679,"^;",21,"^;M",["^1H",["^;N",["^1H",[[["^ ","~:com.fulcrologic.fulcro.application/keys",["~$state-atom","~$runtime-atom"],"^1J","^;O"]]]]]],"^6","Run through the active queue and do a processing step."],"^M","^4L","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",21,"^;R",["^1H",[["~$p__60032"]]],"^;S",null,"^;T",["^1H",[null,null]],"^9",1,"^;U",false,"^8",679,"^;V","^<A","^:",679,"^;X",1,"^;Y",true,"^;M",["^1H",["^;N",["^1H",[[["^ ","^<M",["^<N","^<O"],"^1J","^;O"]]]]]],"^6","Run through the active queue and do a processing step."],"~$dispatch-elements",["^ ","^;L",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",238,"^9",7,"^:",238,"^;",24,"^;M",["^1H",["^;N",["^1H",[["^;[","~$env","~$dispatch-fn"]]]]],"^6","Run through the elements on the given tx-node and do the side-effect-free dispatch. This generates the dispatch map\n  of things to do on that node."],"^M","^28","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",24,"^;R",["^1H",[["^;[","^<R","^<S"]]],"^;S",null,"^;T",["^1H",[null,null]],"^9",1,"^;U",false,"^8",238,"^;V",["^L",["^<>","^;W"]],"^:",238,"^;X",3,"^;Y",true,"^;M",["^1H",["^;N",["^1H",[["^;[","^<R","^<S"]]]]],"^6","Run through the elements on the given tx-node and do the side-effect-free dispatch. This generates the dispatch map\n  of things to do on that node."],"~$abort-elements!",["^ ","^;L",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",798,"^9",8,"^:",798,"^;",23,"~:private",true,"^;M",["^1H",["^;N",["^1H",[[["^ ","^<0",["~$abort!"],"^1J","^<F"],"~$send-queue","~$abort-id"]]]]],"^6","Abort any elements in the given send-queue that have the given abort id.\n\n  Aborting will cause the network to abort (which will report a result), or if the item is not yet active a\n  virtual result will still be sent for that node.\n\n  Returns a new send-queue that no longer contains the aborted nodes."],"^<U",true,"^M","^33","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",23,"^;R",["^1H",[["~$p__60048","^<W","^<X"]]],"^;S",null,"^;T",["^1H",[null,null]],"^9",1,"^;U",false,"^8",798,"^;V",["^L",[null,"^;W"]],"^:",798,"^;X",3,"^;Y",true,"^;M",["^1H",["^;N",["^1H",[[["^ ","^<0",["^<V"],"^1J","^<F"],"^<W","^<X"]]]]],"^6","Abort any elements in the given send-queue that have the given abort id.\n\n  Aborting will cause the network to abort (which will report a result), or if the item is not yet active a\n  virtual result will still be sent for that node.\n\n  Returns a new send-queue that no longer contains the aborted nodes."],"~$remove-send!",["^ ","^;L",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",395,"^9",7,"^:",395,"^;",19,"^;M",["^1H",["^;N",["^1H",[[["^ ","^<M",["^<O"],"^1J","^;O"],"^<F","~$txn-id","~$ele-idx"]]]]],"^6","Removes the send node (if present) from the send queue on the given remote."],"^M","^2P","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",19,"^;R",["^1H",[["~$p__59855","^<F","^<[","^=0"]]],"^;S",null,"^;T",["^1H",[null,null]],"^9",1,"^;U",false,"^8",395,"^;V",["^L",[null,"^;W"]],"^:",395,"^;X",4,"^;Y",true,"^;M",["^1H",["^;N",["^1H",[[["^ ","^<M",["^<O"],"^1J","^;O"],"^<F","^<[","^=0"]]]]],"^6","Removes the send node (if present) from the send queue on the given remote."],"~$queue-element-sends!",["^ ","^;L",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",485,"^9",7,"^:",485,"^;",27,"^;M",["^1H",["^;N",["^1H",[["^;O","^;[",["^ ","^<0",["~:com.fulcrologic.fulcro.algorithms.tx-processing/idx","~:com.fulcrologic.fulcro.algorithms.tx-processing/dispatch","~:com.fulcrologic.fulcro.algorithms.tx-processing/started?"]]]]]]],"^6","Queue all (unqueued) remote actions for the given element.  Returns the (possibly updated) node."],"^M","^4C","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",27,"^;R",["^1H",[["^;O","^;[","~$p__59950"]]],"^;S",null,"^;T",["^1H",[null,null]],"^9",1,"^;U",false,"^8",485,"^;V",["^L",[null,"^;W"]],"^:",485,"^;X",3,"^;Y",true,"^;M",["^1H",["^;N",["^1H",[["^;O","^;[",["^ ","^<0",["^=3","^=4","^=5"]]]]]]],"^6","Queue all (unqueued) remote actions for the given element.  Returns the (possibly updated) node."],"~$top-keys",["^ ","^;L",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",90,"^9",7,"^:",90,"^;",15,"^;M",["^1H",["^;N",["^1H",[[["^ ","^<0",["~$type","~$key","~$children"],"^1J","~$ast"]]]]]]],"^M","^24","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",15,"^;R",["^1H",[["~$p__59463"]]],"^;S",null,"^;T",["^1H",[null,null]],"^9",1,"^;U",false,"^8",90,"^;V",["^L",["^<>","^;W","^<?"]],"^:",90,"^;X",1,"^;Y",true,"^;M",["^1H",["^;N",["^1H",[[["^ ","^<0",["^=8","^=9","^=:"],"^1J","^=;"]]]]]]],"~$schedule-activation!",["^ ","^;L",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",281,"^9",7,"^:",281,"^;",27,"^;M",["^1H",["^;N",["^1H",[["^;O","~$tm"],["^;O"]]]]],"^6","Schedule activation of submitted transactions.  The default implementation copies all submitted transactions onto\n   the active queue and immediately does an active queue processing step.  If `tm` is not supplied (in ms) it defaults to 10ms.","~:top-fn",["^ ","^;U",false,"~:fixed-arity",2,"^;X",2,"^;R",[["^;O","^=>"],["^;O"]],"^;M",["^1H",[["^;O","^=>"],["^;O"]]],"^;T",["^1H",[null,null]]]],"^M","^37","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",27,"^=?",["^ ","^;U",false,"^=@",2,"^;X",2,"^;R",[["^;O","^=>"],["^;O"]],"^;M",["^1H",[["^;O","^=>"],["^;O"]]],"^;T",["^1H",[null,null]]],"^;R",[["^;O","^=>"],["^;O"]],"^;S",null,"^=@",2,"^;T",["^1H",[null,null]],"^9",1,"^;U",false,"~:methods",[["^ ","^=@",2,"^;U",false,"~:tag",["^L",["~$js","^<A"]]],["^ ","^=@",1,"^;U",false,"^=B",["^L",["^=C","^<A"]]]],"^8",281,"^:",281,"^;X",2,"^;Y",true,"^;M",["^1H",[["^;O","^=>"],["^;O"]]],"^6","Schedule activation of submitted transactions.  The default implementation copies all submitted transactions onto\n   the active queue and immediately does an active queue processing step.  If `tm` is not supplied (in ms) it defaults to 10ms."],"~$record-result!",["^ ","^;L",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",405,"^9",7,"^:",405,"^;",21,"^;M",["^1H",["^;N",["^1H",[[["^ ","^<M",["^<O"],"^1J","^;O"],"^<[","^=0","^<F","~$result","~$result-key"],["^;O","^<[","^=0","^<F","^=E"]]]]],"^6","Record a network result on the given txn/element.\n   If result-key is given it is used, otherwise defaults to ::results. Also removes the network send from the send\n   queue so that remaining items can proceed, and schedules send processing.","^=?",["^ ","^;U",false,"^=@",6,"^;X",6,"^;R",[[["^ ","^<M",["^<O"],"^1J","^;O"],"^<[","^=0","^<F","^=E","^=F"],["^;O","^<[","^=0","^<F","^=E"]],"^;M",["^1H",[[["^ ","^<M",["^<O"],"^1J","^;O"],"^<[","^=0","^<F","^=E","^=F"],["^;O","^<[","^=0","^<F","^=E"]]],"^;T",["^1H",[null,null]]]],"^M","^3>","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",21,"^=?",["^ ","^;U",false,"^=@",6,"^;X",6,"^;R",[[["^ ","^<M",["^<O"],"^1J","^;O"],"^<[","^=0","^<F","^=E","^=F"],["^;O","^<[","^=0","^<F","^=E"]],"^;M",["^1H",[[["^ ","^<M",["^<O"],"^1J","^;O"],"^<[","^=0","^<F","^=E","^=F"],["^;O","^<[","^=0","^<F","^=E"]]],"^;T",["^1H",[null,null]]],"^;R",[[["^ ","^<M",["^<O"],"^1J","^;O"],"^<[","^=0","^<F","^=E","^=F"],["^;O","^<[","^=0","^<F","^=E"]],"^;S",null,"^=@",6,"^;T",["^1H",[null,null]],"^9",1,"^;U",false,"^=A",[["^ ","^=@",6,"^;U",false,"^=B",["^L",[null,"^;W","^<A"]]],["^ ","^=@",5,"^;U",false,"^=B",["^L",[null,"^;W","^<A"]]]],"^8",405,"^:",405,"^;X",6,"^;Y",true,"^;M",["^1H",[[["^ ","^<M",["^<O"],"^1J","^;O"],"^<[","^=0","^<F","^=E","^=F"],["^;O","^<[","^=0","^<F","^=E"]]],"^6","Record a network result on the given txn/element.\n   If result-key is given it is used, otherwise defaults to ::results. Also removes the network send from the send\n   queue so that remaining items can proceed, and schedules send processing."],"~$process-tx-node!",["^ ","^;L",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",619,"^9",7,"^:",619,"^;",23,"^;M",["^1H",["^;N",["^1H",[["^;O",["^ ","^<0",["^<J"],"^1J","^;["]]]]]]],"^M","^2I","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",23,"^;R",["^1H",[["^;O","~$p__60023"]]],"^;S",null,"^;T",["^1H",[null,null]],"^9",1,"^;U",false,"^8",619,"^;V",["^L",["^<>","^;W","^<A"]],"^:",619,"^;X",2,"^;Y",true,"^;M",["^1H",["^;N",["^1H",[["^;O",["^ ","^<0",["^<J"],"^1J","^;["]]]]]]],"~$add-send!",["^ ","^;L",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",456,"^9",7,"^:",456,"^;",16,"^;M",["^1H",["^;N",["^1H",[[["^ ","^<M",["^<O"],"^1J","^;O"],["^ ","^<9",["~$id","~$options"],"^1J","^;["],"^=0","^<F"]]]]],"^6","Generate a new send node and add it to the appropriate send queue. Returns the new send node."],"^M","^2E","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",16,"^;R",["^1H",[["~$p__59945","~$p__59946","^=0","^<F"]]],"^;S",null,"^;T",["^1H",[null,null]],"^9",1,"^;U",false,"^8",456,"^;V",["^L",["~$cljs.core/IMap","^<A"]],"^:",456,"^;X",4,"^;Y",true,"^;M",["^1H",["^;N",["^1H",[[["^ ","^<M",["^<O"],"^1J","^;O"],["^ ","^<9",["^=J","^=K"],"^1J","^;["],"^=0","^<F"]]]]],"^6","Generate a new send node and add it to the appropriate send queue. Returns the new send node."],"~$every-ast?",["^ ","^;L",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",49,"^9",7,"^:",49,"^;",17,"^;M",["^1H",["^;N",["^1H",[["~$ast-node-or-tree","~$test"]]]]],"^6","Check if the given `test` predicate is true for an AST node or for all the immediate children of an AST tree."],"^M","^3N","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",17,"^;R",["^1H",[["^=P","^=Q"]]],"^;S",null,"^;T",["^1H",[null,null]],"^9",1,"^;U",false,"^8",49,"^;V",["^L",["~$boolean","^;W"]],"^:",49,"^;X",2,"^;Y",true,"^;M",["^1H",["^;N",["^1H",[["^=P","^=Q"]]]]],"^6","Check if the given `test` predicate is true for an AST node or for all the immediate children of an AST tree."],"~$query-ast?",["^ ","^;L",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",63,"^9",7,"^:",63,"^;",17,"^;M",["^1H",["^;N",["^1H",[["^=P"]]]]],"^6","Returns true if the given AST node or tree represents a mutation or sequence of mutations."],"^M","^3O","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",17,"^;R",["^1H",[["^=P"]]],"^;S",null,"^;T",["^1H",[null,null]],"^9",1,"^;U",false,"^8",63,"^;V",["^L",["^=R","^;W"]],"^:",63,"^;X",1,"^;Y",true,"^;M",["^1H",["^;N",["^1H",[["^=P"]]]]],"^6","Returns true if the given AST node or tree represents a mutation or sequence of mutations."],"~$distribute-results!",["^ ","^;L",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",589,"^9",7,"^:",589,"^;",26,"^;M",["^1H",["^;N",["^1H",[["^;O",["^ ","^<0",["^<6"],"^1J","^;["]]]]]],"^6","Walk all elements of the tx-node and call result dispatch handlers for any results that have\n  not been distributed."],"^M","^3K","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",26,"^;R",["^1H",[["^;O","~$p__59991"]]],"^;S",null,"^;T",["^1H",[null,null]],"^9",1,"^;U",false,"^8",589,"^;V",["^L",["^<>","^;W"]],"^:",589,"^;X",2,"^;Y",true,"^;M",["^1H",["^;N",["^1H",[["^;O",["^ ","^<0",["^<6"],"^1J","^;["]]]]]],"^6","Walk all elements of the tx-node and call result dispatch handlers for any results that have\n  not been distributed."],"~$fully-complete?",["^ ","^;L",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",385,"^9",7,"^:",385,"^;",22,"^;M",["^1H",["^;N",["^1H",[["^;O",["^ ","^<0",["^<6"],"^1J","^;["]]]]]]],"^M","^3G","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",22,"^;R",["^1H",[["^;O","~$p__59846"]]],"^;S",null,"^;T",["^1H",[null,null]],"^9",1,"^;U",false,"^8",385,"^;V","^=R","^:",385,"^;X",2,"^;Y",true,"^;M",["^1H",["^;N",["^1H",[["^;O",["^ ","^<0",["^<6"],"^1J","^;["]]]]]]],"~$schedule-queue-processing!",["^ ","^;L",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",291,"^9",7,"^:",291,"^;",33,"^;M",["^1H",["^;N",["^1H",[["^;O","^=>"],["^;O"]]]]],"^6","Schedule a processing of the active queue, which will advance the active transactions by a step.\n   If `tm` is not supplied (in ms) it defaults to 10ms.","^=?",["^ ","^;U",false,"^=@",2,"^;X",2,"^;R",[["^;O","^=>"],["^;O"]],"^;M",["^1H",[["^;O","^=>"],["^;O"]]],"^;T",["^1H",[null,null]]]],"^M","^3V","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",33,"^=?",["^ ","^;U",false,"^=@",2,"^;X",2,"^;R",[["^;O","^=>"],["^;O"]],"^;M",["^1H",[["^;O","^=>"],["^;O"]]],"^;T",["^1H",[null,null]]],"^;R",[["^;O","^=>"],["^;O"]],"^;S",null,"^=@",2,"^;T",["^1H",[null,null]],"^9",1,"^;U",false,"^=A",[["^ ","^=@",2,"^;U",false,"^=B",["^L",["^=C","^<A"]]],["^ ","^=@",1,"^;U",false,"^=B",["^L",["^=C","^<A"]]]],"^8",291,"^:",291,"^;X",2,"^;Y",true,"^;M",["^1H",[["^;O","^=>"],["^;O"]]],"^6","Schedule a processing of the active queue, which will advance the active transactions by a step.\n   If `tm` is not supplied (in ms) it defaults to 10ms."],"~$app->remotes",["^ ","^;L",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",26,"^9",7,"^:",26,"^;",19,"^;M",["^1H",["^;N",["^1H",[["^;O"]]]]],"^6","Returns the remotes map from an app"],"^M","^3R","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",19,"^;R",["^1H",[["^;O"]]],"^;S",null,"^;T",["^1H",[null,null]],"^9",1,"^;U",false,"^8",26,"^;V","^;W","^:",26,"^;X",1,"^;Y",true,"^;M",["^1H",["^;N",["^1H",[["^;O"]]]]],"^6","Returns the remotes map from an app"],"~$run-actions!",["^ ","^;L",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",353,"^9",7,"^:",353,"^;",19,"^;M",["^1H",["^;N",["^1H",[["^;O",["^ ","^<9",["^=J","^<:"],"^1J","~$node"]]]]]]],"^M","^3P","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",19,"^;R",["^1H",[["^;O","~$p__59827"]]],"^;S",null,"^;T",["^1H",[null,null]],"^9",1,"^;U",false,"^8",353,"^;V",["^L",["^<>","^;W"]],"^:",353,"^;X",2,"^;Y",true,"^;M",["^1H",["^;N",["^1H",[["^;O",["^ ","^<9",["^=J","^<:"],"^1J","^=["]]]]]]],"~$process-send-queues!",["^ ","^;L",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",167,"^9",7,"^:",167,"^;",27,"^;M",["^1H",["^;N",["^1H",[[["^ ","^<M",["^<O"],"^1J","^;O"]]]]]],"^6","Process the send queues against the remotes. Updates the send queues on the app and returns the updated send queues."],"^M","^3;","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",27,"^;R",["^1H",[["~$p__59695"]]],"^;S",null,"^;T",["^1H",[null,null]],"^9",1,"^;U",false,"^8",167,"^;V",["^L",[null,"^;W"]],"^:",167,"^;X",1,"^;Y",true,"^;M",["^1H",["^;N",["^1H",[[["^ ","^<M",["^<O"],"^1J","^;O"]]]]]],"^6","Process the send queues against the remotes. Updates the send queues on the app and returns the updated send queues."],"~$element-with-work",["^ ","^;L",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",513,"^9",7,"^:",513,"^;",24,"^;M",["^1H",["^;N",["^1H",[["~$remote-names",["^ ","^<0",["^=4","^=5"],"^1J","~$element"]]]]]],"^6","Returns a txnode element iff it has remaining (remote) work that has not been queued. Returns nil if there\n   is no such element.\n\n  remote-names is the set of legal remote names."],"^M","^3X","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",24,"^;R",["^1H",[["^>4","~$p__59958"]]],"^;S",null,"^;T",["^1H",[null,null]],"^9",1,"^;U",false,"^8",513,"^;V",["^L",[null,"^;W","^<A"]],"^:",513,"^;X",2,"^;Y",true,"^;M",["^1H",["^;N",["^1H",[["^>4",["^ ","^<0",["^=4","^=5"],"^1J","^>5"]]]]]],"^6","Returns a txnode element iff it has remaining (remote) work that has not been queued. Returns nil if there\n   is no such element.\n\n  remote-names is the set of legal remote names."],"~$extract-parallel",["^ ","^;L",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",38,"^9",7,"^:",38,"^;",23,"^;M",["^1H",["^;N",["^1H",[["~$sends"]]]]],"^6","Splits the given send queue into two send queues:\n  [parallel-items sequential-items]."],"^M","^48","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",23,"^;R",["^1H",[["^>8"]]],"^;S",null,"^;T",["^1H",[null,null]],"^9",1,"^;U",false,"^8",38,"^;V","~$cljs.core/IVector","^:",38,"^;X",1,"^;Y",true,"^;M",["^1H",["^;N",["^1H",[["^>8"]]]]],"^6","Splits the given send queue into two send queues:\n  [parallel-items sequential-items]."],"~$application-rendered!",["^ ","^;L",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",257,"^9",7,"^:",257,"^;",28,"^;M",["^1H",["^;N",["^1H",[[["^ ","^<0",["~:com.fulcrologic.fulcro.application/runtime-atom"],"^1J","^;O"],"^=K"]]]]],"^6","Should be called after the application renders to ensure that transactions blocked until the next render become\n   unblocked. Schedules an activation."],"^M","^2Z","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",28,"^;R",["^1H",[["~$p__59792","^=K"]]],"^;S",null,"^;T",["^1H",[null,null]],"^9",1,"^;U",false,"^8",257,"^;V",["^L",["^;W","^<A"]],"^:",257,"^;X",2,"^;Y",true,"^;M",["^1H",["^;N",["^1H",[[["^ ","^<0",["^>;"],"^1J","^;O"],"^=K"]]]]],"^6","Should be called after the application renders to ensure that transactions blocked until the next render become\n   unblocked. Schedules an activation."],"~$build-env",["^ ","^;L",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",225,"^9",7,"^:",225,"^;",16,"^;M",["^1H",["^;N",["^1H",[["^;O",["^ ","^<9",["^=K"],"^1J","^;["],"~$addl"],["^;O",["^ ","^<0",["^<J"],"^1J","^;["]]]]]],"^=?",["^ ","^;U",false,"^=@",3,"^;X",3,"^;R",[["^;O",["^ ","^<9",["^=K"],"^1J","^;["],"^>>"],["^;O",["^ ","^<0",["^<J"],"^1J","^;["]]],"^;M",["^1H",[["^;O",["^ ","^<9",["^=K"],"^1J","^;["],"^>>"],["^;O",["^ ","^<0",["^<J"],"^1J","^;["]]]],"^;T",["^1H",[null,null]]]],"^M","^4D","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",16,"^=?",["^ ","^;U",false,"^=@",3,"^;X",3,"^;R",[["^;O",["^ ","^<9",["^=K"],"^1J","^;["],"^>>"],["^;O",["^ ","^<0",["^<J"],"^1J","^;["]]],"^;M",["^1H",[["^;O",["^ ","^<9",["^=K"],"^1J","^;["],"^>>"],["^;O",["^ ","^<0",["^<J"],"^1J","^;["]]]],"^;T",["^1H",[null,null]]],"^;R",[["^;O",["^ ","^<9",["^=K"],"^1J","^;["],"^>>"],["^;O",["^ ","^<0",["^<J"],"^1J","^;["]]],"^;S",null,"^=@",3,"^;T",["^1H",[null,null]],"^9",1,"^;U",false,"^=A",[["^ ","^=@",3,"^;U",false,"^=B",["^L",["^<>","^;W","^<A"]]],["^ ","^=@",2,"^;U",false,"^=B",["^L",["^<>","^;W","^<A"]]]],"^8",225,"^:",225,"^;X",3,"^;Y",true,"^;M",["^1H",[["^;O",["^ ","^<9",["^=K"],"^1J","^;["],"^>>"],["^;O",["^ ","^<0",["^<J"],"^1J","^;["]]]]],"~$schedule-sends!",["^ ","^;L",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",301,"^9",7,"^:",301,"^;",22,"^;M",["^1H",["^;N",["^1H",[["^;O","^=>"],["^;O"]]]]],"^6","Schedule actual network activity. If `tm` is not supplied (in ms) it defaults to 0ms.","^=?",["^ ","^;U",false,"^=@",2,"^;X",2,"^;R",[["^;O","^=>"],["^;O"]],"^;M",["^1H",[["^;O","^=>"],["^;O"]]],"^;T",["^1H",[null,null]]]],"^M","^2Y","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",22,"^=?",["^ ","^;U",false,"^=@",2,"^;X",2,"^;R",[["^;O","^=>"],["^;O"]],"^;M",["^1H",[["^;O","^=>"],["^;O"]]],"^;T",["^1H",[null,null]]],"^;R",[["^;O","^=>"],["^;O"]],"^;S",null,"^=@",2,"^;T",["^1H",[null,null]],"^9",1,"^;U",false,"^=A",[["^ ","^=@",2,"^;U",false,"^=B",["^L",["^=C","^<A"]]],["^ ","^=@",1,"^;U",false,"^=B",["^L",["^=C","^<A"]]]],"^8",301,"^:",301,"^;X",2,"^;Y",true,"^;M",["^1H",[["^;O","^=>"],["^;O"]]],"^6","Schedule actual network activity. If `tm` is not supplied (in ms) it defaults to 0ms."],"~$sort-queue-writes-before-reads",["^ ","^;L",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",69,"^9",7,"^:",69,"^;",37,"^;M",["^1H",["^;N",["^1H",[["^<W"]]]]],"^6","Sort function on a send queue. Leaves any active nodes in front, and sorts the remainder of the queue so that writes\n  appear before reads, without changing the relative order in blocks of reads/writes."],"^M","^2X","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",37,"^;R",["^1H",[["^<W"]]],"^;S",null,"^;T",["^1H",[null,null]],"^9",1,"^;U",false,"^8",69,"^;V",["^L",[null,"^<>","^;W"]],"^:",69,"^;X",1,"^;Y",true,"^;M",["^1H",["^;N",["^1H",[["^<W"]]]]],"^6","Sort function on a send queue. Leaves any active nodes in front, and sorts the remainder of the queue so that writes\n  appear before reads, without changing the relative order in blocks of reads/writes."],"^<V",["^ ","^;L",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",825,"^9",7,"^:",825,"^;",13,"^;M",["^1H",["^;N",["^1H",[["^;O","^<X"]]]]],"^6","Implementation of abort when using this tx processing"],"^M","^4T","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",13,"^;R",["^1H",[["^;O","^<X"]]],"^;S",null,"^;T",["^1H",[null,null]],"^9",1,"^;U",false,"^8",825,"^;V",["^L",[null,"^;W"]],"^:",825,"^;X",2,"^;Y",true,"^;M",["^1H",["^;N",["^1H",[["^;O","^<X"]]]]],"^6","Implementation of abort when using this tx processing"],"~$compute-desired-ast-node",["^ ","^;L",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",427,"^9",7,"^:",427,"^;",31,"^;M",["^1H",["^;N",["^1H",[["^;O","^<F","^;[","^<3"]]]]],"^6","Add the ::desired-ast-nodes and ::transmitted-ast-nodes for `remote` to the tx-element based on the dispatch for the `remote` of the original mutation."],"^M","^4Y","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",31,"^;R",["^1H",[["^;O","^<F","^;[","^<3"]]],"^;S",null,"^;T",["^1H",[null,null]],"^9",1,"^;U",false,"^8",427,"^;V",["^L",[null,"^<>","^;W"]],"^:",427,"^;X",4,"^;Y",true,"^;M",["^1H",["^;N",["^1H",[["^;O","^<F","^;[","^<3"]]]]],"^6","Add the ::desired-ast-nodes and ::transmitted-ast-nodes for `remote` to the tx-element based on the dispatch for the `remote` of the original mutation."],"~$advance-actions!",["^ ","^;L",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",310,"^9",7,"^:",310,"^;",23,"^;M",["^1H",["^;N",["^1H",[["^;O",["^ ","^<9",["^=J","^<:"],"^1J","^=["]]]]]],"^6","Runs any incomplete and non-blocked optimistic operations on a node."],"^M","^4>","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",23,"^;R",["^1H",[["^;O","~$p__59819"]]],"^;S",null,"^;T",["^1H",[null,null]],"^9",1,"^;U",false,"^8",310,"^;V",["^L",["^<>","^;W"]],"^:",310,"^;X",2,"^;Y",true,"^;M",["^1H",["^;N",["^1H",[["^;O",["^ ","^<9",["^=J","^<:"],"^1J","^=["]]]]]],"^6","Runs any incomplete and non-blocked optimistic operations on a node."],"~$mutation-ast?",["^ ","^;L",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",57,"^9",7,"^:",57,"^;",20,"^;M",["^1H",["^;N",["^1H",[["^=P"]]]]],"^6","Returns true if the given AST node or tree represents a mutation or sequence of mutations."],"^M","^4X","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",20,"^;R",["^1H",[["^=P"]]],"^;S",null,"^;T",["^1H",[null,null]],"^9",1,"^;U",false,"^8",57,"^;V",["^L",["^=R","^;W"]],"^:",57,"^;X",1,"^;Y",true,"^;M",["^1H",["^;N",["^1H",[["^=P"]]]]],"^6","Returns true if the given AST node or tree represents a mutation or sequence of mutations."],"~$activate-submissions!",["^ ","^;L",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",266,"^9",7,"^:",266,"^;",28,"^;M",["^1H",["^;N",["^1H",[[["^ ","^<0",["^>;"],"^1J","^;O"]]]]]],"^6","Activate all of the transactions that have been submitted since the last activation. After the items are activated\n  a single processing step will run for the active queue.\n\n  Activation can be blocked by the tx-node options for things like waiting for the next render frame."],"^M","^47","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",28,"^;R",["^1H",[["~$p__59798"]]],"^;S",null,"^;T",["^1H",[null,null]],"^9",1,"^;U",false,"^8",266,"^;V","^;W","^:",266,"^;X",1,"^;Y",true,"^;M",["^1H",["^;N",["^1H",[[["^ ","^<0",["^>;"],"^1J","^;O"]]]]]],"^6","Activate all of the transactions that have been submitted since the last activation. After the items are activated\n  a single processing step will run for the active queue.\n\n  Activation can be blocked by the tx-node options for things like waiting for the next render frame."],"~$combine-sends",["^ ","^;L",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",97,"^9",7,"^:",97,"^;",20,"^;M",["^1H",["^;N",["^1H",[["^;O","^;Q","^<W"]]]]],"^6","Takes a send queue and returns a map containing a new combined send node that can act as a single network request,\n  along with the updated send queue."],"^M","^57","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",20,"^;R",["^1H",[["^;O","^;Q","^<W"]]],"^;S",null,"^;T",["^1H",[null,null]],"^9",1,"^;U",false,"^8",97,"^;V","^=N","^:",97,"^;X",3,"^;Y",true,"^;M",["^1H",["^;N",["^1H",[["^;O","^;Q","^<W"]]]]],"^6","Takes a send queue and returns a map containing a new combined send node that can act as a single network request,\n  along with the updated send queue."],"~$default-tx!",["^ ","^;L",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",747,"^9",7,"^:",747,"^;",18,"^;M",["^1H",["^;N",["^1H",[["^;O","~$tx"],[["^ ","^<M",["^<O"],"^1J","^;O"],"^>I",["^ ","^<0",["~$synchronous?"],"^1J","^=K"]]]]]],"^6","Default (Fulcro-2 compatible) transaction submission. The options map can contain any additional options\n  that might be used by the transaction processing (or UI refresh).\n\n  Some that may be supported (depending on application settings):\n\n  - `:optimistic?` - boolean. Should the transaction be processed optimistically?\n  - `:ref` - ident. The component ident to include in the transaction env.\n  - `:component` - React element. The instance of the component that should appear in the transaction env.\n  - `:refresh` - Vector containing idents (of components) and keywords (of props). Things that have changed and should be re-rendered\n    on screen. Only necessary when the underlying rendering algorithm won't auto-detect, such as when UI is derived from the\n    state of other components or outside of the directly queried props. Interpretation depends on the renderer selected:\n    The ident-optimized render treats these as \"extras\".\n  - `:only-refresh` - Vector of idents/keywords.  If the underlying rendering configured algorithm supports it: The\n    components using these are the *only* things that will be refreshed in the UI.\n    This can be used to avoid the overhead of looking for stale data when you know exactly what\n    you want to refresh on screen as an extra optimization. Idents are *not* checked against queries.\n\n  WARNING: `:only-refresh` can cause missed refreshes because rendering is debounced. If you are using this for\n           rapid-fire updates like drag-and-drop it is recommended that on the trailing edge (e.g. drop) of your sequence you\n           force a normal refresh via `app/render!`.\n\n  If the `options` include `:ref` (which comp/transact! sets), then it will be auto-included on the `:refresh` list.\n\n  NOTE: Fulcro 2 'follow-on reads' are supported and are added to the `:refresh` entries. Your choice of rendering\n  algorithm will influence their necessity.\n\n  Returns the transaction ID of the submitted transaction.\n  ","^=?",["^ ","^;U",false,"^=@",3,"^;X",3,"^;R",[["^;O","^>I"],[["^ ","^<M",["^<O"],"^1J","^;O"],"^>I",["^ ","^<0",["^>J"],"^1J","^=K"]]],"^;M",["^1H",[["^;O","^>I"],[["^ ","^<M",["^<O"],"^1J","^;O"],"^>I",["^ ","^<0",["^>J"],"^1J","^=K"]]]],"^;T",["^1H",[null,null]]]],"^M","^4<","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",18,"^=?",["^ ","^;U",false,"^=@",3,"^;X",3,"^;R",[["^;O","^>I"],[["^ ","^<M",["^<O"],"^1J","^;O"],"^>I",["^ ","^<0",["^>J"],"^1J","^=K"]]],"^;M",["^1H",[["^;O","^>I"],[["^ ","^<M",["^<O"],"^1J","^;O"],"^>I",["^ ","^<0",["^>J"],"^1J","^=K"]]]],"^;T",["^1H",[null,null]]],"^;R",[["^;O","^>I"],[["^ ","^<M",["^<O"],"^1J","^;O"],"^>I",["^ ","^<0",["^>J"],"^1J","^=K"]]],"^;S",null,"^=@",3,"^;T",["^1H",[null,null]],"^9",1,"^;U",false,"^=A",[["^ ","^=@",2,"^;U",false,"^=B","^;W"],["^ ","^=@",3,"^;U",false,"^=B","^;W"]],"^8",747,"^:",747,"^;X",3,"^;Y",true,"^;M",["^1H",[["^;O","^>I"],[["^ ","^<M",["^<O"],"^1J","^;O"],"^>I",["^ ","^<0",["^>J"],"^1J","^=K"]]]],"^6","Default (Fulcro-2 compatible) transaction submission. The options map can contain any additional options\n  that might be used by the transaction processing (or UI refresh).\n\n  Some that may be supported (depending on application settings):\n\n  - `:optimistic?` - boolean. Should the transaction be processed optimistically?\n  - `:ref` - ident. The component ident to include in the transaction env.\n  - `:component` - React element. The instance of the component that should appear in the transaction env.\n  - `:refresh` - Vector containing idents (of components) and keywords (of props). Things that have changed and should be re-rendered\n    on screen. Only necessary when the underlying rendering algorithm won't auto-detect, such as when UI is derived from the\n    state of other components or outside of the directly queried props. Interpretation depends on the renderer selected:\n    The ident-optimized render treats these as \"extras\".\n  - `:only-refresh` - Vector of idents/keywords.  If the underlying rendering configured algorithm supports it: The\n    components using these are the *only* things that will be refreshed in the UI.\n    This can be used to avoid the overhead of looking for stale data when you know exactly what\n    you want to refresh on screen as an extra optimization. Idents are *not* checked against queries.\n\n  WARNING: `:only-refresh` can cause missed refreshes because rendering is debounced. If you are using this for\n           rapid-fire updates like drag-and-drop it is recommended that on the trailing edge (e.g. drop) of your sequence you\n           force a normal refresh via `app/render!`.\n\n  If the `options` include `:ref` (which comp/transact! sets), then it will be auto-included on the `:refresh` list.\n\n  NOTE: Fulcro 2 'follow-on reads' are supported and are added to the `:refresh` entries. Your choice of rendering\n  algorithm will influence their necessity.\n\n  Returns the transaction ID of the submitted transaction.\n  "],"~$transact-sync!",["^ ","^;L",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",702,"^9",7,"^:",702,"^;",21,"^;M",["^1H",["^;N",["^1H",[["^;O","^>I",["^ ","^<0",["~$component","~$ref"],"^1J","^=K"]]]]]],"^6","Run the optimistic action(s) of a transaction synchronously. It is primarily used to deal with controlled inputs, since they\n   have issues working asynchronously, so ideally the mutation in question will *not* have remote action (though they\n   are allowed to).\n\n   NOTE: any *remote* behaviors of `tx` will *still be async*.\n\n   This function:\n\n   * Runs the optimistic side of the mutation(s)\n   * IF (and only if) one or more of the mutations has more sections than just an `action` then it submits the mutation to the normal transaction queue,\n     but with the optimistic part already done.\n   * This functions *does not* queue a render refresh (though if the normal transaction queue is updated, it will queue tx remote processing, which will trigger a UI refresh).\n\n   If you pass it an on-screen instance that has a query and ident, then this function tunnel updated UI props synchronously to that\n   component so it can refresh immediately and avoid DOM input issues.\n\n   Returns the new component props or the final state map if no component was used in the transaction.\n   "],"^M","^46","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",21,"^;R",["^1H",[["^;O","^>I","~$p__60035"]]],"^;S",null,"^;T",["^1H",[null,null]],"^9",1,"^;U",false,"^8",702,"^;V","^;W","^:",702,"^;X",3,"^;Y",true,"^;M",["^1H",["^;N",["^1H",[["^;O","^>I",["^ ","^<0",["^>L","^>M"],"^1J","^=K"]]]]]],"^6","Run the optimistic action(s) of a transaction synchronously. It is primarily used to deal with controlled inputs, since they\n   have issues working asynchronously, so ideally the mutation in question will *not* have remote action (though they\n   are allowed to).\n\n   NOTE: any *remote* behaviors of `tx` will *still be async*.\n\n   This function:\n\n   * Runs the optimistic side of the mutation(s)\n   * IF (and only if) one or more of the mutations has more sections than just an `action` then it submits the mutation to the normal transaction queue,\n     but with the optimistic part already done.\n   * This functions *does not* queue a render refresh (though if the normal transaction queue is updated, it will queue tx remote processing, which will trigger a UI refresh).\n\n   If you pass it an on-screen instance that has a query and ident, then this function tunnel updated UI props synchronously to that\n   component so it can refresh immediately and avoid DOM input issues.\n\n   Returns the new component props or the final state map if no component was used in the transaction.\n   "],"~$idle-node?",["^ ","^;L",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",503,"^9",7,"^:",503,"^;",17,"^;M",["^1H",["^;N",["^1H",[[["^ ","^<0",["^<6"],"^1J","^;["]]]]]],"^6","Returns true if the given node has no active network operations."],"^M","^51","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",17,"^;R",["^1H",[["~$p__59952"]]],"^;S",null,"^;T",["^1H",[null,null]],"^9",1,"^;U",false,"^8",503,"^;V","^=R","^:",503,"^;X",1,"^;Y",true,"^;M",["^1H",["^;N",["^1H",[[["^ ","^<0",["^<6"],"^1J","^;["]]]]]],"^6","Returns true if the given node has no active network operations."],"~$requested-refreshes",["^ ","^;L",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",634,"^9",7,"^:",634,"^;",26,"^;M",["^1H",["^;N",["^1H",[["^;O","^<H"]]]]]],"^M","^20","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",26,"^;R",["^1H",[["^;O","^<H"]]],"^;S",null,"^;T",["^1H",[null,null]],"^9",1,"^;U",false,"^8",634,"^;V",["^L",[null,"^;W"]],"^:",634,"^;X",2,"^;Y",true,"^;M",["^1H",["^;N",["^1H",[["^;O","^<H"]]]]]],"~$dispatch-result!",["^ ","^;L",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",555,"^9",7,"^:",555,"^;",23,"^;M",["^1H",["^;N",["^1H",[["^;O","^;[",["^ ","^<9",["~$results","~$dispatch","~$desired-ast-nodes","~$transmitted-ast-nodes","~$original-ast-node"],"^1J","^<3"],"^<F"]]]]],"^6","Figure out the dispatch routine to trigger for the given network result.  If it exists, send the result\n  to it.\n\n  Returns the tx-element with the remote marked complete."],"^M","^43","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",23,"^;R",["^1H",[["^;O","^;[","~$p__59980","^<F"]]],"^;S",null,"^;T",["^1H",[null,null]],"^9",1,"^;U",false,"^8",555,"^;V",["^L",["^<>","^;W"]],"^:",555,"^;X",4,"^;Y",true,"^;M",["^1H",["^;N",["^1H",[["^;O","^;[",["^ ","^<9",["^>S","^>T","^>U","^>V","^>W"],"^1J","^<3"],"^<F"]]]]],"^6","Figure out the dispatch routine to trigger for the given network result.  If it exists, send the result\n  to it.\n\n  Returns the tx-element with the remote marked complete."],"^;[",["^ ","^;L",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^8",199,"^9",7,"^:",199,"^;",14,"^;M",["^1H",["^;N",["^1H",[["^>I"],["^>I","^=K"]]]]],"^=?",["^ ","^;U",false,"^=@",2,"^;X",2,"^;R",[["^>I"],["^>I","^=K"]],"^;M",["^1H",[["^>I"],["^>I","^=K"]]],"^;T",["^1H",[null,null]]]],"^M","^4H","^7","com/fulcrologic/fulcro/algorithms/tx_processing.cljc","^;",14,"^=?",["^ ","^;U",false,"^=@",2,"^;X",2,"^;R",[["^>I"],["^>I","^=K"]],"^;M",["^1H",[["^>I"],["^>I","^=K"]]],"^;T",["^1H",[null,null]]],"^;R",[["^>I"],["^>I","^=K"]],"^;S",null,"^=@",2,"^;T",["^1H",[null,null]],"^9",1,"^;U",false,"^=A",[["^ ","^=@",1,"^;U",false,"^=B","^;W"],["^ ","^=@",2,"^;U",false,"^=B","^=N"]],"^8",199,"^:",199,"^;X",2,"^;Y",true,"^;M",["^1H",[["^>I"],["^>I","^=K"]]]]],"^1F",["^ ","^?","^@","^J","^J","^Y","^Z","^[","^10","^13","^13","^G","^G","^16","^G","~$m","^18","^1;","^1<","^18","^18","~$s","^@","^10","^10","^Z","^Z","^1<","^1<","^@","^@"],"~:cljs.analyzer/constants",["^ ","^1A",["^L",["~:com.fulcrologic.fulcro.algorithms.tx-processing/abort-id","~:req-un","~:opt-un","~:remote","~:state-id-before","~:only-refresh","~:gfn","~:children","~:pred-exprs","~:keys-pred","~:com.fulcrologic.fulcro.algorithms.tx-processing/send-queue","~:writes","^2<","^<1","~:transacted-ast","~:opt-keys","~:com.fulcrologic.fulcro.algorithms.tx-processing/created","~:com.fulcrologic.fulcro.algorithms.tx-processing/ast","~:com.fulcrologic.fulcro.algorithms.tx-processing/update-handler","~:key","~:refresh","~:else","~:com.fulcrologic.fulcro.algorithms.tx-processing/queue-processing-scheduled?","~:call","~:com.fulcrologic.fulcro.algorithms.tx-processing/aborted?","~:db-after","~:ref","~$cljs.spec.alpha/coll-of","~:synchronous?","~:cljs.spec.alpha/kind-form","~:render!","~:warn","~:req-specs","~:transmitted-ast","~:done?","~:status-text","~:com.fulcrologic.fulcro.algorithms.tx-processing/sends-scheduled?","~:ast","~:type","~:global-eql-transform","~:com.fulcrologic.fulcro.algorithms.tx-processing/tx-element","~:state","^3?","^3A","~:cljs.spec.alpha/cpred","~:status-code","~:after-render?","~:component","~:schedule-render!","~:com.fulcrologic.fulcro.algorithms.tx-processing/state-before-action","^<6","~:com.fulcrologic.fulcro.application/state-atom","~:com.fulcrologic.fulcro.application/only-refresh","~$%","~:abort!","~:otherwise","~:state-before-action","~:fatal","~:db-before","~:com.fulcrologic.fulcro.application/app","~:dispatch","~:transmit!","~:req","~:com.fulcrologic.fulcro.algorithms.tx-processing/tx-node","~:tx","~:com.fulcrologic.fulcro.application/to-refresh","~:mutation-ast","~:root","~:result","^>;","^=4","~:kind","~:optimistic?","~:com.fulcrologic.fulcro.algorithms.tx-processing/tx","~:progress-action","~:app","~:req-keys","^=5","~$cljs.core/fn","~:dispatch-key","~:com.fulcrologic.fulcro.algorithms.tx-processing/submission-queue","~:opt-specs","~:com.fulcrologic.fulcro.algorithms.tx-processing/active-queue","~:com.fulcrologic.fulcro.algorithms.tx-processing/id","~:pred-forms","~:client-exception","~:action","~:error","~:tx-id","~:com.fulcrologic.fulcro.application/remote-name","~:com.fulcrologic.fulcro.algorithms.tx-processing/send-queues","~:result-action","~:com.fulcrologic.fulcro.algorithms.tx-processing/progress","~:progress","~:body","~:abort-id","~:com.fulcrologic.fulcro.algorithms.tx-processing/activation-scheduled?","^<J","~:parallel?","~:auto","~:edn-query-language.ast/key","~:p","~:new-elements","~:com.fulcrologic.fulcro.algorithms.tx-processing/original-ast-node","~:com.fulcrologic.fulcro.application/remotes","~:com.fulcrologic.fulcro.algorithms.tx-processing/send-node","~:cljs.spec.alpha/conform-all","~:rest","~:com.fulcrologic.fulcro.application/active-remotes","~:com.fulcrologic.fulcro.algorithms.tx-processing/active?","^<2","^=3","~:message","~:com.fulcrologic.fulcro.application/remote-names","~:com.fulcrologic.fulcro.algorithms.tx-processing/desired-ast-nodes","~:cljs.spec.alpha/describe","~:opt","~:com.fulcrologic.fulcro.algorithms.tx-processing/parallel?","~:reads","~:com.fulcrologic.fulcro.algorithms.tx-processing/result-handler","~:com.fulcrologic.fulcro.algorithms.tx-processing/transmitted-ast-nodes"]],"~:order",["^@7","^A3","^>;","^A:","^A4","^?I","^?V","^@A","^A5","^A<","^2<","^?G","~:p","^A6","^?8","^<J","^@Z","^A>","^?=","^@?","^?R","^?5","^?C","^A8","^@L","^A?","^?9","^?A","^??","^A0","^@R","^>[","^?0","^?4","^?6","^?7","^?;","^?L","^@:","^@F","^@J","^@M","^A=","^@G","~$%","^3A","^3?","^=3","^?>","^A@","^@W","^?W","^@9","^@P","^@[","^@5","^@N","^A9","^@S","^@C","^@;","^A2","^=5","^<2","^<1","^=4","^?<","^<6","^?F","^?Y","^?U","^@E","^@0","^?Q","^?X","^@I","^@K","^@Y","^?B","^?P","^?N","^A1","^@O","^?[","^@H","^@Q","^?2","^@6","^?E","^@<","^?T","^@4","^?S","^A;","^AA","^@U","^@B","^@T","^@8","^?:","^@>","^?M","^@@","^?1","^@V","^@D","^?@","^A7","^?Z","^@=","^?J","^?K","^?H","^?3","^@1","^@2","^>Z","^@X","^@3","^?O","^?D"]],"^1L",["^ ","^1B",["^L",[]]],"^1M",["^ "],"^1N",["^14","^13","^W","^@","^U","^17","^12","^1>","^19","^18","^10","^15","^G","^J","^X","^1<","^Z"]],"^Q","^N","~:ns-specs",["^ ","^>Z","^53","~:com.fulcrologic.fulcro.algorithms.tx-processing/finished","~$cljs.core/inst?","^?8",["^1H",["^?G","^A4","^@A","^2<"]],"^<1",["^1H",["~$cljs.spec.alpha/map-of","^26","^53"]],"^?<","^AE","^?=","~:edn-query-language.ast/node","^?>","~$cljs.core/ifn?","^?B","^25","^?P","^25","^?T",["^1H",["~$cljs.spec.alpha/keys","^@:",["^=3","^A2","^=5","^<2","^<1","^=4"],"^A=",["^A;","^AA","^@U"]]],"^<6",["^1H",["^?G","^?T","^@A","^2<"]],"^@;",["^1H",["^AI","^@:",["^@L","^?<","^<J","^@C","^<6"],"^A=",["~:com.fulcrologic.fulcro.algorithms.tx-processing/started","^AD"]]],"^=4","^3A","^@C","^2<","^=5","^4:","^@I",["^1H",["^?G","^@;","^@A","^2<"]],"^@K",["^1H",["^?G","^@;","^@A","^2<"]],"^@L","~$cljs.core/uuid?","^AJ","^AE","^@S",["^1H",["^AF","^@R","^?8"]],"^@U",["^1H",["^AF","^26","^53"]],"^@Y","^25","^<J",["^1H",["^AI","^A=",["^>Z"],"^?0",["^>Z"]]],"^A2","^?=","^A4",["^1H",["^AI","^@:",["^@L","^=3","^?=","^A@","^?>","^A8"],"^A=",["^<J"]]],"^A8","^25","^<2","^4:","^=3","^2V","^A;",["^1H",["^AF","^26","^AG"]],"^A>","^25","^A@","^AH","^AA",["^1H",["^AF","^26","^AG"]]],"~:ns-spec-vars",["^L",[]],"~:compiler-options",["^59",[["^AM","~:static-fns"],true,["^AM","~:shadow-tweaks"],null,["^AM","~:source-map-inline"],null,["^AM","~:elide-asserts"],true,["^AM","~:optimize-constants"],null,["^AM","^1S"],null,["^AM","~:external-config"],null,["^AM","~:tooling-config"],null,["^AM","~:emit-constants"],null,["^AM","~:load-tests"],false,["^AM","~:form-size-threshold"],null,["^AM","~:global-goog-object&array"],null,["^AM","~:data-readers"],null,["^AM","~:infer-externs"],"^@[",["^AM","^1U"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:release",["^AM","~:fn-invoke-direct"],null,["^AM","~:source-map"],null]]]