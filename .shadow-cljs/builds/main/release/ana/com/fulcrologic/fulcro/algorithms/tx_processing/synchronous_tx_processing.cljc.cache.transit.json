["^ ","~:output",["^ ","~:js","goog.provide('com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing');\r\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.apps_in_tx = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\r\n\r\n/**\r\n * Returns true if the current thread is running non-nested transaction processing code.\r\n */\r\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.top_level_QMARK_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$synchronous_tx_processing$top_level_QMARK_(p__60154){\r\nvar map__60156 = p__60154;\r\nvar map__60156__$1 = cljs.core.__destructure_map(map__60156);\r\nvar id = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60156__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"id\",\"com.fulcrologic.fulcro.application/id\",-2008968625));\r\nreturn cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.get.cljs$core$IFn$_invoke$arity$3(cljs.core.deref(com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.apps_in_tx),id,(0)),(0));\r\n});\r\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.swap_submission_queue_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$synchronous_tx_processing$swap_submission_queue_BANG_(var_args){\r\nvar args__4870__auto__ = [];\r\nvar len__4864__auto___60588 = arguments.length;\r\nvar i__4865__auto___60589 = (0);\r\nwhile(true){\r\nif((i__4865__auto___60589 < len__4864__auto___60588)){\r\nargs__4870__auto__.push((arguments[i__4865__auto___60589]));\r\n\r\nvar G__60590 = (i__4865__auto___60589 + (1));\r\ni__4865__auto___60589 = G__60590;\r\ncontinue;\r\n} else {\r\n}\r\nbreak;\r\n}\r\n\r\nvar argseq__4871__auto__ = ((((1) < args__4870__auto__.length))?(new cljs.core.IndexedSeq(args__4870__auto__.slice((1)),(0),null)):null);\r\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.swap_submission_queue_BANG_.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),argseq__4871__auto__);\r\n});\r\n\r\n(com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.swap_submission_queue_BANG_.cljs$core$IFn$_invoke$arity$variadic = (function (app__$1,args){\r\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$3(cljs.core.swap_BANG_,cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(app__$1,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing\",\"config\",\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/config\",-1878584178),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing\",\"submission-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/submission-queue\",-1259886916)], null)),args);\r\n}));\r\n\r\n(com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.swap_submission_queue_BANG_.cljs$lang$maxFixedArity = (1));\r\n\r\n/** @this {Function} */\r\n(com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.swap_submission_queue_BANG_.cljs$lang$applyTo = (function (seq60162){\r\nvar G__60163 = cljs.core.first(seq60162);\r\nvar seq60162__$1 = cljs.core.next(seq60162);\r\nvar self__4851__auto__ = this;\r\nreturn self__4851__auto__.cljs$core$IFn$_invoke$arity$variadic(G__60163,seq60162__$1);\r\n}));\r\n\r\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.reset_submission_queue_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$synchronous_tx_processing$reset_submission_queue_BANG_(app__$1,v){\r\nreturn cljs.core.reset_BANG_(cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(app__$1,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing\",\"config\",\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/config\",-1878584178),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing\",\"submission-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/submission-queue\",-1259886916)], null)),v);\r\n});\r\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.submission_queue = (function com$fulcrologic$fulcro$algorithms$tx_processing$synchronous_tx_processing$submission_queue(app__$1){\r\nreturn cljs.core.deref(cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(app__$1,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing\",\"config\",\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/config\",-1878584178),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing\",\"submission-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/submission-queue\",-1259886916)], null)));\r\n});\r\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.swap_post_processing_steps_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$synchronous_tx_processing$swap_post_processing_steps_BANG_(var_args){\r\nvar args__4870__auto__ = [];\r\nvar len__4864__auto___60592 = arguments.length;\r\nvar i__4865__auto___60593 = (0);\r\nwhile(true){\r\nif((i__4865__auto___60593 < len__4864__auto___60592)){\r\nargs__4870__auto__.push((arguments[i__4865__auto___60593]));\r\n\r\nvar G__60594 = (i__4865__auto___60593 + (1));\r\ni__4865__auto___60593 = G__60594;\r\ncontinue;\r\n} else {\r\n}\r\nbreak;\r\n}\r\n\r\nvar argseq__4871__auto__ = ((((1) < args__4870__auto__.length))?(new cljs.core.IndexedSeq(args__4870__auto__.slice((1)),(0),null)):null);\r\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.swap_post_processing_steps_BANG_.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),argseq__4871__auto__);\r\n});\r\n\r\n(com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.swap_post_processing_steps_BANG_.cljs$core$IFn$_invoke$arity$variadic = (function (app__$1,args){\r\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$3(cljs.core.swap_BANG_,cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(app__$1,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing\",\"config\",\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/config\",-1878584178),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing\",\"post-processing-steps\",\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/post-processing-steps\",1202501796)], null)),args);\r\n}));\r\n\r\n(com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.swap_post_processing_steps_BANG_.cljs$lang$maxFixedArity = (1));\r\n\r\n/** @this {Function} */\r\n(com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.swap_post_processing_steps_BANG_.cljs$lang$applyTo = (function (seq60173){\r\nvar G__60174 = cljs.core.first(seq60173);\r\nvar seq60173__$1 = cljs.core.next(seq60173);\r\nvar self__4851__auto__ = this;\r\nreturn self__4851__auto__.cljs$core$IFn$_invoke$arity$variadic(G__60174,seq60173__$1);\r\n}));\r\n\r\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.reset_post_processing_steps_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$synchronous_tx_processing$reset_post_processing_steps_BANG_(app__$1,v){\r\nreturn cljs.core.reset_BANG_(cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(app__$1,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing\",\"config\",\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/config\",-1878584178),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing\",\"post-processing-steps\",\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/post-processing-steps\",1202501796)], null)),v);\r\n});\r\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.post_processing_steps = (function com$fulcrologic$fulcro$algorithms$tx_processing$synchronous_tx_processing$post_processing_steps(app__$1){\r\nreturn cljs.core.deref(cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(app__$1,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing\",\"config\",\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/config\",-1878584178),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing\",\"post-processing-steps\",\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/post-processing-steps\",1202501796)], null)));\r\n});\r\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.swap_active_queue_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$synchronous_tx_processing$swap_active_queue_BANG_(var_args){\r\nvar args__4870__auto__ = [];\r\nvar len__4864__auto___60596 = arguments.length;\r\nvar i__4865__auto___60597 = (0);\r\nwhile(true){\r\nif((i__4865__auto___60597 < len__4864__auto___60596)){\r\nargs__4870__auto__.push((arguments[i__4865__auto___60597]));\r\n\r\nvar G__60598 = (i__4865__auto___60597 + (1));\r\ni__4865__auto___60597 = G__60598;\r\ncontinue;\r\n} else {\r\n}\r\nbreak;\r\n}\r\n\r\nvar argseq__4871__auto__ = ((((1) < args__4870__auto__.length))?(new cljs.core.IndexedSeq(args__4870__auto__.slice((1)),(0),null)):null);\r\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.swap_active_queue_BANG_.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),argseq__4871__auto__);\r\n});\r\n\r\n(com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.swap_active_queue_BANG_.cljs$core$IFn$_invoke$arity$variadic = (function (app__$1,args){\r\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$3(cljs.core.swap_BANG_,cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(app__$1,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing\",\"config\",\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/config\",-1878584178),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing\",\"active-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/active-queue\",-1020610588)], null)),args);\r\n}));\r\n\r\n(com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.swap_active_queue_BANG_.cljs$lang$maxFixedArity = (1));\r\n\r\n/** @this {Function} */\r\n(com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.swap_active_queue_BANG_.cljs$lang$applyTo = (function (seq60229){\r\nvar G__60230 = cljs.core.first(seq60229);\r\nvar seq60229__$1 = cljs.core.next(seq60229);\r\nvar self__4851__auto__ = this;\r\nreturn self__4851__auto__.cljs$core$IFn$_invoke$arity$variadic(G__60230,seq60229__$1);\r\n}));\r\n\r\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.reset_active_queue_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$synchronous_tx_processing$reset_active_queue_BANG_(app__$1,v){\r\nreturn cljs.core.reset_BANG_(cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(app__$1,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing\",\"config\",\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/config\",-1878584178),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing\",\"active-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/active-queue\",-1020610588)], null)),v);\r\n});\r\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.active_queue = (function com$fulcrologic$fulcro$algorithms$tx_processing$synchronous_tx_processing$active_queue(app__$1){\r\nreturn cljs.core.deref(cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(app__$1,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing\",\"config\",\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/config\",-1878584178),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing\",\"active-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/active-queue\",-1020610588)], null)));\r\n});\r\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.swap_send_queue_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$synchronous_tx_processing$swap_send_queue_BANG_(var_args){\r\nvar args__4870__auto__ = [];\r\nvar len__4864__auto___60600 = arguments.length;\r\nvar i__4865__auto___60601 = (0);\r\nwhile(true){\r\nif((i__4865__auto___60601 < len__4864__auto___60600)){\r\nargs__4870__auto__.push((arguments[i__4865__auto___60601]));\r\n\r\nvar G__60602 = (i__4865__auto___60601 + (1));\r\ni__4865__auto___60601 = G__60602;\r\ncontinue;\r\n} else {\r\n}\r\nbreak;\r\n}\r\n\r\nvar argseq__4871__auto__ = ((((2) < args__4870__auto__.length))?(new cljs.core.IndexedSeq(args__4870__auto__.slice((2)),(0),null)):null);\r\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.swap_send_queue_BANG_.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),argseq__4871__auto__);\r\n});\r\n\r\n(com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.swap_send_queue_BANG_.cljs$core$IFn$_invoke$arity$variadic = (function (app__$1,remote,args){\r\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$3(cljs.core.swap_BANG_,cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(app__$1,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing\",\"config\",\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/config\",-1878584178),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing\",\"send-queues\",\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/send-queues\",-727474733),remote], null)),args);\r\n}));\r\n\r\n(com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.swap_send_queue_BANG_.cljs$lang$maxFixedArity = (2));\r\n\r\n/** @this {Function} */\r\n(com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.swap_send_queue_BANG_.cljs$lang$applyTo = (function (seq60239){\r\nvar G__60241 = cljs.core.first(seq60239);\r\nvar seq60239__$1 = cljs.core.next(seq60239);\r\nvar G__60242 = cljs.core.first(seq60239__$1);\r\nvar seq60239__$2 = cljs.core.next(seq60239__$1);\r\nvar self__4851__auto__ = this;\r\nreturn self__4851__auto__.cljs$core$IFn$_invoke$arity$variadic(G__60241,G__60242,seq60239__$2);\r\n}));\r\n\r\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.reset_send_queue_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$synchronous_tx_processing$reset_send_queue_BANG_(app__$1,remote,v){\r\nreturn cljs.core.reset_BANG_(cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(app__$1,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing\",\"config\",\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/config\",-1878584178),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing\",\"send-queues\",\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/send-queues\",-727474733),remote], null)),v);\r\n});\r\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.send_queue = (function com$fulcrologic$fulcro$algorithms$tx_processing$synchronous_tx_processing$send_queue(app__$1,remote){\r\nreturn cljs.core.deref(cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(app__$1,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing\",\"config\",\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/config\",-1878584178),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing\",\"send-queues\",\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/send-queues\",-727474733),remote], null)));\r\n});\r\n/**\r\n * Add `f` as a function that will run after the current transaction has been fully processed.\r\n */\r\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.run_after_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$synchronous_tx_processing$run_after_BANG_(app__$1,f){\r\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.swap_post_processing_steps_BANG_.cljs$core$IFn$_invoke$arity$variadic(app__$1,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.fnil.cljs$core$IFn$_invoke$arity$2(cljs.core.conj,cljs.core.PersistentVector.EMPTY),f], 0));\r\n});\r\n/**\r\n * Is there post processing to do?\r\n */\r\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.post_processing_QMARK_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$synchronous_tx_processing$post_processing_QMARK_(app__$1){\r\nreturn cljs.core.boolean$(cljs.core.seq(com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.post_processing_steps(app__$1)));\r\n});\r\n/**\r\n * Runs the queued post processing steps until the post-processing queue is empty.\r\n */\r\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.do_post_processing_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$synchronous_tx_processing$do_post_processing_BANG_(app__$1){\r\nvar steps = com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.post_processing_steps(app__$1);\r\nwhile(true){\r\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.reset_post_processing_steps_BANG_(app__$1,cljs.core.PersistentVector.EMPTY);\r\n\r\nvar seq__60292_60604 = cljs.core.seq(steps);\r\nvar chunk__60293_60605 = null;\r\nvar count__60294_60606 = (0);\r\nvar i__60295_60607 = (0);\r\nwhile(true){\r\nif((i__60295_60607 < count__60294_60606)){\r\nvar f_60608 = chunk__60293_60605.cljs$core$IIndexed$_nth$arity$2(null,i__60295_60607);\r\ntry{(f_60608.cljs$core$IFn$_invoke$arity$0 ? f_60608.cljs$core$IFn$_invoke$arity$0() : f_60608.call(null));\r\n}catch (e60310){var e_60610 = e60310;\r\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$11(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing\",null,134,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay(((function (seq__60292_60604,chunk__60293_60605,count__60294_60606,i__60295_60607,steps,e_60610,f_60608){\r\nreturn (function (){\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [e_60610,\"Post processing step failed. See https://book.fulcrologic.com/#err-stp-postproc-failed\"], null);\r\n});})(seq__60292_60604,chunk__60293_60605,count__60294_60606,i__60295_60607,steps,e_60610,f_60608))\r\n,null)),null,-1797298694,null);\r\n}\r\n\r\nvar G__60611 = seq__60292_60604;\r\nvar G__60612 = chunk__60293_60605;\r\nvar G__60613 = count__60294_60606;\r\nvar G__60614 = (i__60295_60607 + (1));\r\nseq__60292_60604 = G__60611;\r\nchunk__60293_60605 = G__60612;\r\ncount__60294_60606 = G__60613;\r\ni__60295_60607 = G__60614;\r\ncontinue;\r\n} else {\r\nvar temp__5753__auto___60615 = cljs.core.seq(seq__60292_60604);\r\nif(temp__5753__auto___60615){\r\nvar seq__60292_60616__$1 = temp__5753__auto___60615;\r\nif(cljs.core.chunked_seq_QMARK_(seq__60292_60616__$1)){\r\nvar c__4679__auto___60617 = cljs.core.chunk_first(seq__60292_60616__$1);\r\nvar G__60618 = cljs.core.chunk_rest(seq__60292_60616__$1);\r\nvar G__60619 = c__4679__auto___60617;\r\nvar G__60620 = cljs.core.count(c__4679__auto___60617);\r\nvar G__60621 = (0);\r\nseq__60292_60604 = G__60618;\r\nchunk__60293_60605 = G__60619;\r\ncount__60294_60606 = G__60620;\r\ni__60295_60607 = G__60621;\r\ncontinue;\r\n} else {\r\nvar f_60622 = cljs.core.first(seq__60292_60616__$1);\r\ntry{(f_60622.cljs$core$IFn$_invoke$arity$0 ? f_60622.cljs$core$IFn$_invoke$arity$0() : f_60622.call(null));\r\n}catch (e60313){var e_60623 = e60313;\r\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$11(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing\",null,134,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay(((function (seq__60292_60604,chunk__60293_60605,count__60294_60606,i__60295_60607,steps,e_60623,f_60622,seq__60292_60616__$1,temp__5753__auto___60615){\r\nreturn (function (){\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [e_60623,\"Post processing step failed. See https://book.fulcrologic.com/#err-stp-postproc-failed\"], null);\r\n});})(seq__60292_60604,chunk__60293_60605,count__60294_60606,i__60295_60607,steps,e_60623,f_60622,seq__60292_60616__$1,temp__5753__auto___60615))\r\n,null)),null,-1693723650,null);\r\n}\r\n\r\nvar G__60624 = cljs.core.next(seq__60292_60616__$1);\r\nvar G__60625 = null;\r\nvar G__60626 = (0);\r\nvar G__60627 = (0);\r\nseq__60292_60604 = G__60624;\r\nchunk__60293_60605 = G__60625;\r\ncount__60294_60606 = G__60626;\r\ni__60295_60607 = G__60627;\r\ncontinue;\r\n}\r\n} else {\r\n}\r\n}\r\nbreak;\r\n}\r\n\r\nvar temp__5753__auto__ = cljs.core.seq(com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.post_processing_steps(app__$1));\r\nif(temp__5753__auto__){\r\nvar next_steps = temp__5753__auto__;\r\nvar G__60629 = next_steps;\r\nsteps = G__60629;\r\ncontinue;\r\n} else {\r\nreturn null;\r\n}\r\nbreak;\r\n}\r\n});\r\n/**\r\n * Returns true if the current thread is in the midst of running the optimistic actions of a new transaction.\r\n */\r\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.in_transaction_QMARK_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$synchronous_tx_processing$in_transaction_QMARK_(p__60315){\r\nvar map__60316 = p__60315;\r\nvar map__60316__$1 = cljs.core.__destructure_map(map__60316);\r\nvar app__$1 = map__60316__$1;\r\nvar id = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60316__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"id\",\"com.fulcrologic.fulcro.application/id\",-2008968625));\r\nreturn cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2((0),cljs.core.get.cljs$core$IFn$_invoke$arity$3(cljs.core.deref(com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.apps_in_tx),id,(0)));\r\n});\r\n/**\r\n * Should be called after the application renders to ensure that transactions blocked until the next render become\r\n * unblocked. Schedules an activation.\r\n */\r\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.release_post_render_tasks_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$synchronous_tx_processing$release_post_render_tasks_BANG_(app__$1){\r\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.swap_submission_queue_BANG_.cljs$core$IFn$_invoke$arity$variadic(app__$1,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(function (queue){\r\nreturn cljs.core.mapv.cljs$core$IFn$_invoke$arity$2((function (node){\r\nreturn cljs.core.update.cljs$core$IFn$_invoke$arity$4(node,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"options\",\"com.fulcrologic.fulcro.algorithms.tx-processing/options\",2016767420),cljs.core.dissoc,new cljs.core.Keyword(null,\"after-render?\",\"after-render?\",595994030));\r\n}),queue);\r\n})], 0));\r\n});\r\n/**\r\n * Figure out the dispatch routine to trigger for the given network result.  If it exists, send the result\r\n *   to it.\r\n * \r\n *   Returns the tx-element with the remote marked complete.\r\n */\r\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.dispatch_result_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$synchronous_tx_processing$dispatch_result_BANG_(app__$1,tx_node,p__60323,remote){\r\nvar map__60324 = p__60323;\r\nvar map__60324__$1 = cljs.core.__destructure_map(map__60324);\r\nvar tx_element = map__60324__$1;\r\nvar results = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60324__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"results\",\"com.fulcrologic.fulcro.algorithms.tx-processing/results\",-1876101852));\r\nvar dispatch = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60324__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"dispatch\",\"com.fulcrologic.fulcro.algorithms.tx-processing/dispatch\",-262239660));\r\nvar desired_ast_nodes = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60324__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"desired-ast-nodes\",\"com.fulcrologic.fulcro.algorithms.tx-processing/desired-ast-nodes\",-1718643425));\r\nvar transmitted_ast_nodes = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60324__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"transmitted-ast-nodes\",\"com.fulcrologic.fulcro.algorithms.tx-processing/transmitted-ast-nodes\",1065250687));\r\nvar original_ast_node = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60324__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"original-ast-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/original-ast-node\",2080944477));\r\nvar result_60630 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(results,remote);\r\nvar handler_60631 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(dispatch,new cljs.core.Keyword(null,\"result-action\",\"result-action\",-1254630246));\r\nif(cljs.core.truth_(handler_60631)){\r\nvar env_60633 = com.fulcrologic.fulcro.algorithms.tx_processing.build_env.cljs$core$IFn$_invoke$arity$3(app__$1,tx_node,new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,\"dispatch\",\"dispatch\",1319337009),dispatch,new cljs.core.Keyword(null,\"transacted-ast\",\"transacted-ast\",-442737948),original_ast_node,new cljs.core.Keyword(null,\"mutation-ast\",\"mutation-ast\",1077959891),cljs.core.get.cljs$core$IFn$_invoke$arity$2(desired_ast_nodes,remote),new cljs.core.Keyword(null,\"transmitted-ast\",\"transmitted-ast\",1828931690),cljs.core.get.cljs$core$IFn$_invoke$arity$2(transmitted_ast_nodes,remote),new cljs.core.Keyword(null,\"result\",\"result\",1415092211),result_60630], null));\r\ntry{(handler_60631.cljs$core$IFn$_invoke$arity$1 ? handler_60631.cljs$core$IFn$_invoke$arity$1(env_60633) : handler_60631.call(null,env_60633));\r\n}catch (e60327){var e_60637 = e60327;\r\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$11(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing\",null,166,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay((function (){\r\nreturn new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [e_60637,\"The result-action mutation handler for mutation\",new cljs.core.Keyword(null,\"dispatch-key\",\"dispatch-key\",733619510).cljs$core$IFn$_invoke$arity$1(original_ast_node),\"threw an exception. See https://book.fulcrologic.com/#err-stp-res-action-exc\"], null);\r\n}),null)),null,-1782181457,null);\r\n}} else {\r\n}\r\n\r\nreturn cljs.core.update.cljs$core$IFn$_invoke$arity$4(tx_element,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"complete?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/complete?\",-311612706),cljs.core.conj,remote);\r\n});\r\n/**\r\n * Distribute results and mark the remotes for those elements as complete.\r\n */\r\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.distribute_element_results_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$synchronous_tx_processing$distribute_element_results_BANG_(app__$1,tx_node,p__60333){\r\nvar map__60334 = p__60333;\r\nvar map__60334__$1 = cljs.core.__destructure_map(map__60334);\r\nvar tx_element = map__60334__$1;\r\nvar results = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60334__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"results\",\"com.fulcrologic.fulcro.algorithms.tx-processing/results\",-1876101852));\r\nvar complete_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60334__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"complete?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/complete?\",-311612706));\r\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (new_element,remote){\r\nif(cljs.core.truth_((complete_QMARK_.cljs$core$IFn$_invoke$arity$1 ? complete_QMARK_.cljs$core$IFn$_invoke$arity$1(remote) : complete_QMARK_.call(null,remote)))){\r\nreturn new_element;\r\n} else {\r\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.dispatch_result_BANG_(app__$1,tx_node,new_element,remote);\r\n}\r\n}),tx_element,cljs.core.keys(results));\r\n});\r\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.node_index = (function com$fulcrologic$fulcro$algorithms$tx_processing$synchronous_tx_processing$node_index(queue,txn_id){\r\nvar n = cljs.core.count(queue);\r\nvar idx = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (idx,p__60341){\r\nvar map__60342 = p__60341;\r\nvar map__60342__$1 = cljs.core.__destructure_map(map__60342);\r\nvar id = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60342__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423));\r\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(id,txn_id)){\r\nreturn cljs.core.reduced(idx);\r\n} else {\r\nreturn (idx + (1));\r\n}\r\n}),(0),queue);\r\nif((idx < n)){\r\nreturn idx;\r\n} else {\r\nreturn null;\r\n}\r\n});\r\n/**\r\n * Side-effects against the app state to distribute the result for txn-id element at ele-idx. This will call the result\r\n * handler and mark that remote as complete.\r\n */\r\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.distribute_results_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$synchronous_tx_processing$distribute_results_BANG_(app__$1,txn_id,ele_idx){\r\nvar active_queue = com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.active_queue(app__$1);\r\nvar idx = com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.node_index(active_queue,txn_id);\r\nvar tx_node = cljs.core.get.cljs$core$IFn$_invoke$arity$2(active_queue,idx);\r\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.swap_active_queue_BANG_.cljs$core$IFn$_invoke$arity$variadic(app__$1,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.update_in,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [idx,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330),ele_idx], null),(function (p1__60344_SHARP_){\r\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.distribute_element_results_BANG_(app__$1,tx_node,p1__60344_SHARP_);\r\n})], 0));\r\n});\r\n/**\r\n * Deal with a network result on the given txn/element.\r\n */\r\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.record_result_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$synchronous_tx_processing$record_result_BANG_(var_args){\r\nvar G__60356 = arguments.length;\r\nswitch (G__60356) {\r\ncase 6:\r\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.record_result_BANG_.cljs$core$IFn$_invoke$arity$6((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]),(arguments[(4)]),(arguments[(5)]));\r\n\r\nbreak;\r\ncase 5:\r\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.record_result_BANG_.cljs$core$IFn$_invoke$arity$5((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]),(arguments[(4)]));\r\n\r\nbreak;\r\ndefault:\r\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\r\n\r\n}\r\n});\r\n\r\n(com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.record_result_BANG_.cljs$core$IFn$_invoke$arity$6 = (function (app__$1,txn_id,ele_idx,remote,result,result_key){\r\nvar active_queue = com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.active_queue(app__$1);\r\nvar txn_idx = com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.node_index(active_queue,txn_id);\r\nvar not_found_QMARK_ = (((txn_idx >= cljs.core.count(active_queue))) || (cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(txn_id,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423).cljs$core$IFn$_invoke$arity$1(cljs.core.get.cljs$core$IFn$_invoke$arity$2(active_queue,txn_idx)))));\r\nif(not_found_QMARK_){\r\nreturn taoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$11(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing\",null,209,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay((function (){\r\nreturn new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"Network result for\",remote,\"does not have a valid node on the active queue! See https://book.fulcrologic.com/#err-stp-res-lacks-valid-node\"], null);\r\n}),null)),null,1414302533,null);\r\n} else {\r\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.swap_active_queue_BANG_.cljs$core$IFn$_invoke$arity$variadic(app__$1,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.assoc_in,new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [txn_idx,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330),ele_idx,result_key,remote], null),result], 0));\r\n\r\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.distribute_results_BANG_(app__$1,txn_id,ele_idx);\r\n}\r\n}));\r\n\r\n(com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.record_result_BANG_.cljs$core$IFn$_invoke$arity$5 = (function (app__$1,txn_id,ele_idx,remote,result){\r\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.record_result_BANG_.cljs$core$IFn$_invoke$arity$6(app__$1,txn_id,ele_idx,remote,result,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"results\",\"com.fulcrologic.fulcro.algorithms.tx-processing/results\",-1876101852));\r\n}));\r\n\r\n(com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.record_result_BANG_.cljs$lang$maxFixedArity = 6);\r\n\r\n/**\r\n * Removes the send node (if present) from the send queue on the given remote.\r\n */\r\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.remove_send_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$synchronous_tx_processing$remove_send_BANG_(app__$1,remote,txn_id,ele_idx){\r\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.swap_send_queue_BANG_.cljs$core$IFn$_invoke$arity$variadic(app__$1,remote,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(function (old_queue){\r\nreturn cljs.core.filterv((function (p__60366){\r\nvar map__60367 = p__60366;\r\nvar map__60367__$1 = cljs.core.__destructure_map(map__60367);\r\nvar id = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60367__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423));\r\nvar idx = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60367__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"idx\",\"com.fulcrologic.fulcro.algorithms.tx-processing/idx\",-1121773698));\r\nreturn (!(((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(txn_id,id)) && (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(ele_idx,idx)))));\r\n}),old_queue);\r\n})], 0));\r\n});\r\n/**\r\n * Generate a new send node and add it to the appropriate send queue.\r\n */\r\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.add_send_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$synchronous_tx_processing$add_send_BANG_(app__$1,p__60371,ele_idx,remote){\r\nvar map__60373 = p__60371;\r\nvar map__60373__$1 = cljs.core.__destructure_map(map__60373);\r\nvar tx_node = map__60373__$1;\r\nvar id = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60373__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423));\r\nvar options = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60373__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"options\",\"com.fulcrologic.fulcro.algorithms.tx-processing/options\",2016767420));\r\nvar update_handler = (function com$fulcrologic$fulcro$algorithms$tx_processing$synchronous_tx_processing$add_send_BANG__$_progress_handler_STAR_(result){\r\nvar id__47375__auto__ = new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"id\",\"com.fulcrologic.fulcro.application/id\",-2008968625).cljs$core$IFn$_invoke$arity$1(app__$1);\r\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.apps_in_tx,cljs.core.update,id__47375__auto__,cljs.core.fnil.cljs$core$IFn$_invoke$arity$2(cljs.core.inc,(0)));\r\n\r\ntry{com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.record_result_BANG_.cljs$core$IFn$_invoke$arity$6(app__$1,id,ele_idx,remote,result,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"progress\",\"com.fulcrologic.fulcro.algorithms.tx-processing/progress\",1012736442));\r\n\r\nvar G__60377 = app__$1;\r\nvar G__60378 = cljs.core.PersistentArrayMap.EMPTY;\r\nreturn (com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.run_queue_BANG_.cljs$core$IFn$_invoke$arity$2 ? com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.run_queue_BANG_.cljs$core$IFn$_invoke$arity$2(G__60377,G__60378) : com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.run_queue_BANG_.call(null,G__60377,G__60378));\r\n}finally {cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.apps_in_tx,cljs.core.update,id__47375__auto__,cljs.core.dec);\r\n}});\r\nvar ast = cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(tx_node,new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330),ele_idx,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"transmitted-ast-nodes\",\"com.fulcrologic.fulcro.algorithms.tx-processing/transmitted-ast-nodes\",1065250687),remote], null));\r\nvar handler = (function com$fulcrologic$fulcro$algorithms$tx_processing$synchronous_tx_processing$add_send_BANG__$_result_handler_STAR_(result){\r\nvar id__47375__auto__ = new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"id\",\"com.fulcrologic.fulcro.application/id\",-2008968625).cljs$core$IFn$_invoke$arity$1(app__$1);\r\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.apps_in_tx,cljs.core.update,id__47375__auto__,cljs.core.fnil.cljs$core$IFn$_invoke$arity$2(cljs.core.inc,(0)));\r\n\r\ntry{com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.record_result_BANG_.cljs$core$IFn$_invoke$arity$5(app__$1,id,ele_idx,remote,result);\r\n\r\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.remove_send_BANG_(app__$1,remote,id,ele_idx);\r\n\r\nvar G__60380 = app__$1;\r\nvar G__60381 = cljs.core.PersistentArrayMap.EMPTY;\r\nreturn (com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.run_queue_BANG_.cljs$core$IFn$_invoke$arity$2 ? com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.run_queue_BANG_.cljs$core$IFn$_invoke$arity$2(G__60380,G__60381) : com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.run_queue_BANG_.call(null,G__60380,G__60381));\r\n}finally {cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.apps_in_tx,cljs.core.update,id__47375__auto__,cljs.core.dec);\r\n}});\r\nvar send_node = new cljs.core.PersistentArrayMap(null, 7, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423),id,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"idx\",\"com.fulcrologic.fulcro.algorithms.tx-processing/idx\",-1121773698),ele_idx,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"ast\",\"com.fulcrologic.fulcro.algorithms.tx-processing/ast\",1718830373),ast,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"options\",\"com.fulcrologic.fulcro.algorithms.tx-processing/options\",2016767420),options,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"active?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/active?\",966679517),false,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"result-handler\",\"com.fulcrologic.fulcro.algorithms.tx-processing/result-handler\",-114902209),handler,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"update-handler\",\"com.fulcrologic.fulcro.algorithms.tx-processing/update-handler\",-1256285755),update_handler], null);\r\nif(cljs.core.truth_(ast)){\r\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.swap_send_queue_BANG_.cljs$core$IFn$_invoke$arity$variadic(app__$1,remote,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.fnil.cljs$core$IFn$_invoke$arity$2(cljs.core.conj,cljs.core.PersistentVector.EMPTY),send_node], 0));\r\n} else {\r\ncom.fulcrologic.fulcro.algorithms.scheduling.defer((function (){\r\nreturn handler(new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"status-code\",\"status-code\",-1060410130),(200),new cljs.core.Keyword(null,\"body\",\"body\",-2049205669),cljs.core.PersistentArrayMap.EMPTY], null));\r\n}),(1));\r\n}\r\n\r\nreturn null;\r\n});\r\n/**\r\n * Queue all (unqueued) remote actions for the given element.  Returns the (possibly updated) node.\r\n */\r\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.queue_element_sends_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$synchronous_tx_processing$queue_element_sends_BANG_(app__$1,tx_node,p__60382){\r\nvar map__60383 = p__60382;\r\nvar map__60383__$1 = cljs.core.__destructure_map(map__60383);\r\nvar idx = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60383__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"idx\",\"com.fulcrologic.fulcro.algorithms.tx-processing/idx\",-1121773698));\r\nvar dispatch = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60383__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"dispatch\",\"com.fulcrologic.fulcro.algorithms.tx-processing/dispatch\",-262239660));\r\nvar started_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60383__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"started?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/started?\",1421241366));\r\nvar remotes = clojure.set.intersection.cljs$core$IFn$_invoke$arity$2(cljs.core.set(cljs.core.keys(dispatch)),com.fulcrologic.fulcro.algorithms.tx_processing.app__GT_remote_names(app__$1));\r\nvar to_dispatch = clojure.set.difference.cljs$core$IFn$_invoke$arity$2(remotes,started_QMARK_);\r\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (node,remote){\r\nif(cljs.core.contains_QMARK_(cljs.core.get_in.cljs$core$IFn$_invoke$arity$3(node,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330),idx,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"started?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/started?\",1421241366)], null),cljs.core.PersistentHashSet.EMPTY),remote)){\r\nreturn node;\r\n} else {\r\nvar updated_node = cljs.core.update_in.cljs$core$IFn$_invoke$arity$4(cljs.core.update_in.cljs$core$IFn$_invoke$arity$3(node,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330),idx], null),(function (tx_element){\r\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.compute_desired_ast_node(app__$1,remote,node,tx_element);\r\n})),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330),idx,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"started?\",\"com.fulcrologic.fulcro.algorithms.tx-processing/started?\",1421241366)], null),cljs.core.conj,remote);\r\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.add_send_BANG_(app__$1,updated_node,idx,remote);\r\n\r\nreturn updated_node;\r\n}\r\n}),tx_node,to_dispatch);\r\n});\r\n/**\r\n * Finds any item(s) on the given node that are ready to be placed on the network queues and adds them. Non-optimistic\r\n *   multi-element nodes will only queue one remote operation at a time.\r\n */\r\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.queue_sends_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$synchronous_tx_processing$queue_sends_BANG_(app__$1,p__60386){\r\nvar map__60387 = p__60386;\r\nvar map__60387__$1 = cljs.core.__destructure_map(map__60387);\r\nvar tx_node = map__60387__$1;\r\nvar options = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60387__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"options\",\"com.fulcrologic.fulcro.algorithms.tx-processing/options\",2016767420));\r\nvar elements = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60387__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"elements\",\"com.fulcrologic.fulcro.algorithms.tx-processing/elements\",-925101330));\r\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (node,element){\r\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.queue_element_sends_BANG_(app__$1,node,element);\r\n}),tx_node,elements);\r\n});\r\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.process_tx_node_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$synchronous_tx_processing$process_tx_node_BANG_(app__$1,p__60389){\r\nvar map__60390 = p__60389;\r\nvar map__60390__$1 = cljs.core.__destructure_map(map__60390);\r\nvar tx_node = map__60390__$1;\r\nvar options = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60390__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"options\",\"com.fulcrologic.fulcro.algorithms.tx-processing/options\",2016767420));\r\nif(com.fulcrologic.fulcro.algorithms.tx_processing.fully_complete_QMARK_(app__$1,tx_node)){\r\nreturn null;\r\n} else {\r\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.update_progress_BANG_(app__$1,com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.queue_sends_BANG_(app__$1,com.fulcrologic.fulcro.algorithms.tx_processing.run_actions_BANG_(app__$1,tx_node)));\r\n}\r\n});\r\n/**\r\n * Process the send queues against the remotes, which will cause idle remotes with queued work to issue network requests.\r\n */\r\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.process_send_queues_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$synchronous_tx_processing$process_send_queues_BANG_(app__$1){\r\nvar remote_names = com.fulcrologic.fulcro.algorithms.tx_processing.app__GT_remote_names(app__$1);\r\nvar operations = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentVector.EMPTY);\r\nvar seq__60392_60679 = cljs.core.seq(remote_names);\r\nvar chunk__60393_60680 = null;\r\nvar count__60394_60681 = (0);\r\nvar i__60395_60682 = (0);\r\nwhile(true){\r\nif((i__60395_60682 < count__60394_60681)){\r\nvar remote_60683 = chunk__60393_60680.cljs$core$IIndexed$_nth$arity$2(null,i__60395_60682);\r\nvar send_queue_60684 = com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.send_queue(app__$1,remote_60683);\r\nvar vec__60457_60685 = com.fulcrologic.fulcro.algorithms.tx_processing.extract_parallel(send_queue_60684);\r\nvar p_60686 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__60457_60685,(0),null);\r\nvar serial_60687 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__60457_60685,(1),null);\r\nvar front_60688 = cljs.core.first(serial_60687);\r\nvar seq__60460_60690 = cljs.core.seq(p_60686);\r\nvar chunk__60461_60691 = null;\r\nvar count__60462_60692 = (0);\r\nvar i__60463_60693 = (0);\r\nwhile(true){\r\nif((i__60463_60693 < count__60462_60692)){\r\nvar item_60694 = chunk__60461_60691.cljs$core$IIndexed$_nth$arity$2(null,i__60463_60693);\r\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(operations,cljs.core.conj,((function (seq__60460_60690,chunk__60461_60691,count__60462_60692,i__60463_60693,seq__60392_60679,chunk__60393_60680,count__60394_60681,i__60395_60682,item_60694,send_queue_60684,vec__60457_60685,p_60686,serial_60687,front_60688,remote_60683,remote_names,operations){\r\nreturn (function (){\r\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.net_send_BANG_(app__$1,item_60694,remote_60683);\r\n});})(seq__60460_60690,chunk__60461_60691,count__60462_60692,i__60463_60693,seq__60392_60679,chunk__60393_60680,count__60394_60681,i__60395_60682,item_60694,send_queue_60684,vec__60457_60685,p_60686,serial_60687,front_60688,remote_60683,remote_names,operations))\r\n);\r\n\r\n\r\nvar G__60695 = seq__60460_60690;\r\nvar G__60696 = chunk__60461_60691;\r\nvar G__60697 = count__60462_60692;\r\nvar G__60698 = (i__60463_60693 + (1));\r\nseq__60460_60690 = G__60695;\r\nchunk__60461_60691 = G__60696;\r\ncount__60462_60692 = G__60697;\r\ni__60463_60693 = G__60698;\r\ncontinue;\r\n} else {\r\nvar temp__5753__auto___60699 = cljs.core.seq(seq__60460_60690);\r\nif(temp__5753__auto___60699){\r\nvar seq__60460_60700__$1 = temp__5753__auto___60699;\r\nif(cljs.core.chunked_seq_QMARK_(seq__60460_60700__$1)){\r\nvar c__4679__auto___60701 = cljs.core.chunk_first(seq__60460_60700__$1);\r\nvar G__60702 = cljs.core.chunk_rest(seq__60460_60700__$1);\r\nvar G__60703 = c__4679__auto___60701;\r\nvar G__60704 = cljs.core.count(c__4679__auto___60701);\r\nvar G__60705 = (0);\r\nseq__60460_60690 = G__60702;\r\nchunk__60461_60691 = G__60703;\r\ncount__60462_60692 = G__60704;\r\ni__60463_60693 = G__60705;\r\ncontinue;\r\n} else {\r\nvar item_60713 = cljs.core.first(seq__60460_60700__$1);\r\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(operations,cljs.core.conj,((function (seq__60460_60690,chunk__60461_60691,count__60462_60692,i__60463_60693,seq__60392_60679,chunk__60393_60680,count__60394_60681,i__60395_60682,item_60713,seq__60460_60700__$1,temp__5753__auto___60699,send_queue_60684,vec__60457_60685,p_60686,serial_60687,front_60688,remote_60683,remote_names,operations){\r\nreturn (function (){\r\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.net_send_BANG_(app__$1,item_60713,remote_60683);\r\n});})(seq__60460_60690,chunk__60461_60691,count__60462_60692,i__60463_60693,seq__60392_60679,chunk__60393_60680,count__60394_60681,i__60395_60682,item_60713,seq__60460_60700__$1,temp__5753__auto___60699,send_queue_60684,vec__60457_60685,p_60686,serial_60687,front_60688,remote_60683,remote_names,operations))\r\n);\r\n\r\n\r\nvar G__60715 = cljs.core.next(seq__60460_60700__$1);\r\nvar G__60716 = null;\r\nvar G__60717 = (0);\r\nvar G__60718 = (0);\r\nseq__60460_60690 = G__60715;\r\nchunk__60461_60691 = G__60716;\r\ncount__60462_60692 = G__60717;\r\ni__60463_60693 = G__60718;\r\ncontinue;\r\n}\r\n} else {\r\n}\r\n}\r\nbreak;\r\n}\r\n\r\nif(cljs.core.truth_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing\",\"active?\",\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/active?\",-132674601).cljs$core$IFn$_invoke$arity$1(front_60688))){\r\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.reset_send_queue_BANG_(app__$1,remote_60683,serial_60687);\r\n} else {\r\nvar map__60467_60720 = com.fulcrologic.fulcro.algorithms.tx_processing.combine_sends(app__$1,remote_60683,serial_60687);\r\nvar map__60467_60721__$1 = cljs.core.__destructure_map(map__60467_60720);\r\nvar send_queue_60722__$1 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60467_60721__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-queue\",-1602123421));\r\nvar send_node_60723 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60467_60721__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-node\",1624648157));\r\nif(cljs.core.truth_(send_node_60723)){\r\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(operations,cljs.core.conj,((function (seq__60392_60679,chunk__60393_60680,count__60394_60681,i__60395_60682,map__60467_60720,map__60467_60721__$1,send_queue_60722__$1,send_node_60723,send_queue_60684,vec__60457_60685,p_60686,serial_60687,front_60688,remote_60683,remote_names,operations){\r\nreturn (function (){\r\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.net_send_BANG_(app__$1,send_node_60723,remote_60683);\r\n});})(seq__60392_60679,chunk__60393_60680,count__60394_60681,i__60395_60682,map__60467_60720,map__60467_60721__$1,send_queue_60722__$1,send_node_60723,send_queue_60684,vec__60457_60685,p_60686,serial_60687,front_60688,remote_60683,remote_names,operations))\r\n);\r\n} else {\r\n}\r\n\r\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.reset_send_queue_BANG_(app__$1,remote_60683,send_queue_60722__$1);\r\n}\r\n\r\n\r\nvar G__60724 = seq__60392_60679;\r\nvar G__60725 = chunk__60393_60680;\r\nvar G__60726 = count__60394_60681;\r\nvar G__60727 = (i__60395_60682 + (1));\r\nseq__60392_60679 = G__60724;\r\nchunk__60393_60680 = G__60725;\r\ncount__60394_60681 = G__60726;\r\ni__60395_60682 = G__60727;\r\ncontinue;\r\n} else {\r\nvar temp__5753__auto___60729 = cljs.core.seq(seq__60392_60679);\r\nif(temp__5753__auto___60729){\r\nvar seq__60392_60731__$1 = temp__5753__auto___60729;\r\nif(cljs.core.chunked_seq_QMARK_(seq__60392_60731__$1)){\r\nvar c__4679__auto___60734 = cljs.core.chunk_first(seq__60392_60731__$1);\r\nvar G__60735 = cljs.core.chunk_rest(seq__60392_60731__$1);\r\nvar G__60736 = c__4679__auto___60734;\r\nvar G__60737 = cljs.core.count(c__4679__auto___60734);\r\nvar G__60738 = (0);\r\nseq__60392_60679 = G__60735;\r\nchunk__60393_60680 = G__60736;\r\ncount__60394_60681 = G__60737;\r\ni__60395_60682 = G__60738;\r\ncontinue;\r\n} else {\r\nvar remote_60739 = cljs.core.first(seq__60392_60731__$1);\r\nvar send_queue_60740 = com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.send_queue(app__$1,remote_60739);\r\nvar vec__60469_60741 = com.fulcrologic.fulcro.algorithms.tx_processing.extract_parallel(send_queue_60740);\r\nvar p_60742 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__60469_60741,(0),null);\r\nvar serial_60743 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__60469_60741,(1),null);\r\nvar front_60744 = cljs.core.first(serial_60743);\r\nvar seq__60474_60746 = cljs.core.seq(p_60742);\r\nvar chunk__60475_60747 = null;\r\nvar count__60476_60748 = (0);\r\nvar i__60477_60749 = (0);\r\nwhile(true){\r\nif((i__60477_60749 < count__60476_60748)){\r\nvar item_60750 = chunk__60475_60747.cljs$core$IIndexed$_nth$arity$2(null,i__60477_60749);\r\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(operations,cljs.core.conj,((function (seq__60474_60746,chunk__60475_60747,count__60476_60748,i__60477_60749,seq__60392_60679,chunk__60393_60680,count__60394_60681,i__60395_60682,item_60750,send_queue_60740,vec__60469_60741,p_60742,serial_60743,front_60744,remote_60739,seq__60392_60731__$1,temp__5753__auto___60729,remote_names,operations){\r\nreturn (function (){\r\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.net_send_BANG_(app__$1,item_60750,remote_60739);\r\n});})(seq__60474_60746,chunk__60475_60747,count__60476_60748,i__60477_60749,seq__60392_60679,chunk__60393_60680,count__60394_60681,i__60395_60682,item_60750,send_queue_60740,vec__60469_60741,p_60742,serial_60743,front_60744,remote_60739,seq__60392_60731__$1,temp__5753__auto___60729,remote_names,operations))\r\n);\r\n\r\n\r\nvar G__60751 = seq__60474_60746;\r\nvar G__60752 = chunk__60475_60747;\r\nvar G__60753 = count__60476_60748;\r\nvar G__60754 = (i__60477_60749 + (1));\r\nseq__60474_60746 = G__60751;\r\nchunk__60475_60747 = G__60752;\r\ncount__60476_60748 = G__60753;\r\ni__60477_60749 = G__60754;\r\ncontinue;\r\n} else {\r\nvar temp__5753__auto___60755__$1 = cljs.core.seq(seq__60474_60746);\r\nif(temp__5753__auto___60755__$1){\r\nvar seq__60474_60756__$1 = temp__5753__auto___60755__$1;\r\nif(cljs.core.chunked_seq_QMARK_(seq__60474_60756__$1)){\r\nvar c__4679__auto___60757 = cljs.core.chunk_first(seq__60474_60756__$1);\r\nvar G__60758 = cljs.core.chunk_rest(seq__60474_60756__$1);\r\nvar G__60759 = c__4679__auto___60757;\r\nvar G__60760 = cljs.core.count(c__4679__auto___60757);\r\nvar G__60761 = (0);\r\nseq__60474_60746 = G__60758;\r\nchunk__60475_60747 = G__60759;\r\ncount__60476_60748 = G__60760;\r\ni__60477_60749 = G__60761;\r\ncontinue;\r\n} else {\r\nvar item_60762 = cljs.core.first(seq__60474_60756__$1);\r\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(operations,cljs.core.conj,((function (seq__60474_60746,chunk__60475_60747,count__60476_60748,i__60477_60749,seq__60392_60679,chunk__60393_60680,count__60394_60681,i__60395_60682,item_60762,seq__60474_60756__$1,temp__5753__auto___60755__$1,send_queue_60740,vec__60469_60741,p_60742,serial_60743,front_60744,remote_60739,seq__60392_60731__$1,temp__5753__auto___60729,remote_names,operations){\r\nreturn (function (){\r\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.net_send_BANG_(app__$1,item_60762,remote_60739);\r\n});})(seq__60474_60746,chunk__60475_60747,count__60476_60748,i__60477_60749,seq__60392_60679,chunk__60393_60680,count__60394_60681,i__60395_60682,item_60762,seq__60474_60756__$1,temp__5753__auto___60755__$1,send_queue_60740,vec__60469_60741,p_60742,serial_60743,front_60744,remote_60739,seq__60392_60731__$1,temp__5753__auto___60729,remote_names,operations))\r\n);\r\n\r\n\r\nvar G__60763 = cljs.core.next(seq__60474_60756__$1);\r\nvar G__60764 = null;\r\nvar G__60765 = (0);\r\nvar G__60766 = (0);\r\nseq__60474_60746 = G__60763;\r\nchunk__60475_60747 = G__60764;\r\ncount__60476_60748 = G__60765;\r\ni__60477_60749 = G__60766;\r\ncontinue;\r\n}\r\n} else {\r\n}\r\n}\r\nbreak;\r\n}\r\n\r\nif(cljs.core.truth_(new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing\",\"active?\",\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/active?\",-132674601).cljs$core$IFn$_invoke$arity$1(front_60744))){\r\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.reset_send_queue_BANG_(app__$1,remote_60739,serial_60743);\r\n} else {\r\nvar map__60482_60768 = com.fulcrologic.fulcro.algorithms.tx_processing.combine_sends(app__$1,remote_60739,serial_60743);\r\nvar map__60482_60769__$1 = cljs.core.__destructure_map(map__60482_60768);\r\nvar send_queue_60770__$1 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60482_60769__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-queue\",-1602123421));\r\nvar send_node_60771 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60482_60769__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"send-node\",\"com.fulcrologic.fulcro.algorithms.tx-processing/send-node\",1624648157));\r\nif(cljs.core.truth_(send_node_60771)){\r\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(operations,cljs.core.conj,((function (seq__60392_60679,chunk__60393_60680,count__60394_60681,i__60395_60682,map__60482_60768,map__60482_60769__$1,send_queue_60770__$1,send_node_60771,send_queue_60740,vec__60469_60741,p_60742,serial_60743,front_60744,remote_60739,seq__60392_60731__$1,temp__5753__auto___60729,remote_names,operations){\r\nreturn (function (){\r\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.net_send_BANG_(app__$1,send_node_60771,remote_60739);\r\n});})(seq__60392_60679,chunk__60393_60680,count__60394_60681,i__60395_60682,map__60482_60768,map__60482_60769__$1,send_queue_60770__$1,send_node_60771,send_queue_60740,vec__60469_60741,p_60742,serial_60743,front_60744,remote_60739,seq__60392_60731__$1,temp__5753__auto___60729,remote_names,operations))\r\n);\r\n} else {\r\n}\r\n\r\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.reset_send_queue_BANG_(app__$1,remote_60739,send_queue_60770__$1);\r\n}\r\n\r\n\r\nvar G__60772 = cljs.core.next(seq__60392_60731__$1);\r\nvar G__60773 = null;\r\nvar G__60774 = (0);\r\nvar G__60775 = (0);\r\nseq__60392_60679 = G__60772;\r\nchunk__60393_60680 = G__60773;\r\ncount__60394_60681 = G__60774;\r\ni__60395_60682 = G__60775;\r\ncontinue;\r\n}\r\n} else {\r\n}\r\n}\r\nbreak;\r\n}\r\n\r\nvar seq__60483 = cljs.core.seq(cljs.core.deref(operations));\r\nvar chunk__60484 = null;\r\nvar count__60485 = (0);\r\nvar i__60486 = (0);\r\nwhile(true){\r\nif((i__60486 < count__60485)){\r\nvar op = chunk__60484.cljs$core$IIndexed$_nth$arity$2(null,i__60486);\r\n(op.cljs$core$IFn$_invoke$arity$0 ? op.cljs$core$IFn$_invoke$arity$0() : op.call(null));\r\n\r\n\r\nvar G__60777 = seq__60483;\r\nvar G__60778 = chunk__60484;\r\nvar G__60779 = count__60485;\r\nvar G__60780 = (i__60486 + (1));\r\nseq__60483 = G__60777;\r\nchunk__60484 = G__60778;\r\ncount__60485 = G__60779;\r\ni__60486 = G__60780;\r\ncontinue;\r\n} else {\r\nvar temp__5753__auto__ = cljs.core.seq(seq__60483);\r\nif(temp__5753__auto__){\r\nvar seq__60483__$1 = temp__5753__auto__;\r\nif(cljs.core.chunked_seq_QMARK_(seq__60483__$1)){\r\nvar c__4679__auto__ = cljs.core.chunk_first(seq__60483__$1);\r\nvar G__60781 = cljs.core.chunk_rest(seq__60483__$1);\r\nvar G__60782 = c__4679__auto__;\r\nvar G__60783 = cljs.core.count(c__4679__auto__);\r\nvar G__60784 = (0);\r\nseq__60483 = G__60781;\r\nchunk__60484 = G__60782;\r\ncount__60485 = G__60783;\r\ni__60486 = G__60784;\r\ncontinue;\r\n} else {\r\nvar op = cljs.core.first(seq__60483__$1);\r\n(op.cljs$core$IFn$_invoke$arity$0 ? op.cljs$core$IFn$_invoke$arity$0() : op.call(null));\r\n\r\n\r\nvar G__60785 = cljs.core.next(seq__60483__$1);\r\nvar G__60786 = null;\r\nvar G__60787 = (0);\r\nvar G__60788 = (0);\r\nseq__60483 = G__60785;\r\nchunk__60484 = G__60786;\r\ncount__60485 = G__60787;\r\ni__60486 = G__60788;\r\ncontinue;\r\n}\r\n} else {\r\nreturn null;\r\n}\r\n}\r\nbreak;\r\n}\r\n});\r\n/**\r\n * Run through the active queue and do a processing step.\r\n */\r\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.process_queue_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$synchronous_tx_processing$process_queue_BANG_(p__60491){\r\nvar map__60492 = p__60491;\r\nvar map__60492__$1 = cljs.core.__destructure_map(map__60492);\r\nvar app__$1 = map__60492__$1;\r\nvar state_atom = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60492__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"state-atom\",\"com.fulcrologic.fulcro.application/state-atom\",648128366));\r\nvar runtime_atom = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60492__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"runtime-atom\",\"com.fulcrologic.fulcro.application/runtime-atom\",-1167397772));\r\nvar old_queue = com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.active_queue(app__$1);\r\nvar new_queue = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function com$fulcrologic$fulcro$algorithms$tx_processing$synchronous_tx_processing$process_queue_BANG__$__STAR_pstep(new_queue,n){\r\nvar temp__5751__auto__ = com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.process_tx_node_BANG_(app__$1,n);\r\nif(cljs.core.truth_(temp__5751__auto__)){\r\nvar new_node = temp__5751__auto__;\r\nreturn cljs.core.conj.cljs$core$IFn$_invoke$arity$2(new_queue,new_node);\r\n} else {\r\nreturn new_queue;\r\n}\r\n}),cljs.core.PersistentVector.EMPTY,old_queue);\r\nvar accumulate = (function (r,items){\r\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.set(r),items);\r\n});\r\nvar remotes = com.fulcrologic.fulcro.algorithms.tx_processing.app__GT_remote_names(app__$1);\r\nvar explicit_refresh = com.fulcrologic.fulcro.algorithms.tx_processing.requested_refreshes(app__$1,new_queue);\r\nvar remotes_active_QMARK_ = com.fulcrologic.fulcro.algorithms.tx_processing.active_remotes(new_queue,remotes);\r\nif(cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(old_queue,com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.active_queue(app__$1))){\r\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$11(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing\",null,325,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay((function (){\r\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"Old queue changed! See https://book.fulcrologic.com/#err-stp-old-queue-chng\"], null);\r\n}),null)),null,-834674481,null);\r\n} else {\r\n}\r\n\r\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(state_atom,cljs.core.assoc,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"active-remotes\",\"com.fulcrologic.fulcro.application/active-remotes\",873903005),remotes_active_QMARK_);\r\n\r\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.reset_active_queue_BANG_(app__$1,new_queue);\r\n\r\nif(cljs.core.seq(explicit_refresh)){\r\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$variadic(runtime_atom,cljs.core.update,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"to-refresh\",\"com.fulcrologic.fulcro.application/to-refresh\",-967758829),accumulate,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([explicit_refresh], 0));\r\n} else {\r\n}\r\n\r\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.process_send_queues_BANG_(app__$1);\r\n\r\nreturn null;\r\n});\r\n/**\r\n * Returns true if the submission queue has work on it that can proceed without any restrictions.\r\n */\r\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.available_work_QMARK_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$synchronous_tx_processing$available_work_QMARK_(app__$1){\r\nvar map__60515 = cljs.core.group_by(cljs.core.comp.cljs$core$IFn$_invoke$arity$3(cljs.core.boolean$,new cljs.core.Keyword(null,\"after-render?\",\"after-render?\",595994030),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"options\",\"com.fulcrologic.fulcro.algorithms.tx-processing/options\",2016767420)),com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.submission_queue(app__$1));\r\nvar map__60515__$1 = cljs.core.__destructure_map(map__60515);\r\nvar ready = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60515__$1,false);\r\nreturn cljs.core.boolean$(cljs.core.seq(ready));\r\n});\r\n/**\r\n * Activate all of the transactions that have been submitted since the last activation. After the items are activated\r\n *   a single processing step will run for the active queue.\r\n * \r\n *   Activation can be blocked by the tx-node options for things like waiting for the next render frame.\r\n */\r\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.activate_submissions_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$synchronous_tx_processing$activate_submissions_BANG_(app__$1){\r\nvar map__60532 = cljs.core.group_by(cljs.core.comp.cljs$core$IFn$_invoke$arity$3(cljs.core.boolean$,new cljs.core.Keyword(null,\"after-render?\",\"after-render?\",595994030),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"options\",\"com.fulcrologic.fulcro.algorithms.tx-processing/options\",2016767420)),com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.submission_queue(app__$1));\r\nvar map__60532__$1 = cljs.core.__destructure_map(map__60532);\r\nvar blocked = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60532__$1,true);\r\nvar ready = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60532__$1,false);\r\nvar _ = com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.reset_submission_queue_BANG_(app__$1,cljs.core.vec(blocked));\r\nvar dispatched_nodes = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2((function (p1__60518_SHARP_){\r\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.dispatch_elements(p1__60518_SHARP_,com.fulcrologic.fulcro.algorithms.tx_processing.build_env.cljs$core$IFn$_invoke$arity$2(app__$1,p1__60518_SHARP_),com.fulcrologic.fulcro.mutations.mutate);\r\n}),ready);\r\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.swap_active_queue_BANG_.cljs$core$IFn$_invoke$arity$variadic(app__$1,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.fnil.cljs$core$IFn$_invoke$arity$2(cljs.core.into,cljs.core.PersistentVector.EMPTY),dispatched_nodes], 0));\r\n\r\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.process_queue_BANG_(app__$1);\r\n});\r\n/**\r\n * Runs the submission queue. If the submission queue's optimistic actions submit more to the submission queue, then those\r\n * are processed as well until the submission queue remains empty. This can start network requests.\r\n */\r\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.run_all_immediate_work_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$synchronous_tx_processing$run_all_immediate_work_BANG_(app__$1){\r\ntry{return com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.activate_submissions_BANG_(app__$1);\r\n}catch (e60541){var e = e60541;\r\nreturn taoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$11(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing\",null,358,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay((function (){\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [e,\"Error processing tx queue! See https://book.fulcrologic.com/#err-stp-err-processing-tx-q\"], null);\r\n}),null)),null,232696502,null);\r\n}});\r\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.run_queue_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$synchronous_tx_processing$run_queue_BANG_(app__$1,p__60555){\r\nwhile(true){\r\nvar map__60557 = p__60555;\r\nvar map__60557__$1 = cljs.core.__destructure_map(map__60557);\r\nvar options = map__60557__$1;\r\nvar component = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60557__$1,new cljs.core.Keyword(null,\"component\",\"component\",1555936782));\r\nvar synchronous_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60557__$1,new cljs.core.Keyword(null,\"synchronous?\",\"synchronous?\",1705588391));\r\nwhile(true){\r\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.run_all_immediate_work_BANG_(app__$1);\r\n\r\nif(com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.available_work_QMARK_(app__$1)){\r\ncontinue;\r\n} else {\r\n}\r\nbreak;\r\n}\r\n\r\nif(cljs.core.truth_((function (){var and__4251__auto__ = synchronous_QMARK_;\r\nif(cljs.core.truth_(and__4251__auto__)){\r\nreturn component;\r\n} else {\r\nreturn and__4251__auto__;\r\n}\r\n})())){\r\ncom.fulcrologic.fulcro.components.refresh_component_BANG_(component);\r\n} else {\r\nvar temp__5753__auto___60794 = com.fulcrologic.fulcro.algorithms.lookup.app_algorithm(app__$1,new cljs.core.Keyword(null,\"render!\",\"render!\",-1848688504));\r\nif(cljs.core.truth_(temp__5753__auto___60794)){\r\nvar render_BANG__60795 = temp__5753__auto___60794;\r\n(render_BANG__60795.cljs$core$IFn$_invoke$arity$2 ? render_BANG__60795.cljs$core$IFn$_invoke$arity$2(app__$1,options) : render_BANG__60795.call(null,app__$1,options));\r\n} else {\r\n}\r\n}\r\n\r\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.release_post_render_tasks_BANG_(app__$1);\r\n\r\nif(com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.available_work_QMARK_(app__$1)){\r\nvar G__60796 = app__$1;\r\nvar G__60797 = cljs.core.PersistentArrayMap.EMPTY;\r\napp__$1 = G__60796;\r\np__60555 = G__60797;\r\ncontinue;\r\n} else {\r\nreturn null;\r\n}\r\nbreak;\r\n}\r\n});\r\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.sync_tx_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$synchronous_tx_processing$sync_tx_BANG_(var_args){\r\nvar args__4870__auto__ = [];\r\nvar len__4864__auto___60799 = arguments.length;\r\nvar i__4865__auto___60800 = (0);\r\nwhile(true){\r\nif((i__4865__auto___60800 < len__4864__auto___60799)){\r\nargs__4870__auto__.push((arguments[i__4865__auto___60800]));\r\n\r\nvar G__60801 = (i__4865__auto___60800 + (1));\r\ni__4865__auto___60800 = G__60801;\r\ncontinue;\r\n} else {\r\n}\r\nbreak;\r\n}\r\n\r\nvar argseq__4871__auto__ = ((((0) < args__4870__auto__.length))?(new cljs.core.IndexedSeq(args__4870__auto__.slice((0)),(0),null)):null);\r\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.sync_tx_BANG_.cljs$core$IFn$_invoke$arity$variadic(argseq__4871__auto__);\r\n});\r\n\r\n(com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.sync_tx_BANG_.cljs$core$IFn$_invoke$arity$variadic = (function (args){\r\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2(\"BREAKING CHANGE. Please use `with-synchronous-transaction` to add sync transaction support to your Fulcro app\",cljs.core.PersistentArrayMap.EMPTY);\r\n}));\r\n\r\n(com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.sync_tx_BANG_.cljs$lang$maxFixedArity = (0));\r\n\r\n/** @this {Function} */\r\n(com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.sync_tx_BANG_.cljs$lang$applyTo = (function (seq60568){\r\nvar self__4852__auto__ = this;\r\nreturn self__4852__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq60568));\r\n}));\r\n\r\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.submit_sync_tx_BANG_ = (function com$fulcrologic$fulcro$algorithms$tx_processing$synchronous_tx_processing$submit_sync_tx_BANG_(var_args){\r\nvar G__60573 = arguments.length;\r\nswitch (G__60573) {\r\ncase 2:\r\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.submit_sync_tx_BANG_.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\r\n\r\nbreak;\r\ncase 3:\r\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.submit_sync_tx_BANG_.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\r\n\r\nbreak;\r\ndefault:\r\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\r\n\r\n}\r\n});\r\n\r\n(com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.submit_sync_tx_BANG_.cljs$core$IFn$_invoke$arity$2 = (function (app__$1,tx){\r\nreturn com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.submit_sync_tx_BANG_.cljs$core$IFn$_invoke$arity$3(app__$1,tx,cljs.core.PersistentArrayMap.EMPTY);\r\n}));\r\n\r\n(com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.submit_sync_tx_BANG_.cljs$core$IFn$_invoke$arity$3 = (function (p__60576,tx,options){\r\nvar map__60577 = p__60576;\r\nvar map__60577__$1 = cljs.core.__destructure_map(map__60577);\r\nvar app__$1 = map__60577__$1;\r\nvar runtime_atom = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60577__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"runtime-atom\",\"com.fulcrologic.fulcro.application/runtime-atom\",-1167397772));\r\nvar map__60578 = options;\r\nvar map__60578__$1 = cljs.core.__destructure_map(map__60578);\r\nvar options__$1 = map__60578__$1;\r\nvar refresh = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60578__$1,new cljs.core.Keyword(null,\"refresh\",\"refresh\",1947415525));\r\nvar only_refresh = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60578__$1,new cljs.core.Keyword(null,\"only-refresh\",\"only-refresh\",548241249));\r\nvar ref = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__60578__$1,new cljs.core.Keyword(null,\"ref\",\"ref\",1289896967));\r\nvar follow_on_reads = cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentHashSet.EMPTY,cljs.core.filter.cljs$core$IFn$_invoke$arity$2((function (p1__60570_SHARP_){\r\nreturn (((p1__60570_SHARP_ instanceof cljs.core.Keyword)) || (edn_query_language.core.ident_QMARK_(p1__60570_SHARP_)));\r\n}),tx));\r\nvar node = com.fulcrologic.fulcro.algorithms.tx_processing.tx_node.cljs$core$IFn$_invoke$arity$2(tx,options__$1);\r\nvar accumulate = (function (r,items){\r\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.set(r),items);\r\n});\r\nvar refresh__$1 = (function (){var G__60580 = cljs.core.set(refresh);\r\nvar G__60580__$1 = ((cljs.core.seq(follow_on_reads))?cljs.core.into.cljs$core$IFn$_invoke$arity$2(G__60580,follow_on_reads):G__60580);\r\nif(cljs.core.truth_(ref)){\r\nreturn cljs.core.conj.cljs$core$IFn$_invoke$arity$2(G__60580__$1,ref);\r\n} else {\r\nreturn G__60580__$1;\r\n}\r\n})();\r\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.swap_submission_queue_BANG_.cljs$core$IFn$_invoke$arity$variadic(app__$1,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.fnil.cljs$core$IFn$_invoke$arity$2(cljs.core.conj,cljs.core.PersistentVector.EMPTY),node], 0));\r\n\r\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(runtime_atom,(function (s){\r\nvar G__60582 = s;\r\nvar G__60582__$1 = ((cljs.core.seq(refresh__$1))?cljs.core.update.cljs$core$IFn$_invoke$arity$4(G__60582,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"to-refresh\",\"com.fulcrologic.fulcro.application/to-refresh\",-967758829),accumulate,refresh__$1):G__60582);\r\nif(cljs.core.seq(only_refresh)){\r\nreturn cljs.core.update.cljs$core$IFn$_invoke$arity$4(G__60582__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"only-refresh\",\"com.fulcrologic.fulcro.application/only-refresh\",1300408206),accumulate,only_refresh);\r\n} else {\r\nreturn G__60582__$1;\r\n}\r\n}));\r\n\r\nif(com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.in_transaction_QMARK_(app__$1)){\r\n} else {\r\nvar id__47375__auto___60807 = new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"id\",\"com.fulcrologic.fulcro.application/id\",-2008968625).cljs$core$IFn$_invoke$arity$1(app__$1);\r\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.apps_in_tx,cljs.core.update,id__47375__auto___60807,cljs.core.fnil.cljs$core$IFn$_invoke$arity$2(cljs.core.inc,(0)));\r\n\r\ntry{com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.run_queue_BANG_(app__$1,options__$1);\r\n}finally {cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.apps_in_tx,cljs.core.update,id__47375__auto___60807,cljs.core.dec);\r\n}}\r\n\r\nreturn new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing\",\"id\",\"com.fulcrologic.fulcro.algorithms.tx-processing/id\",1199810423).cljs$core$IFn$_invoke$arity$1(node);\r\n}));\r\n\r\n(com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.submit_sync_tx_BANG_.cljs$lang$maxFixedArity = 3);\r\n\r\n/**\r\n * [app abort-id]\r\n * \r\n * Implementation of abort when using this tx processing\r\n */\r\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.abort_BANG_ = com.fulcrologic.fulcro.algorithms.tx_processing.abort_BANG_;\r\n/**\r\n * Installs synchronous transaction processing on a fulcro application.\r\n * \r\n *   ```\r\n *   (defonce app (stx/with-synchronous-transactions\r\n *               (app/fulcro-app {...})))\r\n *   ```\r\n * \r\n *   This plug-in attempts to do as much work as possible synchronously, including the processing of \"remotes\" that\r\n *   can behave synchronously. This processing system\r\n *   preserves transactional ordering semantics for nested submissions, but cannot guarantee that the overall sequence of\r\n *   operations will exactly match what you'd see if using the standard tx processing.\r\n * \r\n *   The options map you can pass to `transact!` supports most of the same things as the standard tx processing, with the significant exception of\r\n *   `:optimistic? false` (pessimistic transactions). It also *always* assumes synchronous operation, thought the\r\n *   `synchronous?` option (if used) does imply that only the current component should be refreshed in the UI.\r\n * \r\n *   - `:ref` - ident. The component ident to include in the transaction env.\r\n *   - `:component` - React element. The instance of the component that should appear in the transaction env.\r\n *   - `:synchronous?` - When true, causes the rendering to only refresh the calling component (if possible), since the implication\r\n *   is for fast-as-possible refresh semantics, even though this tx processing is already sync.\r\n *   - `:refresh` - A hint. Vector containing idents (of components) and keywords (of props). Things that have changed and should be re-rendered\r\n *  on screen. Only necessary when the underlying rendering algorithm won't auto-detect, such as when UI is derived from the\r\n *  state of other components or outside of the directly queried props. Interpretation depends on the renderer selected:\r\n *  The ident-optimized render treats these as \"extras\".\r\n *   - `:only-refresh` - A hint. Vector of idents/keywords.  If the underlying configured rendering algorithm supports it: The\r\n *  components using these are the *only* things that will be refreshed in the UI, and they may be refreshed immediately on\r\n *  `transact!`. This can be used to avoid the overhead of looking for stale data when you know exactly what\r\n *  you want to refresh on screen as an extra optimization. Idents are *not* checked against queries.\r\n * \r\n *   If the `options` include `:ref` (which comp/transact! sets), then it will be auto-included on the `:refresh` list.\r\n * \r\n *   Returns the transaction ID of the submitted transaction.\r\n *   \r\n */\r\ncom.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.with_synchronous_transactions = (function com$fulcrologic$fulcro$algorithms$tx_processing$synchronous_tx_processing$with_synchronous_transactions(app__$1){\r\nvar remotes = cljs.core.keys(new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"remotes\",\"com.fulcrologic.fulcro.application/remotes\",1823703517).cljs$core$IFn$_invoke$arity$1(cljs.core.deref(new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"runtime-atom\",\"com.fulcrologic.fulcro.application/runtime-atom\",-1167397772).cljs$core$IFn$_invoke$arity$1(app__$1))));\r\nvar send_queues = cljs.core.zipmap(remotes,cljs.core.repeatedly.cljs$core$IFn$_invoke$arity$1((function (){\r\nreturn cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentVector.EMPTY);\r\n})));\r\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(cljs.core.update.cljs$core$IFn$_invoke$arity$variadic(app__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"algorithms\",\"com.fulcrologic.fulcro.application/algorithms\",-397334538),cljs.core.assoc,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithm\",\"tx!\",\"com.fulcrologic.fulcro.algorithm/tx!\",1081877133),com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.submit_sync_tx_BANG_,new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithm\",\"abort!\",\"com.fulcrologic.fulcro.algorithm/abort!\",1698846123),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.abort_BANG_], 0)),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing\",\"config\",\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/config\",-1878584178),new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing\",\"submission-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/submission-queue\",-1259886916),cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentVector.EMPTY),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing\",\"post-processing-steps\",\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/post-processing-steps\",1202501796),cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentVector.EMPTY),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing\",\"active-queue\",\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/active-queue\",-1020610588),cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentVector.EMPTY),new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing\",\"send-queues\",\"com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/send-queues\",-727474733),send_queues], null));\r\n});\r\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:doc","A transaction processing system that does as much synchronously as possible, and removes various elements\n   of complexity that were inherited from Fulcro 2 in the standard tx processing.\n\n   See `with-synchronous-transactions` for how to install it.\n\n   This tx processing system does as much work synchronously as possible, though it does try to preserve the\n   call-order *semantics* of the standard transaction processing: That is to say that if the optimistic action\n   of a transaction submits a new transaction then that new submission will run *after* the current already-in-progress\n   transaction has finished processing:\n\n   ```\n   (defmutation g [_]\n     (action [{:keys [state]}] (swap! state ...))\n     (ok-action [{:keys [app]}] (transact! app [(h)]))\n     (remote [_] true))\n\n   (defmutation f [_]\n     (action [{:keys [state app]}]\n       (swap! state ...)\n       (transact! app [(g)])))\n\n   ...\n   (dom/a {:onClick (fn []\n                      (transact! this [(f {:x 1})])\n                      (transact! this [(f {:x 2})])\n                      (transact! this [(f {:x 3})])))\n   ```\n\n   A user clicking the above link with std processing could see any of the following:\n\n   ```\n   f,f,f,g,g,g,h,h,h\n   f,f,f,g,h,g,g,h,h\n   f,f,f,g,g,h,g,h,h\n   etc.\n   ```\n\n   In sync tx processing, you would more likely see:\n\n   ```\n   f,g,f,g,f,g,h,h,h\n   ```\n\n   because there is *no guarantee* in Fulcro's semantics about the space between two calls to `transact!`. If your\n   application relies on the groupings that happen with the standard tx processing (submissions while holding a thread\n   go into the queue first) then your application may break when you switch to sync processing.\n\n   Note that transactions *are* treated as atomically as possible. So, if you want a specific grouping you should submit\n   it as a single tx:\n\n   ```\n   (transact! [(f) (g)])\n   (transact! [(f) (g)])\n   ```\n\n   is guaranteed to do `f,g,f,g`, and never `f,f,g,g`, though it is still possible to see `f,g,h,f,g,h`.\n\n   This sync transaction processing system allows you to push most (if not all) behavior of even nested transactions into a single\n   synchronous operation. This will lead to significant improvements in the snappiness of the UI for optimistic operation\n   and should also reduce over-rendering (multiple calls to render due to multiple async operations).\n\n   If your remote is mocked as a synchronous operation, then you can also leverage this tx processor to enable\n   completely synchronous testing of your headless Fulcro application.\n\n   WARNING: This tx processing system does *not* support:\n\n   * `ptransact!`: Pessimistic transactions are a legacy feature of Fulcro 2 that is no longer necessary. New\n   applications should not use the feature, and this sync tx processing system does not support it. The call\n   will succeed, but will behave as a normal `transact!`.\n   ","~:file","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",78],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$clojure.spec.alpha","~$cljs.spec.alpha","~$clojure.core.async","~$cljs.core.async","~$clojure.pprint","~$cljs.pprint"],"~:use-macros",["^ ","~$in-transaction","~$com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing","~$ido","~$com.fulcrologic.fulcro.inspect.inspect-client","~$ilet","^I"],"~:excludes",["~#set",[]],"~:macros",["^ ","^F",["^ ","~:arglists",["~#list",[["~$app-sym","~$&","~$body"]]],"^8",89,"^9",4,"^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","~:name","~$com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/in-transaction","~:ns","^G","~:macro",true]],"^R","^G","~:reader-aliases",["^ "],"~:op","^T","~:imports",null,"~:requires",["^ ","~$ah","~$com.fulcrologic.fulcro.algorithms.lookup","~$set","~$clojure.set","~$edn-query-language.core","^12","~$log","~$taoensso.timbre","~$comp","~$com.fulcrologic.fulcro.components","~$eql","^12","~$cljs.core","^18","^I","^I","~$goog","^19","^11","^11","~$m","~$com.fulcrologic.fulcro.mutations","~$com.fulcrologic.fulcro.algorithms.scheduling","^1;","~$sched","^1;","~$txn","~$com.fulcrologic.fulcro.algorithms.tx-processing","^1:","^1:","^[","^[","^1>","^1>","^16","^16","^14","^14"],"~:seen",["^L",["~:require","~:require-macros"]],"~:uses",["^ ","^H","^I","^J","^I"],"^1A",["^ ","^13","^14","^15","^16","^18","^18","^I","^I","~$m","^1:","^1:","^1:","^16","^16","^14","^14","^G","^G"],"~:form",["^O",["~$ns","^G","A transaction processing system that does as much synchronously as possible, and removes various elements\n   of complexity that were inherited from Fulcro 2 in the standard tx processing.\n\n   See `with-synchronous-transactions` for how to install it.\n\n   This tx processing system does as much work synchronously as possible, though it does try to preserve the\n   call-order *semantics* of the standard transaction processing: That is to say that if the optimistic action\n   of a transaction submits a new transaction then that new submission will run *after* the current already-in-progress\n   transaction has finished processing:\n\n   ```\n   (defmutation g [_]\n     (action [{:keys [state]}] (swap! state ...))\n     (ok-action [{:keys [app]}] (transact! app [(h)]))\n     (remote [_] true))\n\n   (defmutation f [_]\n     (action [{:keys [state app]}]\n       (swap! state ...)\n       (transact! app [(g)])))\n\n   ...\n   (dom/a {:onClick (fn []\n                      (transact! this [(f {:x 1})])\n                      (transact! this [(f {:x 2})])\n                      (transact! this [(f {:x 3})])))\n   ```\n\n   A user clicking the above link with std processing could see any of the following:\n\n   ```\n   f,f,f,g,g,g,h,h,h\n   f,f,f,g,h,g,g,h,h\n   f,f,f,g,g,h,g,h,h\n   etc.\n   ```\n\n   In sync tx processing, you would more likely see:\n\n   ```\n   f,g,f,g,f,g,h,h,h\n   ```\n\n   because there is *no guarantee* in Fulcro's semantics about the space between two calls to `transact!`. If your\n   application relies on the groupings that happen with the standard tx processing (submissions while holding a thread\n   go into the queue first) then your application may break when you switch to sync processing.\n\n   Note that transactions *are* treated as atomically as possible. So, if you want a specific grouping you should submit\n   it as a single tx:\n\n   ```\n   (transact! [(f) (g)])\n   (transact! [(f) (g)])\n   ```\n\n   is guaranteed to do `f,g,f,g`, and never `f,f,g,g`, though it is still possible to see `f,g,h,f,g,h`.\n\n   This sync transaction processing system allows you to push most (if not all) behavior of even nested transactions into a single\n   synchronous operation. This will lead to significant improvements in the snappiness of the UI for optimistic operation\n   and should also reduce over-rendering (multiple calls to render due to multiple async operations).\n\n   If your remote is mocked as a synchronous operation, then you can also leverage this tx processor to enable\n   completely synchronous testing of your headless Fulcro application.\n\n   WARNING: This tx processing system does *not* support:\n\n   * `ptransact!`: Pessimistic transactions are a legacy feature of Fulcro 2 that is no longer necessary. New\n   applications should not use the feature, and this sync tx processing system does not support it. The call\n   will succeed, but will behave as a normal `transact!`.\n   ",["^O",["^1A",["^G","~:refer",["^F"]]]],["^O",["^1@",["^11","~:as","^10"],["^1>","^1F","^1="],["^1;","^1F","^1<"],["^[","^1F","^Z"],["^1:","^1F","~$m"],["^16","^1F","^15"],["^I","^1E",["^H","^J"]],["^12","^1F","^17"],["^14","^1F","^13"]]]]],"~:flags",["^ ","^1A",["^L",[]],"^1@",["^L",[]]],"~:js-deps",["^ "],"~:deps",["^19","^18","^11","^1>","^1;","^[","^1:","^16","^I","^12","^14"]],"^T","^G","~:resource-id",["~:shadow.build.classpath/resource","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc"],"~:compiled-at",1676260446434,"^V",["^ ","^Z","^[","^10","^11","^12","^12","^13","^14","^15","^16","^17","^12","^18","^18","^I","^I","^19","^19","^11","^11","~$m","^1:","^1;","^1;","^1<","^1;","^1=","^1>","^1:","^1:","^[","^[","^1>","^1>","^16","^16","^14","^14","^G","^G"],"~:resource-name","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","~:warnings",[],"~:source","(ns com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing\n  \"A transaction processing system that does as much synchronously as possible, and removes various elements\n   of complexity that were inherited from Fulcro 2 in the standard tx processing.\n\n   See `with-synchronous-transactions` for how to install it.\n\n   This tx processing system does as much work synchronously as possible, though it does try to preserve the\n   call-order *semantics* of the standard transaction processing: That is to say that if the optimistic action\n   of a transaction submits a new transaction then that new submission will run *after* the current already-in-progress\n   transaction has finished processing:\n\n   ```\n   (defmutation g [_]\n     (action [{:keys [state]}] (swap! state ...))\n     (ok-action [{:keys [app]}] (transact! app [(h)]))\n     (remote [_] true))\n\n   (defmutation f [_]\n     (action [{:keys [state app]}]\n       (swap! state ...)\n       (transact! app [(g)])))\n\n   ...\n   (dom/a {:onClick (fn []\n                      (transact! this [(f {:x 1})])\n                      (transact! this [(f {:x 2})])\n                      (transact! this [(f {:x 3})])))\n   ```\n\n   A user clicking the above link with std processing could see any of the following:\n\n   ```\n   f,f,f,g,g,g,h,h,h\n   f,f,f,g,h,g,g,h,h\n   f,f,f,g,g,h,g,h,h\n   etc.\n   ```\n\n   In sync tx processing, you would more likely see:\n\n   ```\n   f,g,f,g,f,g,h,h,h\n   ```\n\n   because there is *no guarantee* in Fulcro's semantics about the space between two calls to `transact!`. If your\n   application relies on the groupings that happen with the standard tx processing (submissions while holding a thread\n   go into the queue first) then your application may break when you switch to sync processing.\n\n   Note that transactions *are* treated as atomically as possible. So, if you want a specific grouping you should submit\n   it as a single tx:\n\n   ```\n   (transact! [(f) (g)])\n   (transact! [(f) (g)])\n   ```\n\n   is guaranteed to do `f,g,f,g`, and never `f,f,g,g`, though it is still possible to see `f,g,h,f,g,h`.\n\n   This sync transaction processing system allows you to push most (if not all) behavior of even nested transactions into a single\n   synchronous operation. This will lead to significant improvements in the snappiness of the UI for optimistic operation\n   and should also reduce over-rendering (multiple calls to render due to multiple async operations).\n\n   If your remote is mocked as a synchronous operation, then you can also leverage this tx processor to enable\n   completely synchronous testing of your headless Fulcro application.\n\n   WARNING: This tx processing system does *not* support:\n\n   * `ptransact!`: Pessimistic transactions are a legacy feature of Fulcro 2 that is no longer necessary. New\n   applications should not use the feature, and this sync tx processing system does not support it. The call\n   will succeed, but will behave as a normal `transact!`.\n   \"\n  #?(:cljs (:require-macros [com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing :refer [in-transaction]]))\n  (:require\n    [clojure.set :as set]\n    [com.fulcrologic.fulcro.algorithms.tx-processing :as txn]\n    [com.fulcrologic.fulcro.algorithms.scheduling :as sched]\n    [com.fulcrologic.fulcro.algorithms.lookup :as ah]\n    [com.fulcrologic.fulcro.mutations :as m]\n    [com.fulcrologic.fulcro.components :as comp]\n    [com.fulcrologic.fulcro.inspect.inspect-client :refer [ido ilet]]\n    [edn-query-language.core :as eql]\n    [taoensso.timbre :as log]))\n\n(defonce apps-in-tx (atom {}))\n\n(declare run-queue! available-work?)\n\n#?(:clj\n   (defmacro in-transaction [app-sym & body]\n     `(let [id# (:com.fulcrologic.fulcro.application/id ~app-sym)]\n        (swap! apps-in-tx update id# (fnil inc 0))\n        (try\n          ~@body\n          (finally\n            (swap! apps-in-tx update id# dec))))))\n\n(defn top-level?\n  \"Returns true if the current thread is running non-nested transaction processing code.\"\n  [{:com.fulcrologic.fulcro.application/keys [id]}]\n  (= (-> apps-in-tx deref (get id 0)) 0))\n\n(defn swap-submission-queue! [app & args] (apply swap! (get-in app [::config ::submission-queue]) args))\n(defn reset-submission-queue! [app v] (reset! (get-in app [::config ::submission-queue]) v))\n(defn submission-queue [app] @(get-in app [::config ::submission-queue]))\n(defn swap-post-processing-steps! [app & args] (apply swap! (get-in app [::config ::post-processing-steps]) args))\n(defn reset-post-processing-steps! [app v] (reset! (get-in app [::config ::post-processing-steps]) v))\n(defn post-processing-steps [app] @(get-in app [::config ::post-processing-steps]))\n(defn swap-active-queue! [app & args] (apply swap! (get-in app [::config ::active-queue]) args))\n(defn reset-active-queue! [app v] (reset! (get-in app [::config ::active-queue]) v))\n(defn active-queue [app] @(get-in app [::config ::active-queue]))\n(defn swap-send-queue! [app remote & args] (apply swap! (get-in app [::config ::send-queues remote]) args))\n(defn reset-send-queue! [app remote v] (reset! (get-in app [::config ::send-queues remote]) v))\n(defn send-queue [app remote] @(get-in app [::config ::send-queues remote]))\n\n(defn run-after!\n  \"Add `f` as a function that will run after the current transaction has been fully processed.\"\n  [app f]\n  (swap-post-processing-steps! app (fnil conj []) f))\n\n(defn post-processing?\n  \"Is there post processing to do?\"\n  [app]\n  (boolean (seq (post-processing-steps app))))\n\n(defn do-post-processing!\n  \"Runs the queued post processing steps until the post-processing queue is empty.\"\n  [app]\n  (loop [steps (post-processing-steps app)]\n    (reset-post-processing-steps! app [])\n    (doseq [f steps]\n      (try\n        (f)\n        (catch #?(:clj Exception :cljs :default) e\n          (log/error e \"Post processing step failed. See https://book.fulcrologic.com/#err-stp-postproc-failed\"))))\n    (when-let [next-steps (seq (post-processing-steps app))]\n      (recur next-steps))))\n\n(defn in-transaction?\n  \"Returns true if the current thread is in the midst of running the optimistic actions of a new transaction.\"\n  [{:com.fulcrologic.fulcro.application/keys [id] :as app}]\n  (not= 0 (get @apps-in-tx id 0)))\n\n(defn release-post-render-tasks!\n  \"Should be called after the application renders to ensure that transactions blocked until the next render become\n   unblocked. Schedules an activation.\"\n  [app]\n  (swap-submission-queue! app (fn [queue] (mapv (fn [node] (update node ::txn/options dissoc :after-render?)) queue))))\n\n(defn dispatch-result!\n  \"Figure out the dispatch routine to trigger for the given network result.  If it exists, send the result\n  to it.\n\n  Returns the tx-element with the remote marked complete.\"\n  [app tx-node {::txn/keys [results dispatch desired-ast-nodes transmitted-ast-nodes original-ast-node] :as tx-element} remote]\n  (let [result  (get results remote)\n        handler (get dispatch :result-action)]\n    (when handler\n      (let [env (txn/build-env app tx-node {:dispatch        dispatch\n                                            :transacted-ast  original-ast-node\n                                            :mutation-ast    (get desired-ast-nodes remote)\n                                            :transmitted-ast (get transmitted-ast-nodes remote)\n                                            :result          result})]\n        (try\n          (handler env)\n          (catch #?(:cljs :default :clj Exception) e\n            (log/error e \"The result-action mutation handler for mutation\" (:dispatch-key original-ast-node) \"threw an exception. See https://book.fulcrologic.com/#err-stp-res-action-exc\"))))))\n  (update tx-element ::txn/complete? conj remote))\n\n(defn distribute-element-results!\n  \"Distribute results and mark the remotes for those elements as complete.\"\n  [app tx-node {:keys [::txn/results ::txn/complete?] :as tx-element}]\n  (reduce\n    (fn [new-element remote]\n      (if (complete? remote)\n        new-element\n        (dispatch-result! app tx-node new-element remote)))\n    tx-element\n    (keys results)))\n\n(defn- node-index [queue txn-id]\n  (let [n   (count queue)\n        idx (reduce\n              (fn [idx {:keys [::txn/id]}]\n                (if (= id txn-id)\n                  (reduced idx)\n                  (inc idx)))\n              0\n              queue)]\n    (when (< idx n)\n      idx)))\n\n(defn distribute-results!\n  \"Side-effects against the app state to distribute the result for txn-id element at ele-idx. This will call the result\n   handler and mark that remote as complete.\"\n  [app txn-id ele-idx]\n  (let [active-queue (active-queue app)\n        idx          (node-index active-queue txn-id)\n        tx-node      (get active-queue idx)]\n    (swap-active-queue! app update-in [idx ::txn/elements ele-idx]\n      #(distribute-element-results! app tx-node %))))\n\n(defn record-result!\n  \"Deal with a network result on the given txn/element.\"\n  ([app txn-id ele-idx remote result result-key]\n   (let [active-queue (active-queue app)\n         txn-idx      (node-index active-queue txn-id)\n         not-found?   (or (>= txn-idx (count active-queue)) (not= txn-id (::txn/id (get active-queue txn-idx))))]\n     (if not-found?\n       (log/error \"Network result for\" remote \"does not have a valid node on the active queue! See https://book.fulcrologic.com/#err-stp-res-lacks-valid-node\")\n       (do\n         (swap-active-queue! app assoc-in [txn-idx ::txn/elements ele-idx result-key remote] result)\n         (distribute-results! app txn-id ele-idx)))))\n  ([app txn-id ele-idx remote result]\n   (record-result! app txn-id ele-idx remote result ::txn/results)))\n\n(defn remove-send!\n  \"Removes the send node (if present) from the send queue on the given remote.\"\n  [app remote txn-id ele-idx]\n  (swap-send-queue! app remote (fn [old-queue]\n                                 (filterv (fn [{::txn/keys [id idx]}]\n                                            (not (and (= txn-id id) (= ele-idx idx)))) old-queue))))\n\n(defn add-send!\n  \"Generate a new send node and add it to the appropriate send queue.\"\n  [app {::txn/keys [id options] :as tx-node} ele-idx remote]\n  (let [update-handler (fn progress-handler* [result]\n                         (in-transaction app\n                           (record-result! app id ele-idx remote result ::txn/progress)\n                           (run-queue! app {})))\n        ast            (get-in tx-node [::txn/elements ele-idx ::txn/transmitted-ast-nodes remote])\n        handler        (fn result-handler* [result]\n                         (in-transaction app\n                           (record-result! app id ele-idx remote result)\n                           (remove-send! app remote id ele-idx)\n                           (run-queue! app {})))\n        send-node      {::txn/id             id\n                        ::txn/idx            ele-idx\n                        ::txn/ast            ast\n                        ::txn/options        options\n                        ::txn/active?        false\n                        ::txn/result-handler handler\n                        ::txn/update-handler update-handler}]\n    (if ast\n      (swap-send-queue! app remote (fnil conj []) send-node)\n      ;; The handler would make a recursive call back to the queue processing, so we have to defer it if the AST wasn't set\n      (sched/defer #(handler {:status-code 200 :body {}}) 1))\n    nil))\n\n(defn queue-element-sends!\n  \"Queue all (unqueued) remote actions for the given element.  Returns the (possibly updated) node.\"\n  [app tx-node {::txn/keys [idx dispatch started?]}]\n  (let [remotes     (set/intersection (set (keys dispatch)) (txn/app->remote-names app))\n        to-dispatch (set/difference remotes started?)]\n    (reduce\n      (fn [node remote]\n        (if (contains? (get-in node [::txn/elements idx ::txn/started?] #{}) remote)\n          node\n          (let [updated-node (-> node\n                               (update-in [::txn/elements idx] (fn [tx-element] (txn/compute-desired-ast-node app remote node tx-element)))\n                               (update-in [::txn/elements idx ::txn/started?] conj remote))]\n            (add-send! app updated-node idx remote)\n            updated-node)))\n      tx-node\n      to-dispatch)))\n\n(defn queue-sends!\n  \"Finds any item(s) on the given node that are ready to be placed on the network queues and adds them. Non-optimistic\n  multi-element nodes will only queue one remote operation at a time.\"\n  [app {:keys [::txn/options ::txn/elements] :as tx-node}]\n  (reduce\n    (fn [node element]\n      (queue-element-sends! app node element))\n    tx-node\n    elements))\n\n(defn process-tx-node!\n  [app {:keys [::txn/options] :as tx-node}]\n  (if (txn/fully-complete? app tx-node)\n    nil\n    (->> tx-node\n      (txn/run-actions! app)\n      (queue-sends! app)\n      (txn/update-progress! app))))\n\n(defn process-send-queues!\n  \"Process the send queues against the remotes, which will cause idle remotes with queued work to issue network requests.\"\n  [app]\n  (let [remote-names (txn/app->remote-names app)\n        operations   (atom [])]\n    (doseq [remote remote-names]\n      (let [send-queue (send-queue app remote)\n            [p serial] (txn/extract-parallel send-queue)\n            front      (first serial)]\n        ;; parallel items are removed from the queues, since they don't block anything\n        (doseq [item p]\n          (swap! operations conj #(txn/net-send! app item remote)))\n        ;; sequential items are kept in queue to prevent out-of-order operation\n        (if (::active? front)\n          (reset-send-queue! app remote serial)\n          (let [{::txn/keys [send-queue send-node]} (txn/combine-sends app remote serial)]\n            (when send-node\n              (swap! operations conj #(txn/net-send! app send-node remote)))\n            (reset-send-queue! app remote send-queue)))))\n    ;; Actual net sends are done after we set the queues, in case the remote behave synchronously and immediately gives\n    ;; results (like errors). Otherwise, nested send queue updates in those handlers could confuse our notion of what's going on.\n    (doseq [op @operations]\n      (op))))\n\n(defn process-queue!\n  \"Run through the active queue and do a processing step.\"\n  [{:com.fulcrologic.fulcro.application/keys [state-atom runtime-atom] :as app}]\n  (let [old-queue        (active-queue app)\n        new-queue        (reduce\n                           (fn *pstep [new-queue n]\n                             (if-let [new-node (process-tx-node! app n)]\n                               (conj new-queue new-node)\n                               new-queue))\n                           []\n                           old-queue)\n        accumulate       (fn [r items] (into (set r) items))\n        remotes          (txn/app->remote-names app)\n        explicit-refresh (txn/requested-refreshes app new-queue)\n        remotes-active?  (txn/active-remotes new-queue remotes)]\n    (when (not= old-queue (active-queue app))\n      (log/error \"Old queue changed! See https://book.fulcrologic.com/#err-stp-old-queue-chng\"))\n    (swap! state-atom assoc :com.fulcrologic.fulcro.application/active-remotes remotes-active?)\n    (reset-active-queue! app new-queue)\n    (when (seq explicit-refresh)\n      (swap! runtime-atom update :com.fulcrologic.fulcro.application/to-refresh accumulate explicit-refresh))\n    (process-send-queues! app)\n    nil))\n\n(defn available-work?\n  \"Returns true if the submission queue has work on it that can proceed without any restrictions.\"\n  [app]\n  (let [{ready false} (group-by (comp boolean :after-render? ::txn/options) (submission-queue app))]\n    (boolean (seq ready))))\n\n(defn activate-submissions!\n  \"Activate all of the transactions that have been submitted since the last activation. After the items are activated\n  a single processing step will run for the active queue.\n\n  Activation can be blocked by the tx-node options for things like waiting for the next render frame.\"\n  [app]\n  (let [{blocked true ready false} (group-by (comp boolean :after-render? ::txn/options) (submission-queue app))\n        _                (reset-submission-queue! app (vec blocked))\n        dispatched-nodes (mapv #(txn/dispatch-elements % (txn/build-env app %) m/mutate) ready)]\n    (swap-active-queue! app (fnil into []) dispatched-nodes)\n    (process-queue! app)))\n\n(defn run-all-immediate-work!\n  \"Runs the submission queue. If the submission queue's optimistic actions submit more to the submission queue, then those\n   are processed as well until the submission queue remains empty. This can start network requests.\"\n  [app]\n  (try\n    (activate-submissions! app)\n    (catch #?(:cljs :default :clj Exception) e\n      (log/error e \"Error processing tx queue! See https://book.fulcrologic.com/#err-stp-err-processing-tx-q\"))))\n\n(defn run-queue! [app {:keys [component synchronous?] :as options}]\n  (loop []\n    (run-all-immediate-work! app)\n    (when (available-work? app)\n      (recur)))\n  (if (and synchronous? component)\n    (comp/refresh-component! component)\n    (when-let [render! (ah/app-algorithm app :render!)]\n      (render! app options)))\n  (release-post-render-tasks! app)\n  (when (available-work? app)\n    (recur app {})))\n\n(defn sync-tx! [& args] (throw (ex-info \"BREAKING CHANGE. Please use `with-synchronous-transaction` to add sync transaction support to your Fulcro app\" {})))\n\n(defn submit-sync-tx!\n  ([app tx]\n   (submit-sync-tx! app tx {}))\n  ([{:com.fulcrologic.fulcro.application/keys [runtime-atom] :as app} tx options]\n   (let [{:keys [refresh only-refresh ref] :as options} options\n         follow-on-reads (into #{} (filter #(or (keyword? %) (eql/ident? %)) tx))\n         node            (txn/tx-node tx options)\n         accumulate      (fn [r items] (into (set r) items))\n         refresh         (cond-> (set refresh)\n                           (seq follow-on-reads) (into follow-on-reads)\n                           ref (conj ref))]\n     (swap-submission-queue! app (fnil conj []) node)\n     (swap! runtime-atom (fn [s] (cond-> s\n                                   ;; refresh sets are cumulative because rendering is debounced\n                                   (seq refresh) (update :com.fulcrologic.fulcro.application/to-refresh accumulate refresh)\n                                   (seq only-refresh) (update :com.fulcrologic.fulcro.application/only-refresh accumulate only-refresh))))\n     (when-not (in-transaction? app)\n       (in-transaction app\n         (run-queue! app options)))\n     (::txn/id node))))\n\n(def abort!\n  \"[app abort-id]\n\n   Implementation of abort when using this tx processing\"\n  txn/abort!)\n\n(defn with-synchronous-transactions\n  \"Installs synchronous transaction processing on a fulcro application.\n\n  ```\n  (defonce app (stx/with-synchronous-transactions\n                 (app/fulcro-app {...})))\n  ```\n\n  This plug-in attempts to do as much work as possible synchronously, including the processing of \\\"remotes\\\" that\n  can behave synchronously. This processing system\n  preserves transactional ordering semantics for nested submissions, but cannot guarantee that the overall sequence of\n  operations will exactly match what you'd see if using the standard tx processing.\n\n  The options map you can pass to `transact!` supports most of the same things as the standard tx processing, with the significant exception of\n  `:optimistic? false` (pessimistic transactions). It also *always* assumes synchronous operation, thought the\n  `synchronous?` option (if used) does imply that only the current component should be refreshed in the UI.\n\n  - `:ref` - ident. The component ident to include in the transaction env.\n  - `:component` - React element. The instance of the component that should appear in the transaction env.\n  - `:synchronous?` - When true, causes the rendering to only refresh the calling component (if possible), since the implication\n  is for fast-as-possible refresh semantics, even though this tx processing is already sync.\n  - `:refresh` - A hint. Vector containing idents (of components) and keywords (of props). Things that have changed and should be re-rendered\n    on screen. Only necessary when the underlying rendering algorithm won't auto-detect, such as when UI is derived from the\n    state of other components or outside of the directly queried props. Interpretation depends on the renderer selected:\n    The ident-optimized render treats these as \\\"extras\\\".\n  - `:only-refresh` - A hint. Vector of idents/keywords.  If the underlying configured rendering algorithm supports it: The\n    components using these are the *only* things that will be refreshed in the UI, and they may be refreshed immediately on\n    `transact!`. This can be used to avoid the overhead of looking for stale data when you know exactly what\n    you want to refresh on screen as an extra optimization. Idents are *not* checked against queries.\n\n  If the `options` include `:ref` (which comp/transact! sets), then it will be auto-included on the `:refresh` list.\n\n  Returns the transaction ID of the submitted transaction.\n  \"\n  [app]\n  (let [remotes     (-> app :com.fulcrologic.fulcro.application/runtime-atom deref\n                      :com.fulcrologic.fulcro.application/remotes keys)\n        send-queues (zipmap remotes (repeatedly #(atom [])))]\n    (-> app\n      (update :com.fulcrologic.fulcro.application/algorithms assoc\n        :com.fulcrologic.fulcro.algorithm/tx! submit-sync-tx!\n        :com.fulcrologic.fulcro.algorithm/abort! abort!)\n      (assoc ::config {::submission-queue      (atom [])\n                       ::post-processing-steps (atom [])\n                       ::active-queue          (atom [])\n                       ::send-queues           send-queues}))))\n","~:reader-features",["^L",["~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings","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","names",["com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/apps-in-tx","cljs.core.atom","p__60154","map__60156","cljs.core/--destructure-map","cljs.core.get","com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/top-level?","id","cljs.core._EQ_","cljs.core/deref","var_args","args__4870__auto__","len__4864__auto__","i__4865__auto__","argseq__4871__auto__","cljs.core/IndexedSeq","com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/swap-submission-queue!","seq60162","G__60163","cljs.core/first","cljs.core/next","self__4851__auto__","app","args","cljs.core.apply","cljs.core/swap!","cljs.core.get_in","com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/reset-submission-queue!","v","cljs.core/reset!","com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/submission-queue","com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/swap-post-processing-steps!","seq60173","G__60174","com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/reset-post-processing-steps!","com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/post-processing-steps","com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/swap-active-queue!","seq60229","G__60230","com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/reset-active-queue!","com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/active-queue","com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/swap-send-queue!","seq60239","G__60241","G__60242","remote","com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/reset-send-queue!","com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/send-queue","com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/run-after!","f","com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.swap_post_processing_steps_BANG_","cljs.core.fnil","cljs.core/conj","com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/post-processing?","cljs.core/boolean","cljs.core/seq","com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/do-post-processing!","steps","seq__60292","chunk__60293","count__60294","i__60295","temp__5753__auto__","cljs.core/chunked-seq?","c__4679__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","e60310","e60313","e","taoensso.timbre._log_BANG_","taoensso.timbre/*config*","cljs.core/Delay","next-steps","p__60315","map__60316","com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/in-transaction?","cljs.core.not_EQ_","com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/release-post-render-tasks!","com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.swap_submission_queue_BANG_","queue","cljs.core.mapv","node","cljs.core.update","cljs.core/dissoc","p__60323","map__60324","com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/dispatch-result!","tx-node","results","dispatch","desired-ast-nodes","transmitted-ast-nodes","original-ast-node","tx-element","result","handler","env","com.fulcrologic.fulcro.algorithms.tx_processing.build_env","e60327","p__60333","map__60334","complete?","com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/distribute-element-results!","cljs.core.reduce","new-element","cljs.core/keys","com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/node-index","txn-id","n","idx","p__60341","map__60342","cljs.core/reduced","com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/distribute-results!","ele-idx","active-queue","p1__60344#","com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.swap_active_queue_BANG_","cljs.core/update-in","G__60356","com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/record-result!","js/Error","result-key","txn-idx","not-found?","cljs.core/assoc-in","com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.record_result_BANG_","com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/remove-send!","com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.swap_send_queue_BANG_","old-queue","cljs.core/filterv","p__60366","map__60367","p__60371","map__60373","com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/add-send!","options","update-handler","id__47375__auto__","cljs.core.swap_BANG_","cljs.core/update","cljs.core/inc","cljs.core/dec","G__60377","G__60378","com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/run-queue!","ast","G__60380","G__60381","send-node","com.fulcrologic.fulcro.algorithms.scheduling/defer","p__60382","map__60383","com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/queue-element-sends!","started?","remotes","clojure.set.intersection","cljs.core/set","com.fulcrologic.fulcro.algorithms.tx-processing/app->remote-names","to-dispatch","clojure.set.difference","cljs.core/contains?","updated-node","cljs.core.update_in","com.fulcrologic.fulcro.algorithms.tx-processing/compute-desired-ast-node","p__60386","map__60387","elements","com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/queue-sends!","element","p__60389","map__60390","com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/process-tx-node!","com.fulcrologic.fulcro.algorithms.tx-processing/fully-complete?","com.fulcrologic.fulcro.algorithms.tx-processing/run-actions!","com.fulcrologic.fulcro.algorithms.tx-processing/update-progress!","com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/process-send-queues!","remote-names","operations","seq__60392","chunk__60393","count__60394","i__60395","vec__60457","cljs.core.nth","vec__60469","send-queue","p","serial","com.fulcrologic.fulcro.algorithms.tx-processing/extract-parallel","front","seq__60460","chunk__60461","count__60462","i__60463","seq__60474","chunk__60475","count__60476","i__60477","item","com.fulcrologic.fulcro.algorithms.tx-processing/net-send!","map__60467","map__60482","com.fulcrologic.fulcro.algorithms.tx-processing/combine-sends","seq__60483","chunk__60484","count__60485","i__60486","op","p__60491","map__60492","com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/process-queue!","state-atom","runtime-atom","new-queue","temp__5751__auto__","new-node","cljs.core.conj","accumulate","r","items","cljs.core.into","explicit-refresh","com.fulcrologic.fulcro.algorithms.tx-processing/requested-refreshes","remotes-active?","com.fulcrologic.fulcro.algorithms.tx-processing/active-remotes","cljs.core/assoc","com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/available-work?","map__60515","ready","cljs.core/group-by","cljs.core.comp","com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/activate-submissions!","map__60532","blocked","_","cljs.core/vec","dispatched-nodes","p1__60518#","com.fulcrologic.fulcro.algorithms.tx-processing/dispatch-elements","com.fulcrologic.fulcro.mutations/mutate","cljs.core/into","com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/run-all-immediate-work!","e60541","p__60555","map__60557","component","synchronous?","and__4251__auto__","com.fulcrologic.fulcro.components/refresh-component!","render!","com.fulcrologic.fulcro.algorithms.lookup/app-algorithm","com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/sync-tx!","seq60568","self__4852__auto__","cljs.core.ex_info","G__60573","com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/submit-sync-tx!","p__60576","map__60577","tx","com.fulcrologic.fulcro.algorithms.tx_processing.synchronous_tx_processing.submit_sync_tx_BANG_","map__60578","refresh","only-refresh","ref","follow-on-reads","p1__60570#","cljs.core.filter","cljs.core/Keyword","edn-query-language.core/ident?","com.fulcrologic.fulcro.algorithms.tx_processing.tx_node","G__60580","s","G__60582","com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/abort!","com.fulcrologic.fulcro.algorithms.tx-processing/abort!","com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/with-synchronous-transactions","send-queues","cljs.core/zipmap","cljs.core.repeatedly","cljs.core.assoc"]],"~:used-vars",["^L",["~$com.fulcrologic.fulcro.algorithms.tx-processing/requested-refreshes","~$cljs.core/--destructure-map","~$com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/reset-submission-queue!","~$cljs.core/comp","~$clojure.set/intersection","~$com.fulcrologic.fulcro.algorithms.scheduling/defer","~$com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/node-index","~$com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/run-queue!","~$com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/swap-submission-queue!","~$com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/submission-queue","~$com.fulcrologic.fulcro.algorithms.tx-processing/net-send!","~$com.fulcrologic.fulcro.algorithms.tx-processing/dispatch-elements","~$com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/activate-submissions!","~$com.fulcrologic.fulcro.algorithms.tx-processing/update-progress!","~$cljs.core/repeatedly","~$com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/distribute-results!","~$cljs.core/filter","~$cljs.core/=","~$cljs.core/keys","~$com.fulcrologic.fulcro.algorithms.tx-processing/app->remote-names","~$cljs.core/dec","~$com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/dispatch-result!","~$taoensso.timbre/-log!","~$cljs.core/IndexedSeq","~$com.fulcrologic.fulcro.mutations/mutate","~$edn-query-language.core/ident?","~$com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/process-send-queues!","~$cljs.core/count","~$cljs.core/deref","~$com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/record-result!","~$cljs.core/reduce","~$cljs.core/seq","~$cljs.core/chunk-first","~$cljs.core/apply","~$cljs.core/Keyword","~$cljs.core/group-by","~$com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/queue-sends!","~$cljs.core/mapv","~$cljs.core/not=","~$com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/reset-send-queue!","~$cljs.core/dissoc","~$cljs.core/Delay","~$com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/top-level?","~$cljs.core/chunk-rest","~$cljs.core/atom","~$com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/post-processing?","~$com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/distribute-element-results!","~$com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/active-queue","~$com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/post-processing-steps","~$cljs.core/set","~$com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/release-post-render-tasks!","~$cljs.core/fnil","~$com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/run-after!","~$cljs.core/contains?","~$cljs.core/into","~$cljs.core/reset!","~$cljs.core/conj","~$com.fulcrologic.fulcro.algorithms.tx-processing/fully-complete?","~$taoensso.timbre/*config*","~$com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/swap-active-queue!","~$com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/queue-element-sends!","~$cljs.core/zipmap","~$cljs.core/update","~$com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/submit-sync-tx!","~$com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/process-queue!","~$com.fulcrologic.fulcro.algorithms.tx-processing/run-actions!","~$cljs.core/filterv","~$com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/process-tx-node!","~$cljs.core/get-in","~$cljs.core/swap!","~$com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/abort!","~$com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/do-post-processing!","~$cljs.core/get","~$com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/reset-active-queue!","~$cljs.core/-nth","~$com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/add-send!","~$clojure.set/difference","~$com.fulcrologic.fulcro.algorithms.tx-processing/extract-parallel","~$cljs.core/reduced","~$cljs.core/nth","~$cljs.core/ex-info","~$cljs.core/next","~$cljs.core/vec","~$com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/swap-post-processing-steps!","~$com.fulcrologic.fulcro.algorithms.tx-processing/build-env","~$com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/sync-tx!","~$cljs.core/not","~$com.fulcrologic.fulcro.algorithms.lookup/app-algorithm","~$com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/available-work?","~$com.fulcrologic.fulcro.algorithms.tx-processing/tx-node","~$com.fulcrologic.fulcro.components/refresh-component!","~$cljs.core/assoc","~$cljs.core/assoc-in","~$com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/in-transaction?","~$com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/reset-post-processing-steps!","~$com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/apps-in-tx","~$com.fulcrologic.fulcro.algorithms.tx-processing/abort!","~$com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/swap-send-queue!","~$com.fulcrologic.fulcro.algorithms.tx-processing/active-remotes","~$cljs.core/first","~$com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/send-queue","~$com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/remove-send!","~$com.fulcrologic.fulcro.algorithms.tx-processing/compute-desired-ast-node","~$cljs.core/update-in","~$js/Error","~$com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/with-synchronous-transactions","~$cljs.core/boolean","~$com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/run-all-immediate-work!","~$cljs.core/inc","~$cljs.core/chunked-seq?","~$com.fulcrologic.fulcro.algorithms.tx-processing/combine-sends"]]],"~:cache-keys",["~#cmap",[["^1K","com/fulcrologic/fulcro/algorithms/normalize.cljc"],["aa10be524799b8f5dcb1cab659b996577fc15d41","~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^L",[]],"~:deps-syms",["^19","^18","~$com.fulcrologic.fulcro.algorithms.do-not-use","^12","^14","^16"]]],["^1K","goog/dom/tagname.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","~$goog.dom.HtmlElement"]]],["^1K","goog/async/freelist.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19"]]],["^1K","cljs/core/async/impl/ioc_helpers.cljs"],["c55a0f6d67abac2efcfddf7621cac07d90298cab","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^18","~$cljs.core.async.impl.protocols"]]],["^1K","goog/i18n/datetimesymbols.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19"]]],["^1K","goog/labs/useragent/platform.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","~$goog.string.internal","~$goog.labs.userAgent.util"]]],["^1K","expound/util.cljc"],["f84ecd45aeef38fd6f1c53d8323e6abc5dc5a0e4","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^18"]]],["^1K","goog/crypt/crypt.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","~$goog.asserts"]]],["^1K","cljs/core/async.cljs"],["c55a0f6d67abac2efcfddf7621cac07d90298cab","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^18","^4J","~$cljs.core.async.impl.channels","~$cljs.core.async.impl.buffers","~$cljs.core.async.impl.timers","~$cljs.core.async.impl.dispatch","~$cljs.core.async.impl.ioc-helpers","~$goog.array"]]],["^1K","goog/timer/timer.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","~$goog.Promise","~$goog.events.EventTarget","~$goog.Thenable"]]],["^1K","com/fulcrologic/fulcro/algorithms/lookup.cljc"],["aa10be524799b8f5dcb1cab659b996577fc15d41","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^18","^14"]]],["^1K","cljs/spec/gen/alpha.cljs"],["e2ad9a4500a5ecabaf01429c4f0d6f7fac146951","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^18","~$goog.Uri"]]],["^1K","cljs/tools/reader/impl/utils.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^18","~$clojure.string","~$goog.string"]]],["^1K","goog/math/math.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^4M"]]],["^1K","goog/html/trustedtypes.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19"]]],["^1K","goog/string/stringformat.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^4Y"]]],["^1K","goog/events/eventtype.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","~$goog.events.BrowserFeature","~$goog.userAgent"]]],["^1K","goog/labs/useragent/browser.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^4S","~$goog.object","^4L","^4K"]]],["^1K","goog/html/safeurl.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^4M","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.i18n.bidi.Dir","~$goog.i18n.bidi.DirectionalString","~$goog.string.Const","~$goog.string.TypedString","^4K"]]],["^1K","goog/array/array.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^4M"]]],["^1K","com/fulcrologic/fulcro/algorithms/do_not_use.cljc"],["aa10be524799b8f5dcb1cab659b996577fc15d41","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^18","^14","^4X","^12","^50","~$goog.crypt","~$goog.crypt.base64","^@"]]],["^1K","expound/problems.cljc"],["f84ecd45aeef38fd6f1c53d8323e6abc5dc5a0e4","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^18","~$expound.paths","^@"]]],["^1K","goog/useragent/useragent.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","~$goog.labs.userAgent.browser","~$goog.labs.userAgent.engine","~$goog.labs.userAgent.platform","^4L","~$goog.reflect","^4K"]]],["^1K","goog/structs/prioritypool.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","~$goog.structs.Pool","~$goog.structs.PriorityQueue"]]],["^1K","goog/events/eventlike.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","~$goog.events.Event","~$goog.events.EventId"]]],["^1K","goog/async/run.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","~$goog.async.WorkQueue","~$goog.async.nextTick","~$goog.async.throwException"]]],["^1K","com/cognitect/transit/impl/reader.js"],["f8b4f570ca4d41649190efecac27a5932cc11429","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","~$com.cognitect.transit.impl.decoder","~$com.cognitect.transit.caching"]]],["^1K","goog/debug/error.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19"]]],["^1K","goog/async/workqueue.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","~$goog.async.FreeList","^4M"]]],["^1K","com/fulcrologic/fulcro/dom/events.cljc"],["aa10be524799b8f5dcb1cab659b996577fc15d41","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^18"]]],["^1K","goog/events/events.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^4M","~$goog.debug.entryPointRegistry","~$goog.events.BrowserEvent","^4Z","~$goog.events.Listenable","~$goog.events.ListenerMap","~$goog.debug.ErrorHandler","^5A","~$goog.events.EventLike","~$goog.events.EventWrapper","~$goog.events.ListenableKey","~$goog.events.Listener"]]],["^1K","goog/promise/resolver.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^4T"]]],["^1K","goog/events/browserfeature.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19"]]],["^1K","cljs/tools/reader/edn.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^18","~$cljs.tools.reader.impl.errors","~$cljs.tools.reader.reader-types","~$cljs.tools.reader.impl.utils","~$cljs.tools.reader.impl.commons","~$cljs.tools.reader","^4Y","~$goog.string.StringBuffer"]]],["^1K","goog/structs/priorityqueue.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","~$goog.structs.Heap"]]],["^1K","goog/net/xhrio.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","~$goog.Timer","^4S","^4M","~$goog.collections.maps","^5H","^4U","~$goog.json.hybrid","~$goog.log","~$goog.net.ErrorCode","~$goog.net.EventType","~$goog.net.HttpStatus","~$goog.net.XmlHttp","^50","^4Y","~$goog.uri.utils","^4[","^4W","^5L","~$goog.net.XhrLike","~$goog.net.XmlHttpFactory"]]],["^1K","goog/promise/thenable.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^4T"]]],["^1K","goog/collections/iters.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19"]]],["^1K","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc"],["aa10be524799b8f5dcb1cab659b996577fc15d41","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^18","^11","^1>","^1;","^[","^1:","^16","^I","^12","^14"]]],["^1K","com/fulcrologic/fulcro/algorithms/transit.cljc"],["aa10be524799b8f5dcb1cab659b996577fc15d41","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^18","~$cognitect.transit","~$com.fulcrologic.guardrails.core","^@","~$com.fulcrologic.fulcro.algorithms.tempid"]]],["^1K","goog/dom/nodetype.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19"]]],["^1K","com/fulcrologic/guardrails/utils.cljc"],["1c3188d13b2f3b2324bad6f65cc78cd4b193445e","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^18","~$clojure.walk"]]],["^1K","cljs/tools/reader/impl/inspect.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^18"]]],["^1K","com/cognitect/transit/util.js"],["f8b4f570ca4d41649190efecac27a5932cc11429","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^50"]]],["^1K","cljs/pprint.cljs"],["e2ad9a4500a5ecabaf01429c4f0d6f7fac146951","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^18","^4X","^4Y","^5V"]]],["^1K","com/fulcrologic/fulcro/algorithms/data_targeting.cljc"],["aa10be524799b8f5dcb1cab659b996577fc15d41","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^18","^11","^@","^68","^12","^14"]]],["^1K","cljs/tools/reader.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^18","^5R","^5S","^5T","^5Q","^4S","^4Y","^5V"]]],["^1K","expound/alpha.cljc"],["f84ecd45aeef38fd6f1c53d8323e6abc5dc5a0e4","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^18","~$expound.problems","^@","^4X","^11","~$expound.printer","~$expound.util","~$expound.ansi"]]],["^1K","taoensso/timbre.cljc"],["ed86c0ab3cf1c4771c5f9bf201405e20c3027ced","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^18","^4X","~$goog.i18n.DateTimeFormat","~$taoensso.encore","~$taoensso.timbre.appenders.core"]]],["^1K","goog/net/wrapperxmlhttpfactory.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^65","^66"]]],["^1K","goog/date/utcdatetime.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","~$goog.date","~$goog.date.Date","~$goog.date.DateTime","~$goog.date.Interval"]]],["^1K","goog/i18n/nativelocaledigits.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19"]]],["^1K","goog/events/eventtarget.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","~$goog.Disposable","^4M","~$goog.events","^5@","^5J","^5K","^50","^5A","^5M","^5O"]]],["^1K","com/fulcrologic/guardrails/core.cljc"],["1c3188d13b2f3b2324bad6f65cc78cd4b193445e","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^18","~$com.fulcrologic.guardrails.impl.externs","~$com.fulcrologic.guardrails.utils","^B","^@","^4X","~$expound.alpha"]]],["^1K","goog/disposable/disposable.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","~$goog.disposable.IDisposable","~$goog.dispose","~$goog.disposeAll"]]],["^1K","expound/ansi.cljc"],["f84ecd45aeef38fd6f1c53d8323e6abc5dc5a0e4","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^18","^4X"]]],["^1K","goog/string/typedstring.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19"]]],["~:shadow.build.npm/resource","node_modules/react/index.js"],["1c6e82d3f9756822c3b08dd8f8e1d7c23a7f1630","3679a1a898d0c80b330819274df3fe1302fa19d1","a69a7f3d4a4636bf9035bc53c05b2d99a7b8af7f","^4D",["^ ","^4E",2,"^4F",["^L",[0,1]],"^4G",["~$shadow.js","~$module$node_modules$react$cjs$react_production_min","~$module$node_modules$react$cjs$react_development"]]],["^1K","shadow/js.js"],["dcbbe536346aae67f50c45a19f6541141d5c98c1","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19"]]],["^1K","goog/object/object.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19"]]],["^1K","goog/dom/asserts.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^4M"]]],["^1K","taoensso/encore.cljc"],["8ce32d99c08a853f8a56322b5aab80e59c3bd4d6","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^18","^4X","^11","~$cljs.reader","~$cljs.tools.reader.edn","^50","^4S","^4Y","~$goog.string.format","^5V","^6G","~$goog.net.XhrIo","~$goog.net.XhrIoPool","~$goog.Uri.QueryData","^61","^60","~$taoensso.truss"]]],["^1K","goog/structs/set.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","~$goog.structs","~$goog.structs.Collection","~$goog.structs.Map","~$goog.iter.Iterator"]]],"~:SHADOW-TIMESTAMP",[1676259735000,1676259735000,1676259734000],["^6N","node_modules/react/cjs/react.development.js"],["1c6e82d3f9756822c3b08dd8f8e1d7c23a7f1630","3679a1a898d0c80b330819274df3fe1302fa19d1","1df918e8981877c2759388dfae58a059e089860d","^4D",["^ ","^4E",1,"^4F",["^L",[]],"^4G",["^6O"]]],["^1K","taoensso/timbre/appenders/core.cljc"],["ed86c0ab3cf1c4771c5f9bf201405e20c3027ced","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^18","^4X","^6@"]]],["^1K","goog/math/long.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^4M","^5="]]],["^1K","goog/events/listener.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^5O","^5J"]]],["^1K","goog/html/trustedresourceurl.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^4M","~$goog.fs.blob","^51","~$goog.html.SafeScript","~$goog.html.trustedtypes","^53","^54","^55","^56"]]],["^1K","cljs/core/async/impl/channels.cljs"],["c55a0f6d67abac2efcfddf7621cac07d90298cab","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^18","^4J","^4Q","^4O"]]],["^1K","goog/events/listenermap.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^4S","^5P","^50","^5A","^5J","^5O"]]],["^1K","goog/events/eventid.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19"]]],["^1K","taoensso/truss.cljs"],["02c08dae83153a50eb946c4d742f574a24bb2a76","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^18","~$taoensso.truss.impl"]]],["^1K","com/fulcrologic/guardrails/registry.cljc"],["1c3188d13b2f3b2324bad6f65cc78cd4b193445e","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^18"]]],["^1K","goog/string/internal.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19"]]],["^1K","goog/events/eventwrapper.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","~$goog.events.EventHandler","~$goog.events.ListenableType"]]],["^1K","com/fulcrologic/fulcro/algorithms/merge.cljc"],["aa10be524799b8f5dcb1cab659b996577fc15d41","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^18","~$com.fulcrologic.fulcro.algorithms.data-targeting","^16","^[","~$com.fulcrologic.fulcro.algorithms.normalize","~$com.fulcrologic.fulcro.algorithms.denormalize","^4H","^12","^14","^69"]]],["^1K","edn_query_language/core.cljc"],["839028d06d9cc88b18b20c77c53a2bb77140d1f7","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^18","^@"]]],["^1K","goog/functions/functions.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19"]]],["^1K","cljs/core/async/impl/dispatch.cljs"],["c55a0f6d67abac2efcfddf7621cac07d90298cab","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^18","^4O","^5C"]]],["^1K","goog/html/safestyle.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^55","~$goog.html.SafeUrl","^56","^4M","^4K"]]],["^1K","goog/dom/safe.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^4M","~$goog.dom.asserts","~$goog.functions","~$goog.html.SafeHtml","^73","~$goog.html.SafeStyle","^7;","^52","~$goog.html.uncheckedconversions","^55","^4K"]]],["^1K","expound/paths.cljc"],["f84ecd45aeef38fd6f1c53d8323e6abc5dc5a0e4","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^18","^@","^6="]]],["^1K","taoensso/truss/impl.cljs"],["02c08dae83153a50eb946c4d742f574a24bb2a76","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^18","^11"]]],["^1K","clojure/walk.cljs"],["e2ad9a4500a5ecabaf01429c4f0d6f7fac146951","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^18"]]],["^1K","goog/useragent/product.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^5:","^5<","^4["]]],["^1K","cljs/core/async/impl/protocols.cljs"],["c55a0f6d67abac2efcfddf7621cac07d90298cab","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^18"]]],["^1K","goog/net/eventtype.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19"]]],["^1K","goog/structs/map.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","~$goog.collections.iters","^70","~$goog.iter.StopIteration","~$goog.iter.es6"]]],["^1K","goog/net/xhriopool.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^6U","~$goog.structs.PriorityPool","^6["]]],["^1K","com/cognitect/transit/delimiters.js"],["f8b4f570ca4d41649190efecac27a5932cc11429","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19"]]],["^1K","goog/date/date.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^4M","~$goog.i18n.DateTimeSymbols","^4Y"]]],["^1K","goog/html/safehtml.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^55","^53","^54","^73","^7?","~$goog.html.SafeStyleSheet","^7;","~$goog.dom.TagName","^52","^56","^4M","^5:","^4S","^50","^4K","~$goog.dom.tags","^74"]]],["^1K","goog/dom/tags.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^50"]]],["^1K","goog/math/size.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19"]]],["^1K","com/fulcrologic/fulcro/raw/components.cljc"],["aa10be524799b8f5dcb1cab659b996577fc15d41","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^18","^50","^11","^4X","^6:","^7:","^4H","^[","~$com.fulcrologic.fulcro.algorithms.transit","^12","^6@","^14"]]],["^1K","goog/structs/queue.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^4S"]]],["^1K","goog/labs/useragent/engine.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^4S","^4K","^4L"]]],["^1K","com/fulcrologic/fulcro/inspect/transit.cljs"],["aa10be524799b8f5dcb1cab659b996577fc15d41","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^18","^67","~$com.cognitect.transit.types","^7I","^14"]]],["^1K","com/cognitect/transit/impl/decoder.js"],["f8b4f570ca4d41649190efecac27a5932cc11429","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","~$com.cognitect.transit.util","~$com.cognitect.transit.delimiters","^5F","^7J"]]],["^1K","goog/fs/blob.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19"]]],["^1K","cljs/reader.cljs"],["e2ad9a4500a5ecabaf01429c4f0d6f7fac146951","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^18","^50","^5U","^6S","^5V"]]],["^1K","com/fulcrologic/fulcro/mutations.cljc"],["aa10be524799b8f5dcb1cab659b996577fc15d41","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^18","~$com.fulcrologic.fulcro.raw.components","~$com.fulcrologic.fulcro.dom.events","^68","^12","^14","^6@","^@","^4H","^78","~$com.fulcrologic.fulcro.algorithms.merge","^[","^69","^4X"]]],["^1K","goog/dom/dom.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^4S","^4M","~$goog.dom.BrowserFeature","~$goog.dom.NodeType","^7G","~$goog.dom.safe","^7>","^7@","~$goog.math.Coordinate","~$goog.math.Size","^50","^4Y","^55","~$goog.string.Unicode","^4["]]],["^1K","com/fulcrologic/guardrails/impl/externs.cljc"],["1c3188d13b2f3b2324bad6f65cc78cd4b193445e","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^18","~$com.fulcrologic.guardrails.registry","^6I"]]],["^1K","com/fulcrologic/fulcro/components.cljc"],["aa10be524799b8f5dcb1cab659b996577fc15d41","^4D",["^ ","^4E",null,"^4F",["^L",[2]],"^4G",["^19","^18","^50","~$module$node_modules$react$index","^12","^@","^14","^6:","^4X","^4H","^7:","^[","^7M","^68","^11"]]],["^1K","com/fulcrologic/fulcro/specs.cljc"],["aa10be524799b8f5dcb1cab659b996577fc15d41","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^18","^@","^68","^4H","^12"]]],["^1K","goog/asserts/asserts.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","~$goog.debug.Error","^7Q"]]],["^1K","cljs/core/async/impl/buffers.cljs"],["c55a0f6d67abac2efcfddf7621cac07d90298cab","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^18","^4J"]]],["^1K","goog/i18n/timezone.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^4S","~$goog.date.DateLike","^50","^4Y"]]],["^1K","goog/uri/uri.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^4S","^4M","^5Y","^4Y","^6Y","^64","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^1K","goog/net/errorcode.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19"]]],["^1K","goog/collections/maps.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19"]]],["^1K","goog/iter/es6.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","~$goog.iter.Iterable","^70","^7B"]]],["^1K","goog/i18n/bidi.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19"]]],["^1K","goog/debug/errorhandler.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^6F","^4M","~$goog.debug.EntryPointMonitor","^7X"]]],["^1K","goog/disposable/idisposable.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19"]]],["^1K","goog/promise/promise.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^4V","^4M","^5G","~$goog.async.run","^5D","^7X","~$goog.promise.Resolver"]]],["^1K","cljs/core/async/impl/timers.cljs"],["c55a0f6d67abac2efcfddf7621cac07d90298cab","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^18","^4J","^4N","^4Q"]]],["^1K","cljs/spec/alpha.cljs"],["e2ad9a4500a5ecabaf01429c4f0d6f7fac146951","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^18","^50","^6:","~$cljs.spec.gen.alpha","^4X"]]],["^1K","goog/fs/url.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19"]]],["^1K","goog/base.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",[]]],["^1K","goog/json/hybrid.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^4M","~$goog.json"]]],["^1K","goog/structs/structs.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^4S","^50"]]],["^1K","cljs/tools/reader/impl/errors.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^18","^5R","^4X","~$cljs.tools.reader.impl.inspect"]]],["^1K","com/fulcrologic/fulcro/algorithms/scheduling.cljc"],["aa10be524799b8f5dcb1cab659b996577fc15d41","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^18","^68","^B","^14"]]],["^1K","goog/disposable/dispose.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19"]]],["^1K","clojure/string.cljs"],["e2ad9a4500a5ecabaf01429c4f0d6f7fac146951","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^18","^4Y","^5V"]]],["^1K","com/fulcrologic/fulcro/algorithms/tempid.cljc"],["aa10be524799b8f5dcb1cab659b996577fc15d41","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^18","^14","^6:"]]],["^1K","goog/structs/pool.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^6F","~$goog.structs.Queue","~$goog.structs.Set"]]],["^1K","com/fulcrologic/fulcro/inspect/diff.cljc"],["aa10be524799b8f5dcb1cab659b996577fc15d41","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^18","^@"]]],["^6N","node_modules/react/cjs/react.production.min.js"],["1c6e82d3f9756822c3b08dd8f8e1d7c23a7f1630","3679a1a898d0c80b330819274df3fe1302fa19d1","f5f2e0db62a5ce44eafff60d4f3577b8796734e4","^4D",["^ ","^4E",0,"^4F",["^L",[]],"^4G",["^6O"]]],["^1K","goog/net/httpstatus.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19"]]],["^1K","goog/i18n/datetimeformat.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^4M","^6B","~$goog.date.UtcDateTime","^7E","~$goog.i18n.LocaleFeature","~$goog.i18n.NativeLocaleDigits","~$goog.i18n.TimeZone","^4Y","~$goog.i18n.DateTimeSymbolsType"]]],["^1K","com/cognitect/transit/handlers.js"],["f8b4f570ca4d41649190efecac27a5932cc11429","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^7K","^7J","~$goog.math.Long"]]],["^1K","goog/structs/heap.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^4S","^50","~$goog.structs.Node"]]],["^1K","goog/debug/entrypointregistry.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^4M"]]],["^1K","goog/string/string.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^7R","^7@","^55","^4K"]]],["^1K","com/cognitect/transit/types.js"],["f8b4f570ca4d41649190efecac27a5932cc11429","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^7K","~$com.cognitect.transit.eq","^8>"]]],["^1K","goog/reflect/reflect.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19"]]],["^1K","goog/labs/useragent/util.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","~$goog.labs.userAgent","^4K"]]],["^1K","expound/printer.cljc"],["f84ecd45aeef38fd6f1c53d8323e6abc5dc5a0e4","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^18","^4X","^@","^D","^11","^6=","^6>","^59","^6:","^6T","^4Y"]]],["^1K","com/fulcrologic/fulcro/algorithms/tx_processing.cljc"],["aa10be524799b8f5dcb1cab659b996577fc15d41","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^18","^11","^@","^[","^69","^7:","^4H","^1;","^1:","^16","~$com.fulcrologic.fulcro.specs","^I","^68","^12","^6@","^14"]]],["^1K","com/cognitect/transit/eq.js"],["f8b4f570ca4d41649190efecac27a5932cc11429","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^7K"]]],["^1K","goog/debug/debug.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^4S","~$goog.debug.errorcontext"]]],["^1K","goog/string/stringbuffer.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19"]]],["^1K","goog/math/coordinate.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","~$goog.math"]]],["^1K","goog/debug/errorcontext.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19"]]],["^1K","cljs/tools/reader/reader_types.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^18","^5S","^4Y","^5V"]]],["^1K","goog/iter/iter.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^4S","^4M","~$goog.debug","^7=","^8D"]]],["^1K","goog/labs/useragent/useragent.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19"]]],["^1K","goog/async/nexttick.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^5H","~$goog.dom","^7G","^7=","^5:","^5;"]]],["^1K","goog/html/uncheckedconversions.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^4M","^7>","^73","^7?","^7F","^7;","^52","^55","^4K","^53"]]],["^1K","com/cognitect/transit/caching.js"],["f8b4f570ca4d41649190efecac27a5932cc11429","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^7L"]]],["^1K","goog/events/event.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^6F","^5A"]]],["^1K","cljs/tools/reader/impl/commons.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^18","^5Q","^5R","^5S"]]],["^1K","goog/events/eventhandler.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^6F","^6G","^50","^5@","^5A","^4U","^5N"]]],["^1K","goog/dom/htmlelement.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19"]]],["^1K","cljs/core.cljs"],["e2ad9a4500a5ecabaf01429c4f0d6f7fac146951","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^8>","~$goog.math.Integer","^4Y","^50","^4S","^4W","^5V"]]],["^1K","com/cognitect/transit.js"],["f8b4f570ca4d41649190efecac27a5932cc11429","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^7K","~$com.cognitect.transit.impl.reader","~$com.cognitect.transit.impl.writer","^7J","^8@","^5E","^5F"]]],["^1K","goog/html/safescript.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^55","^56","^74","^4M"]]],["^1K","goog/log/log.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^4M","^8E"]]],["^1K","goog/async/throwexception.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19"]]],["^1K","goog/html/safestylesheet.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^55","^7?","^56","^50","^4M","^4K"]]],["^1K","goog/structs/collection.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19"]]],["^1K","goog/events/browserevent.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^8E","^5@","~$goog.events.EventType","^5=","^4["]]],["^1K","goog/math/integer.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^5="]]],["^1K","goog/structs/node.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19"]]],["^1K","goog/dom/browserfeature.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^4["]]],["^1K","clojure/set.cljs"],["e2ad9a4500a5ecabaf01429c4f0d6f7fac146951","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^18"]]],["^1K","goog/uri/utils.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^4M","^4Y"]]],["^1K","goog/string/const.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^4M","^56"]]],["^1K","goog/disposable/disposeall.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^6L"]]],["^1K","goog/json/json.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19"]]],["^1K","goog/i18n/localefeature.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19"]]],["^1K","goog/events/listenable.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^5A","^5M","^5O"]]],["^1K","goog/events/listenablekey.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^5J"]]],["^1K","com/cognitect/transit/impl/writer.js"],["f8b4f570ca4d41649190efecac27a5932cc11429","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^7K","^5F","~$com.cognitect.transit.handlers","^7J","^7L","^8>"]]],["^1K","goog/net/xmlhttpfactory.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^65"]]],["^1K","com/fulcrologic/fulcro/algorithms/denormalize.cljc"],["aa10be524799b8f5dcb1cab659b996577fc15d41","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^18","^11","^12","^14"]]],["^1K","goog/net/xmlhttp.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^4M","~$goog.net.WrapperXmlHttpFactory","^66","^65"]]],["^1K","com/fulcrologic/fulcro/inspect/inspect_client.cljc"],["aa10be524799b8f5dcb1cab659b996577fc15d41","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^18","^12","^[","^50","~$com.fulcrologic.fulcro.inspect.diff","~$com.fulcrologic.fulcro.inspect.transit","^B","^6@","^14"]]],["^1K","goog/net/xhrlike.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19"]]],["^1K","cognitect/transit.cljs"],["ae688999ee978d238bffd4df0c0323e552d6d8dc","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^18","~$com.cognitect.transit","^7J","^8@","^8>"]]],["^1K","goog/crypt/base64.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^4D",["^ ","^4E",null,"^4F",["^L",[]],"^4G",["^19","^4M","^57","^4K","^4[","~$goog.userAgent.product"]]]]],"~:clj-info",["^ ","jar:file:/C:/Users/carre/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/main.clj",1675466804000,"jar:file:/C:/Users/carre/.m2/repository/com/fulcrologic/fulcro/3.5.9/fulcro-3.5.9.jar!/com/fulcrologic/fulcro/raw/components.cljc",1676259735000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader.clj",1675288215000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/impl/errors.clj",1675288215000,"jar:file:/C:/Users/carre/.m2/repository/com/taoensso/truss/1.6.0/truss-1.6.0.jar!/taoensso/truss.clj",1676259735000,"jar:file:/C:/Users/carre/.m2/repository/com/fulcrologic/guardrails/1.1.4/guardrails-1.1.4.jar!/com/fulcrologic/guardrails/impl/externs.cljc",1676259733000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/tools.analyzer/1.1.0/tools.analyzer-1.1.0.jar!/clojure/tools/analyzer/ast.clj",1675288214000,"jar:file:/C:/Users/carre/.m2/repository/com/taoensso/timbre/5.1.1/timbre-5.1.1.jar!/taoensso/timbre/appenders/core.cljc",1676259736000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/core.async/1.4.627/core.async-1.4.627.jar!/clojure/core/async/impl/ioc_macros.clj",1676259738000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/default_data_readers.clj",1675288215000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/clojurescript/1.10.914/clojurescript-1.10.914.jar!/cljs/util.cljc",1676259734000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/core.async/1.4.627/core.async-1.4.627.jar!/clojure/core/async/impl/buffers.clj",1676259738000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/data.json/2.4.0/data.json-2.4.0.jar!/clojure/data/json.clj",1675288214000,"jar:file:/C:/Users/carre/.m2/repository/com/fulcrologic/guardrails/1.1.4/guardrails-1.1.4.jar!/com/fulcrologic/guardrails/impl/parser.clj",1676259733000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/tools.analyzer/1.1.0/tools.analyzer-1.1.0.jar!/clojure/tools/analyzer/env.clj",1675288214000,"jar:file:/C:/Users/carre/.m2/repository/com/fulcrologic/fulcro/3.5.9/fulcro-3.5.9.jar!/com/fulcrologic/fulcro/algorithms/lookup.cljc",1676259735000,"jar:file:/C:/Users/carre/.m2/repository/io/aviso/pretty/0.1.37/pretty-0.1.37.jar!/io/aviso/columns.clj",1676259734000,"jar:file:/C:/Users/carre/.m2/repository/com/fulcrologic/guardrails/1.1.4/guardrails-1.1.4.jar!/com/fulcrologic/guardrails/utils.cljc",1676259733000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/clojurescript/1.10.914/clojurescript-1.10.914.jar!/cljs/reader.clj",1676259734000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/spec.alpha/0.2.194/spec.alpha-0.2.194.jar!/clojure/spec/gen/alpha.clj",1675466804000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/clojurescript/1.10.914/clojurescript-1.10.914.jar!/cljs/analyzer/passes.cljc",1676259734000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/core.async/1.4.627/core.async-1.4.627.jar!/clojure/core/async/impl/timers.clj",1676259738000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/clojurescript/1.10.914/clojurescript-1.10.914.jar!/cljs/source_map/base64.clj",1676259734000,"jar:file:/C:/Users/carre/.m2/repository/expound/expound/0.8.9/expound-0.8.9.jar!/expound/problems.cljc",1676259733000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/clojurescript/1.10.914/clojurescript-1.10.914.jar!/cljs/analyzer.cljc",1676259734000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/tools.analyzer.jvm/1.2.0/tools.analyzer.jvm-1.2.0.jar!/clojure/tools/analyzer/jvm/utils.clj",1676259734000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/clojurescript/1.10.914/clojurescript-1.10.914.jar!/cljs/source_map.clj",1676259734000,"jar:file:/C:/Users/carre/.m2/repository/edn-query-language/eql/1.0.1/eql-1.0.1.jar!/edn_query_language/core.cljc",1676259733000,"jar:file:/C:/Users/carre/.m2/repository/com/fulcrologic/fulcro/3.5.9/fulcro-3.5.9.jar!/com/fulcrologic/fulcro/components.cljc",1676259735000,"jar:file:/C:/Users/carre/.m2/repository/com/fulcrologic/fulcro/3.5.9/fulcro-3.5.9.jar!/com/fulcrologic/fulcro/algorithms/do_not_use.cljc",1676259735000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/stacktrace.clj",1675466804000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/edn.clj",1675466804000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/clojurescript/1.10.914/clojurescript-1.10.914.jar!/cljs/source_map/base64_vlq.clj",1676259734000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/impl/inspect.clj",1675288215000,"jar:file:/C:/Users/carre/.m2/repository/com/fulcrologic/guardrails/1.1.4/guardrails-1.1.4.jar!/com/fulcrologic/guardrails/core.cljc",1676259733000,"jar:file:/C:/Users/carre/.m2/repository/com/taoensso/truss/1.6.0/truss-1.6.0.jar!/taoensso/truss/impl.clj",1676259735000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/clojurescript/1.10.914/clojurescript-1.10.914.jar!/cljs/spec/alpha.cljc",1676259734000,"jar:file:/C:/Users/carre/.m2/repository/com/fulcrologic/fulcro/3.5.9/fulcro-3.5.9.jar!/com/fulcrologic/fulcro/mutations.cljc",1676259735000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/core.async/1.4.627/core.async-1.4.627.jar!/cljs/core/async/impl/ioc_macros.clj",1676259738000,"jar:file:/C:/Users/carre/.m2/repository/com/fulcrologic/fulcro/3.5.9/fulcro-3.5.9.jar!/com/fulcrologic/fulcro/algorithms/denormalize.cljc",1676259735000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/clojurescript/1.10.914/clojurescript-1.10.914.jar!/cljs/js_deps.cljc",1676259734000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/tools.analyzer/1.1.0/tools.analyzer-1.1.0.jar!/clojure/tools/analyzer/utils.clj",1675288214000,"jar:file:/C:/Users/carre/.m2/repository/com/fulcrologic/fulcro/3.5.9/fulcro-3.5.9.jar!/com/fulcrologic/fulcro/algorithms/transit.cljc",1676259735000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/cljs/tools/reader/reader_types.clj",1675288215000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/instant.clj",1675466804000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/clojurescript/1.10.914/clojurescript-1.10.914.jar!/cljs/core.cljc",1676259734000,"jar:file:/C:/Users/carre/.m2/repository/expound/expound/0.8.9/expound-0.8.9.jar!/expound/paths.cljc",1676259733000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/java/io.clj",1675466804000,"jar:file:/C:/Users/carre/.m2/repository/com/fulcrologic/fulcro/3.5.9/fulcro-3.5.9.jar!/com/fulcrologic/fulcro/algorithms/scheduling.cljc",1676259735000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/clojurescript/1.10.914/clojurescript-1.10.914.jar!/cljs/env.cljc",1676259734000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/clojurescript/1.10.914/clojurescript-1.10.914.jar!/cljs/instant.clj",1676259734000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/spec.alpha/0.2.194/spec.alpha-0.2.194.jar!/clojure/spec/alpha.clj",1675466804000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/core.async/1.4.627/core.async-1.4.627.jar!/clojure/core/async/impl/exec/threadpool.clj",1676259738000,"jar:file:/C:/Users/carre/.m2/repository/io/aviso/pretty/0.1.37/pretty-0.1.37.jar!/io/aviso/ansi.clj",1676259734000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/core.clj",1675466804000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/clojurescript/1.10.914/clojurescript-1.10.914.jar!/cljs/analyzer/passes/and_or.cljc",1676259734000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/core.async/1.4.627/core.async-1.4.627.jar!/clojure/core/async/impl/mutex.clj",1676259738000,"jar:file:/C:/Users/carre/.m2/repository/io/aviso/pretty/0.1.37/pretty-0.1.37.jar!/io/aviso/exception.clj",1676259734000,"jar:file:/C:/Users/carre/.m2/repository/expound/expound/0.8.9/expound-0.8.9.jar!/expound/util.cljc",1676259733000,"jar:file:/C:/Users/carre/.m2/repository/com/fulcrologic/fulcro/3.5.9/fulcro-3.5.9.jar!/com/fulcrologic/fulcro/algorithms/merge.cljc",1676259735000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/clojurescript/1.10.914/clojurescript-1.10.914.jar!/cljs/analyzer/impl.cljc",1676259734000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/clojurescript/1.10.914/clojurescript-1.10.914.jar!/cljs/pprint.cljc",1676259734000,"jar:file:/C:/Users/carre/.m2/repository/expound/expound/0.8.9/expound-0.8.9.jar!/expound/printer.cljc",1676259733000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/core.async/1.4.627/core.async-1.4.627.jar!/cljs/core/async.clj",1676259738000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/pprint.clj",1675466804000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/reader_types.clj",1675288215000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/core.async/1.4.627/core.async-1.4.627.jar!/clojure/core/async/impl/dispatch.clj",1676259738000,"jar:file:/C:/Users/carre/.m2/repository/com/taoensso/timbre/5.1.1/timbre-5.1.1.jar!/taoensso/timbre.cljc",1676259736000,"jar:file:/C:/Users/carre/.m2/repository/expound/expound/0.8.9/expound-0.8.9.jar!/expound/alpha.cljc",1676259733000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/core.async/1.4.627/core.async-1.4.627.jar!/clojure/core/async/impl/channels.clj",1676259738000,"jar:file:/C:/Users/carre/.m2/repository/expound/expound/0.8.9/expound-0.8.9.jar!/expound/ansi.cljc",1676259733000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/core.async/1.4.627/core.async-1.4.627.jar!/clojure/core/async/impl/concurrent.clj",1676259738000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/set.clj",1675466804000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/walk.clj",1675466804000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/string.clj",1675466804000,"jar:file:/C:/Users/carre/.m2/repository/com/fulcrologic/guardrails/1.1.4/guardrails-1.1.4.jar!/com/fulcrologic/guardrails/impl/pro.cljc",1676259733000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/clojurescript/1.10.914/clojurescript-1.10.914.jar!/cljs/tagged_literals.cljc",1676259734000,"jar:file:/C:/Users/carre/.m2/repository/com/fulcrologic/fulcro/3.5.9/fulcro-3.5.9.jar!/com/fulcrologic/fulcro/algorithms/tx_processing.cljc",1676259735000,"jar:file:/C:/Users/carre/.m2/repository/com/fulcrologic/fulcro/3.5.9/fulcro-3.5.9.jar!/com/fulcrologic/fulcro/dom/events.cljc",1676259735000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/tools.analyzer/1.1.0/tools.analyzer-1.1.0.jar!/clojure/tools/analyzer.clj",1675288214000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/clojurescript/1.10.914/clojurescript-1.10.914.jar!/cljs/compiler.cljc",1676259734000,"jar:file:/C:/Users/carre/.m2/repository/com/fulcrologic/fulcro/3.5.9/fulcro-3.5.9.jar!/com/fulcrologic/fulcro/algorithms/data_targeting.cljc",1676259735000,"jar:file:/C:/Users/carre/.m2/repository/com/fulcrologic/guardrails/1.1.4/guardrails-1.1.4.jar!/com/fulcrologic/guardrails/registry.cljc",1676259733000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/reflect.clj",1675466804000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/core.async/1.4.627/core.async-1.4.627.jar!/clojure/core/async.clj",1676259738000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/clojurescript/1.10.914/clojurescript-1.10.914.jar!/cljs/spec/gen/alpha.cljc",1676259734000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/clojurescript/1.10.914/clojurescript-1.10.914.jar!/cljs/externs.clj",1676259734000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/edn.clj",1675288215000,"jar:file:/C:/Users/carre/.m2/repository/com/cognitect/transit-clj/1.0.324/transit-clj-1.0.324.jar!/cognitect/transit.clj",1676259736000,"jar:file:/C:/Users/carre/.m2/repository/com/fulcrologic/guardrails/1.1.4/guardrails-1.1.4.jar!/com/fulcrologic/guardrails/config.cljc",1676259733000,"jar:file:/C:/Users/carre/.m2/repository/com/fulcrologic/fulcro/3.5.9/fulcro-3.5.9.jar!/com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc",1676259735000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/tools.analyzer.jvm/1.2.0/tools.analyzer.jvm-1.2.0.jar!/clojure/tools/analyzer/jvm.clj",1676259734000,"jar:file:/C:/Users/carre/.m2/repository/com/taoensso/encore/3.10.1/encore-3.10.1.jar!/taoensso/encore.cljc",1676259733000,"jar:file:/C:/Users/carre/.m2/repository/com/fulcrologic/fulcro/3.5.9/fulcro-3.5.9.jar!/com/fulcrologic/fulcro/algorithms/normalize.cljc",1676259735000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/core.async/1.4.627/core.async-1.4.627.jar!/clojure/core/async/impl/protocols.clj",1676259738000,"jar:file:/C:/Users/carre/.m2/repository/com/fulcrologic/fulcro/3.5.9/fulcro-3.5.9.jar!/com/fulcrologic/fulcro/algorithms/tempid.cljc",1676259735000,"jar:file:/C:/Users/carre/.m2/repository/com/fulcrologic/fulcro/3.5.9/fulcro-3.5.9.jar!/com/fulcrologic/fulcro/inspect/inspect_client.cljc",1676259735000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","A transaction processing system that does as much synchronously as possible, and removes various elements\n   of complexity that were inherited from Fulcro 2 in the standard tx processing.\n\n   See `with-synchronous-transactions` for how to install it.\n\n   This tx processing system does as much work synchronously as possible, though it does try to preserve the\n   call-order *semantics* of the standard transaction processing: That is to say that if the optimistic action\n   of a transaction submits a new transaction then that new submission will run *after* the current already-in-progress\n   transaction has finished processing:\n\n   ```\n   (defmutation g [_]\n     (action [{:keys [state]}] (swap! state ...))\n     (ok-action [{:keys [app]}] (transact! app [(h)]))\n     (remote [_] true))\n\n   (defmutation f [_]\n     (action [{:keys [state app]}]\n       (swap! state ...)\n       (transact! app [(g)])))\n\n   ...\n   (dom/a {:onClick (fn []\n                      (transact! this [(f {:x 1})])\n                      (transact! this [(f {:x 2})])\n                      (transact! this [(f {:x 3})])))\n   ```\n\n   A user clicking the above link with std processing could see any of the following:\n\n   ```\n   f,f,f,g,g,g,h,h,h\n   f,f,f,g,h,g,g,h,h\n   f,f,f,g,g,h,g,h,h\n   etc.\n   ```\n\n   In sync tx processing, you would more likely see:\n\n   ```\n   f,g,f,g,f,g,h,h,h\n   ```\n\n   because there is *no guarantee* in Fulcro's semantics about the space between two calls to `transact!`. If your\n   application relies on the groupings that happen with the standard tx processing (submissions while holding a thread\n   go into the queue first) then your application may break when you switch to sync processing.\n\n   Note that transactions *are* treated as atomically as possible. So, if you want a specific grouping you should submit\n   it as a single tx:\n\n   ```\n   (transact! [(f) (g)])\n   (transact! [(f) (g)])\n   ```\n\n   is guaranteed to do `f,g,f,g`, and never `f,f,g,g`, though it is still possible to see `f,g,h,f,g,h`.\n\n   This sync transaction processing system allows you to push most (if not all) behavior of even nested transactions into a single\n   synchronous operation. This will lead to significant improvements in the snappiness of the UI for optimistic operation\n   and should also reduce over-rendering (multiple calls to render due to multiple async operations).\n\n   If your remote is mocked as a synchronous operation, then you can also leverage this tx processor to enable\n   completely synchronous testing of your headless Fulcro application.\n\n   WARNING: This tx processing system does *not* support:\n\n   * `ptransact!`: Pessimistic transactions are a legacy feature of Fulcro 2 that is no longer necessary. New\n   applications should not use the feature, and this sync tx processing system does not support it. The call\n   will succeed, but will behave as a normal `transact!`.\n   ","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^8",1,"^9",5,"^:",1,"^;",78],"^<",["^ ","^=","^>","^?","^@","^A","^B","^C","^D"],"^E",["^ ","^F","^G","^H","^I","^J","^I"],"^K",["^L",[]],"^M",["^ ","^F",["^ ","^N",["^O",[["^P","~$&","^Q"]]],"^8",89,"^9",4,"^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^R","^S","^T","^G","^U",true]],"^R","^G","^V",["^ "],"^X",null,"^Y",["^ ","^Z","^[","^10","^11","^12","^12","^13","^14","^15","^16","^17","^12","^18","^18","^I","^I","^19","^19","^11","^11","~$m","^1:","^1;","^1;","^1<","^1;","^1=","^1>","^1:","^1:","^[","^[","^1>","^1>","^16","^16","^14","^14"],"^1?",["^L",["^1@","^1A"]],"~:shadow/js-access-global",["^L",["Error"]],"^1B",["^ ","^H","^I","^J","^I"],"~:defs",["^ ","~$distribute-element-results!",["^ ","~:protocol-inline",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^8",169,"^9",7,"^:",169,"^;",34,"^N",["^O",["~$quote",["^O",[["~$app","~$tx-node",["^ ","~:keys",["~:com.fulcrologic.fulcro.algorithms.tx-processing/results","~:com.fulcrologic.fulcro.algorithms.tx-processing/complete?"],"^1F","~$tx-element"]]]]]],"^6","Distribute results and mark the remotes for those elements as complete."],"^R","^2Y","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^;",34,"~:method-params",["^O",[["^;5","^;6","~$p__60333"]]],"~:protocol-impl",null,"~:arglists-meta",["^O",[null,null]],"^9",1,"~:variadic?",false,"^8",169,"~:ret-tag",["^L",[null,"~$any"]],"^:",169,"~:max-fixed-arity",3,"~:fn-var",true,"^N",["^O",["^;4",["^O",[["^;5","^;6",["^ ","^;7",["^;8","^;9"],"^1F","^;:"]]]]]],"^6","Distribute results and mark the remotes for those elements as complete."],"~$top-level?",["^ ","^;3",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^8",97,"^9",7,"^:",97,"^;",17,"^N",["^O",["^;4",["^O",[[["^ ","~:com.fulcrologic.fulcro.application/keys",["~$id"]]]]]]],"^6","Returns true if the current thread is running non-nested transaction processing code."],"^R","^2U","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^;",17,"^;;",["^O",[["~$p__60154"]]],"^;=",null,"^;>",["^O",[null,null]],"^9",1,"^;?",false,"^8",97,"^;@","~$boolean","^:",97,"^;B",1,"^;C",true,"^N",["^O",["^;4",["^O",[[["^ ","^;E",["^;F"]]]]]]],"^6","Returns true if the current thread is running non-nested transaction processing code."],"~$with-synchronous-transactions",["^ ","^;3",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^8",402,"^9",7,"^:",402,"^;",36,"^N",["^O",["^;4",["^O",[["^;5"]]]]],"^6","Installs synchronous transaction processing on a fulcro application.\n\n  ```\n  (defonce app (stx/with-synchronous-transactions\n                 (app/fulcro-app {...})))\n  ```\n\n  This plug-in attempts to do as much work as possible synchronously, including the processing of \"remotes\" that\n  can behave synchronously. This processing system\n  preserves transactional ordering semantics for nested submissions, but cannot guarantee that the overall sequence of\n  operations will exactly match what you'd see if using the standard tx processing.\n\n  The options map you can pass to `transact!` supports most of the same things as the standard tx processing, with the significant exception of\n  `:optimistic? false` (pessimistic transactions). It also *always* assumes synchronous operation, thought the\n  `synchronous?` option (if used) does imply that only the current component should be refreshed in the UI.\n\n  - `:ref` - ident. The component ident to include in the transaction env.\n  - `:component` - React element. The instance of the component that should appear in the transaction env.\n  - `:synchronous?` - When true, causes the rendering to only refresh the calling component (if possible), since the implication\n  is for fast-as-possible refresh semantics, even though this tx processing is already sync.\n  - `:refresh` - A hint. Vector containing idents (of components) and keywords (of props). Things that have changed and should be re-rendered\n    on screen. Only necessary when the underlying rendering algorithm won't auto-detect, such as when UI is derived from the\n    state of other components or outside of the directly queried props. Interpretation depends on the renderer selected:\n    The ident-optimized render treats these as \"extras\".\n  - `:only-refresh` - A hint. Vector of idents/keywords.  If the underlying configured rendering algorithm supports it: The\n    components using these are the *only* things that will be refreshed in the UI, and they may be refreshed immediately on\n    `transact!`. This can be used to avoid the overhead of looking for stale data when you know exactly what\n    you want to refresh on screen as an extra optimization. Idents are *not* checked against queries.\n\n  If the `options` include `:ref` (which comp/transact! sets), then it will be auto-included on the `:refresh` list.\n\n  Returns the transaction ID of the submitted transaction.\n  "],"^R","^4<","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^;",36,"^;;",["^O",[["^;5"]]],"^;=",null,"^;>",["^O",[null,null]],"^9",1,"^;?",false,"^8",402,"^;@",["^L",["~$clj","^;A"]],"^:",402,"^;B",1,"^;C",true,"^N",["^O",["^;4",["^O",[["^;5"]]]]],"^6","Installs synchronous transaction processing on a fulcro application.\n\n  ```\n  (defonce app (stx/with-synchronous-transactions\n                 (app/fulcro-app {...})))\n  ```\n\n  This plug-in attempts to do as much work as possible synchronously, including the processing of \"remotes\" that\n  can behave synchronously. This processing system\n  preserves transactional ordering semantics for nested submissions, but cannot guarantee that the overall sequence of\n  operations will exactly match what you'd see if using the standard tx processing.\n\n  The options map you can pass to `transact!` supports most of the same things as the standard tx processing, with the significant exception of\n  `:optimistic? false` (pessimistic transactions). It also *always* assumes synchronous operation, thought the\n  `synchronous?` option (if used) does imply that only the current component should be refreshed in the UI.\n\n  - `:ref` - ident. The component ident to include in the transaction env.\n  - `:component` - React element. The instance of the component that should appear in the transaction env.\n  - `:synchronous?` - When true, causes the rendering to only refresh the calling component (if possible), since the implication\n  is for fast-as-possible refresh semantics, even though this tx processing is already sync.\n  - `:refresh` - A hint. Vector containing idents (of components) and keywords (of props). Things that have changed and should be re-rendered\n    on screen. Only necessary when the underlying rendering algorithm won't auto-detect, such as when UI is derived from the\n    state of other components or outside of the directly queried props. Interpretation depends on the renderer selected:\n    The ident-optimized render treats these as \"extras\".\n  - `:only-refresh` - A hint. Vector of idents/keywords.  If the underlying configured rendering algorithm supports it: The\n    components using these are the *only* things that will be refreshed in the UI, and they may be refreshed immediately on\n    `transact!`. This can be used to avoid the overhead of looking for stale data when you know exactly what\n    you want to refresh on screen as an extra optimization. Idents are *not* checked against queries.\n\n  If the `options` include `:ref` (which comp/transact! sets), then it will be auto-included on the `:refresh` list.\n\n  Returns the transaction ID of the submitted transaction.\n  "],"~$swap-post-processing-steps!",["^ ","^;3",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^8",105,"^9",7,"^:",105,"^;",34,"^N",["^O",["^;4",["^O",[["^;5","~$&","~$args"]]]]],"~:top-fn",["^ ","^;?",true,"~:fixed-arity",1,"^;B",1,"^;;",[["^O",["^;5","^;L"]]],"^N",["^O",[["^;5","~$&","^;L"]]],"^;>",["^O",[null]]]],"^R","^3R","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^;",34,"^;M",["^ ","^;?",true,"^;N",1,"^;B",1,"^;;",[["^O",["^;5","^;L"]]],"^N",["^O",[["^;5","~$&","^;L"]]],"^;>",["^O",[null]]],"^;;",[["^O",["^;5","^;L"]]],"^;=",null,"^;N",1,"^;>",["^O",[null]],"^9",1,"^;?",true,"~:methods",[["^ ","^;N",1,"^;?",true,"~:tag","^;A"]],"^8",105,"^;@","^;A","^:",105,"^;B",1,"^;C",true,"^N",["^O",[["^;5","~$&","^;L"]]]],"~$active-queue",["^ ","^;3",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^8",110,"^9",7,"^:",110,"^;",19,"^N",["^O",["^;4",["^O",[["^;5"]]]]]],"^R","^2Z","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^;",19,"^;;",["^O",[["^;5"]]],"^;=",null,"^;>",["^O",[null,null]],"^9",1,"^;?",false,"^8",110,"^;@","^;A","^:",110,"^;B",1,"^;C",true,"^N",["^O",["^;4",["^O",[["^;5"]]]]]],"~$reset-send-queue!",["^ ","^;3",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^8",112,"^9",7,"^:",112,"^;",24,"^N",["^O",["^;4",["^O",[["^;5","~$remote","~$v"]]]]]],"^R","^2R","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^;",24,"^;;",["^O",[["^;5","^;S","~$v"]]],"^;=",null,"^;>",["^O",[null,null]],"^9",1,"^;?",false,"^8",112,"^;@",["^L",[null,"^;A"]],"^:",112,"^;B",3,"^;C",true,"^N",["^O",["^;4",["^O",[["^;5","^;S","~$v"]]]]]],"~$apps-in-tx",["^ ","^R","^42","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^8",84,"^9",1,"^:",84,"^;",20,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^8",84,"^9",10,"^:",84,"^;",20],"^;P","~$cljs.core/Atom"],"~$post-processing-steps",["^ ","^;3",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^8",107,"^9",7,"^:",107,"^;",28,"^N",["^O",["^;4",["^O",[["^;5"]]]]]],"^R","^2[","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^;",28,"^;;",["^O",[["^;5"]]],"^;=",null,"^;>",["^O",[null,null]],"^9",1,"^;?",false,"^8",107,"^;@","^;A","^:",107,"^;B",1,"^;C",true,"^N",["^O",["^;4",["^O",[["^;5"]]]]]],"~$queue-sends!",["^ ","^;3",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^8",266,"^9",7,"^:",266,"^;",19,"^N",["^O",["^;4",["^O",[["^;5",["^ ","^;7",["~:com.fulcrologic.fulcro.algorithms.tx-processing/options","~:com.fulcrologic.fulcro.algorithms.tx-processing/elements"],"^1F","^;6"]]]]]],"^6","Finds any item(s) on the given node that are ready to be placed on the network queues and adds them. Non-optimistic\n  multi-element nodes will only queue one remote operation at a time."],"^R","^2O","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^;",19,"^;;",["^O",[["^;5","~$p__60386"]]],"^;=",null,"^;>",["^O",[null,null]],"^9",1,"^;?",false,"^8",266,"^;@",["^L",[null,"^;A"]],"^:",266,"^;B",2,"^;C",true,"^N",["^O",["^;4",["^O",[["^;5",["^ ","^;7",["^;X","^;Y"],"^1F","^;6"]]]]]],"^6","Finds any item(s) on the given node that are ready to be placed on the network queues and adds them. Non-optimistic\n  multi-element nodes will only queue one remote operation at a time."],"~$submit-sync-tx!",["^ ","^;3",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^8",375,"^9",7,"^:",375,"^;",22,"^N",["^O",["^;4",["^O",[["^;5","~$tx"],[["^ ","^;E",["~$runtime-atom"],"^1F","^;5"],"^<0","~$options"]]]]],"^;M",["^ ","^;?",false,"^;N",3,"^;B",3,"^;;",[["^;5","^<0"],[["^ ","^;E",["^<1"],"^1F","^;5"],"^<0","^<2"]],"^N",["^O",[["^;5","^<0"],[["^ ","^;E",["^<1"],"^1F","^;5"],"^<0","^<2"]]],"^;>",["^O",[null,null]]]],"^R","^3>","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^;",22,"^;M",["^ ","^;?",false,"^;N",3,"^;B",3,"^;;",[["^;5","^<0"],[["^ ","^;E",["^<1"],"^1F","^;5"],"^<0","^<2"]],"^N",["^O",[["^;5","^<0"],[["^ ","^;E",["^<1"],"^1F","^;5"],"^<0","^<2"]]],"^;>",["^O",[null,null]]],"^;;",[["^;5","^<0"],[["^ ","^;E",["^<1"],"^1F","^;5"],"^<0","^<2"]],"^;=",null,"^;N",3,"^;>",["^O",[null,null]],"^9",1,"^;?",false,"^;O",[["^ ","^;N",2,"^;?",false,"^;P","^;A"],["^ ","^;N",3,"^;?",false,"^;P","^;A"]],"^8",375,"^:",375,"^;B",3,"^;C",true,"^N",["^O",[["^;5","^<0"],[["^ ","^;E",["^<1"],"^1F","^;5"],"^<0","^<2"]]]],"~$process-queue!",["^ ","^;3",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^8",309,"^9",7,"^:",309,"^;",21,"^N",["^O",["^;4",["^O",[[["^ ","^;E",["~$state-atom","^<1"],"^1F","^;5"]]]]]],"^6","Run through the active queue and do a processing step."],"^R","^3?","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^;",21,"^;;",["^O",[["~$p__60491"]]],"^;=",null,"^;>",["^O",[null,null]],"^9",1,"^;?",false,"^8",309,"^;@","~$clj-nil","^:",309,"^;B",1,"^;C",true,"^N",["^O",["^;4",["^O",[[["^ ","^;E",["^<4","^<1"],"^1F","^;5"]]]]]],"^6","Run through the active queue and do a processing step."],"~$remove-send!",["^ ","^;3",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^8",216,"^9",7,"^:",216,"^;",19,"^N",["^O",["^;4",["^O",[["^;5","^;S","~$txn-id","~$ele-idx"]]]]],"^6","Removes the send node (if present) from the send queue on the given remote."],"^R","^48","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^;",19,"^;;",["^O",[["^;5","^;S","^<8","^<9"]]],"^;=",null,"^;>",["^O",[null,null]],"^9",1,"^;?",false,"^8",216,"^;@","^;A","^:",216,"^;B",4,"^;C",true,"^N",["^O",["^;4",["^O",[["^;5","^;S","^<8","^<9"]]]]],"^6","Removes the send node (if present) from the send queue on the given remote."],"~$queue-element-sends!",["^ ","^;3",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^8",249,"^9",7,"^:",249,"^;",27,"^N",["^O",["^;4",["^O",[["^;5","^;6",["^ ","~:com.fulcrologic.fulcro.algorithms.tx-processing/keys",["~$idx","~$dispatch","~$started?"]]]]]]],"^6","Queue all (unqueued) remote actions for the given element.  Returns the (possibly updated) node."],"^R","^3;","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^;",27,"^;;",["^O",[["^;5","^;6","~$p__60382"]]],"^;=",null,"^;>",["^O",[null,null]],"^9",1,"^;?",false,"^8",249,"^;@",["^L",[null,"^;A"]],"^:",249,"^;B",3,"^;C",true,"^N",["^O",["^;4",["^O",[["^;5","^;6",["^ ","^<;",["^<<","^<=","^<>"]]]]]]],"^6","Queue all (unqueued) remote actions for the given element.  Returns the (possibly updated) node."],"~$run-after!",["^ ","^;3",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^8",115,"^9",7,"^:",115,"^;",17,"^N",["^O",["^;4",["^O",[["^;5","~$f"]]]]],"^6","Add `f` as a function that will run after the current transaction has been fully processed."],"^R","^33","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^;",17,"^;;",["^O",[["^;5","~$f"]]],"^;=",null,"^;>",["^O",[null,null]],"^9",1,"^;?",false,"^8",115,"^;@","^;A","^:",115,"^;B",2,"^;C",true,"^N",["^O",["^;4",["^O",[["^;5","~$f"]]]]],"^6","Add `f` as a function that will run after the current transaction has been fully processed."],"~$run-all-immediate-work!",["^ ","^;3",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^8",351,"^9",7,"^:",351,"^;",30,"^N",["^O",["^;4",["^O",[["^;5"]]]]],"^6","Runs the submission queue. If the submission queue's optimistic actions submit more to the submission queue, then those\n   are processed as well until the submission queue remains empty. This can start network requests."],"^R","^4>","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^;",30,"^;;",["^O",[["^;5"]]],"^;=",null,"^;>",["^O",[null,null]],"^9",1,"^;?",false,"^8",351,"^:",351,"^;B",1,"^;C",true,"^N",["^O",["^;4",["^O",[["^;5"]]]]],"^6","Runs the submission queue. If the submission queue's optimistic actions submit more to the submission queue, then those\n   are processed as well until the submission queue remains empty. This can start network requests."],"~$record-result!",["^ ","^;3",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^8",202,"^9",7,"^:",202,"^;",21,"^N",["^O",["^;4",["^O",[["^;5","^<8","^<9","^;S","~$result","~$result-key"],["^;5","^<8","^<9","^;S","^<C"]]]]],"^6","Deal with a network result on the given txn/element.","^;M",["^ ","^;?",false,"^;N",6,"^;B",6,"^;;",[["^;5","^<8","^<9","^;S","^<C","^<D"],["^;5","^<8","^<9","^;S","^<C"]],"^N",["^O",[["^;5","^<8","^<9","^;S","^<C","^<D"],["^;5","^<8","^<9","^;S","^<C"]]],"^;>",["^O",[null,null]]]],"^R","^2H","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^;",21,"^;M",["^ ","^;?",false,"^;N",6,"^;B",6,"^;;",[["^;5","^<8","^<9","^;S","^<C","^<D"],["^;5","^<8","^<9","^;S","^<C"]],"^N",["^O",[["^;5","^<8","^<9","^;S","^<C","^<D"],["^;5","^<8","^<9","^;S","^<C"]]],"^;>",["^O",[null,null]]],"^;;",[["^;5","^<8","^<9","^;S","^<C","^<D"],["^;5","^<8","^<9","^;S","^<C"]],"^;=",null,"^;N",6,"^;>",["^O",[null,null]],"^9",1,"^;?",false,"^;O",[["^ ","^;N",6,"^;?",false,"^;P",["^L",["^;A","^<6"]]],["^ ","^;N",5,"^;?",false,"^;P",["^L",["^;A","^<6"]]]],"^8",202,"^:",202,"^;B",6,"^;C",true,"^N",["^O",[["^;5","^<8","^<9","^;S","^<C","^<D"],["^;5","^<8","^<9","^;S","^<C"]]],"^6","Deal with a network result on the given txn/element."],"~$process-tx-node!",["^ ","^;3",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^8",276,"^9",7,"^:",276,"^;",23,"^N",["^O",["^;4",["^O",[["^;5",["^ ","^;7",["^;X"],"^1F","^;6"]]]]]]],"^R","^3B","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^;",23,"^;;",["^O",[["^;5","~$p__60389"]]],"^;=",null,"^;>",["^O",[null,null]],"^9",1,"^;?",false,"^8",276,"^;@",["^L",[null,"^;A","^<6"]],"^:",276,"^;B",2,"^;C",true,"^N",["^O",["^;4",["^O",[["^;5",["^ ","^;7",["^;X"],"^1F","^;6"]]]]]]],"~$add-send!",["^ ","^;3",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^8",223,"^9",7,"^:",223,"^;",16,"^N",["^O",["^;4",["^O",[["^;5",["^ ","^<;",["^;F","^<2"],"^1F","^;6"],"^<9","^;S"]]]]],"^6","Generate a new send node and add it to the appropriate send queue."],"^R","^3J","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^;",16,"^;;",["^O",[["^;5","~$p__60371","^<9","^;S"]]],"^;=",null,"^;>",["^O",[null,null]],"^9",1,"^;?",false,"^8",223,"^;@","^<6","^:",223,"^;B",4,"^;C",true,"^N",["^O",["^;4",["^O",[["^;5",["^ ","^<;",["^;F","^<2"],"^1F","^;6"],"^<9","^;S"]]]]],"^6","Generate a new send node and add it to the appropriate send queue."],"~$do-post-processing!",["^ ","^;3",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^8",125,"^9",7,"^:",125,"^;",26,"^N",["^O",["^;4",["^O",[["^;5"]]]]],"^6","Runs the queued post processing steps until the post-processing queue is empty."],"^R","^3F","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^;",26,"^;;",["^O",[["^;5"]]],"^;=",null,"^;>",["^O",[null,null]],"^9",1,"^;?",false,"^8",125,"^;@","^<6","^:",125,"^;B",1,"^;C",true,"^N",["^O",["^;4",["^O",[["^;5"]]]]],"^6","Runs the queued post processing steps until the post-processing queue is empty."],"~$distribute-results!",["^ ","^;3",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^8",192,"^9",7,"^:",192,"^;",26,"^N",["^O",["^;4",["^O",[["^;5","^<8","^<9"]]]]],"^6","Side-effects against the app state to distribute the result for txn-id element at ele-idx. This will call the result\n   handler and mark that remote as complete."],"^R","^2:","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^;",26,"^;;",["^O",[["^;5","^<8","^<9"]]],"^;=",null,"^;>",["^O",[null,null]],"^9",1,"^;?",false,"^8",192,"^;@","^;A","^:",192,"^;B",3,"^;C",true,"^N",["^O",["^;4",["^O",[["^;5","^<8","^<9"]]]]],"^6","Side-effects against the app state to distribute the result for txn-id element at ele-idx. This will call the result\n   handler and mark that remote as complete."],"~$post-processing?",["^ ","^;3",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^8",120,"^9",7,"^:",120,"^;",23,"^N",["^O",["^;4",["^O",[["^;5"]]]]],"^6","Is there post processing to do?"],"^R","^2X","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^;",23,"^;;",["^O",[["^;5"]]],"^;=",null,"^;>",["^O",[null,null]],"^9",1,"^;?",false,"^8",120,"^;@","^;H","^:",120,"^;B",1,"^;C",true,"^N",["^O",["^;4",["^O",[["^;5"]]]]],"^6","Is there post processing to do?"],"~$process-send-queues!",["^ ","^;3",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^8",285,"^9",7,"^:",285,"^;",27,"^N",["^O",["^;4",["^O",[["^;5"]]]]],"^6","Process the send queues against the remotes, which will cause idle remotes with queued work to issue network requests."],"^R","^2E","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^;",27,"^;;",["^O",[["^;5"]]],"^;=",null,"^;>",["^O",[null,null]],"^9",1,"^;?",false,"^8",285,"^;@","^<6","^:",285,"^;B",1,"^;C",true,"^N",["^O",["^;4",["^O",[["^;5"]]]]],"^6","Process the send queues against the remotes, which will cause idle remotes with queued work to issue network requests."],"~$swap-active-queue!",["^ ","^;3",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^8",108,"^9",7,"^:",108,"^;",25,"^N",["^O",["^;4",["^O",[["^;5","~$&","^;L"]]]]],"^;M",["^ ","^;?",true,"^;N",1,"^;B",1,"^;;",[["^O",["^;5","^;L"]]],"^N",["^O",[["^;5","~$&","^;L"]]],"^;>",["^O",[null]]]],"^R","^3:","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^;",25,"^;M",["^ ","^;?",true,"^;N",1,"^;B",1,"^;;",[["^O",["^;5","^;L"]]],"^N",["^O",[["^;5","~$&","^;L"]]],"^;>",["^O",[null]]],"^;;",[["^O",["^;5","^;L"]]],"^;=",null,"^;N",1,"^;>",["^O",[null]],"^9",1,"^;?",true,"^;O",[["^ ","^;N",1,"^;?",true,"^;P","^;A"]],"^8",108,"^;@","^;A","^:",108,"^;B",1,"^;C",true,"^N",["^O",[["^;5","~$&","^;L"]]]],"~$sync-tx!",["^ ","^;3",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^8",373,"^9",7,"^:",373,"^;",15,"^N",["^O",["^;4",["^O",[["~$&","^;L"]]]]],"^;M",["^ ","^;?",true,"^;N",0,"^;B",0,"^;;",[["^O",["^;L"]]],"^N",["^O",[["~$&","^;L"]]],"^;>",["^O",[null]]]],"^R","^3T","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^;",15,"^;M",["^ ","^;?",true,"^;N",0,"^;B",0,"^;;",[["^O",["^;L"]]],"^N",["^O",[["~$&","^;L"]]],"^;>",["^O",[null]]],"^;;",[["^O",["^;L"]]],"^;=",null,"^;N",0,"^;>",["^O",[null]],"^9",1,"^;?",true,"^;O",[["^ ","^;N",0,"^;?",true,"^;P","~$ignore"]],"^8",373,"^;@","^;A","^:",373,"^;B",0,"^;C",true,"^N",["^O",[["~$&","^;L"]]]],"~$in-transaction?",["^ ","^;3",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^8",138,"^9",7,"^:",138,"^;",22,"^N",["^O",["^;4",["^O",[[["^ ","^;E",["^;F"],"^1F","^;5"]]]]]],"^6","Returns true if the current thread is in the midst of running the optimistic actions of a new transaction."],"^R","^40","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^;",22,"^;;",["^O",[["~$p__60315"]]],"^;=",null,"^;>",["^O",[null,null]],"^9",1,"^;?",false,"^8",138,"^;@","^;H","^:",138,"^;B",1,"^;C",true,"^N",["^O",["^;4",["^O",[[["^ ","^;E",["^;F"],"^1F","^;5"]]]]]],"^6","Returns true if the current thread is in the midst of running the optimistic actions of a new transaction."],"~$available-work?",["^ ","^;3",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^8",333,"^9",7,"^:",333,"^;",22,"^N",["^O",["^;4",["^O",[["^;5"]]]]],"^6","Returns true if the submission queue has work on it that can proceed without any restrictions."],"^R","^3W","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^;",22,"^;;",["^O",[["^;5"]]],"^;=",null,"^;>",["^O",[null,null]],"^9",1,"^;?",false,"^8",333,"^;@","^;H","^:",333,"^;B",1,"^;C",true,"^N",["^O",["^;4",["^O",[["^;5"]]]]],"^6","Returns true if the submission queue has work on it that can proceed without any restrictions."],"~$reset-post-processing-steps!",["^ ","^;3",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^8",106,"^9",7,"^:",106,"^;",35,"^N",["^O",["^;4",["^O",[["^;5","~$v"]]]]]],"^R","^41","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^;",35,"^;;",["^O",[["^;5","~$v"]]],"^;=",null,"^;>",["^O",[null,null]],"^9",1,"^;?",false,"^8",106,"^;@",["^L",[null,"^;A"]],"^:",106,"^;B",2,"^;C",true,"^N",["^O",["^;4",["^O",[["^;5","~$v"]]]]]],"~$release-post-render-tasks!",["^ ","^;3",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^8",143,"^9",7,"^:",143,"^;",33,"^N",["^O",["^;4",["^O",[["^;5"]]]]],"^6","Should be called after the application renders to ensure that transactions blocked until the next render become\n   unblocked. Schedules an activation."],"^R","^31","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^;",33,"^;;",["^O",[["^;5"]]],"^;=",null,"^;>",["^O",[null,null]],"^9",1,"^;?",false,"^8",143,"^;@","^;A","^:",143,"^;B",1,"^;C",true,"^N",["^O",["^;4",["^O",[["^;5"]]]]],"^6","Should be called after the application renders to ensure that transactions blocked until the next render become\n   unblocked. Schedules an activation."],"~$abort!",["^ ","^R","^3E","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^8",396,"^9",1,"^:",396,"^;",12,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^8",396,"^9",6,"^:",396,"^;",12],"^6","[app abort-id]\n\n   Implementation of abort when using this tx processing"],"~$send-queue",["^ ","^;3",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^8",113,"^9",7,"^:",113,"^;",17,"^N",["^O",["^;4",["^O",[["^;5","^;S"]]]]]],"^R","^47","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^;",17,"^;;",["^O",[["^;5","^;S"]]],"^;=",null,"^;>",["^O",[null,null]],"^9",1,"^;?",false,"^8",113,"^;@","^;A","^:",113,"^;B",2,"^;C",true,"^N",["^O",["^;4",["^O",[["^;5","^;S"]]]]]],"~$node-index",["^ ","^;3",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^8",180,"^9",8,"^:",180,"^;",18,"~:private",true,"^N",["^O",["^;4",["^O",[["~$queue","^<8"]]]]]],"^<X",true,"^R","^21","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^;",18,"^;;",["^O",[["^<Y","^<8"]]],"^;=",null,"^;>",["^O",[null,null]],"^9",1,"^;?",false,"^8",180,"^;@",["^L",[null,"^;A","^<6"]],"^:",180,"^;B",2,"^;C",true,"^N",["^O",["^;4",["^O",[["^<Y","^<8"]]]]]],"~$reset-active-queue!",["^ ","^;3",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^8",109,"^9",7,"^:",109,"^;",26,"^N",["^O",["^;4",["^O",[["^;5","~$v"]]]]]],"^R","^3H","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^;",26,"^;;",["^O",[["^;5","~$v"]]],"^;=",null,"^;>",["^O",[null,null]],"^9",1,"^;?",false,"^8",109,"^;@",["^L",[null,"^;A"]],"^:",109,"^;B",2,"^;C",true,"^N",["^O",["^;4",["^O",[["^;5","~$v"]]]]]],"~$submission-queue",["^ ","^;3",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^8",104,"^9",7,"^:",104,"^;",23,"^N",["^O",["^;4",["^O",[["^;5"]]]]]],"^R","^24","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^;",23,"^;;",["^O",[["^;5"]]],"^;=",null,"^;>",["^O",[null,null]],"^9",1,"^;?",false,"^8",104,"^;@","^;A","^:",104,"^;B",1,"^;C",true,"^N",["^O",["^;4",["^O",[["^;5"]]]]]],"~$swap-submission-queue!",["^ ","^;3",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^8",102,"^9",7,"^:",102,"^;",29,"^N",["^O",["^;4",["^O",[["^;5","~$&","^;L"]]]]],"^;M",["^ ","^;?",true,"^;N",1,"^;B",1,"^;;",[["^O",["^;5","^;L"]]],"^N",["^O",[["^;5","~$&","^;L"]]],"^;>",["^O",[null]]]],"^R","^23","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^;",29,"^;M",["^ ","^;?",true,"^;N",1,"^;B",1,"^;;",[["^O",["^;5","^;L"]]],"^N",["^O",[["^;5","~$&","^;L"]]],"^;>",["^O",[null]]],"^;;",[["^O",["^;5","^;L"]]],"^;=",null,"^;N",1,"^;>",["^O",[null]],"^9",1,"^;?",true,"^;O",[["^ ","^;N",1,"^;?",true,"^;P","^;A"]],"^8",102,"^;@","^;A","^:",102,"^;B",1,"^;C",true,"^N",["^O",[["^;5","~$&","^;L"]]]],"~$run-queue!",["^ ","^;3",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^8",360,"^9",7,"^:",360,"^;",17,"^N",["^O",["^;4",["^O",[["^;5",["^ ","^;7",["~$component","~$synchronous?"],"^1F","^<2"]]]]]]],"^R","^22","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^;",17,"^;;",["^O",[["^;5","~$p__60555"]]],"^;=",null,"^;>",["^O",[null,null]],"^9",1,"^;?",false,"^8",360,"^;@","^<6","^:",360,"^;B",2,"^;C",true,"^N",["^O",["^;4",["^O",[["^;5",["^ ","^;7",["^=2","^=3"],"^1F","^<2"]]]]]]],"~$activate-submissions!",["^ ","^;3",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^8",339,"^9",7,"^:",339,"^;",28,"^N",["^O",["^;4",["^O",[["^;5"]]]]],"^6","Activate all of the transactions that have been submitted since the last activation. After the items are activated\n  a single processing step will run for the active queue.\n\n  Activation can be blocked by the tx-node options for things like waiting for the next render frame."],"^R","^27","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^;",28,"^;;",["^O",[["^;5"]]],"^;=",null,"^;>",["^O",[null,null]],"^9",1,"^;?",false,"^8",339,"^;@","^<6","^:",339,"^;B",1,"^;C",true,"^N",["^O",["^;4",["^O",[["^;5"]]]]],"^6","Activate all of the transactions that have been submitted since the last activation. After the items are activated\n  a single processing step will run for the active queue.\n\n  Activation can be blocked by the tx-node options for things like waiting for the next render frame."],"~$reset-submission-queue!",["^ ","^;3",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^8",103,"^9",7,"^:",103,"^;",30,"^N",["^O",["^;4",["^O",[["^;5","~$v"]]]]]],"^R","^1Y","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^;",30,"^;;",["^O",[["^;5","~$v"]]],"^;=",null,"^;>",["^O",[null,null]],"^9",1,"^;?",false,"^8",103,"^;@",["^L",[null,"^;A"]],"^:",103,"^;B",2,"^;C",true,"^N",["^O",["^;4",["^O",[["^;5","~$v"]]]]]],"~$swap-send-queue!",["^ ","^;3",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^8",111,"^9",7,"^:",111,"^;",23,"^N",["^O",["^;4",["^O",[["^;5","^;S","~$&","^;L"]]]]],"^;M",["^ ","^;?",true,"^;N",2,"^;B",2,"^;;",[["^O",["^;5","^;S","^;L"]]],"^N",["^O",[["^;5","^;S","~$&","^;L"]]],"^;>",["^O",[null]]]],"^R","^44","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^;",23,"^;M",["^ ","^;?",true,"^;N",2,"^;B",2,"^;;",[["^O",["^;5","^;S","^;L"]]],"^N",["^O",[["^;5","^;S","~$&","^;L"]]],"^;>",["^O",[null]]],"^;;",[["^O",["^;5","^;S","^;L"]]],"^;=",null,"^;N",2,"^;>",["^O",[null]],"^9",1,"^;?",true,"^;O",[["^ ","^;N",2,"^;?",true,"^;P","^;A"]],"^8",111,"^;@","^;A","^:",111,"^;B",2,"^;C",true,"^N",["^O",[["^;5","^;S","~$&","^;L"]]]],"~$dispatch-result!",["^ ","^;3",null,"^5",["^ ","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^8",149,"^9",7,"^:",149,"^;",23,"^N",["^O",["^;4",["^O",[["^;5","^;6",["^ ","^<;",["~$results","^<=","~$desired-ast-nodes","~$transmitted-ast-nodes","~$original-ast-node"],"^1F","^;:"],"^;S"]]]]],"^6","Figure out the dispatch routine to trigger for the given network result.  If it exists, send the result\n  to it.\n\n  Returns the tx-element with the remote marked complete."],"^R","^2@","^7","com/fulcrologic/fulcro/algorithms/tx_processing/synchronous_tx_processing.cljc","^;",23,"^;;",["^O",[["^;5","^;6","~$p__60323","^;S"]]],"^;=",null,"^;>",["^O",[null,null]],"^9",1,"^;?",false,"^8",149,"^;@",["^L",["^;J","^;A"]],"^:",149,"^;B",4,"^;C",true,"^N",["^O",["^;4",["^O",[["^;5","^;6",["^ ","^<;",["^=9","^<=","^=:","^=;","^=<"],"^1F","^;:"],"^;S"]]]]],"^6","Figure out the dispatch routine to trigger for the given network result.  If it exists, send the result\n  to it.\n\n  Returns the tx-element with the remote marked complete."]],"^1A",["^ ","^13","^14","^15","^16","^18","^18","^I","^I","~$m","^1:","^1:","^1:","^16","^16","^14","^14","^G","^G"],"~:cljs.analyzer/constants",["^ ","^1?",["^L",["~:only-refresh","~:com.fulcrologic.fulcro.algorithms.tx-processing/send-queue","~:com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/post-processing-steps","^;8","~:transacted-ast","~:com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/active-queue","~:com.fulcrologic.fulcro.algorithms.tx-processing/ast","~:com.fulcrologic.fulcro.algorithms.tx-processing/update-handler","~:refresh","~:ref","~:synchronous?","~:render!","~:transmitted-ast","~:com.fulcrologic.fulcro.algorithm/abort!","~:com.fulcrologic.fulcro.algorithm/tx!","~:com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/config","~:status-code","~:after-render?","~:component","^;Y","~:com.fulcrologic.fulcro.application/state-atom","~:com.fulcrologic.fulcro.application/only-refresh","~:com.fulcrologic.fulcro.application/id","~:dispatch","~:com.fulcrologic.fulcro.application/to-refresh","~:mutation-ast","~:com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/send-queues","~:result","~:com.fulcrologic.fulcro.application/runtime-atom","~:com.fulcrologic.fulcro.algorithms.tx-processing/dispatch","~:com.fulcrologic.fulcro.algorithms.tx-processing/started?","~:dispatch-key","~:com.fulcrologic.fulcro.application/algorithms","~:com.fulcrologic.fulcro.algorithms.tx-processing/id","~:com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/active?","~:error","~:result-action","~:com.fulcrologic.fulcro.algorithms.tx-processing/progress","~:body","^;X","~:com.fulcrologic.fulcro.algorithms.tx-processing.synchronous-tx-processing/submission-queue","~:auto","~:p","~:com.fulcrologic.fulcro.algorithms.tx-processing/original-ast-node","~:com.fulcrologic.fulcro.application/remotes","~:com.fulcrologic.fulcro.algorithms.tx-processing/send-node","~:com.fulcrologic.fulcro.application/active-remotes","~:com.fulcrologic.fulcro.algorithms.tx-processing/active?","^;9","~:com.fulcrologic.fulcro.algorithms.tx-processing/idx","~:com.fulcrologic.fulcro.algorithms.tx-processing/desired-ast-nodes","~:com.fulcrologic.fulcro.algorithms.tx-processing/result-handler","~:com.fulcrologic.fulcro.algorithms.tx-processing/transmitted-ast-nodes"]],"~:order",["^=S","^=M","^>8","^=A","^=C","^=W","^>4","~:p","^>9","^;X","^=O","^;8","^=Z","^>@","^>B","^>:","^>5","^=T","^=B","^=V","^=J","^=X","^>0","^;9","^>2","^;Y","^>?","^>6","^=D","^>>","^>A","^=E","^=N","^>7","^=[","^>3","^=@","^><","^=Q","^=Y","^>=","^=U","^=P","^=H","^=I","^=F","^=?","^=G","^=R","^>;","^>1","^=L","^=K"]],"^1G",["^ ","^1A",["^L",[]],"^1@",["^L",[]]],"^1H",["^ "],"^1I",["^19","^18","^11","^1>","^1;","^[","^1:","^16","^I","^12","^14"]],"^T","^G","~:ns-specs",["^ "],"~:ns-spec-vars",["^L",[]],"~:compiler-options",["^4C",[["^>F","~:static-fns"],true,["^>F","~:shadow-tweaks"],null,["^>F","~:source-map-inline"],null,["^>F","~:elide-asserts"],true,["^>F","~:optimize-constants"],null,["^>F","^1N"],null,["^>F","~:external-config"],null,["^>F","~:tooling-config"],null,["^>F","~:emit-constants"],null,["^>F","~:load-tests"],false,["^>F","~:form-size-threshold"],null,["^>F","~:global-goog-object&array"],null,["^>F","~:data-readers"],null,["^>F","~:infer-externs"],"^>9",["^>F","^1P"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:release",["^>F","~:fn-invoke-direct"],null,["^>F","~:source-map"],null]]]