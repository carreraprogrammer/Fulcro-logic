["^ ","~:output",["^ ","~:js","goog.provide('com.fulcrologic.fulcro.rendering.multiple_roots_renderer');\r\ngoog.scope(function(){\r\n  com.fulcrologic.fulcro.rendering.multiple_roots_renderer.goog$module$goog$object = goog.module.get('goog.object');\r\n});\r\nvar module$node_modules$react$index=shadow.js.require(\"module$node_modules$react$index\", {});\r\n/**\r\n * Register a mounted react component as a new root that should be managed. The\r\n *   options map can contain:\r\n * \r\n *   - `:initialize?`: Should the initial state be pushed into the app state (if not already present)? Defaults\r\n *   to true, which causes it to happen once (on initial mount).\r\n */\r\ncom.fulcrologic.fulcro.rendering.multiple_roots_renderer.register_root_BANG_ = (function com$fulcrologic$fulcro$rendering$multiple_roots_renderer$register_root_BANG_(var_args){\r\nvar G__58525 = arguments.length;\r\nswitch (G__58525) {\r\ncase 1:\r\nreturn com.fulcrologic.fulcro.rendering.multiple_roots_renderer.register_root_BANG_.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\r\n\r\nbreak;\r\ncase 2:\r\nreturn com.fulcrologic.fulcro.rendering.multiple_roots_renderer.register_root_BANG_.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\r\n\r\nbreak;\r\ndefault:\r\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\r\n\r\n}\r\n});\r\n\r\n(com.fulcrologic.fulcro.rendering.multiple_roots_renderer.register_root_BANG_.cljs$core$IFn$_invoke$arity$1 = (function (react_instance){\r\nreturn com.fulcrologic.fulcro.rendering.multiple_roots_renderer.register_root_BANG_.cljs$core$IFn$_invoke$arity$2(react_instance,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"initialize?\",\"initialize?\",-1238334118),true], null));\r\n}));\r\n\r\n(com.fulcrologic.fulcro.rendering.multiple_roots_renderer.register_root_BANG_.cljs$core$IFn$_invoke$arity$2 = (function (react_instance,p__58531){\r\nvar map__58532 = p__58531;\r\nvar map__58532__$1 = cljs.core.__destructure_map(map__58532);\r\nvar app__$1 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__58532__$1,new cljs.core.Keyword(null,\"app\",\"app\",-560961707));\r\nvar initialize_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__58532__$1,new cljs.core.Keyword(null,\"initialize?\",\"initialize?\",-1238334118));\r\nvar app__$2 = (function (){var or__4253__auto__ = app__$1;\r\nif(cljs.core.truth_(or__4253__auto__)){\r\nreturn or__4253__auto__;\r\n} else {\r\nvar or__4253__auto____$1 = com.fulcrologic.fulcro.components.any__GT_app(react_instance);\r\nif(cljs.core.truth_(or__4253__auto____$1)){\r\nreturn or__4253__auto____$1;\r\n} else {\r\nreturn com.fulcrologic.fulcro.components._STAR_app_STAR_;\r\n}\r\n}\r\n})();\r\nif(cljs.core.map_QMARK_(app__$2)){\r\nvar class$ = com.fulcrologic.fulcro.components.react_type(react_instance);\r\nvar k = (com.fulcrologic.fulcro.components.class__GT_registry_key.cljs$core$IFn$_invoke$arity$1 ? com.fulcrologic.fulcro.components.class__GT_registry_key.cljs$core$IFn$_invoke$arity$1(class$) : com.fulcrologic.fulcro.components.class__GT_registry_key.call(null,class$));\r\nvar initialize_state_BANG_ = com.fulcrologic.fulcro.algorithms.lookup.app_algorithm(app__$2,new cljs.core.Keyword(null,\"initialize-state!\",\"initialize-state!\",-1114074844));\r\nvar schedule_render_BANG_ = com.fulcrologic.fulcro.algorithms.lookup.app_algorithm(app__$2,new cljs.core.Keyword(null,\"schedule-render!\",\"schedule-render!\",2095050350));\r\nvar known_roots = (function (){var G__58535 = app__$2;\r\nvar G__58535__$1 = (((G__58535 == null))?null:new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"runtime-atom\",\"com.fulcrologic.fulcro.application/runtime-atom\",-1167397772).cljs$core$IFn$_invoke$arity$1(G__58535));\r\nvar G__58535__$2 = (((G__58535__$1 == null))?null:cljs.core.deref(G__58535__$1));\r\nif((G__58535__$2 == null)){\r\nreturn null;\r\n} else {\r\nreturn new cljs.core.Keyword(\"com.fulcrologic.fulcro.rendering.multiple-roots-renderer\",\"known-roots\",\"com.fulcrologic.fulcro.rendering.multiple-roots-renderer/known-roots\",1422774853).cljs$core$IFn$_invoke$arity$1(G__58535__$2);\r\n}\r\n})();\r\nvar initialized_QMARK_ = cljs.core.contains_QMARK_(known_roots,k);\r\nif(cljs.core.truth_((function (){var and__4251__auto__ = initialize_QMARK_;\r\nif(cljs.core.truth_(and__4251__auto__)){\r\nreturn (!(initialized_QMARK_));\r\n} else {\r\nreturn and__4251__auto__;\r\n}\r\n})())){\r\n(initialize_state_BANG_.cljs$core$IFn$_invoke$arity$2 ? initialize_state_BANG_.cljs$core$IFn$_invoke$arity$2(app__$2,class$) : initialize_state_BANG_.call(null,app__$2,class$));\r\n\r\nvar G__58536_58694 = app__$2;\r\nvar G__58537_58695 = new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"force-root?\",\"force-root?\",-1598741683),true], null);\r\n(schedule_render_BANG_.cljs$core$IFn$_invoke$arity$2 ? schedule_render_BANG_.cljs$core$IFn$_invoke$arity$2(G__58536_58694,G__58537_58695) : schedule_render_BANG_.call(null,G__58536_58694,G__58537_58695));\r\n} else {\r\n}\r\n\r\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$11(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"debug\",\"debug\",-1608172596),\"com.fulcrologic.fulcro.rendering.multiple-roots-renderer\",null,90,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay((function (){\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"Adding root of type \",k], null);\r\n}),null)),null,1775709485,null);\r\n\r\nreturn cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"runtime-atom\",\"com.fulcrologic.fulcro.application/runtime-atom\",-1167397772).cljs$core$IFn$_invoke$arity$1(app__$2),cljs.core.update_in,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.rendering.multiple-roots-renderer\",\"known-roots\",\"com.fulcrologic.fulcro.rendering.multiple-roots-renderer/known-roots\",1422774853),k], null),cljs.core.fnil.cljs$core$IFn$_invoke$arity$2(cljs.core.conj,cljs.core.PersistentHashSet.EMPTY),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([react_instance], 0));\r\n} else {\r\nreturn taoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$11(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.rendering.multiple-roots-renderer\",null,92,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay((function (){\r\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"Register-root cannot find app. Pass your Fulcro app via options. See https://book.fulcrologic.com/#err-mrr-reg-root-no-app\"], null);\r\n}),null)),null,-526603774,null);\r\n}\r\n}));\r\n\r\n(com.fulcrologic.fulcro.rendering.multiple_roots_renderer.register_root_BANG_.cljs$lang$maxFixedArity = 2);\r\n\r\n/**\r\n * Deregister a mounted root that should no longer be managed.\r\n */\r\ncom.fulcrologic.fulcro.rendering.multiple_roots_renderer.deregister_root_BANG_ = (function com$fulcrologic$fulcro$rendering$multiple_roots_renderer$deregister_root_BANG_(var_args){\r\nvar G__58544 = arguments.length;\r\nswitch (G__58544) {\r\ncase 1:\r\nreturn com.fulcrologic.fulcro.rendering.multiple_roots_renderer.deregister_root_BANG_.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\r\n\r\nbreak;\r\ncase 2:\r\nreturn com.fulcrologic.fulcro.rendering.multiple_roots_renderer.deregister_root_BANG_.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\r\n\r\nbreak;\r\ndefault:\r\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\r\n\r\n}\r\n});\r\n\r\n(com.fulcrologic.fulcro.rendering.multiple_roots_renderer.deregister_root_BANG_.cljs$core$IFn$_invoke$arity$1 = (function (react_instance){\r\nreturn com.fulcrologic.fulcro.rendering.multiple_roots_renderer.deregister_root_BANG_.cljs$core$IFn$_invoke$arity$2(react_instance,cljs.core.PersistentArrayMap.EMPTY);\r\n}));\r\n\r\n(com.fulcrologic.fulcro.rendering.multiple_roots_renderer.deregister_root_BANG_.cljs$core$IFn$_invoke$arity$2 = (function (react_instance,p__58555){\r\nvar map__58556 = p__58555;\r\nvar map__58556__$1 = cljs.core.__destructure_map(map__58556);\r\nvar options = map__58556__$1;\r\nvar app__$1 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__58556__$1,new cljs.core.Keyword(null,\"app\",\"app\",-560961707));\r\nvar app__$2 = (function (){var or__4253__auto__ = app__$1;\r\nif(cljs.core.truth_(or__4253__auto__)){\r\nreturn or__4253__auto__;\r\n} else {\r\nvar or__4253__auto____$1 = com.fulcrologic.fulcro.components.any__GT_app(react_instance);\r\nif(cljs.core.truth_(or__4253__auto____$1)){\r\nreturn or__4253__auto____$1;\r\n} else {\r\nreturn com.fulcrologic.fulcro.components._STAR_app_STAR_;\r\n}\r\n}\r\n})();\r\nif(cljs.core.map_QMARK_(app__$2)){\r\nvar class$ = com.fulcrologic.fulcro.components.react_type(react_instance);\r\nvar k = (com.fulcrologic.fulcro.components.class__GT_registry_key.cljs$core$IFn$_invoke$arity$1 ? com.fulcrologic.fulcro.components.class__GT_registry_key.cljs$core$IFn$_invoke$arity$1(class$) : com.fulcrologic.fulcro.components.class__GT_registry_key.call(null,class$));\r\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$11(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"debug\",\"debug\",-1608172596),\"com.fulcrologic.fulcro.rendering.multiple-roots-renderer\",null,103,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay((function (){\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"Adding root of type \",k], null);\r\n}),null)),null,-1938274429,null);\r\n\r\nreturn cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"runtime-atom\",\"com.fulcrologic.fulcro.application/runtime-atom\",-1167397772).cljs$core$IFn$_invoke$arity$1(app__$2),cljs.core.update_in,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.rendering.multiple-roots-renderer\",\"known-roots\",\"com.fulcrologic.fulcro.rendering.multiple-roots-renderer/known-roots\",1422774853),k], null),cljs.core.disj,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([react_instance], 0));\r\n} else {\r\nreturn taoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$11(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.rendering.multiple-roots-renderer\",null,105,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay((function (){\r\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"Deregister-root cannot find app. Pass your Fulcro app via options. See https://book.fulcrologic.com/#err-mrr-dereg-root-no-app\"], null);\r\n}),null)),null,-226143401,null);\r\n}\r\n}));\r\n\r\n(com.fulcrologic.fulcro.rendering.multiple_roots_renderer.deregister_root_BANG_.cljs$lang$maxFixedArity = 2);\r\n\r\ncom.fulcrologic.fulcro.rendering.multiple_roots_renderer.render_roots_BANG_ = (function com$fulcrologic$fulcro$rendering$multiple_roots_renderer$render_roots_BANG_(app__$1,options){\r\nvar state_map = (function (){var G__58561 = app__$1;\r\nvar G__58561__$1 = (((G__58561 == null))?null:new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"state-atom\",\"com.fulcrologic.fulcro.application/state-atom\",648128366).cljs$core$IFn$_invoke$arity$1(G__58561));\r\nif((G__58561__$1 == null)){\r\nreturn null;\r\n} else {\r\nreturn cljs.core.deref(G__58561__$1);\r\n}\r\n})();\r\nvar known_roots = (function (){var G__58564 = app__$1;\r\nvar G__58564__$1 = (((G__58564 == null))?null:new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"runtime-atom\",\"com.fulcrologic.fulcro.application/runtime-atom\",-1167397772).cljs$core$IFn$_invoke$arity$1(G__58564));\r\nvar G__58564__$2 = (((G__58564__$1 == null))?null:cljs.core.deref(G__58564__$1));\r\nif((G__58564__$2 == null)){\r\nreturn null;\r\n} else {\r\nreturn new cljs.core.Keyword(\"com.fulcrologic.fulcro.rendering.multiple-roots-renderer\",\"known-roots\",\"com.fulcrologic.fulcro.rendering.multiple-roots-renderer/known-roots\",1422774853).cljs$core$IFn$_invoke$arity$1(G__58564__$2);\r\n}\r\n})();\r\ncom.fulcrologic.fulcro.rendering.keyframe_render.render_BANG_(app__$1,options);\r\n\r\nvar seq__58565 = cljs.core.seq(cljs.core.keys(known_roots));\r\nvar chunk__58567 = null;\r\nvar count__58568 = (0);\r\nvar i__58569 = (0);\r\nwhile(true){\r\nif((i__58569 < count__58568)){\r\nvar k = chunk__58567.cljs$core$IIndexed$_nth$arity$2(null,i__58569);\r\nvar cls_58699 = (com.fulcrologic.fulcro.components.registry_key__GT_class.cljs$core$IFn$_invoke$arity$1 ? com.fulcrologic.fulcro.components.registry_key__GT_class.cljs$core$IFn$_invoke$arity$1(k) : com.fulcrologic.fulcro.components.registry_key__GT_class.call(null,k));\r\nvar query_58700 = com.fulcrologic.fulcro.components.get_query.cljs$core$IFn$_invoke$arity$2(cls_58699,state_map);\r\nvar root_props_58701 = com.fulcrologic.fulcro.algorithms.denormalize.db__GT_tree(query_58700,state_map,state_map);\r\nvar seq__58592_58702 = cljs.core.seq(cljs.core.get.cljs$core$IFn$_invoke$arity$2(known_roots,k));\r\nvar chunk__58593_58703 = null;\r\nvar count__58594_58704 = (0);\r\nvar i__58595_58705 = (0);\r\nwhile(true){\r\nif((i__58595_58705 < count__58594_58704)){\r\nvar root_58706 = chunk__58593_58703.cljs$core$IIndexed$_nth$arity$2(null,i__58595_58705);\r\ncom.fulcrologic.fulcro.components.tunnel_props_BANG_(root_58706,root_props_58701);\r\n\r\n\r\nvar G__58707 = seq__58592_58702;\r\nvar G__58708 = chunk__58593_58703;\r\nvar G__58709 = count__58594_58704;\r\nvar G__58710 = (i__58595_58705 + (1));\r\nseq__58592_58702 = G__58707;\r\nchunk__58593_58703 = G__58708;\r\ncount__58594_58704 = G__58709;\r\ni__58595_58705 = G__58710;\r\ncontinue;\r\n} else {\r\nvar temp__5753__auto___58711 = cljs.core.seq(seq__58592_58702);\r\nif(temp__5753__auto___58711){\r\nvar seq__58592_58712__$1 = temp__5753__auto___58711;\r\nif(cljs.core.chunked_seq_QMARK_(seq__58592_58712__$1)){\r\nvar c__4679__auto___58713 = cljs.core.chunk_first(seq__58592_58712__$1);\r\nvar G__58714 = cljs.core.chunk_rest(seq__58592_58712__$1);\r\nvar G__58715 = c__4679__auto___58713;\r\nvar G__58716 = cljs.core.count(c__4679__auto___58713);\r\nvar G__58717 = (0);\r\nseq__58592_58702 = G__58714;\r\nchunk__58593_58703 = G__58715;\r\ncount__58594_58704 = G__58716;\r\ni__58595_58705 = G__58717;\r\ncontinue;\r\n} else {\r\nvar root_58718 = cljs.core.first(seq__58592_58712__$1);\r\ncom.fulcrologic.fulcro.components.tunnel_props_BANG_(root_58718,root_props_58701);\r\n\r\n\r\nvar G__58719 = cljs.core.next(seq__58592_58712__$1);\r\nvar G__58720 = null;\r\nvar G__58721 = (0);\r\nvar G__58722 = (0);\r\nseq__58592_58702 = G__58719;\r\nchunk__58593_58703 = G__58720;\r\ncount__58594_58704 = G__58721;\r\ni__58595_58705 = G__58722;\r\ncontinue;\r\n}\r\n} else {\r\n}\r\n}\r\nbreak;\r\n}\r\n\r\n\r\nvar G__58723 = seq__58565;\r\nvar G__58724 = chunk__58567;\r\nvar G__58725 = count__58568;\r\nvar G__58726 = (i__58569 + (1));\r\nseq__58565 = G__58723;\r\nchunk__58567 = G__58724;\r\ncount__58568 = G__58725;\r\ni__58569 = G__58726;\r\ncontinue;\r\n} else {\r\nvar temp__5753__auto__ = cljs.core.seq(seq__58565);\r\nif(temp__5753__auto__){\r\nvar seq__58565__$1 = temp__5753__auto__;\r\nif(cljs.core.chunked_seq_QMARK_(seq__58565__$1)){\r\nvar c__4679__auto__ = cljs.core.chunk_first(seq__58565__$1);\r\nvar G__58727 = cljs.core.chunk_rest(seq__58565__$1);\r\nvar G__58728 = c__4679__auto__;\r\nvar G__58729 = cljs.core.count(c__4679__auto__);\r\nvar G__58730 = (0);\r\nseq__58565 = G__58727;\r\nchunk__58567 = G__58728;\r\ncount__58568 = G__58729;\r\ni__58569 = G__58730;\r\ncontinue;\r\n} else {\r\nvar k = cljs.core.first(seq__58565__$1);\r\nvar cls_58731 = (com.fulcrologic.fulcro.components.registry_key__GT_class.cljs$core$IFn$_invoke$arity$1 ? com.fulcrologic.fulcro.components.registry_key__GT_class.cljs$core$IFn$_invoke$arity$1(k) : com.fulcrologic.fulcro.components.registry_key__GT_class.call(null,k));\r\nvar query_58732 = com.fulcrologic.fulcro.components.get_query.cljs$core$IFn$_invoke$arity$2(cls_58731,state_map);\r\nvar root_props_58733 = com.fulcrologic.fulcro.algorithms.denormalize.db__GT_tree(query_58732,state_map,state_map);\r\nvar seq__58619_58734 = cljs.core.seq(cljs.core.get.cljs$core$IFn$_invoke$arity$2(known_roots,k));\r\nvar chunk__58620_58735 = null;\r\nvar count__58621_58736 = (0);\r\nvar i__58622_58737 = (0);\r\nwhile(true){\r\nif((i__58622_58737 < count__58621_58736)){\r\nvar root_58738 = chunk__58620_58735.cljs$core$IIndexed$_nth$arity$2(null,i__58622_58737);\r\ncom.fulcrologic.fulcro.components.tunnel_props_BANG_(root_58738,root_props_58733);\r\n\r\n\r\nvar G__58739 = seq__58619_58734;\r\nvar G__58740 = chunk__58620_58735;\r\nvar G__58741 = count__58621_58736;\r\nvar G__58742 = (i__58622_58737 + (1));\r\nseq__58619_58734 = G__58739;\r\nchunk__58620_58735 = G__58740;\r\ncount__58621_58736 = G__58741;\r\ni__58622_58737 = G__58742;\r\ncontinue;\r\n} else {\r\nvar temp__5753__auto___58743__$1 = cljs.core.seq(seq__58619_58734);\r\nif(temp__5753__auto___58743__$1){\r\nvar seq__58619_58744__$1 = temp__5753__auto___58743__$1;\r\nif(cljs.core.chunked_seq_QMARK_(seq__58619_58744__$1)){\r\nvar c__4679__auto___58745 = cljs.core.chunk_first(seq__58619_58744__$1);\r\nvar G__58746 = cljs.core.chunk_rest(seq__58619_58744__$1);\r\nvar G__58747 = c__4679__auto___58745;\r\nvar G__58748 = cljs.core.count(c__4679__auto___58745);\r\nvar G__58749 = (0);\r\nseq__58619_58734 = G__58746;\r\nchunk__58620_58735 = G__58747;\r\ncount__58621_58736 = G__58748;\r\ni__58622_58737 = G__58749;\r\ncontinue;\r\n} else {\r\nvar root_58750 = cljs.core.first(seq__58619_58744__$1);\r\ncom.fulcrologic.fulcro.components.tunnel_props_BANG_(root_58750,root_props_58733);\r\n\r\n\r\nvar G__58751 = cljs.core.next(seq__58619_58744__$1);\r\nvar G__58752 = null;\r\nvar G__58753 = (0);\r\nvar G__58754 = (0);\r\nseq__58619_58734 = G__58751;\r\nchunk__58620_58735 = G__58752;\r\ncount__58621_58736 = G__58753;\r\ni__58622_58737 = G__58754;\r\ncontinue;\r\n}\r\n} else {\r\n}\r\n}\r\nbreak;\r\n}\r\n\r\n\r\nvar G__58755 = cljs.core.next(seq__58565__$1);\r\nvar G__58756 = null;\r\nvar G__58757 = (0);\r\nvar G__58758 = (0);\r\nseq__58565 = G__58755;\r\nchunk__58567 = G__58756;\r\ncount__58568 = G__58757;\r\ni__58569 = G__58758;\r\ncontinue;\r\n}\r\n} else {\r\nreturn null;\r\n}\r\n}\r\nbreak;\r\n}\r\n});\r\n/**\r\n * This function tracks the state of the app at the time of prior render in the app's runtime-atom. It\r\n * uses that to do a comparison of old vs. current application state (bounded by the needs of on-screen components).\r\n * When it finds data that has changed it renders all of the components that depend on that data.\r\n */\r\ncom.fulcrologic.fulcro.rendering.multiple_roots_renderer.render_stale_components_BANG_ = (function com$fulcrologic$fulcro$rendering$multiple_roots_renderer$render_stale_components_BANG_(app__$1,options){\r\nvar map__58629 = app__$1;\r\nvar map__58629__$1 = cljs.core.__destructure_map(map__58629);\r\nvar runtime_atom = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__58629__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"runtime-atom\",\"com.fulcrologic.fulcro.application/runtime-atom\",-1167397772));\r\nvar map__58630 = cljs.core.deref(runtime_atom);\r\nvar map__58630__$1 = cljs.core.__destructure_map(map__58630);\r\nvar only_refresh = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__58630__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"only-refresh\",\"com.fulcrologic.fulcro.application/only-refresh\",1300408206));\r\nvar limited_refresh_QMARK_ = cljs.core.seq(only_refresh);\r\nif(limited_refresh_QMARK_){\r\nvar map__58631 = cljs.core.group_by(edn_query_language.core.ident_QMARK_,only_refresh);\r\nvar map__58631__$1 = cljs.core.__destructure_map(map__58631);\r\nvar limited_idents = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__58631__$1,true);\r\nvar seq__58633 = cljs.core.seq(limited_idents);\r\nvar chunk__58634 = null;\r\nvar count__58635 = (0);\r\nvar i__58636 = (0);\r\nwhile(true){\r\nif((i__58636 < count__58635)){\r\nvar i = chunk__58634.cljs$core$IIndexed$_nth$arity$2(null,i__58636);\r\ncom.fulcrologic.fulcro.rendering.ident_optimized_render.render_components_with_ident_BANG_(app__$1,i);\r\n\r\n\r\nvar G__58759 = seq__58633;\r\nvar G__58760 = chunk__58634;\r\nvar G__58761 = count__58635;\r\nvar G__58762 = (i__58636 + (1));\r\nseq__58633 = G__58759;\r\nchunk__58634 = G__58760;\r\ncount__58635 = G__58761;\r\ni__58636 = G__58762;\r\ncontinue;\r\n} else {\r\nvar temp__5753__auto__ = cljs.core.seq(seq__58633);\r\nif(temp__5753__auto__){\r\nvar seq__58633__$1 = temp__5753__auto__;\r\nif(cljs.core.chunked_seq_QMARK_(seq__58633__$1)){\r\nvar c__4679__auto__ = cljs.core.chunk_first(seq__58633__$1);\r\nvar G__58763 = cljs.core.chunk_rest(seq__58633__$1);\r\nvar G__58764 = c__4679__auto__;\r\nvar G__58765 = cljs.core.count(c__4679__auto__);\r\nvar G__58766 = (0);\r\nseq__58633 = G__58763;\r\nchunk__58634 = G__58764;\r\ncount__58635 = G__58765;\r\ni__58636 = G__58766;\r\ncontinue;\r\n} else {\r\nvar i = cljs.core.first(seq__58633__$1);\r\ncom.fulcrologic.fulcro.rendering.ident_optimized_render.render_components_with_ident_BANG_(app__$1,i);\r\n\r\n\r\nvar G__58767 = cljs.core.next(seq__58633__$1);\r\nvar G__58768 = null;\r\nvar G__58769 = (0);\r\nvar G__58770 = (0);\r\nseq__58633 = G__58767;\r\nchunk__58634 = G__58768;\r\ncount__58635 = G__58769;\r\ni__58636 = G__58770;\r\ncontinue;\r\n}\r\n} else {\r\nreturn null;\r\n}\r\n}\r\nbreak;\r\n}\r\n} else {\r\nreturn com.fulcrologic.fulcro.rendering.multiple_roots_renderer.render_roots_BANG_(app__$1,options);\r\n}\r\n});\r\n/**\r\n * The top-level call for using this optimized render in your application.\r\n * \r\n *   If `:force-root? true` is passed in options, then it just forces a keyframe root render.\r\n * \r\n *   This renderer always does a keyframe render *unless* an `:only-refresh` option is passed to the stack\r\n *   (usually as an option on `(transact! this [(f)] {:only-refresh [...idents...]})`. In that case the renderer\r\n *   will ignore *all* data diffing and will target refresh only to the on-screen components that have the listed\r\n *   ident(s). This allows you to get component-local state refresh rates on transactions that are responding to\r\n *   events that should really only affect a known set of components (like the input field).\r\n * \r\n *   This option does *not* currently support using query keywords in the refresh set. Only idents.\r\n */\r\ncom.fulcrologic.fulcro.rendering.multiple_roots_renderer.render_BANG_ = (function com$fulcrologic$fulcro$rendering$multiple_roots_renderer$render_BANG_(var_args){\r\nvar G__58645 = arguments.length;\r\nswitch (G__58645) {\r\ncase 1:\r\nreturn com.fulcrologic.fulcro.rendering.multiple_roots_renderer.render_BANG_.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\r\n\r\nbreak;\r\ncase 2:\r\nreturn com.fulcrologic.fulcro.rendering.multiple_roots_renderer.render_BANG_.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\r\n\r\nbreak;\r\ndefault:\r\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\r\n\r\n}\r\n});\r\n\r\n(com.fulcrologic.fulcro.rendering.multiple_roots_renderer.render_BANG_.cljs$core$IFn$_invoke$arity$1 = (function (app__$1){\r\nreturn com.fulcrologic.fulcro.rendering.multiple_roots_renderer.render_BANG_.cljs$core$IFn$_invoke$arity$2(app__$1,cljs.core.PersistentArrayMap.EMPTY);\r\n}));\r\n\r\n(com.fulcrologic.fulcro.rendering.multiple_roots_renderer.render_BANG_.cljs$core$IFn$_invoke$arity$2 = (function (app__$1,p__58646){\r\nvar map__58647 = p__58646;\r\nvar map__58647__$1 = cljs.core.__destructure_map(map__58647);\r\nvar options = map__58647__$1;\r\nvar force_root_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__58647__$1,new cljs.core.Keyword(null,\"force-root?\",\"force-root?\",-1598741683));\r\nvar root_props_changed_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__58647__$1,new cljs.core.Keyword(null,\"root-props-changed?\",\"root-props-changed?\",1999614835));\r\nif(cljs.core.truth_((function (){var or__4253__auto__ = force_root_QMARK_;\r\nif(cljs.core.truth_(or__4253__auto__)){\r\nreturn or__4253__auto__;\r\n} else {\r\nreturn root_props_changed_QMARK_;\r\n}\r\n})())){\r\nreturn com.fulcrologic.fulcro.rendering.multiple_roots_renderer.render_roots_BANG_(app__$1,options);\r\n} else {\r\ntry{return com.fulcrologic.fulcro.rendering.multiple_roots_renderer.render_stale_components_BANG_(app__$1,options);\r\n}catch (e58649){var e = e58649;\r\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$11(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"info\",\"info\",-317069002),\"com.fulcrologic.fulcro.rendering.multiple-roots-renderer\",null,152,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay((function (){\r\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"Optimized render failed. Falling back to root render.\"], null);\r\n}),null)),null,-478942406,null);\r\n\r\nreturn com.fulcrologic.fulcro.rendering.multiple_roots_renderer.render_roots_BANG_(app__$1,options);\r\n}}\r\n}));\r\n\r\n(com.fulcrologic.fulcro.rendering.multiple_roots_renderer.render_BANG_.cljs$lang$maxFixedArity = 2);\r\n\r\n/**\r\n * Generate a plain React class that can render a Fulcro UIRoot. NOTE: The UIRoot must register/deregister itself\r\n *   in the component lifecycle:\r\n * \r\n *   ```\r\n *   (defsc UIRoot [this props]\r\n *  {:componentDidMount     (fn [this] (mroot/register-root! this))\r\n *   :componentWillUnmount  (fn [this] (mroot/deregister-root! this))\r\n *   :initial-state {}\r\n *   :query [root-like-query]}\r\n *  ...)\r\n *   ```\r\n * \r\n *   The `fulcro-app` is the app under which this root will be rendered. Create different factories if you have more than\r\n *   one mounted app.\r\n *   \r\n */\r\ncom.fulcrologic.fulcro.rendering.multiple_roots_renderer.floating_root_react_class = (function com$fulcrologic$fulcro$rendering$multiple_roots_renderer$floating_root_react_class(UIRoot,fulcro_app){\r\nvar cls = (function (){\r\nreturn null;\r\n});\r\nvar ui_root = com.fulcrologic.fulcro.components.computed_factory.cljs$core$IFn$_invoke$arity$1(UIRoot);\r\ncom.fulcrologic.fulcro.rendering.multiple_roots_renderer.goog$module$goog$object.extend(cls.prototype,module$node_modules$react$index.Component.prototype,cljs.core.clj__GT_js(new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"shouldComponentUpdate\",\"shouldComponentUpdate\",1795750960),(function (){\r\nreturn false;\r\n}),new cljs.core.Keyword(null,\"render\",\"render\",-1408033454),(function (){\r\nvar this$ = this;\r\nvar js_props = this$.props;\r\nvar app__58503__auto__ = (function (){var or__4253__auto__ = com.fulcrologic.fulcro.components._STAR_app_STAR_;\r\nif(cljs.core.truth_(or__4253__auto__)){\r\nreturn or__4253__auto__;\r\n} else {\r\nreturn fulcro_app;\r\n}\r\n})();\r\nvar d__58504__auto__ = (function (){var or__4253__auto__ = com.fulcrologic.fulcro.components._STAR_depth_STAR_;\r\nif(cljs.core.truth_(or__4253__auto__)){\r\nreturn or__4253__auto__;\r\n} else {\r\nreturn (0);\r\n}\r\n})();\r\nvar _STAR_app_STAR__orig_val__58659 = com.fulcrologic.fulcro.components._STAR_app_STAR_;\r\nvar _STAR_shared_STAR__orig_val__58660 = com.fulcrologic.fulcro.components._STAR_shared_STAR_;\r\nvar _STAR_depth_STAR__orig_val__58661 = com.fulcrologic.fulcro.components._STAR_depth_STAR_;\r\nvar _STAR_app_STAR__temp_val__58662 = app__58503__auto__;\r\nvar _STAR_shared_STAR__temp_val__58663 = com.fulcrologic.fulcro.components.shared.cljs$core$IFn$_invoke$arity$1(app__58503__auto__);\r\nvar _STAR_depth_STAR__temp_val__58664 = d__58504__auto__;\r\n(com.fulcrologic.fulcro.components._STAR_app_STAR_ = _STAR_app_STAR__temp_val__58662);\r\n\r\n(com.fulcrologic.fulcro.components._STAR_shared_STAR_ = _STAR_shared_STAR__temp_val__58663);\r\n\r\n(com.fulcrologic.fulcro.components._STAR_depth_STAR_ = _STAR_depth_STAR__temp_val__58664);\r\n\r\ntry{var _STAR_denormalize_time_STAR__orig_val__58667 = com.fulcrologic.fulcro.algorithms.denormalize._STAR_denormalize_time_STAR_;\r\nvar _STAR_denormalize_time_STAR__temp_val__58668 = new cljs.core.Keyword(\"com.fulcrologic.fulcro.rendering.multiple-roots-renderer\",\"basis-t\",\"com.fulcrologic.fulcro.rendering.multiple-roots-renderer/basis-t\",1789052925).cljs$core$IFn$_invoke$arity$1(cljs.core.deref(new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"runtime-atom\",\"com.fulcrologic.fulcro.application/runtime-atom\",-1167397772).cljs$core$IFn$_invoke$arity$1(fulcro_app)));\r\n(com.fulcrologic.fulcro.algorithms.denormalize._STAR_denormalize_time_STAR_ = _STAR_denormalize_time_STAR__temp_val__58668);\r\n\r\ntry{var query = com.fulcrologic.fulcro.components.get_query.cljs$core$IFn$_invoke$arity$1(UIRoot);\r\nvar state_map = (function (){var G__58669 = fulcro_app;\r\nvar G__58669__$1 = (((G__58669 == null))?null:new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"state-atom\",\"com.fulcrologic.fulcro.application/state-atom\",648128366).cljs$core$IFn$_invoke$arity$1(G__58669));\r\nif((G__58669__$1 == null)){\r\nreturn null;\r\n} else {\r\nreturn cljs.core.deref(G__58669__$1);\r\n}\r\n})();\r\nvar props = com.fulcrologic.fulcro.algorithms.denormalize.db__GT_tree(query,state_map,state_map);\r\nvar G__58670 = props;\r\nvar G__58671 = new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"js-props\",\"js-props\",1900369280),js_props], null);\r\nreturn (ui_root.cljs$core$IFn$_invoke$arity$2 ? ui_root.cljs$core$IFn$_invoke$arity$2(G__58670,G__58671) : ui_root.call(null,G__58670,G__58671));\r\n}finally {(com.fulcrologic.fulcro.algorithms.denormalize._STAR_denormalize_time_STAR_ = _STAR_denormalize_time_STAR__orig_val__58667);\r\n}}finally {(com.fulcrologic.fulcro.components._STAR_depth_STAR_ = _STAR_depth_STAR__orig_val__58661);\r\n\r\n(com.fulcrologic.fulcro.components._STAR_shared_STAR_ = _STAR_shared_STAR__orig_val__58660);\r\n\r\n(com.fulcrologic.fulcro.components._STAR_app_STAR_ = _STAR_app_STAR__orig_val__58659);\r\n}})], null)));\r\n\r\nreturn cls;\r\n});\r\n/**\r\n * Create a factory that renders a floating root in a normal Fulcro context (body of a Fulcro component). This factory\r\n * has the same sync constraints as normal `component/factory` functions. See `components/with-parent-context`.\r\n * \r\n *   `UIClass`: A class that will behave as a floating root. NOTE: that class MUST have a mount/unmount hook\r\n *   to regsiter/deregister itself as a root.\r\n * \r\n *   `options`: An options map. Same as for `component/factory`. Note, however, that this factory will *not* receive\r\n *   props, so a `:keyfn` would have to be based on something else.\r\n * \r\n *   You normally do not pass any props to this factory because it is controlling the component and feeding props from\r\n *   the database. Props sent to this factory are only used by the wrapper, however, `:react-key` is useful if you\r\n *   have a bunch of sibling roots and need to set the react key for each.\r\n *   \r\n */\r\ncom.fulcrologic.fulcro.rendering.multiple_roots_renderer.floating_root_factory = (function com$fulcrologic$fulcro$rendering$multiple_roots_renderer$floating_root_factory(var_args){\r\nvar G__58678 = arguments.length;\r\nswitch (G__58678) {\r\ncase 1:\r\nreturn com.fulcrologic.fulcro.rendering.multiple_roots_renderer.floating_root_factory.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\r\n\r\nbreak;\r\ncase 2:\r\nreturn com.fulcrologic.fulcro.rendering.multiple_roots_renderer.floating_root_factory.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\r\n\r\nbreak;\r\ndefault:\r\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\r\n\r\n}\r\n});\r\n\r\n(com.fulcrologic.fulcro.rendering.multiple_roots_renderer.floating_root_factory.cljs$core$IFn$_invoke$arity$1 = (function (UIClass){\r\nreturn com.fulcrologic.fulcro.rendering.multiple_roots_renderer.floating_root_factory.cljs$core$IFn$_invoke$arity$2(UIClass,cljs.core.PersistentArrayMap.EMPTY);\r\n}));\r\n\r\n(com.fulcrologic.fulcro.rendering.multiple_roots_renderer.floating_root_factory.cljs$core$IFn$_invoke$arity$2 = (function (UIClass,options){\r\nvar constructor$ = (function (){\r\nreturn null;\r\n});\r\nvar ui_factory = com.fulcrologic.fulcro.components.computed_factory.cljs$core$IFn$_invoke$arity$1(UIClass);\r\nvar render = (function (this$){\r\nvar _STAR_denormalize_time_STAR__orig_val__58683 = com.fulcrologic.fulcro.algorithms.denormalize._STAR_denormalize_time_STAR_;\r\nvar _STAR_denormalize_time_STAR__temp_val__58684 = new cljs.core.Keyword(\"com.fulcrologic.fulcro.rendering.multiple-roots-renderer\",\"basis-t\",\"com.fulcrologic.fulcro.rendering.multiple-roots-renderer/basis-t\",1789052925).cljs$core$IFn$_invoke$arity$1(cljs.core.deref(new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"runtime-atom\",\"com.fulcrologic.fulcro.application/runtime-atom\",-1167397772).cljs$core$IFn$_invoke$arity$1(com.fulcrologic.fulcro.components._STAR_app_STAR_)));\r\n(com.fulcrologic.fulcro.algorithms.denormalize._STAR_denormalize_time_STAR_ = _STAR_denormalize_time_STAR__temp_val__58684);\r\n\r\ntry{var state_map = (function (){var G__58685 = com.fulcrologic.fulcro.components._STAR_app_STAR_;\r\nvar G__58685__$1 = (((G__58685 == null))?null:new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"state-atom\",\"com.fulcrologic.fulcro.application/state-atom\",648128366).cljs$core$IFn$_invoke$arity$1(G__58685));\r\nif((G__58685__$1 == null)){\r\nreturn null;\r\n} else {\r\nreturn cljs.core.deref(G__58685__$1);\r\n}\r\n})();\r\nvar query = com.fulcrologic.fulcro.components.get_query.cljs$core$IFn$_invoke$arity$2(UIClass,state_map);\r\nvar props = com.fulcrologic.fulcro.algorithms.denormalize.db__GT_tree(query,state_map,state_map);\r\nvar G__58686 = (function (){var or__4253__auto__ = props;\r\nif(cljs.core.truth_(or__4253__auto__)){\r\nreturn or__4253__auto__;\r\n} else {\r\nreturn cljs.core.PersistentArrayMap.EMPTY;\r\n}\r\n})();\r\nvar G__58687 = (com.fulcrologic.fulcro.components.props.cljs$core$IFn$_invoke$arity$1 ? com.fulcrologic.fulcro.components.props.cljs$core$IFn$_invoke$arity$1(this$) : com.fulcrologic.fulcro.components.props.call(null,this$));\r\nreturn (ui_factory.cljs$core$IFn$_invoke$arity$2 ? ui_factory.cljs$core$IFn$_invoke$arity$2(G__58686,G__58687) : ui_factory.call(null,G__58686,G__58687));\r\n}finally {(com.fulcrologic.fulcro.algorithms.denormalize._STAR_denormalize_time_STAR_ = _STAR_denormalize_time_STAR__orig_val__58683);\r\n}});\r\nvar wrapper_class = com.fulcrologic.fulcro.components.configure_component_BANG_(constructor$,new cljs.core.Keyword(\"com.fulcrologic.fulcro.rendering.multiple-roots-renderer\",\"wrapper\",\"com.fulcrologic.fulcro.rendering.multiple-roots-renderer/wrapper\",-2035797237),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"shouldComponentUpdate\",\"shouldComponentUpdate\",1795750960),(function (_,___$1,___$2){\r\nreturn false;\r\n}),new cljs.core.Keyword(null,\"render\",\"render\",-1408033454),render], null));\r\nvar wrapper_factory = com.fulcrologic.fulcro.components.factory.cljs$core$IFn$_invoke$arity$2(wrapper_class,options);\r\nreturn wrapper_factory;\r\n}));\r\n\r\n(com.fulcrologic.fulcro.rendering.multiple_roots_renderer.floating_root_factory.cljs$lang$maxFixedArity = 2);\r\n\r\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:doc","Like keyframe-render2, but also supports free-floating roots.\n\n  WARNING: THIS RENDERER IS ALPHA. Lightly tested, but not heavily used yet.\n\n  General usage:\n\n  1. Set this nses `render!` as your application's optimized render function.\n  2. Create a class that follows all of the normal rules for a Fulcro root (no ident, has initial state,\n  composes children queries/initial-state, etc.\n     a. Add mount/unmount register/deregister calls\n  2. Use floating-root-factory to generate a Fulcro factory, or floating-root-react-class to generate\n  a vanilla React wrapper class that renders the new root.\n     a. Use the factory in normal Fuclro rendering, but don't pass it props, or\n     b. Use `(dom/create-element ReactClass)` to render the vanilla wrapper, or\n     c. Use the vanilla wrapper class when a js library controls rendering (like routing).\n\n  Example:\n\n  ```\n  (defonce app (app/fulcro-app {:optimized-render! mroot/render!}))\n\n  (defsc AltRoot [this {:keys [alt-child]}]\n    ;; query is from ROOT of the db, just like normal root.\n    {:query                 [{:alt-child (comp/get-query OtherChild)}]\n     :componentDidMount     (fn [this] (mroot/register-root! this {:app app}))\n     :componentWillUnmount  (fn [this] (mroot/deregister-root! this {:app app}))\n     :shouldComponentUpdate (fn [] true)\n     :initial-state         {:alt-child [{:id 1 :n 22}\n                                         {:id 2 :n 44}]}}\n    (dom/div\n      (mapv ui-other-child alt-child)))\n\n  ;; For use in the body of normal defsc components.\n  (def ui-alt-root (mroot/floating-root-factory AltRoot))\n\n  ;; For use as plain React class\n  (def PlainAltRoot (mroot/floating-root-react-class AltRoot app))\n\n  ...\n\n  (some-js-library #js {:thing PlainAltRoot})\n\n  (defsc NormalFulcroClass [this props]\n    {:query [:stuff]\n     :ident (fn [] [:x 1])\n     ...}\n    (dom/div\n      ;; ok to use within defsc components:\n      (ui-alt-root)\n      ;; how to use the plain react class, which is how js libs would use it:\n      (dom/create-element PlainAltRoot)))\n\n  ```\n  ","~:file","com/fulcrologic/fulcro/rendering/multiple_roots_renderer.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",61],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$clojure.spec.alpha","~$cljs.spec.alpha","~$clojure.core.async","~$cljs.core.async","~$clojure.pprint","~$cljs.pprint"],"~:use-macros",["^ ","~$with-app-context","~$com.fulcrologic.fulcro.rendering.multiple-roots-renderer"],"~:excludes",["~#set",[]],"~:macros",["^ ","^F",["^ ","~:arglists",["~#list",[["~$fulcro-app","~$&","~$body"]]],"^6","Wraps the given body with the correct internal bindings of the given fulcro-app so that Fulcro internals\n     will work when that body is embedded in unusual ways.\n\n     You should use this around the render body of any floating root that will be rendered outside of\n     the synchronous fulcro render (e.g. you pass a floating root class to a React library).\n     ","^8",156,"^9",4,"^7","com/fulcrologic/fulcro/rendering/multiple_roots_renderer.cljc","~:name","~$com.fulcrologic.fulcro.rendering.multiple-roots-renderer/with-app-context","~:ns","^G","~:macro",true]],"^O","^G","~:reader-aliases",["^ "],"~:js-aliases",["^ ","react","~$module$node_modules$react$index"],"~:op","^Q","~:imports",null,"~:requires",["^ ","~$ah","~$com.fulcrologic.fulcro.algorithms.lookup","~$edn-query-language.core","^10","~$log","~$taoensso.timbre","~$ior","~$com.fulcrologic.fulcro.rendering.ident-optimized-render","~$kr","~$com.fulcrologic.fulcro.rendering.keyframe-render","~$comp","~$com.fulcrologic.fulcro.components","~$eql","^10","~$com.fulcrologic.fulcro.algorithms.denormalize","^1:","~$react","^V","~$cljs.core","^1<","^V","^V","~$gobj","~$goog.object","~$goog","^1?","^1>","^1>","^16","^16","^[","^[","^14","^14","^18","^18","^12","^12","~$fdn","^1:"],"~:seen",["^I",["~:require","~:require-macros"]],"~:uses",null,"^1C",["^ ","^G","^G","^1<","^1<","^11","^12","^17","^18","^18","^18","^12","^12"],"~:form",["^L",["~$ns","^G","Like keyframe-render2, but also supports free-floating roots.\n\n  WARNING: THIS RENDERER IS ALPHA. Lightly tested, but not heavily used yet.\n\n  General usage:\n\n  1. Set this nses `render!` as your application's optimized render function.\n  2. Create a class that follows all of the normal rules for a Fulcro root (no ident, has initial state,\n  composes children queries/initial-state, etc.\n     a. Add mount/unmount register/deregister calls\n  2. Use floating-root-factory to generate a Fulcro factory, or floating-root-react-class to generate\n  a vanilla React wrapper class that renders the new root.\n     a. Use the factory in normal Fuclro rendering, but don't pass it props, or\n     b. Use `(dom/create-element ReactClass)` to render the vanilla wrapper, or\n     c. Use the vanilla wrapper class when a js library controls rendering (like routing).\n\n  Example:\n\n  ```\n  (defonce app (app/fulcro-app {:optimized-render! mroot/render!}))\n\n  (defsc AltRoot [this {:keys [alt-child]}]\n    ;; query is from ROOT of the db, just like normal root.\n    {:query                 [{:alt-child (comp/get-query OtherChild)}]\n     :componentDidMount     (fn [this] (mroot/register-root! this {:app app}))\n     :componentWillUnmount  (fn [this] (mroot/deregister-root! this {:app app}))\n     :shouldComponentUpdate (fn [] true)\n     :initial-state         {:alt-child [{:id 1 :n 22}\n                                         {:id 2 :n 44}]}}\n    (dom/div\n      (mapv ui-other-child alt-child)))\n\n  ;; For use in the body of normal defsc components.\n  (def ui-alt-root (mroot/floating-root-factory AltRoot))\n\n  ;; For use as plain React class\n  (def PlainAltRoot (mroot/floating-root-react-class AltRoot app))\n\n  ...\n\n  (some-js-library #js {:thing PlainAltRoot})\n\n  (defsc NormalFulcroClass [this props]\n    {:query [:stuff]\n     :ident (fn [] [:x 1])\n     ...}\n    (dom/div\n      ;; ok to use within defsc components:\n      (ui-alt-root)\n      ;; how to use the plain react class, which is how js libs would use it:\n      (dom/create-element PlainAltRoot)))\n\n  ```\n  ",["^L",["^1C",["^G","~:refer",["^F"]]]],["^L",["^1B",["^1:","~:as","^1@"],["^[","^1H","^Z"],["^18","^1H","^17"],["^14","^1H","^13"],["^16","^1H","^15"],["^10","^1H","^19"],["^12","^1H","^11"],["react","^1H","^1;"],["^1>","^1H","^1="]]]]],"~:flags",["^ ","^1C",["^I",[]],"^1B",["^I",[]]],"~:js-deps",["^ ","^U",["^ ","^1H","^1;"]],"~:deps",["^1?","^1<","^1:","^[","^18","^14","^16","^10","^12","^V","^1>"]],"^Q","^G","~:resource-id",["~:shadow.build.classpath/resource","com/fulcrologic/fulcro/rendering/multiple_roots_renderer.cljc"],"~:compiled-at",1676259841884,"^S",["^ ","^Z","^[","^10","^10","^11","^12","^13","^14","^15","^16","^17","^18","^19","^10","^1:","^1:","^1;","^V","^1<","^1<","^V","^V","^1=","^1>","^1?","^1?","^1>","^1>","^16","^16","^[","^[","^14","^14","^18","^18","^12","^12","^G","^G","^1@","^1:"],"~:resource-name","com/fulcrologic/fulcro/rendering/multiple_roots_renderer.cljc","~:warnings",[],"~:source","(ns com.fulcrologic.fulcro.rendering.multiple-roots-renderer\n  \"Like keyframe-render2, but also supports free-floating roots.\n\n  WARNING: THIS RENDERER IS ALPHA. Lightly tested, but not heavily used yet.\n\n  General usage:\n\n  1. Set this nses `render!` as your application's optimized render function.\n  2. Create a class that follows all of the normal rules for a Fulcro root (no ident, has initial state,\n  composes children queries/initial-state, etc.\n     a. Add mount/unmount register/deregister calls\n  2. Use floating-root-factory to generate a Fulcro factory, or floating-root-react-class to generate\n  a vanilla React wrapper class that renders the new root.\n     a. Use the factory in normal Fuclro rendering, but don't pass it props, or\n     b. Use `(dom/create-element ReactClass)` to render the vanilla wrapper, or\n     c. Use the vanilla wrapper class when a js library controls rendering (like routing).\n\n  Example:\n\n  ```\n  (defonce app (app/fulcro-app {:optimized-render! mroot/render!}))\n\n  (defsc AltRoot [this {:keys [alt-child]}]\n    ;; query is from ROOT of the db, just like normal root.\n    {:query                 [{:alt-child (comp/get-query OtherChild)}]\n     :componentDidMount     (fn [this] (mroot/register-root! this {:app app}))\n     :componentWillUnmount  (fn [this] (mroot/deregister-root! this {:app app}))\n     :shouldComponentUpdate (fn [] true)\n     :initial-state         {:alt-child [{:id 1 :n 22}\n                                         {:id 2 :n 44}]}}\n    (dom/div\n      (mapv ui-other-child alt-child)))\n\n  ;; For use in the body of normal defsc components.\n  (def ui-alt-root (mroot/floating-root-factory AltRoot))\n\n  ;; For use as plain React class\n  (def PlainAltRoot (mroot/floating-root-react-class AltRoot app))\n\n  ...\n\n  (some-js-library #js {:thing PlainAltRoot})\n\n  (defsc NormalFulcroClass [this props]\n    {:query [:stuff]\n     :ident (fn [] [:x 1])\n     ...}\n    (dom/div\n      ;; ok to use within defsc components:\n      (ui-alt-root)\n      ;; how to use the plain react class, which is how js libs would use it:\n      (dom/create-element PlainAltRoot)))\n\n  ```\n  \"\n  #?(:cljs (:require-macros [com.fulcrologic.fulcro.rendering.multiple-roots-renderer :refer [with-app-context]]))\n  (:require\n    [com.fulcrologic.fulcro.algorithms.denormalize :as fdn]\n    [com.fulcrologic.fulcro.algorithms.lookup :as ah]\n    [com.fulcrologic.fulcro.components :as comp]\n    [com.fulcrologic.fulcro.rendering.ident-optimized-render :as ior]\n    [com.fulcrologic.fulcro.rendering.keyframe-render :as kr]\n    [edn-query-language.core :as eql]\n    [taoensso.timbre :as log]\n    #?@(:cljs\n        [[\"react\" :as react]\n         [goog.object :as gobj]])))\n\n(defn register-root!\n  \"Register a mounted react component as a new root that should be managed. The\n  options map can contain:\n\n  - `:initialize?`: Should the initial state be pushed into the app state (if not already present)? Defaults\n  to true, which causes it to happen once (on initial mount).\"\n  ([react-instance]\n   (register-root! react-instance {:initialize? true}))\n  ([react-instance {:keys [app initialize?]}]\n   (let [app (or app (comp/any->app react-instance) comp/*app*)]\n     (if (map? app)\n       (let [class             (comp/react-type react-instance)\n             k                 (comp/class->registry-key class)\n             initialize-state! (ah/app-algorithm app :initialize-state!)\n             schedule-render!  (ah/app-algorithm app :schedule-render!)\n             known-roots       (some-> app :com.fulcrologic.fulcro.application/runtime-atom deref ::known-roots)\n             initialized?      (contains? known-roots k)]\n         (when (and initialize? (not initialized?))\n           (initialize-state! app class)\n           ;; We've already rendered this frame, so if we need initialized, we need a refresh\n           (schedule-render! app {:force-root? true}))\n         (log/debug \"Adding root of type \" k)\n         (swap! (:com.fulcrologic.fulcro.application/runtime-atom app) update-in [::known-roots k] (fnil conj #{}) react-instance))\n       (log/error \"Register-root cannot find app. Pass your Fulcro app via options. See https://book.fulcrologic.com/#err-mrr-reg-root-no-app\")))))\n\n(defn deregister-root!\n  \"Deregister a mounted root that should no longer be managed.\"\n  ([react-instance]\n   (deregister-root! react-instance {}))\n  ([react-instance {:keys [app] :as options}]\n   (let [app (or app (comp/any->app react-instance) comp/*app*)]\n     (if (map? app)\n       (let [class (comp/react-type react-instance)\n             k     (comp/class->registry-key class)]\n         (log/debug \"Adding root of type \" k)\n         (swap! (:com.fulcrologic.fulcro.application/runtime-atom app) update-in [::known-roots k] disj react-instance))\n       (log/error \"Deregister-root cannot find app. Pass your Fulcro app via options. See https://book.fulcrologic.com/#err-mrr-dereg-root-no-app\")))))\n\n(defn render-roots! [app options]\n  (let [state-map   (some-> app :com.fulcrologic.fulcro.application/state-atom deref)\n        known-roots (some-> app :com.fulcrologic.fulcro.application/runtime-atom deref ::known-roots)]\n    (kr/render! app options)\n    (doseq [k (keys known-roots)\n            :let [cls        (comp/registry-key->class k)\n                  query      (comp/get-query cls state-map)\n                  root-props (fdn/db->tree query state-map state-map)]]\n      (doseq [root (get known-roots k)]\n        (comp/tunnel-props! root root-props)))))\n\n(defn render-stale-components!\n  \"This function tracks the state of the app at the time of prior render in the app's runtime-atom. It\n   uses that to do a comparison of old vs. current application state (bounded by the needs of on-screen components).\n   When it finds data that has changed it renders all of the components that depend on that data.\"\n  [app options]\n  (let [{:com.fulcrologic.fulcro.application/keys [runtime-atom]} app\n        {:com.fulcrologic.fulcro.application/keys [only-refresh]} @runtime-atom\n        limited-refresh? (seq only-refresh)]\n    (if limited-refresh?\n      (let [{limited-idents true} (group-by eql/ident? only-refresh)]\n        (doseq [i limited-idents]\n          (ior/render-components-with-ident! app i)))\n      (render-roots! app options))))\n\n(defn render!\n  \"The top-level call for using this optimized render in your application.\n\n  If `:force-root? true` is passed in options, then it just forces a keyframe root render.\n\n  This renderer always does a keyframe render *unless* an `:only-refresh` option is passed to the stack\n  (usually as an option on `(transact! this [(f)] {:only-refresh [...idents...]})`. In that case the renderer\n  will ignore *all* data diffing and will target refresh only to the on-screen components that have the listed\n  ident(s). This allows you to get component-local state refresh rates on transactions that are responding to\n  events that should really only affect a known set of components (like the input field).\n\n  This option does *not* currently support using query keywords in the refresh set. Only idents.\"\n  ([app]\n   (render! app {}))\n  ([app {:keys [force-root? root-props-changed?] :as options}]\n   (if (or force-root? root-props-changed?)\n     (render-roots! app options)\n     (try\n       (render-stale-components! app options)\n       (catch #?(:clj Exception :cljs :default) e\n         (log/info \"Optimized render failed. Falling back to root render.\")\n         (render-roots! app options))))))\n\n#?(:clj\n   (defmacro with-app-context\n     \"Wraps the given body with the correct internal bindings of the given fulcro-app so that Fulcro internals\n     will work when that body is embedded in unusual ways.\n\n     You should use this around the render body of any floating root that will be rendered outside of\n     the synchronous fulcro render (e.g. you pass a floating root class to a React library).\n     \"\n     [fulcro-app & body]\n     (if-not (:ns &env)\n       `(do ~@body)\n       `(let [app# (or comp/*app* ~fulcro-app)\n              d#   (or comp/*depth* 0)]\n          (binding [comp/*app*    app#\n                    comp/*shared* (comp/shared app#)\n                    comp/*depth*  d#]\n            ~@body)))))\n\n(defn floating-root-react-class\n  \"Generate a plain React class that can render a Fulcro UIRoot. NOTE: The UIRoot must register/deregister itself\n  in the component lifecycle:\n\n  ```\n  (defsc UIRoot [this props]\n    {:componentDidMount     (fn [this] (mroot/register-root! this))\n     :componentWillUnmount  (fn [this] (mroot/deregister-root! this))\n     :initial-state {}\n     :query [root-like-query]}\n    ...)\n  ```\n\n  The `fulcro-app` is the app under which this root will be rendered. Create different factories if you have more than\n  one mounted app.\n  \"\n  [UIRoot fulcro-app]\n  (let [cls     (fn [])\n        ui-root (comp/computed-factory UIRoot)]\n    #?(:cljs\n       (gobj/extend (.-prototype cls) (.-prototype react/Component)\n         (clj->js\n           {:shouldComponentUpdate (fn [] false)\n            :render                (fn []\n                                     (this-as ^js this\n                                       (let [js-props (.-props this)]\n                                         (with-app-context fulcro-app\n                                           (binding [fdn/*denormalize-time* (-> fulcro-app :com.fulcrologic.fulcro.application/runtime-atom deref ::basis-t)]\n                                             (let [query     (comp/get-query UIRoot)\n                                                   state-map (some-> fulcro-app :com.fulcrologic.fulcro.application/state-atom deref)\n                                                   props     (fdn/db->tree query state-map state-map)]\n                                               (ui-root props {:js-props js-props})))))))})))\n    cls))\n\n(defn floating-root-factory\n  \"Create a factory that renders a floating root in a normal Fulcro context (body of a Fulcro component). This factory\n   has the same sync constraints as normal `component/factory` functions. See `components/with-parent-context`.\n\n  `UIClass`: A class that will behave as a floating root. NOTE: that class MUST have a mount/unmount hook\n  to regsiter/deregister itself as a root.\n\n  `options`: An options map. Same as for `component/factory`. Note, however, that this factory will *not* receive\n  props, so a `:keyfn` would have to be based on something else.\n\n  You normally do not pass any props to this factory because it is controlling the component and feeding props from\n  the database. Props sent to this factory are only used by the wrapper, however, `:react-key` is useful if you\n  have a bunch of sibling roots and need to set the react key for each.\n  \"\n  ([UIClass]\n   (floating-root-factory UIClass {}))\n  ([UIClass options]\n   (let [constructor     (fn [])\n         ui-factory      (comp/computed-factory UIClass)\n         render          (fn [this]\n                           (binding [fdn/*denormalize-time* (-> comp/*app* :com.fulcrologic.fulcro.application/runtime-atom deref ::basis-t)]\n                             (let [state-map (some-> comp/*app* :com.fulcrologic.fulcro.application/state-atom deref)\n                                   query     (comp/get-query UIClass state-map)\n                                   props     (fdn/db->tree query state-map state-map)]\n                               (ui-factory (or props {}) (comp/props this)))))\n         wrapper-class   (comp/configure-component! constructor ::wrapper\n                           {:shouldComponentUpdate (fn [_ _ _] false)\n                            :render                render})\n         wrapper-factory (comp/factory wrapper-class options)]\n     wrapper-factory)))\n","~:reader-features",["^I",["~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings","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","names",["var_args","G__58525","com.fulcrologic.fulcro.rendering.multiple-roots-renderer/register-root!","js/Error","p__58531","map__58532","cljs.core/--destructure-map","cljs.core.get","react-instance","com.fulcrologic.fulcro.rendering.multiple_roots_renderer.register_root_BANG_","app","initialize?","or__4253__auto__","com.fulcrologic.fulcro.components/any->app","com.fulcrologic.fulcro.components/*app*","cljs.core/map?","class","com.fulcrologic.fulcro.components/react-type","k","com.fulcrologic.fulcro.components/class->registry-key","initialize-state!","com.fulcrologic.fulcro.algorithms.lookup/app-algorithm","schedule-render!","known-roots","G__58535","cljs.core/deref","initialized?","cljs.core/contains?","and__4251__auto__","G__58536","G__58537","taoensso.timbre._log_BANG_","taoensso.timbre/*config*","cljs.core/Delay","cljs.core.swap_BANG_","cljs.core/update-in","cljs.core.fnil","cljs.core/conj","G__58544","com.fulcrologic.fulcro.rendering.multiple-roots-renderer/deregister-root!","p__58555","map__58556","com.fulcrologic.fulcro.rendering.multiple_roots_renderer.deregister_root_BANG_","options","cljs.core/disj","com.fulcrologic.fulcro.rendering.multiple-roots-renderer/render-roots!","state-map","G__58561","G__58564","com.fulcrologic.fulcro.rendering.keyframe-render/render!","seq__58565","cljs.core/seq","chunk__58567","count__58568","i__58569","temp__5753__auto__","cljs.core/chunked-seq?","c__4679__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/first","cljs.core/next","cljs.core/keys","cls","com.fulcrologic.fulcro.components/registry-key->class","query","com.fulcrologic.fulcro.components.get_query","root-props","com.fulcrologic.fulcro.algorithms.denormalize/db->tree","seq__58592","chunk__58593","count__58594","i__58595","seq__58619","chunk__58620","count__58621","i__58622","root","com.fulcrologic.fulcro.components/tunnel-props!","com.fulcrologic.fulcro.rendering.multiple-roots-renderer/render-stale-components!","map__58629","map__58630","runtime-atom","only-refresh","limited-refresh?","map__58631","limited-idents","cljs.core/group-by","edn-query-language.core/ident?","seq__58633","chunk__58634","count__58635","i__58636","i","com.fulcrologic.fulcro.rendering.ident-optimized-render/render-components-with-ident!","G__58645","com.fulcrologic.fulcro.rendering.multiple-roots-renderer/render!","p__58646","map__58647","com.fulcrologic.fulcro.rendering.multiple_roots_renderer.render_BANG_","force-root?","root-props-changed?","e58649","e","com.fulcrologic.fulcro.rendering.multiple-roots-renderer/floating-root-react-class","UIRoot","fulcro-app","ui-root","com.fulcrologic.fulcro.components.computed_factory","com.fulcrologic.fulcro.rendering.multiple_roots_renderer.goog$module$goog$object.extend","js/module$node_modules$react$index.Component","cljs.core/clj->js","this","js-props","app__58503__auto__","d__58504__auto__","com.fulcrologic.fulcro.components/*depth*","*app*-orig-val__58659","*shared*-orig-val__58660","com.fulcrologic.fulcro.components/*shared*","*depth*-orig-val__58661","*app*-temp-val__58662","*shared*-temp-val__58663","com.fulcrologic.fulcro.components.shared","*depth*-temp-val__58664","*denormalize-time*-orig-val__58667","*denormalize-time*-temp-val__58668","com.fulcrologic.fulcro.algorithms.denormalize/*denormalize-time*","G__58669","props","G__58670","G__58671","G__58678","com.fulcrologic.fulcro.rendering.multiple-roots-renderer/floating-root-factory","UIClass","com.fulcrologic.fulcro.rendering.multiple_roots_renderer.floating_root_factory","constructor","ui-factory","render","*denormalize-time*-orig-val__58683","*denormalize-time*-temp-val__58684","G__58685","G__58686","G__58687","com.fulcrologic.fulcro.components/props","wrapper-class","com.fulcrologic.fulcro.components/configure-component!","_","wrapper-factory","com.fulcrologic.fulcro.components.factory"]],"~:used-vars",["^I",["~$cljs.core/--destructure-map","~$com.fulcrologic.fulcro.rendering.ident-optimized-render/render-components-with-ident!","~$cljs.core/keys","~$taoensso.timbre/-log!","~$edn-query-language.core/ident?","~$com.fulcrologic.fulcro.components/react-type","~$cljs.core/count","~$cljs.core/deref","~$com.fulcrologic.fulcro.components/props","~$cljs.core/seq","~$cljs.core/chunk-first","~$cljs.core/group-by","~$com.fulcrologic.fulcro.rendering.multiple-roots-renderer/floating-root-react-class","~$cljs.core/Delay","~$cljs.core/chunk-rest","~$com.fulcrologic.fulcro.rendering.multiple_roots_renderer.goog$module$goog$object.extend","~$com.fulcrologic.fulcro.rendering.multiple-roots-renderer/register-root!","~$cljs.core/fnil","~$cljs.core/contains?","~$cljs.core/map?","~$cljs.core/conj","~$taoensso.timbre/*config*","~$cljs.core/swap!","~$com.fulcrologic.fulcro.rendering.multiple-roots-renderer/render-roots!","~$com.fulcrologic.fulcro.components/shared","~$cljs.core/get","~$com.fulcrologic.fulcro.components/*app*","~$cljs.core/-nth","~$com.fulcrologic.fulcro.rendering.multiple-roots-renderer/render-stale-components!","~$com.fulcrologic.fulcro.components/*shared*","~$cljs.core/clj->js","~$com.fulcrologic.fulcro.algorithms.denormalize/db->tree","~$com.fulcrologic.fulcro.components/any->app","~$com.fulcrologic.fulcro.components/tunnel-props!","~$com.fulcrologic.fulcro.components/configure-component!","~$com.fulcrologic.fulcro.components/*depth*","~$com.fulcrologic.fulcro.rendering.multiple-roots-renderer/deregister-root!","~$cljs.core/next","~$com.fulcrologic.fulcro.rendering.keyframe-render/render!","~$com.fulcrologic.fulcro.components/get-query","~$com.fulcrologic.fulcro.rendering.multiple-roots-renderer/floating-root-factory","~$com.fulcrologic.fulcro.components/registry-key->class","~$com.fulcrologic.fulcro.components/factory","~$cljs.core/not","~$com.fulcrologic.fulcro.algorithms.lookup/app-algorithm","~$cljs.core/disj","~$com.fulcrologic.fulcro.components/computed-factory","~$com.fulcrologic.fulcro.algorithms.denormalize/*denormalize-time*","~$com.fulcrologic.fulcro.components/class->registry-key","~$cljs.core/first","~$com.fulcrologic.fulcro.rendering.multiple-roots-renderer/render!","~$js/module$node_modules$react$index.Component","~$cljs.core/update-in","~$js/Error","~$cljs.core/chunked-seq?"]]],"~:cache-keys",["~#cmap",[["~:shadow.build.npm/resource","node_modules/react-dom/index.js"],["1c6e82d3f9756822c3b08dd8f8e1d7c23a7f1630","3679a1a898d0c80b330819274df3fe1302fa19d1","dc3011a0ee823c91a565237d17cbc3c0856de8a6","~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^I",[]],"~:deps-syms",["~$shadow.js","~$module$node_modules$react_dom$cjs$react_dom_production_min","~$module$node_modules$react_dom$cjs$react_dom_development"]]],["^1M","goog/dom/tagname.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3;",["^ ","^3<",null,"^3=",["^I",[]],"^3>",["^1?","~$goog.dom.HtmlElement"]]],["^1M","goog/async/freelist.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3;",["^ ","^3<",null,"^3=",["^I",[]],"^3>",["^1?"]]],["^1M","cljs/core/async/impl/ioc_helpers.cljs"],["c55a0f6d67abac2efcfddf7621cac07d90298cab","^3;",["^ ","^3<",null,"^3=",["^I",[]],"^3>",["^1?","^1<","~$cljs.core.async.impl.protocols"]]],["^1M","goog/i18n/datetimesymbols.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3;",["^ ","^3<",null,"^3=",["^I",[]],"^3>",["^1?"]]],["^1M","goog/labs/useragent/platform.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3;",["^ ","^3<",null,"^3=",["^I",[]],"^3>",["^1?","~$goog.string.internal","~$goog.labs.userAgent.util"]]],["^1M","expound/util.cljc"],["f84ecd45aeef38fd6f1c53d8323e6abc5dc5a0e4","^3;",["^ ","^3<",null,"^3=",["^I",[]],"^3>",["^1?","^1<"]]],["^1M","goog/crypt/crypt.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3;",["^ ","^3<",null,"^3=",["^I",[]],"^3>",["^1?","~$goog.asserts"]]],["^1M","cljs/core/async.cljs"],["c55a0f6d67abac2efcfddf7621cac07d90298cab","^3;",["^ ","^3<",null,"^3=",["^I",[]],"^3>",["^1?","^1<","^3C","~$cljs.core.async.impl.channels","~$cljs.core.async.impl.buffers","~$cljs.core.async.impl.timers","~$cljs.core.async.impl.dispatch","~$cljs.core.async.impl.ioc-helpers","~$goog.array"]]],["^1M","goog/timer/timer.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3;",["^ ","^3<",null,"^3=",["^I",[]],"^3>",["^1?","~$goog.Promise","~$goog.events.EventTarget","~$goog.Thenable"]]],["^1M","com/fulcrologic/fulcro/algorithms/lookup.cljc"],["aa10be524799b8f5dcb1cab659b996577fc15d41","^3;",["^ ","^3<",null,"^3=",["^I",[]],"^3>",["^1?","^1<","^12"]]],["^1M","cljs/spec/gen/alpha.cljs"],["e2ad9a4500a5ecabaf01429c4f0d6f7fac146951","^3;",["^ ","^3<",null,"^3=",["^I",[]],"^3>",["^1?","^1<","~$goog.Uri"]]],["^1M","cljs/tools/reader/impl/utils.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^3;",["^ ","^3<",null,"^3=",["^I",[]],"^3>",["^1?","^1<","~$clojure.string","~$goog.string"]]],["^1M","goog/math/math.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3;",["^ ","^3<",null,"^3=",["^I",[]],"^3>",["^1?","^3F"]]],["^1M","goog/html/trustedtypes.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3;",["^ ","^3<",null,"^3=",["^I",[]],"^3>",["^1?"]]],["^1M","goog/string/stringformat.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3;",["^ ","^3<",null,"^3=",["^I",[]],"^3>",["^1?","^3R"]]],["^1M","goog/events/eventtype.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3;",["^ ","^3<",null,"^3=",["^I",[]],"^3>",["^1?","~$goog.events.BrowserFeature","~$goog.userAgent"]]],["^1M","goog/labs/useragent/browser.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3;",["^ ","^3<",null,"^3=",["^I",[]],"^3>",["^1?","^3L","^1>","^3E","^3D"]]],["^1M","goog/html/safeurl.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3;",["^ ","^3<",null,"^3=",["^I",[]],"^3>",["^1?","^3F","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.i18n.bidi.Dir","~$goog.i18n.bidi.DirectionalString","~$goog.string.Const","~$goog.string.TypedString","^3D"]]],["^1M","goog/array/array.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3;",["^ ","^3<",null,"^3=",["^I",[]],"^3>",["^1?","^3F"]]],["^1M","com/fulcrologic/fulcro/algorithms/do_not_use.cljc"],["aa10be524799b8f5dcb1cab659b996577fc15d41","^3;",["^ ","^3<",null,"^3=",["^I",[]],"^3>",["^1?","^1<","^12","^3Q","^10","^1>","~$goog.crypt","~$goog.crypt.base64","^@"]]],["^1M","expound/problems.cljc"],["f84ecd45aeef38fd6f1c53d8323e6abc5dc5a0e4","^3;",["^ ","^3<",null,"^3=",["^I",[]],"^3>",["^1?","^1<","~$expound.paths","^@"]]],["^1M","goog/useragent/useragent.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3;",["^ ","^3<",null,"^3=",["^I",[]],"^3>",["^1?","~$goog.labs.userAgent.browser","~$goog.labs.userAgent.engine","~$goog.labs.userAgent.platform","^3E","~$goog.reflect","^3D"]]],["^1M","goog/structs/prioritypool.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3;",["^ ","^3<",null,"^3=",["^I",[]],"^3>",["^1?","~$goog.structs.Pool","~$goog.structs.PriorityQueue"]]],["^1M","goog/events/eventlike.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3;",["^ ","^3<",null,"^3=",["^I",[]],"^3>",["^1?","~$goog.events.Event","~$goog.events.EventId"]]],["^1M","goog/async/run.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3;",["^ ","^3<",null,"^3=",["^I",[]],"^3>",["^1?","~$goog.async.WorkQueue","~$goog.async.nextTick","~$goog.async.throwException"]]],["^1M","com/cognitect/transit/impl/reader.js"],["f8b4f570ca4d41649190efecac27a5932cc11429","^3;",["^ ","^3<",null,"^3=",["^I",[]],"^3>",["^1?","~$com.cognitect.transit.impl.decoder","~$com.cognitect.transit.caching"]]],["^1M","goog/debug/error.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3;",["^ ","^3<",null,"^3=",["^I",[]],"^3>",["^1?"]]],["^1M","goog/async/workqueue.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3;",["^ ","^3<",null,"^3=",["^I",[]],"^3>",["^1?","~$goog.async.FreeList","^3F"]]],["^1M","goog/events/events.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3;",["^ ","^3<",null,"^3=",["^I",[]],"^3>",["^1?","^3F","~$goog.debug.entryPointRegistry","~$goog.events.BrowserEvent","^3S","~$goog.events.Listenable","~$goog.events.ListenerMap","~$goog.debug.ErrorHandler","^49","~$goog.events.EventLike","~$goog.events.EventWrapper","~$goog.events.ListenableKey","~$goog.events.Listener"]]],["^1M","goog/promise/resolver.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3;",["^ ","^3<",null,"^3=",["^I",[]],"^3>",["^1?","^3M"]]],["^1M","goog/events/browserfeature.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3;",["^ ","^3<",null,"^3=",["^I",[]],"^3>",["^1?"]]],["^1M","cljs/tools/reader/edn.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^3;",["^ ","^3<",null,"^3=",["^I",[]],"^3>",["^1?","^1<","~$cljs.tools.reader.impl.errors","~$cljs.tools.reader.reader-types","~$cljs.tools.reader.impl.utils","~$cljs.tools.reader.impl.commons","~$cljs.tools.reader","^3R","~$goog.string.StringBuffer"]]],["^1M","goog/structs/priorityqueue.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3;",["^ ","^3<",null,"^3=",["^I",[]],"^3>",["^1?","~$goog.structs.Heap"]]],["^1M","goog/net/xhrio.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3;",["^ ","^3<",null,"^3=",["^I",[]],"^3>",["^1?","~$goog.Timer","^3L","^3F","~$goog.collections.maps","^4@","^3N","~$goog.json.hybrid","~$goog.log","~$goog.net.ErrorCode","~$goog.net.EventType","~$goog.net.HttpStatus","~$goog.net.XmlHttp","^1>","^3R","~$goog.uri.utils","^3T","^3P","^4D","~$goog.net.XhrLike","~$goog.net.XmlHttpFactory"]]],["^1M","goog/promise/thenable.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3;",["^ ","^3<",null,"^3=",["^I",[]],"^3>",["^1?","^3M"]]],["^1M","goog/collections/iters.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3;",["^ ","^3<",null,"^3=",["^I",[]],"^3>",["^1?"]]],["^1M","com/fulcrologic/fulcro/algorithms/transit.cljc"],["aa10be524799b8f5dcb1cab659b996577fc15d41","^3;",["^ ","^3<",null,"^3=",["^I",[]],"^3>",["^1?","^1<","~$cognitect.transit","~$com.fulcrologic.guardrails.core","^@","~$com.fulcrologic.fulcro.algorithms.tempid"]]],["^1M","goog/dom/nodetype.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3;",["^ ","^3<",null,"^3=",["^I",[]],"^3>",["^1?"]]],["^1M","com/fulcrologic/guardrails/utils.cljc"],["1c3188d13b2f3b2324bad6f65cc78cd4b193445e","^3;",["^ ","^3<",null,"^3=",["^I",[]],"^3>",["^1?","^1<","~$clojure.walk"]]],["^1M","cljs/tools/reader/impl/inspect.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^3;",["^ ","^3<",null,"^3=",["^I",[]],"^3>",["^1?","^1<"]]],["^1M","com/cognitect/transit/util.js"],["f8b4f570ca4d41649190efecac27a5932cc11429","^3;",["^ ","^3<",null,"^3=",["^I",[]],"^3>",["^1?","^1>"]]],["^1M","cljs/pprint.cljs"],["e2ad9a4500a5ecabaf01429c4f0d6f7fac146951","^3;",["^ ","^3<",null,"^3=",["^I",[]],"^3>",["^1?","^1<","^3Q","^3R","^4N"]]],["^1M","cljs/tools/reader.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^3;",["^ ","^3<",null,"^3=",["^I",[]],"^3>",["^1?","^1<","^4J","^4K","^4L","^4I","^3L","^3R","^4N"]]],["^1M","expound/alpha.cljc"],["f84ecd45aeef38fd6f1c53d8323e6abc5dc5a0e4","^3;",["^ ","^3<",null,"^3=",["^I",[]],"^3>",["^1?","^1<","~$expound.problems","^@","^3Q","~$clojure.set","~$expound.printer","~$expound.util","~$expound.ansi"]]],["^1M","taoensso/timbre.cljc"],["ed86c0ab3cf1c4771c5f9bf201405e20c3027ced","^3;",["^ ","^3<",null,"^3=",["^I",[]],"^3>",["^1?","^1<","^3Q","~$goog.i18n.DateTimeFormat","~$taoensso.encore","~$taoensso.timbre.appenders.core"]]],["^3:","node_modules/scheduler/cjs/scheduler.development.js"],["1c6e82d3f9756822c3b08dd8f8e1d7c23a7f1630","3679a1a898d0c80b330819274df3fe1302fa19d1","44159dfbe389867d6afda50df7f91996366d7206","^3;",["^ ","^3<",null,"^3=",["^I",[]],"^3>",["^3?"]]],["^1M","goog/net/wrapperxmlhttpfactory.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3;",["^ ","^3<",null,"^3=",["^I",[]],"^3>",["^1?","^4Y","^4Z"]]],["^1M","goog/date/utcdatetime.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3;",["^ ","^3<",null,"^3=",["^I",[]],"^3>",["^1?","~$goog.date","~$goog.date.Date","~$goog.date.DateTime","~$goog.date.Interval"]]],["^3:","node_modules/scheduler/cjs/scheduler.production.min.js"],["1c6e82d3f9756822c3b08dd8f8e1d7c23a7f1630","3679a1a898d0c80b330819274df3fe1302fa19d1","e6921f21dd5fc2f4be8cf3c0d6b1b5c611fa4fcd","^3;",["^ ","^3<",null,"^3=",["^I",[]],"^3>",["^3?"]]],["^1M","goog/i18n/nativelocaledigits.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3;",["^ ","^3<",null,"^3=",["^I",[]],"^3>",["^1?"]]],["^1M","goog/events/eventtarget.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3;",["^ ","^3<",null,"^3=",["^I",[]],"^3>",["^1?","~$goog.Disposable","^3F","~$goog.events","^48","^4B","^4C","^1>","^49","^4E","^4G"]]],["^1M","com/fulcrologic/guardrails/core.cljc"],["1c3188d13b2f3b2324bad6f65cc78cd4b193445e","^3;",["^ ","^3<",null,"^3=",["^I",[]],"^3>",["^1?","^1<","~$com.fulcrologic.guardrails.impl.externs","~$com.fulcrologic.guardrails.utils","^B","^@","^3Q","~$expound.alpha"]]],["^1M","goog/disposable/disposable.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3;",["^ ","^3<",null,"^3=",["^I",[]],"^3>",["^1?","~$goog.disposable.IDisposable","~$goog.dispose","~$goog.disposeAll"]]],["^1M","expound/ansi.cljc"],["f84ecd45aeef38fd6f1c53d8323e6abc5dc5a0e4","^3;",["^ ","^3<",null,"^3=",["^I",[]],"^3>",["^1?","^1<","^3Q"]]],["^1M","goog/string/typedstring.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3;",["^ ","^3<",null,"^3=",["^I",[]],"^3>",["^1?"]]],["^3:","node_modules/react/index.js"],["1c6e82d3f9756822c3b08dd8f8e1d7c23a7f1630","3679a1a898d0c80b330819274df3fe1302fa19d1","a69a7f3d4a4636bf9035bc53c05b2d99a7b8af7f","^3;",["^ ","^3<",null,"^3=",["^I",[]],"^3>",["^3?","~$module$node_modules$react$cjs$react_production_min","~$module$node_modules$react$cjs$react_development"]]],["^1M","shadow/js.js"],["dcbbe536346aae67f50c45a19f6541141d5c98c1","^3;",["^ ","^3<",null,"^3=",["^I",[]],"^3>",["^1?"]]],["^1M","goog/object/object.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3;",["^ ","^3<",null,"^3=",["^I",[]],"^3>",["^1?"]]],["^1M","goog/dom/asserts.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3;",["^ ","^3<",null,"^3=",["^I",[]],"^3>",["^1?","^3F"]]],["^1M","taoensso/encore.cljc"],["8ce32d99c08a853f8a56322b5aab80e59c3bd4d6","^3;",["^ ","^3<",null,"^3=",["^I",[]],"^3>",["^1?","^1<","^3Q","^54","~$cljs.reader","~$cljs.tools.reader.edn","^1>","^3L","^3R","~$goog.string.format","^4N","^5@","~$goog.net.XhrIo","~$goog.net.XhrIoPool","~$goog.Uri.QueryData","^4U","^4T","~$taoensso.truss"]]],["^3:","node_modules/react-dom/cjs/react-dom.production.min.js"],["1c6e82d3f9756822c3b08dd8f8e1d7c23a7f1630","3679a1a898d0c80b330819274df3fe1302fa19d1","16d835d02619d41be201ba16f57c616d0503da6d","^3;",["^ ","^3<",null,"^3=",["^I",[]],"^3>",["^3?","^V","~$module$node_modules$scheduler$index"]]],["^1M","goog/structs/set.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3;",["^ ","^3<",null,"^3=",["^I",[]],"^3>",["^1?","~$goog.structs","~$goog.structs.Collection","~$goog.structs.Map","~$goog.iter.Iterator"]]],"~:SHADOW-TIMESTAMP",[1676259735000,1676259735000,1676259734000],["^3:","node_modules/react/cjs/react.development.js"],["1c6e82d3f9756822c3b08dd8f8e1d7c23a7f1630","3679a1a898d0c80b330819274df3fe1302fa19d1","1df918e8981877c2759388dfae58a059e089860d","^3;",["^ ","^3<",null,"^3=",["^I",[]],"^3>",["^3?"]]],["^1M","taoensso/timbre/appenders/core.cljc"],["ed86c0ab3cf1c4771c5f9bf201405e20c3027ced","^3;",["^ ","^3<",null,"^3=",["^I",[]],"^3>",["^1?","^1<","^3Q","^59"]]],["^1M","goog/math/long.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3;",["^ ","^3<",null,"^3=",["^I",[]],"^3>",["^1?","^3F","^45"]]],["^1M","goog/events/listener.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3;",["^ ","^3<",null,"^3=",["^I",[]],"^3>",["^1?","^4G","^4B"]]],["^1M","goog/html/trustedresourceurl.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3;",["^ ","^3<",null,"^3=",["^I",[]],"^3>",["^1?","^3F","~$goog.fs.blob","^3U","~$goog.html.SafeScript","~$goog.html.trustedtypes","^3W","^3X","^3Y","^3Z"]]],["^1M","cljs/core/async/impl/channels.cljs"],["c55a0f6d67abac2efcfddf7621cac07d90298cab","^3;",["^ ","^3<",null,"^3=",["^I",[]],"^3>",["^1?","^1<","^3C","^3J","^3H"]]],["^1M","goog/events/listenermap.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3;",["^ ","^3<",null,"^3=",["^I",[]],"^3>",["^1?","^3L","^4H","^1>","^49","^4B","^4G"]]],["^1M","goog/events/eventid.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3;",["^ ","^3<",null,"^3=",["^I",[]],"^3>",["^1?"]]],["^1M","taoensso/truss.cljs"],["02c08dae83153a50eb946c4d742f574a24bb2a76","^3;",["^ ","^3<",null,"^3=",["^I",[]],"^3>",["^1?","^1<","~$taoensso.truss.impl"]]],["^1M","com/fulcrologic/guardrails/registry.cljc"],["1c3188d13b2f3b2324bad6f65cc78cd4b193445e","^3;",["^ ","^3<",null,"^3=",["^I",[]],"^3>",["^1?","^1<"]]],["^1M","goog/string/internal.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3;",["^ ","^3<",null,"^3=",["^I",[]],"^3>",["^1?"]]],["^1M","goog/events/eventwrapper.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3;",["^ ","^3<",null,"^3=",["^I",[]],"^3>",["^1?","~$goog.events.EventHandler","~$goog.events.ListenableType"]]],["^1M","edn_query_language/core.cljc"],["839028d06d9cc88b18b20c77c53a2bb77140d1f7","^3;",["^ ","^3<",null,"^3=",["^I",[]],"^3>",["^1?","^1<","^@"]]],["^1M","goog/functions/functions.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3;",["^ ","^3<",null,"^3=",["^I",[]],"^3>",["^1?"]]],["^1M","com/fulcrologic/fulcro/rendering/multiple_roots_renderer.cljc"],["aa10be524799b8f5dcb1cab659b996577fc15d41","^3;",["^ ","^3<",null,"^3=",["^I",[]],"^3>",["^1?","^1<","^1:","^[","^18","^14","^16","^10","^12","^V","^1>"]]],["^1M","cljs/core/async/impl/dispatch.cljs"],["c55a0f6d67abac2efcfddf7621cac07d90298cab","^3;",["^ ","^3<",null,"^3=",["^I",[]],"^3>",["^1?","^1<","^3H","^4;"]]],["^1M","goog/html/safestyle.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3;",["^ ","^3<",null,"^3=",["^I",[]],"^3>",["^1?","^3Y","~$goog.html.SafeUrl","^3Z","^3F","^3D"]]],["^1M","goog/dom/safe.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3;",["^ ","^3<",null,"^3=",["^I",[]],"^3>",["^1?","^3F","~$goog.dom.asserts","~$goog.functions","~$goog.html.SafeHtml","^5W","~$goog.html.SafeStyle","^60","^3V","~$goog.html.uncheckedconversions","^3Y","^3D"]]],["^1M","expound/paths.cljc"],["f84ecd45aeef38fd6f1c53d8323e6abc5dc5a0e4","^3;",["^ ","^3<",null,"^3=",["^I",[]],"^3>",["^1?","^1<","^@","^56"]]],["^1M","taoensso/truss/impl.cljs"],["02c08dae83153a50eb946c4d742f574a24bb2a76","^3;",["^ ","^3<",null,"^3=",["^I",[]],"^3>",["^1?","^1<","^54"]]],["^1M","clojure/walk.cljs"],["e2ad9a4500a5ecabaf01429c4f0d6f7fac146951","^3;",["^ ","^3<",null,"^3=",["^I",[]],"^3>",["^1?","^1<"]]],["^1M","goog/useragent/product.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3;",["^ ","^3<",null,"^3=",["^I",[]],"^3>",["^1?","^42","^44","^3T"]]],["^1M","cljs/core/async/impl/protocols.cljs"],["c55a0f6d67abac2efcfddf7621cac07d90298cab","^3;",["^ ","^3<",null,"^3=",["^I",[]],"^3>",["^1?","^1<"]]],["^1M","goog/net/eventtype.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3;",["^ ","^3<",null,"^3=",["^I",[]],"^3>",["^1?"]]],["^1M","goog/structs/map.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3;",["^ ","^3<",null,"^3=",["^I",[]],"^3>",["^1?","~$goog.collections.iters","^5T","~$goog.iter.StopIteration","~$goog.iter.es6"]]],["^1M","goog/net/xhriopool.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3;",["^ ","^3<",null,"^3=",["^I",[]],"^3>",["^1?","^5L","~$goog.structs.PriorityPool","^5S"]]],["^1M","com/cognitect/transit/delimiters.js"],["f8b4f570ca4d41649190efecac27a5932cc11429","^3;",["^ ","^3<",null,"^3=",["^I",[]],"^3>",["^1?"]]],["^1M","goog/date/date.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3;",["^ ","^3<",null,"^3=",["^I",[]],"^3>",["^1?","^3F","~$goog.i18n.DateTimeSymbols","^3R"]]],["^1M","goog/html/safehtml.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3;",["^ ","^3<",null,"^3=",["^I",[]],"^3>",["^1?","^3Y","^3W","^3X","^5W","^64","~$goog.html.SafeStyleSheet","^60","~$goog.dom.TagName","^3V","^3Z","^3F","^42","^3L","^1>","^3D","~$goog.dom.tags","^5X"]]],["^1M","goog/dom/tags.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3;",["^ ","^3<",null,"^3=",["^I",[]],"^3>",["^1?","^1>"]]],["^1M","goog/math/size.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3;",["^ ","^3<",null,"^3=",["^I",[]],"^3>",["^1?"]]],["^1M","com/fulcrologic/fulcro/raw/components.cljc"],["aa10be524799b8f5dcb1cab659b996577fc15d41","^3;",["^ ","^3<",null,"^3=",["^I",[]],"^3>",["^1?","^1<","^1>","^54","^3Q","^52","^1:","~$com.fulcrologic.fulcro.algorithms.do-not-use","^[","~$com.fulcrologic.fulcro.algorithms.transit","^10","^59","^12"]]],["^3:","node_modules/scheduler/index.js"],["1c6e82d3f9756822c3b08dd8f8e1d7c23a7f1630","3679a1a898d0c80b330819274df3fe1302fa19d1","408126fc2241739168bcaf5965ae56a7df143144","^3;",["^ ","^3<",null,"^3=",["^I",[]],"^3>",["^3?","~$module$node_modules$scheduler$cjs$scheduler_production_min","~$module$node_modules$scheduler$cjs$scheduler_development"]]],["^1M","goog/structs/queue.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3;",["^ ","^3<",null,"^3=",["^I",[]],"^3>",["^1?","^3L"]]],["^1M","goog/labs/useragent/engine.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3;",["^ ","^3<",null,"^3=",["^I",[]],"^3>",["^1?","^3L","^3D","^3E"]]],["^1M","com/cognitect/transit/impl/decoder.js"],["f8b4f570ca4d41649190efecac27a5932cc11429","^3;",["^ ","^3<",null,"^3=",["^I",[]],"^3>",["^1?","~$com.cognitect.transit.util","~$com.cognitect.transit.delimiters","^4>","~$com.cognitect.transit.types"]]],["^1M","goog/fs/blob.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3;",["^ ","^3<",null,"^3=",["^I",[]],"^3>",["^1?"]]],["^1M","cljs/reader.cljs"],["e2ad9a4500a5ecabaf01429c4f0d6f7fac146951","^3;",["^ ","^3<",null,"^3=",["^I",[]],"^3>",["^1?","^1<","^1>","^4M","^5J","^4N"]]],["^1M","goog/dom/dom.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3;",["^ ","^3<",null,"^3=",["^I",[]],"^3>",["^1?","^3L","^3F","~$goog.dom.BrowserFeature","~$goog.dom.NodeType","^6<","~$goog.dom.safe","^63","^65","~$goog.math.Coordinate","~$goog.math.Size","^1>","^3R","^3Y","~$goog.string.Unicode","^3T"]]],["^1M","com/fulcrologic/guardrails/impl/externs.cljc"],["1c3188d13b2f3b2324bad6f65cc78cd4b193445e","^3;",["^ ","^3<",null,"^3=",["^I",[]],"^3>",["^1?","^1<","~$com.fulcrologic.guardrails.registry","^5B"]]],["^1M","com/fulcrologic/fulcro/components.cljc"],["aa10be524799b8f5dcb1cab659b996577fc15d41","^3;",["^ ","^3<",null,"^3=",["^I",[]],"^3>",["^1?","^1<","^1>","^V","^10","^@","^12","^52","^3Q","^6>","^1:","^[","~$com.fulcrologic.fulcro.raw.components","^50","^54"]]],["^1M","goog/asserts/asserts.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3;",["^ ","^3<",null,"^3=",["^I",[]],"^3>",["^1?","~$goog.debug.Error","^6F"]]],["^1M","cljs/core/async/impl/buffers.cljs"],["c55a0f6d67abac2efcfddf7621cac07d90298cab","^3;",["^ ","^3<",null,"^3=",["^I",[]],"^3>",["^1?","^1<","^3C"]]],["^1M","goog/i18n/timezone.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3;",["^ ","^3<",null,"^3=",["^I",[]],"^3>",["^1?","^3L","~$goog.date.DateLike","^1>","^3R"]]],["^1M","goog/uri/uri.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3;",["^ ","^3<",null,"^3=",["^I",[]],"^3>",["^1?","^3L","^3F","^4Q","^3R","^5Q","^4X","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^1M","goog/net/errorcode.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3;",["^ ","^3<",null,"^3=",["^I",[]],"^3>",["^1?"]]],["^1M","goog/collections/maps.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3;",["^ ","^3<",null,"^3=",["^I",[]],"^3>",["^1?"]]],["^1M","goog/iter/es6.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3;",["^ ","^3<",null,"^3=",["^I",[]],"^3>",["^1?","~$goog.iter.Iterable","^5T","^67"]]],["^1M","goog/i18n/bidi.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3;",["^ ","^3<",null,"^3=",["^I",[]],"^3>",["^1?"]]],["^1M","goog/debug/errorhandler.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3;",["^ ","^3<",null,"^3=",["^I",[]],"^3>",["^1?","^5?","^3F","~$goog.debug.EntryPointMonitor","^6M"]]],["^1M","goog/disposable/idisposable.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3;",["^ ","^3<",null,"^3=",["^I",[]],"^3>",["^1?"]]],["^1M","goog/promise/promise.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3;",["^ ","^3<",null,"^3=",["^I",[]],"^3>",["^1?","^3O","^3F","^4?","~$goog.async.run","^4<","^6M","~$goog.promise.Resolver"]]],["^1M","cljs/core/async/impl/timers.cljs"],["c55a0f6d67abac2efcfddf7621cac07d90298cab","^3;",["^ ","^3<",null,"^3=",["^I",[]],"^3>",["^1?","^1<","^3C","^3G","^3J"]]],["^1M","cljs/spec/alpha.cljs"],["e2ad9a4500a5ecabaf01429c4f0d6f7fac146951","^3;",["^ ","^3<",null,"^3=",["^I",[]],"^3>",["^1?","^1<","^1>","^52","~$cljs.spec.gen.alpha","^3Q"]]],["^1M","goog/fs/url.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3;",["^ ","^3<",null,"^3=",["^I",[]],"^3>",["^1?"]]],["^1M","goog/base.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3;",["^ ","^3<",null,"^3=",["^I",[]],"^3>",[]]],["^1M","goog/json/hybrid.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3;",["^ ","^3<",null,"^3=",["^I",[]],"^3>",["^1?","^3F","~$goog.json"]]],["^1M","goog/structs/structs.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3;",["^ ","^3<",null,"^3=",["^I",[]],"^3>",["^1?","^3L","^1>"]]],["^1M","cljs/tools/reader/impl/errors.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^3;",["^ ","^3<",null,"^3=",["^I",[]],"^3>",["^1?","^1<","^4J","^3Q","~$cljs.tools.reader.impl.inspect"]]],["^1M","goog/disposable/dispose.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3;",["^ ","^3<",null,"^3=",["^I",[]],"^3>",["^1?"]]],["^1M","clojure/string.cljs"],["e2ad9a4500a5ecabaf01429c4f0d6f7fac146951","^3;",["^ ","^3<",null,"^3=",["^I",[]],"^3>",["^1?","^1<","^3R","^4N"]]],["^1M","com/fulcrologic/fulcro/algorithms/tempid.cljc"],["aa10be524799b8f5dcb1cab659b996577fc15d41","^3;",["^ ","^3<",null,"^3=",["^I",[]],"^3>",["^1?","^1<","^12","^52"]]],["^1M","goog/structs/pool.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3;",["^ ","^3<",null,"^3=",["^I",[]],"^3>",["^1?","^5?","~$goog.structs.Queue","~$goog.structs.Set"]]],["^3:","node_modules/react/cjs/react.production.min.js"],["1c6e82d3f9756822c3b08dd8f8e1d7c23a7f1630","3679a1a898d0c80b330819274df3fe1302fa19d1","f5f2e0db62a5ce44eafff60d4f3577b8796734e4","^3;",["^ ","^3<",null,"^3=",["^I",[]],"^3>",["^3?"]]],["^1M","goog/net/httpstatus.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3;",["^ ","^3<",null,"^3=",["^I",[]],"^3>",["^1?"]]],["^1M","goog/i18n/datetimeformat.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3;",["^ ","^3<",null,"^3=",["^I",[]],"^3>",["^1?","^3F","^5;","~$goog.date.UtcDateTime","^6:","~$goog.i18n.LocaleFeature","~$goog.i18n.NativeLocaleDigits","~$goog.i18n.TimeZone","^3R","~$goog.i18n.DateTimeSymbolsType"]]],["^1M","com/cognitect/transit/handlers.js"],["f8b4f570ca4d41649190efecac27a5932cc11429","^3;",["^ ","^3<",null,"^3=",["^I",[]],"^3>",["^1?","^6B","^6D","~$goog.math.Long"]]],["^1M","goog/structs/heap.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3;",["^ ","^3<",null,"^3=",["^I",[]],"^3>",["^1?","^3L","^1>","~$goog.structs.Node"]]],["^1M","goog/debug/entrypointregistry.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3;",["^ ","^3<",null,"^3=",["^I",[]],"^3>",["^1?","^3F"]]],["^1M","goog/string/string.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3;",["^ ","^3<",null,"^3=",["^I",[]],"^3>",["^1?","^6G","^65","^3Y","^3D"]]],["^1M","com/cognitect/transit/types.js"],["f8b4f570ca4d41649190efecac27a5932cc11429","^3;",["^ ","^3<",null,"^3=",["^I",[]],"^3>",["^1?","^6B","~$com.cognitect.transit.eq","^73"]]],["^1M","goog/reflect/reflect.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3;",["^ ","^3<",null,"^3=",["^I",[]],"^3>",["^1?"]]],["^1M","com/fulcrologic/fulcro/rendering/keyframe_render.cljc"],["aa10be524799b8f5dcb1cab659b996577fc15d41","^3;",["^ ","^3<",null,"^3=",["^I",[]],"^3>",["^1?","^1<","~$module$node_modules$react_dom$index","^1:","^[","^18","^12"]]],["^1M","goog/labs/useragent/util.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3;",["^ ","^3<",null,"^3=",["^I",[]],"^3>",["^1?","~$goog.labs.userAgent","^3D"]]],["^1M","expound/printer.cljc"],["f84ecd45aeef38fd6f1c53d8323e6abc5dc5a0e4","^3;",["^ ","^3<",null,"^3=",["^I",[]],"^3>",["^1?","^1<","^3Q","^@","^D","^54","^56","^57","^41","^52","^5K","^3R"]]],["^1M","com/cognitect/transit/eq.js"],["f8b4f570ca4d41649190efecac27a5932cc11429","^3;",["^ ","^3<",null,"^3=",["^I",[]],"^3>",["^1?","^6B"]]],["^1M","goog/debug/debug.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3;",["^ ","^3<",null,"^3=",["^I",[]],"^3>",["^1?","^3L","~$goog.debug.errorcontext"]]],["^1M","goog/string/stringbuffer.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3;",["^ ","^3<",null,"^3=",["^I",[]],"^3>",["^1?"]]],["^1M","goog/math/coordinate.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3;",["^ ","^3<",null,"^3=",["^I",[]],"^3>",["^1?","~$goog.math"]]],["^1M","goog/debug/errorcontext.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3;",["^ ","^3<",null,"^3=",["^I",[]],"^3>",["^1?"]]],["^1M","cljs/tools/reader/reader_types.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^3;",["^ ","^3<",null,"^3=",["^I",[]],"^3>",["^1?","^1<","^4K","^3R","^4N"]]],["^1M","goog/iter/iter.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3;",["^ ","^3<",null,"^3=",["^I",[]],"^3>",["^1?","^3L","^3F","~$goog.debug","^62","^79"]]],["^1M","goog/labs/useragent/useragent.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3;",["^ ","^3<",null,"^3=",["^I",[]],"^3>",["^1?"]]],["^1M","goog/async/nexttick.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3;",["^ ","^3<",null,"^3=",["^I",[]],"^3>",["^1?","^4@","~$goog.dom","^6<","^62","^42","^43"]]],["^1M","goog/html/uncheckedconversions.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3;",["^ ","^3<",null,"^3=",["^I",[]],"^3>",["^1?","^3F","^63","^5W","^64","^6;","^60","^3V","^3Y","^3D","^3W"]]],["^1M","com/cognitect/transit/caching.js"],["f8b4f570ca4d41649190efecac27a5932cc11429","^3;",["^ ","^3<",null,"^3=",["^I",[]],"^3>",["^1?","^6C"]]],["^1M","goog/events/event.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3;",["^ ","^3<",null,"^3=",["^I",[]],"^3>",["^1?","^5?","^49"]]],["^1M","cljs/tools/reader/impl/commons.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^3;",["^ ","^3<",null,"^3=",["^I",[]],"^3>",["^1?","^1<","^4I","^4J","^4K"]]],["^1M","goog/events/eventhandler.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3;",["^ ","^3<",null,"^3=",["^I",[]],"^3>",["^1?","^5?","^5@","^1>","^48","^49","^3N","^4F"]]],["^1M","goog/dom/htmlelement.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3;",["^ ","^3<",null,"^3=",["^I",[]],"^3>",["^1?"]]],["^1M","cljs/core.cljs"],["e2ad9a4500a5ecabaf01429c4f0d6f7fac146951","^3;",["^ ","^3<",null,"^3=",["^I",[]],"^3>",["^1?","^73","~$goog.math.Integer","^3R","^1>","^3L","^3P","^4N"]]],["^1M","com/cognitect/transit.js"],["f8b4f570ca4d41649190efecac27a5932cc11429","^3;",["^ ","^3<",null,"^3=",["^I",[]],"^3>",["^1?","^6B","~$com.cognitect.transit.impl.reader","~$com.cognitect.transit.impl.writer","^6D","^75","^4=","^4>"]]],["^1M","goog/html/safescript.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3;",["^ ","^3<",null,"^3=",["^I",[]],"^3>",["^1?","^3Y","^3Z","^5X","^3F"]]],["^1M","goog/log/log.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3;",["^ ","^3<",null,"^3=",["^I",[]],"^3>",["^1?","^3F","^7:"]]],["^1M","goog/async/throwexception.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3;",["^ ","^3<",null,"^3=",["^I",[]],"^3>",["^1?"]]],["^1M","goog/html/safestylesheet.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3;",["^ ","^3<",null,"^3=",["^I",[]],"^3>",["^1?","^3Y","^64","^3Z","^1>","^3F","^3D"]]],["^1M","goog/structs/collection.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3;",["^ ","^3<",null,"^3=",["^I",[]],"^3>",["^1?"]]],["^1M","goog/events/browserevent.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3;",["^ ","^3<",null,"^3=",["^I",[]],"^3>",["^1?","^7:","^48","~$goog.events.EventType","^45","^3T"]]],["^1M","goog/math/integer.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3;",["^ ","^3<",null,"^3=",["^I",[]],"^3>",["^1?","^45"]]],["^1M","goog/structs/node.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3;",["^ ","^3<",null,"^3=",["^I",[]],"^3>",["^1?"]]],["^1M","goog/dom/browserfeature.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3;",["^ ","^3<",null,"^3=",["^I",[]],"^3>",["^1?","^3T"]]],["^3:","node_modules/react-dom/cjs/react-dom.development.js"],["1c6e82d3f9756822c3b08dd8f8e1d7c23a7f1630","3679a1a898d0c80b330819274df3fe1302fa19d1","47cafc93ea89646f98180be561302225fa2b868d","^3;",["^ ","^3<",null,"^3=",["^I",[]],"^3>",["^3?","^V","^5P"]]],["^1M","clojure/set.cljs"],["e2ad9a4500a5ecabaf01429c4f0d6f7fac146951","^3;",["^ ","^3<",null,"^3=",["^I",[]],"^3>",["^1?","^1<"]]],["^1M","goog/uri/utils.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3;",["^ ","^3<",null,"^3=",["^I",[]],"^3>",["^1?","^3F","^3R"]]],["^1M","goog/string/const.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3;",["^ ","^3<",null,"^3=",["^I",[]],"^3>",["^1?","^3F","^3Z"]]],["^1M","goog/disposable/disposeall.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3;",["^ ","^3<",null,"^3=",["^I",[]],"^3>",["^1?","^5E"]]],["^1M","com/fulcrologic/fulcro/rendering/ident_optimized_render.cljc"],["aa10be524799b8f5dcb1cab659b996577fc15d41","^3;",["^ ","^3<",null,"^3=",["^I",[]],"^3>",["^1?","^1<","^16","^1:","^18","^54","^10","^12"]]],["^1M","goog/json/json.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3;",["^ ","^3<",null,"^3=",["^I",[]],"^3>",["^1?"]]],["^1M","goog/i18n/localefeature.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3;",["^ ","^3<",null,"^3=",["^I",[]],"^3>",["^1?"]]],["^1M","goog/events/listenable.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3;",["^ ","^3<",null,"^3=",["^I",[]],"^3>",["^1?","^49","^4E","^4G"]]],["^1M","goog/events/listenablekey.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3;",["^ ","^3<",null,"^3=",["^I",[]],"^3>",["^1?","^4B"]]],["^1M","com/cognitect/transit/impl/writer.js"],["f8b4f570ca4d41649190efecac27a5932cc11429","^3;",["^ ","^3<",null,"^3=",["^I",[]],"^3>",["^1?","^6B","^4>","~$com.cognitect.transit.handlers","^6D","^6C","^73"]]],["^1M","goog/net/xmlhttpfactory.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3;",["^ ","^3<",null,"^3=",["^I",[]],"^3>",["^1?","^4Y"]]],["^1M","com/fulcrologic/fulcro/algorithms/denormalize.cljc"],["aa10be524799b8f5dcb1cab659b996577fc15d41","^3;",["^ ","^3<",null,"^3=",["^I",[]],"^3>",["^1?","^1<","^54","^10","^12"]]],["^1M","goog/net/xmlhttp.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3;",["^ ","^3<",null,"^3=",["^I",[]],"^3>",["^1?","^3F","~$goog.net.WrapperXmlHttpFactory","^4Z","^4Y"]]],["^1M","goog/net/xhrlike.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3;",["^ ","^3<",null,"^3=",["^I",[]],"^3>",["^1?"]]],["^1M","cognitect/transit.cljs"],["ae688999ee978d238bffd4df0c0323e552d6d8dc","^3;",["^ ","^3<",null,"^3=",["^I",[]],"^3>",["^1?","^1<","~$com.cognitect.transit","^6D","^75","^73"]]],["^1M","goog/crypt/base64.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3;",["^ ","^3<",null,"^3=",["^I",[]],"^3>",["^1?","^3F","^3[","^3D","^3T","~$goog.userAgent.product"]]]]],"~:clj-info",["^ ","jar:file:/C:/Users/carre/.m2/repository/com/fulcrologic/fulcro/3.5.9/fulcro-3.5.9.jar!/com/fulcrologic/fulcro/rendering/ident_optimized_render.cljc",1676259735000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/main.clj",1675466804000,"jar:file:/C:/Users/carre/.m2/repository/com/fulcrologic/fulcro/3.5.9/fulcro-3.5.9.jar!/com/fulcrologic/fulcro/raw/components.cljc",1676259735000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader.clj",1675288215000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/impl/errors.clj",1675288215000,"jar:file:/C:/Users/carre/.m2/repository/com/taoensso/truss/1.6.0/truss-1.6.0.jar!/taoensso/truss.clj",1676259735000,"jar:file:/C:/Users/carre/.m2/repository/com/fulcrologic/guardrails/1.1.4/guardrails-1.1.4.jar!/com/fulcrologic/guardrails/impl/externs.cljc",1676259733000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/tools.analyzer/1.1.0/tools.analyzer-1.1.0.jar!/clojure/tools/analyzer/ast.clj",1675288214000,"jar:file:/C:/Users/carre/.m2/repository/com/taoensso/timbre/5.1.1/timbre-5.1.1.jar!/taoensso/timbre/appenders/core.cljc",1676259736000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/core.async/1.4.627/core.async-1.4.627.jar!/clojure/core/async/impl/ioc_macros.clj",1676259738000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/default_data_readers.clj",1675288215000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/clojurescript/1.10.914/clojurescript-1.10.914.jar!/cljs/util.cljc",1676259734000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/core.async/1.4.627/core.async-1.4.627.jar!/clojure/core/async/impl/buffers.clj",1676259738000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/data.json/2.4.0/data.json-2.4.0.jar!/clojure/data/json.clj",1675288214000,"jar:file:/C:/Users/carre/.m2/repository/com/fulcrologic/guardrails/1.1.4/guardrails-1.1.4.jar!/com/fulcrologic/guardrails/impl/parser.clj",1676259733000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/tools.analyzer/1.1.0/tools.analyzer-1.1.0.jar!/clojure/tools/analyzer/env.clj",1675288214000,"jar:file:/C:/Users/carre/.m2/repository/com/fulcrologic/fulcro/3.5.9/fulcro-3.5.9.jar!/com/fulcrologic/fulcro/algorithms/lookup.cljc",1676259735000,"jar:file:/C:/Users/carre/.m2/repository/io/aviso/pretty/0.1.37/pretty-0.1.37.jar!/io/aviso/columns.clj",1676259734000,"jar:file:/C:/Users/carre/.m2/repository/com/fulcrologic/guardrails/1.1.4/guardrails-1.1.4.jar!/com/fulcrologic/guardrails/utils.cljc",1676259733000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/clojurescript/1.10.914/clojurescript-1.10.914.jar!/cljs/reader.clj",1676259734000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/spec.alpha/0.2.194/spec.alpha-0.2.194.jar!/clojure/spec/gen/alpha.clj",1675466804000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/clojurescript/1.10.914/clojurescript-1.10.914.jar!/cljs/analyzer/passes.cljc",1676259734000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/core.async/1.4.627/core.async-1.4.627.jar!/clojure/core/async/impl/timers.clj",1676259738000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/clojurescript/1.10.914/clojurescript-1.10.914.jar!/cljs/source_map/base64.clj",1676259734000,"jar:file:/C:/Users/carre/.m2/repository/expound/expound/0.8.9/expound-0.8.9.jar!/expound/problems.cljc",1676259733000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/clojurescript/1.10.914/clojurescript-1.10.914.jar!/cljs/analyzer.cljc",1676259734000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/tools.analyzer.jvm/1.2.0/tools.analyzer.jvm-1.2.0.jar!/clojure/tools/analyzer/jvm/utils.clj",1676259734000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/clojurescript/1.10.914/clojurescript-1.10.914.jar!/cljs/source_map.clj",1676259734000,"jar:file:/C:/Users/carre/.m2/repository/edn-query-language/eql/1.0.1/eql-1.0.1.jar!/edn_query_language/core.cljc",1676259733000,"jar:file:/C:/Users/carre/.m2/repository/com/fulcrologic/fulcro/3.5.9/fulcro-3.5.9.jar!/com/fulcrologic/fulcro/components.cljc",1676259735000,"jar:file:/C:/Users/carre/.m2/repository/com/fulcrologic/fulcro/3.5.9/fulcro-3.5.9.jar!/com/fulcrologic/fulcro/algorithms/do_not_use.cljc",1676259735000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/stacktrace.clj",1675466804000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/edn.clj",1675466804000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/clojurescript/1.10.914/clojurescript-1.10.914.jar!/cljs/source_map/base64_vlq.clj",1676259734000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/impl/inspect.clj",1675288215000,"jar:file:/C:/Users/carre/.m2/repository/com/fulcrologic/guardrails/1.1.4/guardrails-1.1.4.jar!/com/fulcrologic/guardrails/core.cljc",1676259733000,"jar:file:/C:/Users/carre/.m2/repository/com/taoensso/truss/1.6.0/truss-1.6.0.jar!/taoensso/truss/impl.clj",1676259735000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/clojurescript/1.10.914/clojurescript-1.10.914.jar!/cljs/spec/alpha.cljc",1676259734000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/core.async/1.4.627/core.async-1.4.627.jar!/cljs/core/async/impl/ioc_macros.clj",1676259738000,"jar:file:/C:/Users/carre/.m2/repository/com/fulcrologic/fulcro/3.5.9/fulcro-3.5.9.jar!/com/fulcrologic/fulcro/algorithms/denormalize.cljc",1676259735000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/clojurescript/1.10.914/clojurescript-1.10.914.jar!/cljs/js_deps.cljc",1676259734000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/tools.analyzer/1.1.0/tools.analyzer-1.1.0.jar!/clojure/tools/analyzer/utils.clj",1675288214000,"jar:file:/C:/Users/carre/.m2/repository/com/fulcrologic/fulcro/3.5.9/fulcro-3.5.9.jar!/com/fulcrologic/fulcro/algorithms/transit.cljc",1676259735000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/cljs/tools/reader/reader_types.clj",1675288215000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/instant.clj",1675466804000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/clojurescript/1.10.914/clojurescript-1.10.914.jar!/cljs/core.cljc",1676259734000,"jar:file:/C:/Users/carre/.m2/repository/expound/expound/0.8.9/expound-0.8.9.jar!/expound/paths.cljc",1676259733000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/java/io.clj",1675466804000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/clojurescript/1.10.914/clojurescript-1.10.914.jar!/cljs/env.cljc",1676259734000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/clojurescript/1.10.914/clojurescript-1.10.914.jar!/cljs/instant.clj",1676259734000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/spec.alpha/0.2.194/spec.alpha-0.2.194.jar!/clojure/spec/alpha.clj",1675466804000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/core.async/1.4.627/core.async-1.4.627.jar!/clojure/core/async/impl/exec/threadpool.clj",1676259738000,"jar:file:/C:/Users/carre/.m2/repository/io/aviso/pretty/0.1.37/pretty-0.1.37.jar!/io/aviso/ansi.clj",1676259734000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/core.clj",1675466804000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/clojurescript/1.10.914/clojurescript-1.10.914.jar!/cljs/analyzer/passes/and_or.cljc",1676259734000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/core.async/1.4.627/core.async-1.4.627.jar!/clojure/core/async/impl/mutex.clj",1676259738000,"jar:file:/C:/Users/carre/.m2/repository/io/aviso/pretty/0.1.37/pretty-0.1.37.jar!/io/aviso/exception.clj",1676259734000,"jar:file:/C:/Users/carre/.m2/repository/expound/expound/0.8.9/expound-0.8.9.jar!/expound/util.cljc",1676259733000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/clojurescript/1.10.914/clojurescript-1.10.914.jar!/cljs/analyzer/impl.cljc",1676259734000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/clojurescript/1.10.914/clojurescript-1.10.914.jar!/cljs/pprint.cljc",1676259734000,"jar:file:/C:/Users/carre/.m2/repository/expound/expound/0.8.9/expound-0.8.9.jar!/expound/printer.cljc",1676259733000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/core.async/1.4.627/core.async-1.4.627.jar!/cljs/core/async.clj",1676259738000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/pprint.clj",1675466804000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/reader_types.clj",1675288215000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/core.async/1.4.627/core.async-1.4.627.jar!/clojure/core/async/impl/dispatch.clj",1676259738000,"jar:file:/C:/Users/carre/.m2/repository/com/taoensso/timbre/5.1.1/timbre-5.1.1.jar!/taoensso/timbre.cljc",1676259736000,"jar:file:/C:/Users/carre/.m2/repository/expound/expound/0.8.9/expound-0.8.9.jar!/expound/alpha.cljc",1676259733000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/core.async/1.4.627/core.async-1.4.627.jar!/clojure/core/async/impl/channels.clj",1676259738000,"jar:file:/C:/Users/carre/.m2/repository/expound/expound/0.8.9/expound-0.8.9.jar!/expound/ansi.cljc",1676259733000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/core.async/1.4.627/core.async-1.4.627.jar!/clojure/core/async/impl/concurrent.clj",1676259738000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/set.clj",1675466804000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/walk.clj",1675466804000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/string.clj",1675466804000,"jar:file:/C:/Users/carre/.m2/repository/com/fulcrologic/guardrails/1.1.4/guardrails-1.1.4.jar!/com/fulcrologic/guardrails/impl/pro.cljc",1676259733000,"jar:file:/C:/Users/carre/.m2/repository/com/fulcrologic/fulcro/3.5.9/fulcro-3.5.9.jar!/com/fulcrologic/fulcro/rendering/keyframe_render.cljc",1676259735000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/clojurescript/1.10.914/clojurescript-1.10.914.jar!/cljs/tagged_literals.cljc",1676259734000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/tools.analyzer/1.1.0/tools.analyzer-1.1.0.jar!/clojure/tools/analyzer.clj",1675288214000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/clojurescript/1.10.914/clojurescript-1.10.914.jar!/cljs/compiler.cljc",1676259734000,"jar:file:/C:/Users/carre/.m2/repository/com/fulcrologic/guardrails/1.1.4/guardrails-1.1.4.jar!/com/fulcrologic/guardrails/registry.cljc",1676259733000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/reflect.clj",1675466804000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/core.async/1.4.627/core.async-1.4.627.jar!/clojure/core/async.clj",1676259738000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/clojurescript/1.10.914/clojurescript-1.10.914.jar!/cljs/spec/gen/alpha.cljc",1676259734000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/clojurescript/1.10.914/clojurescript-1.10.914.jar!/cljs/externs.clj",1676259734000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/edn.clj",1675288215000,"jar:file:/C:/Users/carre/.m2/repository/com/cognitect/transit-clj/1.0.324/transit-clj-1.0.324.jar!/cognitect/transit.clj",1676259736000,"jar:file:/C:/Users/carre/.m2/repository/com/fulcrologic/guardrails/1.1.4/guardrails-1.1.4.jar!/com/fulcrologic/guardrails/config.cljc",1676259733000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/tools.analyzer.jvm/1.2.0/tools.analyzer.jvm-1.2.0.jar!/clojure/tools/analyzer/jvm.clj",1676259734000,"jar:file:/C:/Users/carre/.m2/repository/com/taoensso/encore/3.10.1/encore-3.10.1.jar!/taoensso/encore.cljc",1676259733000,"jar:file:/C:/Users/carre/.m2/repository/com/fulcrologic/fulcro/3.5.9/fulcro-3.5.9.jar!/com/fulcrologic/fulcro/rendering/multiple_roots_renderer.cljc",1676259735000,"jar:file:/C:/Users/carre/.m2/repository/binaryage/devtools/1.0.4/devtools-1.0.4.jar!/devtools/defaults.clj",1676259736000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/core.async/1.4.627/core.async-1.4.627.jar!/clojure/core/async/impl/protocols.clj",1676259738000,"jar:file:/C:/Users/carre/.m2/repository/com/fulcrologic/fulcro/3.5.9/fulcro-3.5.9.jar!/com/fulcrologic/fulcro/algorithms/tempid.cljc",1676259735000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","Like keyframe-render2, but also supports free-floating roots.\n\n  WARNING: THIS RENDERER IS ALPHA. Lightly tested, but not heavily used yet.\n\n  General usage:\n\n  1. Set this nses `render!` as your application's optimized render function.\n  2. Create a class that follows all of the normal rules for a Fulcro root (no ident, has initial state,\n  composes children queries/initial-state, etc.\n     a. Add mount/unmount register/deregister calls\n  2. Use floating-root-factory to generate a Fulcro factory, or floating-root-react-class to generate\n  a vanilla React wrapper class that renders the new root.\n     a. Use the factory in normal Fuclro rendering, but don't pass it props, or\n     b. Use `(dom/create-element ReactClass)` to render the vanilla wrapper, or\n     c. Use the vanilla wrapper class when a js library controls rendering (like routing).\n\n  Example:\n\n  ```\n  (defonce app (app/fulcro-app {:optimized-render! mroot/render!}))\n\n  (defsc AltRoot [this {:keys [alt-child]}]\n    ;; query is from ROOT of the db, just like normal root.\n    {:query                 [{:alt-child (comp/get-query OtherChild)}]\n     :componentDidMount     (fn [this] (mroot/register-root! this {:app app}))\n     :componentWillUnmount  (fn [this] (mroot/deregister-root! this {:app app}))\n     :shouldComponentUpdate (fn [] true)\n     :initial-state         {:alt-child [{:id 1 :n 22}\n                                         {:id 2 :n 44}]}}\n    (dom/div\n      (mapv ui-other-child alt-child)))\n\n  ;; For use in the body of normal defsc components.\n  (def ui-alt-root (mroot/floating-root-factory AltRoot))\n\n  ;; For use as plain React class\n  (def PlainAltRoot (mroot/floating-root-react-class AltRoot app))\n\n  ...\n\n  (some-js-library #js {:thing PlainAltRoot})\n\n  (defsc NormalFulcroClass [this props]\n    {:query [:stuff]\n     :ident (fn [] [:x 1])\n     ...}\n    (dom/div\n      ;; ok to use within defsc components:\n      (ui-alt-root)\n      ;; how to use the plain react class, which is how js libs would use it:\n      (dom/create-element PlainAltRoot)))\n\n  ```\n  ","^7","com/fulcrologic/fulcro/rendering/multiple_roots_renderer.cljc","^8",1,"^9",5,"^:",1,"^;",61],"^<",["^ ","^=","^>","^?","^@","^A","^B","^C","^D"],"^E",["^ ","^F","^G"],"^H",["^I",[]],"^J",["^ ","^F",["^ ","^K",["^L",[["^M","~$&","^N"]]],"^6","Wraps the given body with the correct internal bindings of the given fulcro-app so that Fulcro internals\n     will work when that body is embedded in unusual ways.\n\n     You should use this around the render body of any floating root that will be rendered outside of\n     the synchronous fulcro render (e.g. you pass a floating root class to a React library).\n     ","^8",156,"^9",4,"^7","com/fulcrologic/fulcro/rendering/multiple_roots_renderer.cljc","^O","^P","^Q","^G","^R",true]],"~:shadow/js-access-properties",["^I",["Component"]],"^O","^G","^S",["^ "],"^T",["^ ","^U","^V"],"^X",null,"^Y",["^ ","^Z","^[","^10","^10","^11","^12","^13","^14","^15","^16","^17","^18","^19","^10","^1:","^1:","^1;","^V","^1<","^1<","^V","^V","^1=","^1>","^1?","^1?","^1>","^1>","^16","^16","^[","^[","^14","^14","^18","^18","^12","^12","^1@","^1:"],"^1A",["^I",["^1B","^1C"]],"~:shadow/js-access-global",["^I",["Error"]],"^1D",null,"~:defs",["^ ","~$register-root!",["^ ","~:protocol-inline",null,"^5",["^ ","^7","com/fulcrologic/fulcro/rendering/multiple_roots_renderer.cljc","^8",69,"^9",7,"^:",69,"^;",21,"^K",["^L",["~$quote",["^L",[["~$react-instance"],["^9P",["^ ","~:keys",["~$app","~$initialize?"]]]]]]],"^6","Register a mounted react component as a new root that should be managed. The\n  options map can contain:\n\n  - `:initialize?`: Should the initial state be pushed into the app state (if not already present)? Defaults\n  to true, which causes it to happen once (on initial mount).","~:top-fn",["^ ","~:variadic?",false,"~:fixed-arity",2,"~:max-fixed-arity",2,"~:method-params",[["^9P"],["^9P",["^ ","^9Q",["^9R","^9S"]]]],"^K",["^L",[["^9P"],["^9P",["^ ","^9Q",["^9R","^9S"]]]]],"~:arglists-meta",["^L",[null,null]]]],"^O","^2=","^7","com/fulcrologic/fulcro/rendering/multiple_roots_renderer.cljc","^;",21,"^9T",["^ ","^9U",false,"^9V",2,"^9W",2,"^9X",[["^9P"],["^9P",["^ ","^9Q",["^9R","^9S"]]]],"^K",["^L",[["^9P"],["^9P",["^ ","^9Q",["^9R","^9S"]]]]],"^9Y",["^L",[null,null]]],"^9X",[["^9P"],["^9P",["^ ","^9Q",["^9R","^9S"]]]],"~:protocol-impl",null,"^9V",2,"^9Y",["^L",[null,null]],"^9",1,"^9U",false,"~:methods",[["^ ","^9V",1,"^9U",false,"~:tag","~$any"],["^ ","^9V",2,"^9U",false,"^:0",["^I",[null,"^:1","~$clj-nil"]]]],"^8",69,"^:",69,"^9W",2,"~:fn-var",true,"^K",["^L",[["^9P"],["^9P",["^ ","^9Q",["^9R","^9S"]]]]],"^6","Register a mounted react component as a new root that should be managed. The\n  options map can contain:\n\n  - `:initialize?`: Should the initial state be pushed into the app state (if not already present)? Defaults\n  to true, which causes it to happen once (on initial mount)."],"~$deregister-root!",["^ ","^9N",null,"^5",["^ ","^7","com/fulcrologic/fulcro/rendering/multiple_roots_renderer.cljc","^8",94,"^9",7,"^:",94,"^;",23,"^K",["^L",["^9O",["^L",[["^9P"],["^9P",["^ ","^9Q",["^9R"],"^1H","~$options"]]]]]],"^6","Deregister a mounted root that should no longer be managed.","^9T",["^ ","^9U",false,"^9V",2,"^9W",2,"^9X",[["^9P"],["^9P",["^ ","^9Q",["^9R"],"^1H","^:5"]]],"^K",["^L",[["^9P"],["^9P",["^ ","^9Q",["^9R"],"^1H","^:5"]]]],"^9Y",["^L",[null,null]]]],"^O","^2Q","^7","com/fulcrologic/fulcro/rendering/multiple_roots_renderer.cljc","^;",23,"^9T",["^ ","^9U",false,"^9V",2,"^9W",2,"^9X",[["^9P"],["^9P",["^ ","^9Q",["^9R"],"^1H","^:5"]]],"^K",["^L",[["^9P"],["^9P",["^ ","^9Q",["^9R"],"^1H","^:5"]]]],"^9Y",["^L",[null,null]]],"^9X",[["^9P"],["^9P",["^ ","^9Q",["^9R"],"^1H","^:5"]]],"^9Z",null,"^9V",2,"^9Y",["^L",[null,null]],"^9",1,"^9U",false,"^9[",[["^ ","^9V",1,"^9U",false,"^:0","^:1"],["^ ","^9V",2,"^9U",false,"^:0",["^I",[null,"^:1","^:2"]]]],"^8",94,"^:",94,"^9W",2,"^:3",true,"^K",["^L",[["^9P"],["^9P",["^ ","^9Q",["^9R"],"^1H","^:5"]]]],"^6","Deregister a mounted root that should no longer be managed."],"~$render-roots!",["^ ","^9N",null,"^5",["^ ","^7","com/fulcrologic/fulcro/rendering/multiple_roots_renderer.cljc","^8",107,"^9",7,"^:",107,"^;",20,"^K",["^L",["^9O",["^L",[["^9R","^:5"]]]]]],"^O","^2D","^7","com/fulcrologic/fulcro/rendering/multiple_roots_renderer.cljc","^;",20,"^9X",["^L",[["^9R","^:5"]]],"^9Z",null,"^9Y",["^L",[null,null]],"^9",1,"^9U",false,"^8",107,"~:ret-tag","^:2","^:",107,"^9W",2,"^:3",true,"^K",["^L",["^9O",["^L",[["^9R","^:5"]]]]]],"~$render-stale-components!",["^ ","^9N",null,"^5",["^ ","^7","com/fulcrologic/fulcro/rendering/multiple_roots_renderer.cljc","^8",118,"^9",7,"^:",118,"^;",31,"^K",["^L",["^9O",["^L",[["^9R","^:5"]]]]],"^6","This function tracks the state of the app at the time of prior render in the app's runtime-atom. It\n   uses that to do a comparison of old vs. current application state (bounded by the needs of on-screen components).\n   When it finds data that has changed it renders all of the components that depend on that data."],"^O","^2I","^7","com/fulcrologic/fulcro/rendering/multiple_roots_renderer.cljc","^;",31,"^9X",["^L",[["^9R","^:5"]]],"^9Z",null,"^9Y",["^L",[null,null]],"^9",1,"^9U",false,"^8",118,"^:7","^:2","^:",118,"^9W",2,"^:3",true,"^K",["^L",["^9O",["^L",[["^9R","^:5"]]]]],"^6","This function tracks the state of the app at the time of prior render in the app's runtime-atom. It\n   uses that to do a comparison of old vs. current application state (bounded by the needs of on-screen components).\n   When it finds data that has changed it renders all of the components that depend on that data."],"~$render!",["^ ","^9N",null,"^5",["^ ","^7","com/fulcrologic/fulcro/rendering/multiple_roots_renderer.cljc","^8",132,"^9",7,"^:",132,"^;",14,"^K",["^L",["^9O",["^L",[["^9R"],["^9R",["^ ","^9Q",["~$force-root?","~$root-props-changed?"],"^1H","^:5"]]]]]],"^6","The top-level call for using this optimized render in your application.\n\n  If `:force-root? true` is passed in options, then it just forces a keyframe root render.\n\n  This renderer always does a keyframe render *unless* an `:only-refresh` option is passed to the stack\n  (usually as an option on `(transact! this [(f)] {:only-refresh [...idents...]})`. In that case the renderer\n  will ignore *all* data diffing and will target refresh only to the on-screen components that have the listed\n  ident(s). This allows you to get component-local state refresh rates on transactions that are responding to\n  events that should really only affect a known set of components (like the input field).\n\n  This option does *not* currently support using query keywords in the refresh set. Only idents.","^9T",["^ ","^9U",false,"^9V",2,"^9W",2,"^9X",[["^9R"],["^9R",["^ ","^9Q",["^::","^:;"],"^1H","^:5"]]],"^K",["^L",[["^9R"],["^9R",["^ ","^9Q",["^::","^:;"],"^1H","^:5"]]]],"^9Y",["^L",[null,null]]]],"^O","^33","^7","com/fulcrologic/fulcro/rendering/multiple_roots_renderer.cljc","^;",14,"^9T",["^ ","^9U",false,"^9V",2,"^9W",2,"^9X",[["^9R"],["^9R",["^ ","^9Q",["^::","^:;"],"^1H","^:5"]]],"^K",["^L",[["^9R"],["^9R",["^ ","^9Q",["^::","^:;"],"^1H","^:5"]]]],"^9Y",["^L",[null,null]]],"^9X",[["^9R"],["^9R",["^ ","^9Q",["^::","^:;"],"^1H","^:5"]]],"^9Z",null,"^9V",2,"^9Y",["^L",[null,null]],"^9",1,"^9U",false,"^9[",[["^ ","^9V",1,"^9U",false,"^:0","^:1"],["^ ","^9V",2,"^9U",false,"^:0",["^I",[null,"^:2"]]]],"^8",132,"^:",132,"^9W",2,"^:3",true,"^K",["^L",[["^9R"],["^9R",["^ ","^9Q",["^::","^:;"],"^1H","^:5"]]]],"^6","The top-level call for using this optimized render in your application.\n\n  If `:force-root? true` is passed in options, then it just forces a keyframe root render.\n\n  This renderer always does a keyframe render *unless* an `:only-refresh` option is passed to the stack\n  (usually as an option on `(transact! this [(f)] {:only-refresh [...idents...]})`. In that case the renderer\n  will ignore *all* data diffing and will target refresh only to the on-screen components that have the listed\n  ident(s). This allows you to get component-local state refresh rates on transactions that are responding to\n  events that should really only affect a known set of components (like the input field).\n\n  This option does *not* currently support using query keywords in the refresh set. Only idents."],"~$floating-root-react-class",["^ ","^9N",null,"^5",["^ ","^7","com/fulcrologic/fulcro/rendering/multiple_roots_renderer.cljc","^8",173,"^9",7,"^:",173,"^;",32,"^K",["^L",["^9O",["^L",[["~$UIRoot","^M"]]]]],"^6","Generate a plain React class that can render a Fulcro UIRoot. NOTE: The UIRoot must register/deregister itself\n  in the component lifecycle:\n\n  ```\n  (defsc UIRoot [this props]\n    {:componentDidMount     (fn [this] (mroot/register-root! this))\n     :componentWillUnmount  (fn [this] (mroot/deregister-root! this))\n     :initial-state {}\n     :query [root-like-query]}\n    ...)\n  ```\n\n  The `fulcro-app` is the app under which this root will be rendered. Create different factories if you have more than\n  one mounted app.\n  "],"^O","^29","^7","com/fulcrologic/fulcro/rendering/multiple_roots_renderer.cljc","^;",32,"^9X",["^L",[["^:=","^M"]]],"^9Z",null,"^9Y",["^L",[null,null]],"^9",1,"^9U",false,"^8",173,"^:7","~$function","^:",173,"^9W",2,"^:3",true,"^K",["^L",["^9O",["^L",[["^:=","^M"]]]]],"^6","Generate a plain React class that can render a Fulcro UIRoot. NOTE: The UIRoot must register/deregister itself\n  in the component lifecycle:\n\n  ```\n  (defsc UIRoot [this props]\n    {:componentDidMount     (fn [this] (mroot/register-root! this))\n     :componentWillUnmount  (fn [this] (mroot/deregister-root! this))\n     :initial-state {}\n     :query [root-like-query]}\n    ...)\n  ```\n\n  The `fulcro-app` is the app under which this root will be rendered. Create different factories if you have more than\n  one mounted app.\n  "],"~$floating-root-factory",["^ ","^9N",null,"^5",["^ ","^7","com/fulcrologic/fulcro/rendering/multiple_roots_renderer.cljc","^8",207,"^9",7,"^:",207,"^;",28,"^K",["^L",["^9O",["^L",[["~$UIClass"],["^:@","^:5"]]]]],"^6","Create a factory that renders a floating root in a normal Fulcro context (body of a Fulcro component). This factory\n   has the same sync constraints as normal `component/factory` functions. See `components/with-parent-context`.\n\n  `UIClass`: A class that will behave as a floating root. NOTE: that class MUST have a mount/unmount hook\n  to regsiter/deregister itself as a root.\n\n  `options`: An options map. Same as for `component/factory`. Note, however, that this factory will *not* receive\n  props, so a `:keyfn` would have to be based on something else.\n\n  You normally do not pass any props to this factory because it is controlling the component and feeding props from\n  the database. Props sent to this factory are only used by the wrapper, however, `:react-key` is useful if you\n  have a bunch of sibling roots and need to set the react key for each.\n  ","^9T",["^ ","^9U",false,"^9V",2,"^9W",2,"^9X",[["^:@"],["^:@","^:5"]],"^K",["^L",[["^:@"],["^:@","^:5"]]],"^9Y",["^L",[null,null]]]],"^O","^2U","^7","com/fulcrologic/fulcro/rendering/multiple_roots_renderer.cljc","^;",28,"^9T",["^ ","^9U",false,"^9V",2,"^9W",2,"^9X",[["^:@"],["^:@","^:5"]],"^K",["^L",[["^:@"],["^:@","^:5"]]],"^9Y",["^L",[null,null]]],"^9X",[["^:@"],["^:@","^:5"]],"^9Z",null,"^9V",2,"^9Y",["^L",[null,null]],"^9",1,"^9U",false,"^9[",[["^ ","^9V",1,"^9U",false,"^:0","^:1"],["^ ","^9V",2,"^9U",false,"^:0",["^I",["~$clj","~$cljs.core/MetaFn","^:2"]]]],"^8",207,"^:",207,"^9W",2,"^:3",true,"^K",["^L",[["^:@"],["^:@","^:5"]]],"^6","Create a factory that renders a floating root in a normal Fulcro context (body of a Fulcro component). This factory\n   has the same sync constraints as normal `component/factory` functions. See `components/with-parent-context`.\n\n  `UIClass`: A class that will behave as a floating root. NOTE: that class MUST have a mount/unmount hook\n  to regsiter/deregister itself as a root.\n\n  `options`: An options map. Same as for `component/factory`. Note, however, that this factory will *not* receive\n  props, so a `:keyfn` would have to be based on something else.\n\n  You normally do not pass any props to this factory because it is controlling the component and feeding props from\n  the database. Props sent to this factory are only used by the wrapper, however, `:react-key` is useful if you\n  have a bunch of sibling roots and need to set the react key for each.\n  "]],"^1C",["^ ","^G","^G","^1<","^1<","^11","^12","^17","^18","^18","^18","^12","^12"],"~:cljs.analyzer/constants",["^ ","^1A",["^I",["~:js-props","~:initialize-state!","~:com.fulcrologic.fulcro.rendering.multiple-roots-renderer/known-roots","~:com.fulcrologic.fulcro.rendering.multiple-roots-renderer/wrapper","~:debug","~:force-root?","~:schedule-render!","~:com.fulcrologic.fulcro.application/state-atom","~:com.fulcrologic.fulcro.application/only-refresh","~:shouldComponentUpdate","~:render","~:root-props-changed?","~:com.fulcrologic.fulcro.application/runtime-atom","~:app","~:info","~:error","~:initialize?","~:auto","~:p","~:com.fulcrologic.fulcro.rendering.multiple-roots-renderer/basis-t"]],"~:order",["^:T","^:Q","^:E","^:J","^:P","^:F","^:I","^:H","~:p","^:U","^:S","^:K","^:L","^:O","^:R","^:M","^:N","^:V","^:D","^:G"]],"^1I",["^ ","^1C",["^I",[]],"^1B",["^I",[]]],"^1J",["^ ","^U",["^ ","^1H","^1;"]],"^1K",["^1?","^1<","^1:","^[","^18","^14","^16","^10","^12","^V","^1>"]],"^Q","^G","~:ns-specs",["^ "],"~:ns-spec-vars",["^I",[]],"~:compiler-options",["^39",[["^:Z","~:static-fns"],true,["^:Z","~:shadow-tweaks"],null,["^:Z","~:source-map-inline"],null,["^:Z","~:elide-asserts"],false,["^:Z","~:optimize-constants"],null,["^:Z","^1P"],null,["^:Z","~:external-config"],null,["^:Z","~:tooling-config"],null,["^:Z","~:emit-constants"],null,["^:Z","~:load-tests"],null,["^:Z","~:form-size-threshold"],null,["^:Z","~:global-goog-object&array"],null,["^:Z","~:data-readers"],null,["^:Z","~:infer-externs"],"^:U",["^:Z","^1R"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^:Z","~:fn-invoke-direct"],null,["^:Z","~:source-map"],"/dev/null"]]]