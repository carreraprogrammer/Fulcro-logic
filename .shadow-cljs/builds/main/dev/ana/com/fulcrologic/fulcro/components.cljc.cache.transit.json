["^ ","~:output",["^ ","~:js","goog.provide('com.fulcrologic.fulcro.components');\r\ngoog.scope(function(){\r\n  com.fulcrologic.fulcro.components.goog$module$goog$object = goog.module.get('goog.object');\r\n});\r\nvar module$node_modules$react$index=shadow.js.require(\"module$node_modules$react$index\", {});\r\ncom.fulcrologic.fulcro.components._STAR_app_STAR_ = null;\r\ncom.fulcrologic.fulcro.components._STAR_parent_STAR_ = null;\r\ncom.fulcrologic.fulcro.components._STAR_depth_STAR_ = null;\r\ncom.fulcrologic.fulcro.components._STAR_shared_STAR_ = null;\r\ncom.fulcrologic.fulcro.components._STAR_blindly_render_STAR_ = false;\r\n/**\r\n * \r\n *   [obj kvs]\r\n *   [obj kvs default]\r\n * \r\n *   Like get-in, but for js objects, and in CLJC. In clj, it is just get-in. In cljs it is\r\n *   gobj/getValueByKeys.\r\n */\r\ncom.fulcrologic.fulcro.components.isoget_in = com.fulcrologic.fulcro.raw.components.isoget_in;\r\n/**\r\n * \r\n *   [obj k]\r\n *   [obj k default]\r\n * \r\n *   Like get, but for js objects, and in CLJC. In clj, it is just `get`. In cljs it is\r\n *   `gobj/get`.\r\n */\r\ncom.fulcrologic.fulcro.components.isoget = com.fulcrologic.fulcro.raw.components.isoget;\r\n/**\r\n * \r\n *   [k component-class]\r\n * \r\n *   Add a component to Fulcro's component registry.  This is used by defsc to ensure that all Fulcro classes\r\n *   that have been compiled (transitively required) will be accessible for lookup by fully-qualified symbol/keyword.\r\n *   Not meant for public use, unless you're creating your own component macro that doesn't directly leverage defsc.\r\n */\r\ncom.fulcrologic.fulcro.components.register_component_BANG_ = com.fulcrologic.fulcro.raw.components.register_component_BANG_;\r\n/**\r\n * Utility function that will force a lazy sequence of children (recursively) into realized\r\n *   vectors (React cannot deal with lazy seqs in production mode)\r\n */\r\ncom.fulcrologic.fulcro.components.force_children = (function com$fulcrologic$fulcro$components$force_children(x){\r\nvar G__56981 = x;\r\nif(cljs.core.seq_QMARK_(x)){\r\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$3(cljs.core.PersistentVector.EMPTY,cljs.core.map.cljs$core$IFn$_invoke$arity$1(com.fulcrologic.fulcro.components.force_children),G__56981);\r\n} else {\r\nreturn G__56981;\r\n}\r\n});\r\n/**\r\n * \r\n *   [props-a props-b]\r\n * \r\n *   Returns whichever of the given Fulcro props were most recently generated according to `denormalization-time`. This\r\n *   is part of props 'tunnelling', an optimization to get updated props to instances without going through the root.\r\n */\r\ncom.fulcrologic.fulcro.components.newer_props = com.fulcrologic.fulcro.raw.components.newer_props;\r\n/**\r\n * [x]\r\n * \r\n * Returns true if the argument is a component. A component is defined as a *mounted component*.\r\n * This function returns false for component classes, and also returns false for the output of a Fulcro component factory.\r\n */\r\ncom.fulcrologic.fulcro.components.component_instance_QMARK_ = (function com$fulcrologic$fulcro$components$component_instance_QMARK_(x){\r\nreturn com.fulcrologic.fulcro.raw.components.component_instance_QMARK_(x);\r\n});\r\n/**\r\n * [x]\r\n * \r\n * Returns true if the argument is a component instance.\r\n * \r\n * DEPRECATED for terminology clarity. Use `component-instance?` instead.\r\n */\r\ncom.fulcrologic.fulcro.components.component_QMARK_ = com.fulcrologic.fulcro.components.component_instance_QMARK_;\r\n/**\r\n * Returns true if the argument is a component class.\r\n */\r\ncom.fulcrologic.fulcro.components.component_class_QMARK_ = (function com$fulcrologic$fulcro$components$component_class_QMARK_(x){\r\nreturn com.fulcrologic.fulcro.raw.components.component_class_QMARK_(x);\r\n});\r\ncljs.spec.alpha.def_impl(new cljs.core.Keyword(\"com.fulcrologic.fulcro.components\",\"component-class\",\"com.fulcrologic.fulcro.components/component-class\",-316082369),new cljs.core.Symbol(\"com.fulcrologic.fulcro.components\",\"component-class?\",\"com.fulcrologic.fulcro.components/component-class?\",425799109,null),com.fulcrologic.fulcro.components.component_class_QMARK_);\r\n/**\r\n * [class]\r\n * \r\n * Returns a string version of the given react component's name. Works on component instances and classes.\r\n */\r\ncom.fulcrologic.fulcro.components.component_name = com.fulcrologic.fulcro.raw.components.component_name;\r\n/**\r\n * [class]\r\n * \r\n * Returns the registry key for the given component class.\r\n */\r\ncom.fulcrologic.fulcro.components.class__GT_registry_key = com.fulcrologic.fulcro.raw.components.class__GT_registry_key;\r\n/**\r\n * [classname]\r\n * \r\n *   Look up the given component in Fulcro's global component registry. Will only be able to find components that have\r\n *   been (transitively) required by your application.\r\n * \r\n *   `classname` can be a fully-qualified keyword or symbol.\r\n */\r\ncom.fulcrologic.fulcro.components.registry_key__GT_class = com.fulcrologic.fulcro.raw.components.registry_key__GT_class;\r\n/**\r\n * \r\n *   [props computed-map]\r\n * \r\n *   Add computed properties to props. This will *replace* any pre-existing computed properties. Computed props are\r\n *   necessary when a parent component wishes to pass callbacks or other data to children that *have a query*. This\r\n *   is not necessary for \"stateless\" components, though it will work properly for both.\r\n * \r\n *   Computed props are \"remembered\" so that a targeted update (which can only happen on a component with a query\r\n *   and ident) can use new props from the database without \"losing\" the computed props that were originally passed\r\n *   from the parent. If you pass things like callbacks through normal props, then targeted updates will seem to \"lose\r\n *   track of\" them.\r\n *   \r\n */\r\ncom.fulcrologic.fulcro.components.computed = com.fulcrologic.fulcro.raw.components.computed;\r\n/**\r\n * [this-or-props]\r\n * [this-or-props k-or-ks]\r\n * \r\n * Return the computed properties on a component or its props. Note that it requires that the normal properties are not nil.\r\n */\r\ncom.fulcrologic.fulcro.components.get_computed = com.fulcrologic.fulcro.raw.components.get_computed;\r\n/**\r\n * Get any data (as a map) that props extensions have associated with the given Fulcro component. Extra props will\r\n *   be empty unless you've installed props-middleware (on your app) that sets them.\r\n */\r\ncom.fulcrologic.fulcro.components.get_extra_props = (function com$fulcrologic$fulcro$components$get_extra_props(this$){\r\nvar G__56982 = this$;\r\nvar G__56983 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"props\",\"props\",453281727),new cljs.core.Keyword(null,\"fulcro$extra_props\",\"fulcro$extra_props\",-499585470)], null);\r\nvar G__56984 = cljs.core.PersistentArrayMap.EMPTY;\r\nreturn (com.fulcrologic.fulcro.components.isoget_in.cljs$core$IFn$_invoke$arity$3 ? com.fulcrologic.fulcro.components.isoget_in.cljs$core$IFn$_invoke$arity$3(G__56982,G__56983,G__56984) : com.fulcrologic.fulcro.components.isoget_in.call(null,G__56982,G__56983,G__56984));\r\n});\r\n/**\r\n * [this]\r\n * \r\n * Return a component's props.\r\n */\r\ncom.fulcrologic.fulcro.components.props = com.fulcrologic.fulcro.raw.components.props;\r\n/**\r\n * [this]\r\n * \r\n * Get the sequence of react children of the given component.\r\n */\r\ncom.fulcrologic.fulcro.components.children = (function com$fulcrologic$fulcro$components$children(component){\r\nvar cs = com.fulcrologic.fulcro.components.goog$module$goog$object.getValueByKeys(component,\"props\",\"children\");\r\nif(((cljs.core.coll_QMARK_(cs)) || (cljs.core.array_QMARK_(cs)))){\r\nreturn cs;\r\n} else {\r\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cs], null);\r\n}\r\n});\r\n/**\r\n * Returns the component type, regardless of whether the component has been\r\n * mounted\r\n */\r\ncom.fulcrologic.fulcro.components.react_type = (function com$fulcrologic$fulcro$components$react_type(x){\r\nreturn com.fulcrologic.fulcro.raw.components.component_type(x);\r\n});\r\n/**\r\n * [instance]\r\n * \r\n * Returns the react type (component class) of the given React element (instance). Is identity if used on a class.\r\n */\r\ncom.fulcrologic.fulcro.components.get_class = com.fulcrologic.fulcro.raw.components.get_class;\r\n/**\r\n * [component & ks]\r\n * \r\n * Returns the map of options that was specified (via `defsc`) for the component class.\r\n */\r\ncom.fulcrologic.fulcro.components.component_options = com.fulcrologic.fulcro.raw.components.component_options;\r\n/**\r\n * Returns true if the component has `option-key` declared in the component options map.\r\n */\r\ncom.fulcrologic.fulcro.components.has_feature_QMARK_ = (function com$fulcrologic$fulcro$components$has_feature_QMARK_(component,option_key){\r\nreturn cljs.core.contains_QMARK_((com.fulcrologic.fulcro.components.component_options.cljs$core$IFn$_invoke$arity$1 ? com.fulcrologic.fulcro.components.component_options.cljs$core$IFn$_invoke$arity$1(component) : com.fulcrologic.fulcro.components.component_options.call(null,component)),option_key);\r\n});\r\n/**\r\n * Returns true if the component has initial app state.\r\n */\r\ncom.fulcrologic.fulcro.components.has_initial_app_state_QMARK_ = (function com$fulcrologic$fulcro$components$has_initial_app_state_QMARK_(component){\r\nreturn com.fulcrologic.fulcro.components.has_feature_QMARK_(component,new cljs.core.Keyword(null,\"initial-state\",\"initial-state\",-2021616806));\r\n});\r\n/**\r\n * Returns true if the component has an ident\r\n */\r\ncom.fulcrologic.fulcro.components.has_ident_QMARK_ = (function com$fulcrologic$fulcro$components$has_ident_QMARK_(component){\r\nreturn com.fulcrologic.fulcro.components.has_feature_QMARK_(component,new cljs.core.Keyword(null,\"ident\",\"ident\",-742346));\r\n});\r\n/**\r\n * Returns true if the component has a query\r\n */\r\ncom.fulcrologic.fulcro.components.has_query_QMARK_ = (function com$fulcrologic$fulcro$components$has_query_QMARK_(component){\r\nreturn com.fulcrologic.fulcro.components.has_feature_QMARK_(component,new cljs.core.Keyword(null,\"query\",\"query\",-1288509510));\r\n});\r\n/**\r\n * Returns true if the component has a pre-merge\r\n */\r\ncom.fulcrologic.fulcro.components.has_pre_merge_QMARK_ = (function com$fulcrologic$fulcro$components$has_pre_merge_QMARK_(component){\r\nreturn com.fulcrologic.fulcro.components.has_feature_QMARK_(component,new cljs.core.Keyword(null,\"pre-merge\",\"pre-merge\",-567117148));\r\n});\r\n/**\r\n * Returns the ident that would be generated by the given component instance or class IF it was supplied props\r\n */\r\ncom.fulcrologic.fulcro.components.ident = (function com$fulcrologic$fulcro$components$ident(this$,props){\r\nif(com.fulcrologic.fulcro.components.has_feature_QMARK_(this$,new cljs.core.Keyword(null,\"ident\",\"ident\",-742346))){\r\nvar fexpr__56985 = (com.fulcrologic.fulcro.components.component_options.cljs$core$IFn$_invoke$arity$2 ? com.fulcrologic.fulcro.components.component_options.cljs$core$IFn$_invoke$arity$2(this$,new cljs.core.Keyword(null,\"ident\",\"ident\",-742346)) : com.fulcrologic.fulcro.components.component_options.call(null,this$,new cljs.core.Keyword(null,\"ident\",\"ident\",-742346)));\r\nreturn (fexpr__56985.cljs$core$IFn$_invoke$arity$2 ? fexpr__56985.cljs$core$IFn$_invoke$arity$2(this$,props) : fexpr__56985.call(null,this$,props));\r\n} else {\r\nreturn null;\r\n}\r\n});\r\n/**\r\n * Returns the STATIC query of the fgiven component\r\n */\r\ncom.fulcrologic.fulcro.components.query = (function com$fulcrologic$fulcro$components$query(this$){\r\nif(com.fulcrologic.fulcro.components.has_feature_QMARK_(this$,new cljs.core.Keyword(null,\"query\",\"query\",-1288509510))){\r\nvar fexpr__56986 = (com.fulcrologic.fulcro.components.component_options.cljs$core$IFn$_invoke$arity$2 ? com.fulcrologic.fulcro.components.component_options.cljs$core$IFn$_invoke$arity$2(this$,new cljs.core.Keyword(null,\"query\",\"query\",-1288509510)) : com.fulcrologic.fulcro.components.component_options.call(null,this$,new cljs.core.Keyword(null,\"query\",\"query\",-1288509510)));\r\nreturn (fexpr__56986.cljs$core$IFn$_invoke$arity$1 ? fexpr__56986.cljs$core$IFn$_invoke$arity$1(this$) : fexpr__56986.call(null,this$));\r\n} else {\r\nreturn null;\r\n}\r\n});\r\n/**\r\n * Returns the initial state of component clz if it was passed the given params\r\n */\r\ncom.fulcrologic.fulcro.components.initial_state = (function com$fulcrologic$fulcro$components$initial_state(clz,params){\r\nif(com.fulcrologic.fulcro.components.has_feature_QMARK_(clz,new cljs.core.Keyword(null,\"initial-state\",\"initial-state\",-2021616806))){\r\nvar fexpr__56987 = (com.fulcrologic.fulcro.components.component_options.cljs$core$IFn$_invoke$arity$2 ? com.fulcrologic.fulcro.components.component_options.cljs$core$IFn$_invoke$arity$2(clz,new cljs.core.Keyword(null,\"initial-state\",\"initial-state\",-2021616806)) : com.fulcrologic.fulcro.components.component_options.call(null,clz,new cljs.core.Keyword(null,\"initial-state\",\"initial-state\",-2021616806)));\r\nreturn (fexpr__56987.cljs$core$IFn$_invoke$arity$1 ? fexpr__56987.cljs$core$IFn$_invoke$arity$1(params) : fexpr__56987.call(null,params));\r\n} else {\r\nreturn null;\r\n}\r\n});\r\ncom.fulcrologic.fulcro.components.pre_merge = (function com$fulcrologic$fulcro$components$pre_merge(this$,data){\r\nif(com.fulcrologic.fulcro.components.has_feature_QMARK_(this$,new cljs.core.Keyword(null,\"pre-merge\",\"pre-merge\",-567117148))){\r\nvar fexpr__56988 = (com.fulcrologic.fulcro.components.component_options.cljs$core$IFn$_invoke$arity$2 ? com.fulcrologic.fulcro.components.component_options.cljs$core$IFn$_invoke$arity$2(this$,new cljs.core.Keyword(null,\"pre-merge\",\"pre-merge\",-567117148)) : com.fulcrologic.fulcro.components.component_options.call(null,this$,new cljs.core.Keyword(null,\"pre-merge\",\"pre-merge\",-567117148)));\r\nreturn (fexpr__56988.cljs$core$IFn$_invoke$arity$1 ? fexpr__56988.cljs$core$IFn$_invoke$arity$1(data) : fexpr__56988.call(null,data));\r\n} else {\r\nreturn null;\r\n}\r\n});\r\ncom.fulcrologic.fulcro.components.depth = (function com$fulcrologic$fulcro$components$depth(this$){\r\nvar G__56989 = this$;\r\nvar G__56990 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"props\",\"props\",453281727),new cljs.core.Keyword(null,\"fulcro$depth\",\"fulcro$depth\",1963025807)], null);\r\nreturn (com.fulcrologic.fulcro.components.isoget_in.cljs$core$IFn$_invoke$arity$2 ? com.fulcrologic.fulcro.components.isoget_in.cljs$core$IFn$_invoke$arity$2(G__56989,G__56990) : com.fulcrologic.fulcro.components.isoget_in.call(null,G__56989,G__56990));\r\n});\r\n/**\r\n * GET a RAW react prop. Used internally. Safe in CLJC, but equivalent to `(gobj/getValueByKeys this \"props\" (name k)`.\r\n */\r\ncom.fulcrologic.fulcro.components.get_raw_react_prop = (function com$fulcrologic$fulcro$components$get_raw_react_prop(c,k){\r\nvar G__56991 = c;\r\nvar G__56992 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"props\",\"props\",453281727),k], null);\r\nreturn (com.fulcrologic.fulcro.components.isoget_in.cljs$core$IFn$_invoke$arity$2 ? com.fulcrologic.fulcro.components.isoget_in.cljs$core$IFn$_invoke$arity$2(G__56991,G__56992) : com.fulcrologic.fulcro.components.isoget_in.call(null,G__56991,G__56992));\r\n});\r\n/**\r\n * Attempt to coerce `x` to an app.  Legal inputs are a fulcro application, a mounted component,\r\n *   or an atom holding any of the above.\r\n */\r\ncom.fulcrologic.fulcro.components.any__GT_app = (function com$fulcrologic$fulcro$components$any__GT_app(x){\r\nreturn com.fulcrologic.fulcro.raw.components.any__GT_app(x);\r\n});\r\n/**\r\n * Using raw react props/state returns the newest Fulcro props. This is part of \"props tunneling\", where component\r\n *   local state is leveraged as a communication mechanism of updated props directly to a component that has an ident.\r\n *   This function will return the correct version of props based on timestamps.\r\n */\r\ncom.fulcrologic.fulcro.components.raw__GT_newest_props = (function com$fulcrologic$fulcro$components$raw__GT_newest_props(raw_props,raw_state){\r\nvar next_props = com.fulcrologic.fulcro.components.goog$module$goog$object.get(raw_props,\"fulcro$value\");\r\nvar opt_props = com.fulcrologic.fulcro.components.goog$module$goog$object.get(raw_state,\"fulcro$value\");\r\nreturn (com.fulcrologic.fulcro.components.newer_props.cljs$core$IFn$_invoke$arity$2 ? com.fulcrologic.fulcro.components.newer_props.cljs$core$IFn$_invoke$arity$2(next_props,opt_props) : com.fulcrologic.fulcro.components.newer_props.call(null,next_props,opt_props));\r\n});\r\n/**\r\n * Return the global shared properties of the root. See :shared and\r\n * :shared-fn app options. NOTE: Shared props only update on root render and by explicit calls to\r\n * `app/update-shared!`.\r\n * \r\n * This function attempts to rely on the dynamic var *shared* (first), but will make a best-effort of\r\n * finding shared props when run within a component's render or lifecycle. Passing your app will\r\n * ensure this returns the current shared props.\r\n */\r\ncom.fulcrologic.fulcro.components.shared = (function com$fulcrologic$fulcro$components$shared(var_args){\r\nvar G__56994 = arguments.length;\r\nswitch (G__56994) {\r\ncase 0:\r\nreturn com.fulcrologic.fulcro.components.shared.cljs$core$IFn$_invoke$arity$0();\r\n\r\nbreak;\r\ncase 1:\r\nreturn com.fulcrologic.fulcro.components.shared.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\r\n\r\nbreak;\r\ncase 2:\r\nreturn com.fulcrologic.fulcro.components.shared.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\r\n\r\nbreak;\r\ndefault:\r\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\r\n\r\n}\r\n});\r\n\r\n(com.fulcrologic.fulcro.components.shared.cljs$core$IFn$_invoke$arity$0 = (function (){\r\nreturn com.fulcrologic.fulcro.components._STAR_shared_STAR_;\r\n}));\r\n\r\n(com.fulcrologic.fulcro.components.shared.cljs$core$IFn$_invoke$arity$1 = (function (comp_or_app){\r\nreturn com.fulcrologic.fulcro.components.shared.cljs$core$IFn$_invoke$arity$2(comp_or_app,cljs.core.PersistentVector.EMPTY);\r\n}));\r\n\r\n(com.fulcrologic.fulcro.components.shared.cljs$core$IFn$_invoke$arity$2 = (function (comp_or_app,k_or_ks){\r\nvar shared = (function (){var or__4253__auto__ = com.fulcrologic.fulcro.components._STAR_shared_STAR_;\r\nif(cljs.core.truth_(or__4253__auto__)){\r\nreturn or__4253__auto__;\r\n} else {\r\nvar G__56995 = com.fulcrologic.fulcro.components.any__GT_app(comp_or_app);\r\nvar G__56995__$1 = (((G__56995 == null))?null:new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"runtime-atom\",\"com.fulcrologic.fulcro.application/runtime-atom\",-1167397772).cljs$core$IFn$_invoke$arity$1(G__56995));\r\nvar G__56995__$2 = (((G__56995__$1 == null))?null:cljs.core.deref(G__56995__$1));\r\nif((G__56995__$2 == null)){\r\nreturn null;\r\n} else {\r\nreturn new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"shared-props\",\"com.fulcrologic.fulcro.application/shared-props\",-554105157).cljs$core$IFn$_invoke$arity$1(G__56995__$2);\r\n}\r\n}\r\n})();\r\nvar ks = (function (){var G__56996 = k_or_ks;\r\nif((!(cljs.core.sequential_QMARK_(k_or_ks)))){\r\nreturn (new cljs.core.PersistentVector(null,1,(5),cljs.core.PersistentVector.EMPTY_NODE,[G__56996],null));\r\n} else {\r\nreturn G__56996;\r\n}\r\n})();\r\nvar G__56997 = shared;\r\nif((!(cljs.core.empty_QMARK_(ks)))){\r\nreturn cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(G__56997,ks);\r\n} else {\r\nreturn G__56997;\r\n}\r\n}));\r\n\r\n(com.fulcrologic.fulcro.components.shared.cljs$lang$maxFixedArity = 2);\r\n\r\nvar static_wrap_props_state_handler = (function com$fulcrologic$fulcro$components$static_wrap_props_state_handler(handler){\r\nreturn (function (raw_props,raw_state){\r\nvar props = com.fulcrologic.fulcro.components.raw__GT_newest_props(raw_props,raw_state);\r\nvar state = com.fulcrologic.fulcro.components.goog$module$goog$object.get(raw_state,\"fulcro$state\");\r\nreturn (handler.cljs$core$IFn$_invoke$arity$2 ? handler.cljs$core$IFn$_invoke$arity$2(props,state) : handler.call(null,props,state));\r\n});\r\n});\r\nvar wrap_props_state_handler = (function() {\r\nvar com$fulcrologic$fulcro$components$wrap_props_state_handler = null;\r\nvar com$fulcrologic$fulcro$components$wrap_props_state_handler__1 = (function (handler){\r\nreturn com$fulcrologic$fulcro$components$wrap_props_state_handler.cljs$core$IFn$_invoke$arity$2(handler,true);\r\n});\r\nvar com$fulcrologic$fulcro$components$wrap_props_state_handler__2 = (function (handler,check_for_fresh_props_in_state_QMARK_){\r\nreturn (function (raw_props,raw_state){\r\nvar this$ = this;\r\nvar props = (cljs.core.truth_(check_for_fresh_props_in_state_QMARK_)?com.fulcrologic.fulcro.components.raw__GT_newest_props(raw_props,raw_state):com.fulcrologic.fulcro.components.goog$module$goog$object.get(raw_props,\"fulcro$props\"));\r\nvar state = com.fulcrologic.fulcro.components.goog$module$goog$object.get(raw_state,\"fulcro$state\");\r\nreturn (handler.cljs$core$IFn$_invoke$arity$3 ? handler.cljs$core$IFn$_invoke$arity$3(this$,props,state) : handler.call(null,this$,props,state));\r\n});\r\n});\r\ncom$fulcrologic$fulcro$components$wrap_props_state_handler = function(handler,check_for_fresh_props_in_state_QMARK_){\r\nswitch(arguments.length){\r\ncase 1:\r\nreturn com$fulcrologic$fulcro$components$wrap_props_state_handler__1.call(this,handler);\r\ncase 2:\r\nreturn com$fulcrologic$fulcro$components$wrap_props_state_handler__2.call(this,handler,check_for_fresh_props_in_state_QMARK_);\r\n}\r\nthrow(new Error('Invalid arity: ' + arguments.length));\r\n};\r\ncom$fulcrologic$fulcro$components$wrap_props_state_handler.cljs$core$IFn$_invoke$arity$1 = com$fulcrologic$fulcro$components$wrap_props_state_handler__1;\r\ncom$fulcrologic$fulcro$components$wrap_props_state_handler.cljs$core$IFn$_invoke$arity$2 = com$fulcrologic$fulcro$components$wrap_props_state_handler__2;\r\nreturn com$fulcrologic$fulcro$components$wrap_props_state_handler;\r\n})()\r\n;\r\nvar component_did_mount = (function com$fulcrologic$fulcro$components$component_did_mount(){\r\nvar this$ = this;\r\ncom.fulcrologic.fulcro.components.goog$module$goog$object.set(this$,\"fulcro$mounted\",true);\r\n\r\nvar map__57012 = (com.fulcrologic.fulcro.components.component_options.cljs$core$IFn$_invoke$arity$1 ? com.fulcrologic.fulcro.components.component_options.cljs$core$IFn$_invoke$arity$1(this$) : com.fulcrologic.fulcro.components.component_options.call(null,this$));\r\nvar map__57012__$1 = cljs.core.__destructure_map(map__57012);\r\nvar componentDidMount = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__57012__$1,new cljs.core.Keyword(null,\"componentDidMount\",\"componentDidMount\",955710936));\r\nvar app__$1 = com.fulcrologic.fulcro.components.any__GT_app(this$);\r\nvar index_component_BANG_ = com.fulcrologic.fulcro.algorithms.lookup.app_algorithm(app__$1,new cljs.core.Keyword(null,\"index-component!\",\"index-component!\",-1202750708));\r\n(index_component_BANG_.cljs$core$IFn$_invoke$arity$1 ? index_component_BANG_.cljs$core$IFn$_invoke$arity$1(this$) : index_component_BANG_.call(null,this$));\r\n\r\nif(cljs.core.truth_(componentDidMount)){\r\nreturn (componentDidMount.cljs$core$IFn$_invoke$arity$1 ? componentDidMount.cljs$core$IFn$_invoke$arity$1(this$) : componentDidMount.call(null,this$));\r\n} else {\r\nreturn null;\r\n}\r\n});\r\nvar component_did_update = (function com$fulcrologic$fulcro$components$component_did_update(raw_prev_props,raw_prev_state,snapshot){\r\nvar this$ = this;\r\nvar map__57013 = (com.fulcrologic.fulcro.components.component_options.cljs$core$IFn$_invoke$arity$1 ? com.fulcrologic.fulcro.components.component_options.cljs$core$IFn$_invoke$arity$1(this$) : com.fulcrologic.fulcro.components.component_options.call(null,this$));\r\nvar map__57013__$1 = cljs.core.__destructure_map(map__57013);\r\nvar ident = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__57013__$1,new cljs.core.Keyword(null,\"ident\",\"ident\",-742346));\r\nvar componentDidUpdate = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__57013__$1,new cljs.core.Keyword(null,\"componentDidUpdate\",\"componentDidUpdate\",-1983477981));\r\nvar prev_state = com.fulcrologic.fulcro.components.goog$module$goog$object.get(raw_prev_state,\"fulcro$state\");\r\nvar prev_props = com.fulcrologic.fulcro.components.raw__GT_newest_props(raw_prev_props,raw_prev_state);\r\nif(cljs.core.truth_(componentDidUpdate)){\r\n(componentDidUpdate.cljs$core$IFn$_invoke$arity$4 ? componentDidUpdate.cljs$core$IFn$_invoke$arity$4(this$,prev_props,prev_state,snapshot) : componentDidUpdate.call(null,this$,prev_props,prev_state,snapshot));\r\n} else {\r\n}\r\n\r\nif(cljs.core.truth_(ident)){\r\nvar old_ident = (ident.cljs$core$IFn$_invoke$arity$2 ? ident.cljs$core$IFn$_invoke$arity$2(this$,prev_props) : ident.call(null,this$,prev_props));\r\nvar next_ident = (function (){var G__57014 = this$;\r\nvar G__57015 = (com.fulcrologic.fulcro.components.props.cljs$core$IFn$_invoke$arity$1 ? com.fulcrologic.fulcro.components.props.cljs$core$IFn$_invoke$arity$1(this$) : com.fulcrologic.fulcro.components.props.call(null,this$));\r\nreturn (ident.cljs$core$IFn$_invoke$arity$2 ? ident.cljs$core$IFn$_invoke$arity$2(G__57014,G__57015) : ident.call(null,G__57014,G__57015));\r\n})();\r\nvar app__$1 = com.fulcrologic.fulcro.components.any__GT_app(this$);\r\nvar drop_component_BANG_ = com.fulcrologic.fulcro.algorithms.lookup.app_algorithm(app__$1,new cljs.core.Keyword(null,\"drop-component!\",\"drop-component!\",183893156));\r\nvar index_component_BANG_ = com.fulcrologic.fulcro.algorithms.lookup.app_algorithm(app__$1,new cljs.core.Keyword(null,\"index-component!\",\"index-component!\",-1202750708));\r\nif(cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(old_ident,next_ident)){\r\n(drop_component_BANG_.cljs$core$IFn$_invoke$arity$2 ? drop_component_BANG_.cljs$core$IFn$_invoke$arity$2(this$,old_ident) : drop_component_BANG_.call(null,this$,old_ident));\r\n\r\nreturn (index_component_BANG_.cljs$core$IFn$_invoke$arity$1 ? index_component_BANG_.cljs$core$IFn$_invoke$arity$1(this$) : index_component_BANG_.call(null,this$));\r\n} else {\r\nreturn null;\r\n}\r\n} else {\r\nreturn null;\r\n}\r\n});\r\nvar should_component_update_QMARK_ = (function com$fulcrologic$fulcro$components$should_component_update_QMARK_(raw_next_props,raw_next_state){\r\nif(cljs.core.truth_(com.fulcrologic.fulcro.components._STAR_blindly_render_STAR_)){\r\nreturn true;\r\n} else {\r\nvar this$ = this;\r\nvar current_props = (com.fulcrologic.fulcro.components.props.cljs$core$IFn$_invoke$arity$1 ? com.fulcrologic.fulcro.components.props.cljs$core$IFn$_invoke$arity$1(this$) : com.fulcrologic.fulcro.components.props.call(null,this$));\r\nvar next_props = com.fulcrologic.fulcro.components.raw__GT_newest_props(raw_next_props,raw_next_state);\r\nvar next_state = com.fulcrologic.fulcro.components.goog$module$goog$object.get(raw_next_state,\"fulcro$state\");\r\nvar current_state = com.fulcrologic.fulcro.components.goog$module$goog$object.getValueByKeys(this$,\"state\",\"fulcro$state\");\r\nvar props_changed_QMARK_ = cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(current_props,next_props);\r\nvar state_changed_QMARK_ = cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(current_state,next_state);\r\nvar next_children = com.fulcrologic.fulcro.components.goog$module$goog$object.get(raw_next_props,\"children\");\r\nvar children_changed_QMARK_ = cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(com.fulcrologic.fulcro.components.goog$module$goog$object.getValueByKeys(this$,\"props\",\"children\"),next_children);\r\nreturn ((props_changed_QMARK_) || (((state_changed_QMARK_) || (children_changed_QMARK_))));\r\n}\r\n});\r\nvar wrap_props_handler = (function() {\r\nvar com$fulcrologic$fulcro$components$wrap_props_handler = null;\r\nvar com$fulcrologic$fulcro$components$wrap_props_handler__1 = (function (handler){\r\nreturn com$fulcrologic$fulcro$components$wrap_props_handler.cljs$core$IFn$_invoke$arity$2(handler,true);\r\n});\r\nvar com$fulcrologic$fulcro$components$wrap_props_handler__2 = (function (handler,check_for_fresh_props_in_state_QMARK_){\r\nreturn (function (raw_props){\r\nvar this$ = this;\r\nvar raw_state = this$.state;\r\nvar props = (cljs.core.truth_(check_for_fresh_props_in_state_QMARK_)?com.fulcrologic.fulcro.components.raw__GT_newest_props(raw_props,raw_state):com.fulcrologic.fulcro.components.goog$module$goog$object.get(raw_props,\"fulcro$props\"));\r\nreturn (handler.cljs$core$IFn$_invoke$arity$2 ? handler.cljs$core$IFn$_invoke$arity$2(this$,props) : handler.call(null,this$,props));\r\n});\r\n});\r\ncom$fulcrologic$fulcro$components$wrap_props_handler = function(handler,check_for_fresh_props_in_state_QMARK_){\r\nswitch(arguments.length){\r\ncase 1:\r\nreturn com$fulcrologic$fulcro$components$wrap_props_handler__1.call(this,handler);\r\ncase 2:\r\nreturn com$fulcrologic$fulcro$components$wrap_props_handler__2.call(this,handler,check_for_fresh_props_in_state_QMARK_);\r\n}\r\nthrow(new Error('Invalid arity: ' + arguments.length));\r\n};\r\ncom$fulcrologic$fulcro$components$wrap_props_handler.cljs$core$IFn$_invoke$arity$1 = com$fulcrologic$fulcro$components$wrap_props_handler__1;\r\ncom$fulcrologic$fulcro$components$wrap_props_handler.cljs$core$IFn$_invoke$arity$2 = com$fulcrologic$fulcro$components$wrap_props_handler__2;\r\nreturn com$fulcrologic$fulcro$components$wrap_props_handler;\r\n})()\r\n;\r\nvar wrap_this = (function com$fulcrologic$fulcro$components$wrap_this(handler){\r\nreturn (function() { \r\nvar G__57154__delegate = function (args){\r\nvar this$ = this;\r\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$3(handler,this$,args);\r\n};\r\nvar G__57154 = function (var_args){\r\nvar args = null;\r\nif (arguments.length > 0) {\r\nvar G__57155__i = 0, G__57155__a = new Array(arguments.length -  0);\r\nwhile (G__57155__i < G__57155__a.length) {G__57155__a[G__57155__i] = arguments[G__57155__i + 0]; ++G__57155__i;}\r\n  args = new cljs.core.IndexedSeq(G__57155__a,0,null);\r\n} \r\nreturn G__57154__delegate.call(this,args);};\r\nG__57154.cljs$lang$maxFixedArity = 0;\r\nG__57154.cljs$lang$applyTo = (function (arglist__57156){\r\nvar args = cljs.core.seq(arglist__57156);\r\nreturn G__57154__delegate(args);\r\n});\r\nG__57154.cljs$core$IFn$_invoke$arity$variadic = G__57154__delegate;\r\nreturn G__57154;\r\n})()\r\n;\r\n});\r\nvar wrap_base_render = (function com$fulcrologic$fulcro$components$wrap_base_render(render){\r\nreturn (function() { \r\nvar G__57157__delegate = function (args){\r\nvar this$ = this;\r\nvar temp__5751__auto__ = com.fulcrologic.fulcro.components.any__GT_app(this$);\r\nif(cljs.core.truth_(temp__5751__auto__)){\r\nvar app__$1 = temp__5751__auto__;\r\nvar _STAR_app_STAR__orig_val__57016 = com.fulcrologic.fulcro.components._STAR_app_STAR_;\r\nvar _STAR_depth_STAR__orig_val__57017 = com.fulcrologic.fulcro.components._STAR_depth_STAR_;\r\nvar _STAR_shared_STAR__orig_val__57018 = com.fulcrologic.fulcro.components._STAR_shared_STAR_;\r\nvar _STAR_parent_STAR__orig_val__57019 = com.fulcrologic.fulcro.components._STAR_parent_STAR_;\r\nvar _STAR_app_STAR__temp_val__57020 = app__$1;\r\nvar _STAR_depth_STAR__temp_val__57021 = (com.fulcrologic.fulcro.components.depth(this$) + (1));\r\nvar _STAR_shared_STAR__temp_val__57022 = com.fulcrologic.fulcro.components.shared.cljs$core$IFn$_invoke$arity$1(this$);\r\nvar _STAR_parent_STAR__temp_val__57023 = this$;\r\n(com.fulcrologic.fulcro.components._STAR_app_STAR_ = _STAR_app_STAR__temp_val__57020);\r\n\r\n(com.fulcrologic.fulcro.components._STAR_depth_STAR_ = _STAR_depth_STAR__temp_val__57021);\r\n\r\n(com.fulcrologic.fulcro.components._STAR_shared_STAR_ = _STAR_shared_STAR__temp_val__57022);\r\n\r\n(com.fulcrologic.fulcro.components._STAR_parent_STAR_ = _STAR_parent_STAR__temp_val__57023);\r\n\r\ntry{return cljs.core.apply.cljs$core$IFn$_invoke$arity$3(render,this$,args);\r\n}finally {(com.fulcrologic.fulcro.components._STAR_parent_STAR_ = _STAR_parent_STAR__orig_val__57019);\r\n\r\n(com.fulcrologic.fulcro.components._STAR_shared_STAR_ = _STAR_shared_STAR__orig_val__57018);\r\n\r\n(com.fulcrologic.fulcro.components._STAR_depth_STAR_ = _STAR_depth_STAR__orig_val__57017);\r\n\r\n(com.fulcrologic.fulcro.components._STAR_app_STAR_ = _STAR_app_STAR__orig_val__57016);\r\n}} else {\r\nreturn taoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$11(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"fatal\",\"fatal\",1874419888),\"com.fulcrologic.fulcro.components\",null,372,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay((function (){\r\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"Cannot find app on component!\"], null);\r\n}),null)),null,-2026586206,null);\r\n}\r\n};\r\nvar G__57157 = function (var_args){\r\nvar args = null;\r\nif (arguments.length > 0) {\r\nvar G__57161__i = 0, G__57161__a = new Array(arguments.length -  0);\r\nwhile (G__57161__i < G__57161__a.length) {G__57161__a[G__57161__i] = arguments[G__57161__i + 0]; ++G__57161__i;}\r\n  args = new cljs.core.IndexedSeq(G__57161__a,0,null);\r\n} \r\nreturn G__57157__delegate.call(this,args);};\r\nG__57157.cljs$lang$maxFixedArity = 0;\r\nG__57157.cljs$lang$applyTo = (function (arglist__57162){\r\nvar args = cljs.core.seq(arglist__57162);\r\nreturn G__57157__delegate(args);\r\n});\r\nG__57157.cljs$core$IFn$_invoke$arity$variadic = G__57157__delegate;\r\nreturn G__57157;\r\n})()\r\n;\r\n});\r\nvar component_will_unmount = (function com$fulcrologic$fulcro$components$component_will_unmount(){\r\nvar this$ = this;\r\nvar map__57024 = (com.fulcrologic.fulcro.components.component_options.cljs$core$IFn$_invoke$arity$1 ? com.fulcrologic.fulcro.components.component_options.cljs$core$IFn$_invoke$arity$1(this$) : com.fulcrologic.fulcro.components.component_options.call(null,this$));\r\nvar map__57024__$1 = cljs.core.__destructure_map(map__57024);\r\nvar componentWillUnmount = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__57024__$1,new cljs.core.Keyword(null,\"componentWillUnmount\",\"componentWillUnmount\",1573788814));\r\nvar app__$1 = com.fulcrologic.fulcro.components.any__GT_app(this$);\r\nvar drop_component_BANG_ = com.fulcrologic.fulcro.algorithms.lookup.app_algorithm(app__$1,new cljs.core.Keyword(null,\"drop-component!\",\"drop-component!\",183893156));\r\nif(cljs.core.truth_(componentWillUnmount)){\r\n(componentWillUnmount.cljs$core$IFn$_invoke$arity$1 ? componentWillUnmount.cljs$core$IFn$_invoke$arity$1(this$) : componentWillUnmount.call(null,this$));\r\n} else {\r\n}\r\n\r\ncom.fulcrologic.fulcro.components.goog$module$goog$object.set(this$,\"fulcro$mounted\",false);\r\n\r\nreturn (drop_component_BANG_.cljs$core$IFn$_invoke$arity$1 ? drop_component_BANG_.cljs$core$IFn$_invoke$arity$1(this$) : drop_component_BANG_.call(null,this$));\r\n});\r\n/**\r\n * Configure the given `cls` (a function) to act as a react component within the Fulcro ecosystem.\r\n * \r\n *  cls - A js function (in clj, this is ignored)\r\n *  fqkw - A keyword that shares the exact fully-qualified name of the component class\r\n *  options - A component options map (no magic) containing things like `:query` and `:ident`.\r\n * \r\n * \r\n *  NOTE: the `options` map expects proper function signatures for:\r\n * \r\n *  `:query` - (fn [this] ...)\r\n *  `:ident` - (fn [this props] ...)\r\n *  `:initial-state` - (fn [cls params] ...)\r\n * \r\n *  Returns (and registers) a new react class.\r\n *  \r\n */\r\ncom.fulcrologic.fulcro.components.configure_component_BANG_ = (function com$fulcrologic$fulcro$components$configure_component_BANG_(cls,fqkw,options){\r\nvar map__57025 = options;\r\nvar map__57025__$1 = cljs.core.__destructure_map(map__57025);\r\nvar initLocalState = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__57025__$1,new cljs.core.Keyword(null,\"initLocalState\",\"initLocalState\",-46503876));\r\nvar componentWillMount = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__57025__$1,new cljs.core.Keyword(null,\"componentWillMount\",\"componentWillMount\",-285327619));\r\nvar componentDidCatch = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__57025__$1,new cljs.core.Keyword(null,\"componentDidCatch\",\"componentDidCatch\",821717733));\r\nvar UNSAFE_componentWillMount = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__57025__$1,new cljs.core.Keyword(null,\"UNSAFE_componentWillMount\",\"UNSAFE_componentWillMount\",1700079910));\r\nvar getSnapshotBeforeUpdate = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__57025__$1,new cljs.core.Keyword(null,\"getSnapshotBeforeUpdate\",\"getSnapshotBeforeUpdate\",861122184));\r\nvar UNSAFE_componentWillUpdate = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__57025__$1,new cljs.core.Keyword(null,\"UNSAFE_componentWillUpdate\",\"UNSAFE_componentWillUpdate\",-271932214));\r\nvar getDerivedStateFromProps = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__57025__$1,new cljs.core.Keyword(null,\"getDerivedStateFromProps\",\"getDerivedStateFromProps\",-991834739));\r\nvar getDerivedStateFromError = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__57025__$1,new cljs.core.Keyword(null,\"getDerivedStateFromError\",\"getDerivedStateFromError\",166658477));\r\nvar componentWillReceiveProps = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__57025__$1,new cljs.core.Keyword(null,\"componentWillReceiveProps\",\"componentWillReceiveProps\",559988974));\r\nvar shouldComponentUpdate = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__57025__$1,new cljs.core.Keyword(null,\"shouldComponentUpdate\",\"shouldComponentUpdate\",1795750960));\r\nvar render = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__57025__$1,new cljs.core.Keyword(null,\"render\",\"render\",-1408033454));\r\nvar componentWillUpdate = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__57025__$1,new cljs.core.Keyword(null,\"componentWillUpdate\",\"componentWillUpdate\",657390932));\r\nvar UNSAFE_componentWillReceiveProps = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__57025__$1,new cljs.core.Keyword(null,\"UNSAFE_componentWillReceiveProps\",\"UNSAFE_componentWillReceiveProps\",349396983));\r\nvar name = clojure.string.join.cljs$core$IFn$_invoke$arity$2(\"/\",new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.namespace(fqkw),cljs.core.name(fqkw)], null));\r\nvar js_instance_props = cljs.core.clj__GT_js((function (){var G__57026 = new cljs.core.PersistentArrayMap(null, 7, [new cljs.core.Keyword(null,\"componentDidMount\",\"componentDidMount\",955710936),component_did_mount,new cljs.core.Keyword(null,\"componentWillUnmount\",\"componentWillUnmount\",1573788814),component_will_unmount,new cljs.core.Keyword(null,\"componentDidUpdate\",\"componentDidUpdate\",-1983477981),component_did_update,new cljs.core.Keyword(null,\"shouldComponentUpdate\",\"shouldComponentUpdate\",1795750960),(cljs.core.truth_(shouldComponentUpdate)?wrap_props_state_handler(shouldComponentUpdate):should_component_update_QMARK_),new cljs.core.Keyword(null,\"fulcro$isComponent\",\"fulcro$isComponent\",2094954844),true,new cljs.core.Keyword(null,\"type\",\"type\",1174270348),cls,new cljs.core.Keyword(null,\"displayName\",\"displayName\",-809144601),name], null);\r\nvar G__57026__$1 = (cljs.core.truth_(render)?cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__57026,new cljs.core.Keyword(null,\"render\",\"render\",-1408033454),wrap_base_render(render)):G__57026);\r\nvar G__57026__$2 = (cljs.core.truth_(getSnapshotBeforeUpdate)?cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__57026__$1,new cljs.core.Keyword(null,\"getSnapshotBeforeUpdate\",\"getSnapshotBeforeUpdate\",861122184),wrap_props_state_handler(getSnapshotBeforeUpdate)):G__57026__$1);\r\nvar G__57026__$3 = (cljs.core.truth_(componentDidCatch)?cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__57026__$2,new cljs.core.Keyword(null,\"componentDidCatch\",\"componentDidCatch\",821717733),wrap_this(componentDidCatch)):G__57026__$2);\r\nvar G__57026__$4 = (cljs.core.truth_(UNSAFE_componentWillMount)?cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__57026__$3,new cljs.core.Keyword(null,\"UNSAFE_componentWillMount\",\"UNSAFE_componentWillMount\",1700079910),wrap_this(UNSAFE_componentWillMount)):G__57026__$3);\r\nvar G__57026__$5 = (cljs.core.truth_(UNSAFE_componentWillUpdate)?cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__57026__$4,new cljs.core.Keyword(null,\"UNSAFE_componentWillUpdate\",\"UNSAFE_componentWillUpdate\",-271932214),wrap_props_state_handler(UNSAFE_componentWillUpdate)):G__57026__$4);\r\nvar G__57026__$6 = (cljs.core.truth_(UNSAFE_componentWillReceiveProps)?cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__57026__$5,new cljs.core.Keyword(null,\"UNSAFE_componentWillReceiveProps\",\"UNSAFE_componentWillReceiveProps\",349396983),wrap_props_handler(UNSAFE_componentWillReceiveProps)):G__57026__$5);\r\nvar G__57026__$7 = (cljs.core.truth_(componentWillMount)?cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__57026__$6,new cljs.core.Keyword(null,\"componentWillMount\",\"componentWillMount\",-285327619),wrap_this(componentWillMount)):G__57026__$6);\r\nvar G__57026__$8 = (cljs.core.truth_(componentWillUpdate)?cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__57026__$7,new cljs.core.Keyword(null,\"componentWillUpdate\",\"componentWillUpdate\",657390932),wrap_this(componentWillUpdate)):G__57026__$7);\r\nvar G__57026__$9 = (cljs.core.truth_(componentWillReceiveProps)?cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__57026__$8,new cljs.core.Keyword(null,\"componentWillReceiveProps\",\"componentWillReceiveProps\",559988974),wrap_props_handler(componentWillReceiveProps)):G__57026__$8);\r\nif(cljs.core.truth_(initLocalState)){\r\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__57026__$9,new cljs.core.Keyword(null,\"initLocalState\",\"initLocalState\",-46503876),wrap_this(initLocalState));\r\n} else {\r\nreturn G__57026__$9;\r\n}\r\n})());\r\nvar statics = (function (){var G__57027 = new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,\"displayName\",\"displayName\",-809144601),name,new cljs.core.Keyword(null,\"fulcro$class\",\"fulcro$class\",-1213203837),cls,new cljs.core.Keyword(null,\"cljs$lang$type\",\"cljs$lang$type\",2136418717),true,new cljs.core.Keyword(null,\"cljs$lang$ctorStr\",\"cljs$lang$ctorStr\",1406571315),name,new cljs.core.Keyword(null,\"cljs$lang$ctorPrWriter\",\"cljs$lang$ctorPrWriter\",-112192216),(function (_,writer,___$1){\r\nreturn cljs.core._write(writer,name);\r\n})], null);\r\nvar G__57027__$1 = (cljs.core.truth_(getDerivedStateFromError)?cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__57027,new cljs.core.Keyword(null,\"getDerivedStateFromError\",\"getDerivedStateFromError\",166658477),(function (error){\r\nvar v = (getDerivedStateFromError.cljs$core$IFn$_invoke$arity$1 ? getDerivedStateFromError.cljs$core$IFn$_invoke$arity$1(error) : getDerivedStateFromError.call(null,error));\r\nif(cljs.core.coll_QMARK_(v)){\r\nreturn ({\"fulcro$state\": v});\r\n} else {\r\nreturn v;\r\n}\r\n})):G__57027);\r\nif(cljs.core.truth_(getDerivedStateFromProps)){\r\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__57027__$1,new cljs.core.Keyword(null,\"getDerivedStateFromProps\",\"getDerivedStateFromProps\",-991834739),static_wrap_props_state_handler(getDerivedStateFromProps));\r\n} else {\r\nreturn G__57027__$1;\r\n}\r\n})();\r\ncom.fulcrologic.fulcro.components.goog$module$goog$object.extend(cls.prototype,module$node_modules$react$index.Component.prototype,js_instance_props,({\"fulcro$options\": options}));\r\n\r\ncom.fulcrologic.fulcro.components.goog$module$goog$object.extend(cls,cljs.core.clj__GT_js(statics),({\"fulcro$options\": options}));\r\n\r\ncom.fulcrologic.fulcro.components.goog$module$goog$object.set(cls,\"fulcro$registryKey\",fqkw);\r\n\r\nreturn (com.fulcrologic.fulcro.components.register_component_BANG_.cljs$core$IFn$_invoke$arity$2 ? com.fulcrologic.fulcro.components.register_component_BANG_.cljs$core$IFn$_invoke$arity$2(fqkw,cls) : com.fulcrologic.fulcro.components.register_component_BANG_.call(null,fqkw,cls));\r\n});\r\n/**\r\n * Make a given `cls` (a plain fn) act like a a Fulcro component with the given component options map. Registers the\r\n *   new component in the component-registry. Component options MUST contain :componentName as be a fully-qualified\r\n *   keyword to name the component in the registry.\r\n * \r\n *   component-options *must* include a unique `:componentName` (keyword) that will be used for registering the given\r\n *   function as the faux class in the component registry.\r\n */\r\ncom.fulcrologic.fulcro.components.add_hook_options_BANG_ = (function com$fulcrologic$fulcro$components$add_hook_options_BANG_(render_fn,component_options){\r\nreturn com.fulcrologic.fulcro.raw.components.configure_anonymous_component_BANG_(render_fn,component_options);\r\n});\r\n/**\r\n * Allows you to use a plain function as a Fulcro-managed React hooks component.\r\n * \r\n *   * `js-props` - The React js props from the parent.\r\n *   * `faux-class` - A Fulcro faux class, which is a fn that has had `add-options!` called on it.\r\n * \r\n *   Returns a cljs vector containing `this` and fulcro `props`. You should *not* use the returned `this` directly,\r\n *   as it is a placeholder.\r\n * \r\n *   Prefer `defsc` or `configure-hooks-component! over using this directly.`\r\n *   \r\n */\r\ncom.fulcrologic.fulcro.components.use_fulcro = (function com$fulcrologic$fulcro$components$use_fulcro(js_props,faux_class){\r\nvar app__$1 = (com.fulcrologic.fulcro.components.isoget.cljs$core$IFn$_invoke$arity$2 ? com.fulcrologic.fulcro.components.isoget.cljs$core$IFn$_invoke$arity$2(js_props,new cljs.core.Keyword(null,\"fulcro$app\",\"fulcro$app\",-1270465306)) : com.fulcrologic.fulcro.components.isoget.call(null,js_props,new cljs.core.Keyword(null,\"fulcro$app\",\"fulcro$app\",-1270465306)));\r\nvar tunnelled_props_state = module$node_modules$react$index.useState(({}));\r\nvar js_set_tunnelled_props_BANG_ = (tunnelled_props_state[(1)]);\r\nvar map__57028 = (com.fulcrologic.fulcro.components.isoget.cljs$core$IFn$_invoke$arity$2 ? com.fulcrologic.fulcro.components.isoget.cljs$core$IFn$_invoke$arity$2(faux_class,new cljs.core.Keyword(null,\"fulcro$options\",\"fulcro$options\",-1332196811)) : com.fulcrologic.fulcro.components.isoget.call(null,faux_class,new cljs.core.Keyword(null,\"fulcro$options\",\"fulcro$options\",-1332196811)));\r\nvar map__57028__$1 = cljs.core.__destructure_map(map__57028);\r\nvar options = map__57028__$1;\r\nvar ident = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__57028__$1,new cljs.core.Keyword(null,\"ident\",\"ident\",-742346));\r\nvar faux_component_state = module$node_modules$react$index.useState((function (){\r\nif(cljs.core.truth_(app__$1)){\r\n} else {\r\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$11(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.components\",null,474,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay((function (){\r\nreturn new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"Cannot create proper fulcro component, as *app* isn't bound.\",\"This happens when something renders a Fulcro component outside of Fulcro's render context.\",\"See `with-parent-context`.\",\"See https://book.fulcrologic.com/#err-comp-app-not-bound\"], null);\r\n}),null)),null,-597895394,null);\r\n}\r\n\r\nvar depth = (function (){var or__4253__auto__ = com.fulcrologic.fulcro.components._STAR_depth_STAR_;\r\nif(cljs.core.truth_(or__4253__auto__)){\r\nreturn or__4253__auto__;\r\n} else {\r\nreturn (com.fulcrologic.fulcro.components.isoget.cljs$core$IFn$_invoke$arity$2 ? com.fulcrologic.fulcro.components.isoget.cljs$core$IFn$_invoke$arity$2(js_props,new cljs.core.Keyword(null,\"fulcro$depth\",\"fulcro$depth\",1963025807)) : com.fulcrologic.fulcro.components.isoget.call(null,js_props,new cljs.core.Keyword(null,\"fulcro$depth\",\"fulcro$depth\",1963025807)));\r\n}\r\n})();\r\nvar set_tunnelled_props_BANG_ = (function (updater){\r\nvar new_props = (updater.cljs$core$IFn$_invoke$arity$1 ? updater.cljs$core$IFn$_invoke$arity$1(null) : updater.call(null,null));\r\nreturn (js_set_tunnelled_props_BANG_.cljs$core$IFn$_invoke$arity$1 ? js_set_tunnelled_props_BANG_.cljs$core$IFn$_invoke$arity$1(new_props) : js_set_tunnelled_props_BANG_.call(null,new_props));\r\n});\r\nreturn ({\"setState\": set_tunnelled_props_BANG_, \"fulcro$isComponent\": true, \"fulcro$class\": faux_class, \"type\": faux_class, \"fulcro$options\": options, \"fulcro$mounted\": false, \"props\": ({\"fulcro$app\": app__$1, \"fulcro$depth\": (depth + (1))})});\r\n}));\r\nvar faux_component = (faux_component_state[(0)]);\r\nvar current_state = (tunnelled_props_state[(0)][\"fulcro$value\"]);\r\nvar props = (com.fulcrologic.fulcro.components.isoget.cljs$core$IFn$_invoke$arity$2 ? com.fulcrologic.fulcro.components.isoget.cljs$core$IFn$_invoke$arity$2(js_props,new cljs.core.Keyword(null,\"fulcro$value\",\"fulcro$value\",818270554)) : com.fulcrologic.fulcro.components.isoget.call(null,js_props,new cljs.core.Keyword(null,\"fulcro$value\",\"fulcro$value\",818270554)));\r\nvar children = (com.fulcrologic.fulcro.components.isoget.cljs$core$IFn$_invoke$arity$2 ? com.fulcrologic.fulcro.components.isoget.cljs$core$IFn$_invoke$arity$2(js_props,new cljs.core.Keyword(null,\"children\",\"children\",-940561982)) : com.fulcrologic.fulcro.components.isoget.call(null,js_props,new cljs.core.Keyword(null,\"children\",\"children\",-940561982)));\r\nvar current_props = (com.fulcrologic.fulcro.components.newer_props.cljs$core$IFn$_invoke$arity$2 ? com.fulcrologic.fulcro.components.newer_props.cljs$core$IFn$_invoke$arity$2(props,current_state) : com.fulcrologic.fulcro.components.newer_props.call(null,props,current_state));\r\nvar current_ident = (cljs.core.truth_(ident)?(ident.cljs$core$IFn$_invoke$arity$2 ? ident.cljs$core$IFn$_invoke$arity$2(faux_class,current_props) : ident.call(null,faux_class,current_props)):null);\r\nvar shared_props = (cljs.core.truth_(app__$1)?com.fulcrologic.fulcro.components.shared.cljs$core$IFn$_invoke$arity$1(app__$1):null);\r\nvar G__57029_57182 = com.fulcrologic.fulcro.components.goog$module$goog$object.get(faux_component,\"props\");\r\ncom.fulcrologic.fulcro.components.goog$module$goog$object.set(G__57029_57182,\"fulcro$shared\",shared_props);\r\n\r\ncom.fulcrologic.fulcro.components.goog$module$goog$object.set(G__57029_57182,\"fulcro$value\",current_props);\r\n\r\ncom.fulcrologic.fulcro.components.goog$module$goog$object.set(G__57029_57182,\"children\",children);\r\n\r\n\r\nmodule$node_modules$react$index.useEffect((function (){\r\nvar original_ident = current_ident;\r\nvar index_component_BANG_ = com.fulcrologic.fulcro.algorithms.lookup.app_algorithm(app__$1,new cljs.core.Keyword(null,\"index-component!\",\"index-component!\",-1202750708));\r\nvar drop_component_BANG_ = com.fulcrologic.fulcro.algorithms.lookup.app_algorithm(app__$1,new cljs.core.Keyword(null,\"drop-component!\",\"drop-component!\",183893156));\r\ncom.fulcrologic.fulcro.components.goog$module$goog$object.set(faux_component,\"fulcro$mounted\",true);\r\n\r\n(index_component_BANG_.cljs$core$IFn$_invoke$arity$1 ? index_component_BANG_.cljs$core$IFn$_invoke$arity$1(faux_component) : index_component_BANG_.call(null,faux_component));\r\n\r\nreturn (function (){\r\ncom.fulcrologic.fulcro.components.goog$module$goog$object.set(faux_component,\"fulcro$mounted\",false);\r\n\r\nreturn (drop_component_BANG_.cljs$core$IFn$_invoke$arity$2 ? drop_component_BANG_.cljs$core$IFn$_invoke$arity$2(faux_component,original_ident) : drop_component_BANG_.call(null,faux_component,original_ident));\r\n});\r\n}),[cljs.core.second(current_ident)]);\r\n\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [faux_component,current_props], null);\r\n});\r\n/**\r\n * Returns true if the given component instance is mounted on the DOM.\r\n */\r\ncom.fulcrologic.fulcro.components.mounted_QMARK_ = (function com$fulcrologic$fulcro$components$mounted_QMARK_(this$){\r\nreturn com.fulcrologic.fulcro.components.goog$module$goog$object.get(this$,\"fulcro$mounted\",false);\r\n});\r\n/**\r\n * Set React component-local state.  The `new-state` is actually merged with the existing state (as per React docs),\r\n *   but is wrapped so that cljs maps are used (instead of js objs).  `callback` is an optional callback that will be\r\n *   called as per the React docs on setState.\r\n */\r\ncom.fulcrologic.fulcro.components.set_state_BANG_ = (function com$fulcrologic$fulcro$components$set_state_BANG_(var_args){\r\nvar G__57031 = arguments.length;\r\nswitch (G__57031) {\r\ncase 3:\r\nreturn com.fulcrologic.fulcro.components.set_state_BANG_.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\r\n\r\nbreak;\r\ncase 2:\r\nreturn com.fulcrologic.fulcro.components.set_state_BANG_.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\r\n\r\nbreak;\r\ndefault:\r\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\r\n\r\n}\r\n});\r\n\r\n(com.fulcrologic.fulcro.components.set_state_BANG_.cljs$core$IFn$_invoke$arity$3 = (function (component,new_state,callback){\r\nif(cljs.core.truth_(com.fulcrologic.fulcro.components.mounted_QMARK_(component))){\r\nreturn component.setState((function (prev_state,props){\r\nreturn ({\"fulcro$state\": cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([com.fulcrologic.fulcro.components.goog$module$goog$object.get(prev_state,\"fulcro$state\"),new_state], 0))});\r\n}),callback);\r\n} else {\r\nreturn null;\r\n}\r\n}));\r\n\r\n(com.fulcrologic.fulcro.components.set_state_BANG_.cljs$core$IFn$_invoke$arity$2 = (function (component,new_state){\r\nreturn com.fulcrologic.fulcro.components.set_state_BANG_.cljs$core$IFn$_invoke$arity$3(component,new_state,null);\r\n}));\r\n\r\n(com.fulcrologic.fulcro.components.set_state_BANG_.cljs$lang$maxFixedArity = 3);\r\n\r\n/**\r\n * Get a component's local state. May provide a single key or a sequential\r\n * collection of keys for indexed access into the component's local state. NOTE: This is Fulcro's wrapped component\r\n * local state. The low-level React state is as described in the React docs (e.g. `(.-state this)`).\r\n */\r\ncom.fulcrologic.fulcro.components.get_state = (function com$fulcrologic$fulcro$components$get_state(var_args){\r\nvar G__57033 = arguments.length;\r\nswitch (G__57033) {\r\ncase 1:\r\nreturn com.fulcrologic.fulcro.components.get_state.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\r\n\r\nbreak;\r\ncase 2:\r\nreturn com.fulcrologic.fulcro.components.get_state.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\r\n\r\nbreak;\r\ndefault:\r\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\r\n\r\n}\r\n});\r\n\r\n(com.fulcrologic.fulcro.components.get_state.cljs$core$IFn$_invoke$arity$1 = (function (component){\r\nreturn com.fulcrologic.fulcro.components.get_state.cljs$core$IFn$_invoke$arity$2(component,cljs.core.PersistentVector.EMPTY);\r\n}));\r\n\r\n(com.fulcrologic.fulcro.components.get_state.cljs$core$IFn$_invoke$arity$2 = (function (component,k_or_ks){\r\nvar cst = com.fulcrologic.fulcro.components.goog$module$goog$object.getValueByKeys(component,\"state\",\"fulcro$state\");\r\nreturn cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(cst,((cljs.core.sequential_QMARK_(k_or_ks))?k_or_ks:new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [k_or_ks], null)));\r\n}));\r\n\r\n(com.fulcrologic.fulcro.components.get_state.cljs$lang$maxFixedArity = 2);\r\n\r\nvar update_fn_57190 = (function (component,f,args){\r\nreturn component.setState((function (prev_state,props){\r\nreturn ({\"fulcro$state\": cljs.core.apply.cljs$core$IFn$_invoke$arity$3(f,com.fulcrologic.fulcro.components.goog$module$goog$object.get(prev_state,\"fulcro$state\"),args)});\r\n}));\r\n});\r\n/**\r\n * Update a component's local state. Similar to Clojure(Script)'s swap!\r\n * \r\n *  This function affects a managed cljs map maintained in React state.  If you want to affect the low-level\r\n *  js state itself use React's own `.setState` directly on the component.\r\n */\r\ncom.fulcrologic.fulcro.components.update_state_BANG_ = (function com$fulcrologic$fulcro$components$update_state_BANG_(var_args){\r\nvar G__57038 = arguments.length;\r\nswitch (G__57038) {\r\ncase 2:\r\nreturn com.fulcrologic.fulcro.components.update_state_BANG_.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\r\n\r\nbreak;\r\ndefault:\r\nvar args_arr__4885__auto__ = [];\r\nvar len__4864__auto___57195 = arguments.length;\r\nvar i__4865__auto___57196 = (0);\r\nwhile(true){\r\nif((i__4865__auto___57196 < len__4864__auto___57195)){\r\nargs_arr__4885__auto__.push((arguments[i__4865__auto___57196]));\r\n\r\nvar G__57197 = (i__4865__auto___57196 + (1));\r\ni__4865__auto___57196 = G__57197;\r\ncontinue;\r\n} else {\r\n}\r\nbreak;\r\n}\r\n\r\nvar argseq__4886__auto__ = (new cljs.core.IndexedSeq(args_arr__4885__auto__.slice((2)),(0),null));\r\nreturn com.fulcrologic.fulcro.components.update_state_BANG_.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),argseq__4886__auto__);\r\n\r\n}\r\n});\r\n\r\n(com.fulcrologic.fulcro.components.update_state_BANG_.cljs$core$IFn$_invoke$arity$2 = (function (component,f){\r\nreturn update_fn_57190(component,f,cljs.core.PersistentVector.EMPTY);\r\n}));\r\n\r\n(com.fulcrologic.fulcro.components.update_state_BANG_.cljs$core$IFn$_invoke$arity$variadic = (function (component,f,args){\r\nreturn update_fn_57190(component,f,args);\r\n}));\r\n\r\n/** @this {Function} */\r\n(com.fulcrologic.fulcro.components.update_state_BANG_.cljs$lang$applyTo = (function (seq57035){\r\nvar G__57036 = cljs.core.first(seq57035);\r\nvar seq57035__$1 = cljs.core.next(seq57035);\r\nvar G__57037 = cljs.core.first(seq57035__$1);\r\nvar seq57035__$2 = cljs.core.next(seq57035__$1);\r\nvar self__4851__auto__ = this;\r\nreturn self__4851__auto__.cljs$core$IFn$_invoke$arity$variadic(G__57036,G__57037,seq57035__$2);\r\n}));\r\n\r\n(com.fulcrologic.fulcro.components.update_state_BANG_.cljs$lang$maxFixedArity = (2));\r\n\r\n/**\r\n * \r\n *   [cls] [cls params]\r\n * \r\n *   Get the declared :initial-state value for a component.\r\n */\r\ncom.fulcrologic.fulcro.components.get_initial_state = com.fulcrologic.fulcro.raw.components.get_initial_state;\r\n/**\r\n * Returns true if the given initial state was returned from a call to get-initial-state. This is used by internal\r\n *   algorithms when interpreting initial state shorthand in `defsc`.\r\n */\r\ncom.fulcrologic.fulcro.components.computed_initial_state_QMARK_ = (function com$fulcrologic$fulcro$components$computed_initial_state_QMARK_(s){\r\nvar and__4251__auto__ = cljs.core.map_QMARK_(s);\r\nif(and__4251__auto__){\r\nvar G__57039 = s;\r\nvar G__57039__$1 = (((G__57039 == null))?null:cljs.core.meta(G__57039));\r\nif((G__57039__$1 == null)){\r\nreturn null;\r\n} else {\r\nreturn new cljs.core.Keyword(null,\"computed\",\"computed\",-1482016762).cljs$core$IFn$_invoke$arity$1(G__57039__$1);\r\n}\r\n} else {\r\nreturn and__4251__auto__;\r\n}\r\n});\r\n/**\r\n * \r\n *   [x] [class props]\r\n * \r\n *   Get the ident for a mounted component OR using a component class.\r\n * \r\n *   That arity-2 will return the ident using the supplied props map.\r\n * \r\n *   The single-arity version should only be used with a mounted component (e.g. `this` from `render`), and will derive the\r\n *   props that were sent to it most recently.\r\n */\r\ncom.fulcrologic.fulcro.components.get_ident = com.fulcrologic.fulcro.raw.components.get_ident;\r\n/**\r\n * CLJS-only.  When the `component` is mounted this will tunnel `new-props` to that component through React `setState`. If you're in\r\n *   an event handler, this means the tunnelling will be synchronous, and can be useful when updating props that could affect DOM\r\n *   inputs. This is typically used internally (see `transact!!`, and should generally not be used in applications unless it is a very advanced\r\n *   scenario and you've studied how this works. NOTE: You should `tick!` the application clock and bind *denormalize-time*\r\n *   when generating `new-props` so they are properly time-stamped by `db->tree`, or manually add time to `new-props`\r\n *   using `fdn/with-time` directly.\r\n */\r\ncom.fulcrologic.fulcro.components.tunnel_props_BANG_ = (function com$fulcrologic$fulcro$components$tunnel_props_BANG_(component,new_props){\r\nif(cljs.core.truth_(com.fulcrologic.fulcro.components.mounted_QMARK_(component))){\r\nreturn component.setState((function (s){\r\nreturn ({\"fulcro$value\": new_props});\r\n}));\r\n} else {\r\nreturn null;\r\n}\r\n});\r\n/**\r\n * Returns true if the given argument is a component factory.\r\n */\r\ncom.fulcrologic.fulcro.components.is_factory_QMARK_ = (function com$fulcrologic$fulcro$components$is_factory_QMARK_(class_or_factory){\r\nreturn com.fulcrologic.fulcro.raw.components.is_factory_QMARK_(class_or_factory);\r\n});\r\n/**\r\n * [class qualifier]\r\n * \r\n * Returns a string ID for the query of the given class with qualifier.\r\n */\r\ncom.fulcrologic.fulcro.components.query_id = com.fulcrologic.fulcro.raw.components.query_id;\r\ncom.fulcrologic.fulcro.components.denormalize_query = com.fulcrologic.fulcro.raw.components.denormalize_query;\r\ncom.fulcrologic.fulcro.components.get_query_by_id = com.fulcrologic.fulcro.raw.components.get_query_by_id;\r\n/**\r\n * Get the query for the given class or factory. If called without a state map, then you'll get the declared static\r\n *   query of the class. If a state map is supplied, then the dynamically set queries in that state will result in\r\n *   the current dynamically-set query according to that state.\r\n */\r\ncom.fulcrologic.fulcro.components.get_query = (function com$fulcrologic$fulcro$components$get_query(var_args){\r\nvar G__57041 = arguments.length;\r\nswitch (G__57041) {\r\ncase 1:\r\nreturn com.fulcrologic.fulcro.components.get_query.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\r\n\r\nbreak;\r\ncase 2:\r\nreturn com.fulcrologic.fulcro.components.get_query.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\r\n\r\nbreak;\r\ndefault:\r\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\r\n\r\n}\r\n});\r\n\r\n(com.fulcrologic.fulcro.components.get_query.cljs$core$IFn$_invoke$arity$1 = (function (class_or_factory){\r\nreturn com.fulcrologic.fulcro.raw.components.get_query.cljs$core$IFn$_invoke$arity$2(class_or_factory,(function (){var or__4253__auto__ = com.fulcrologic.fulcro.raw.components._STAR_query_state_STAR_;\r\nif(cljs.core.truth_(or__4253__auto__)){\r\nreturn or__4253__auto__;\r\n} else {\r\nvar or__4253__auto____$1 = (function (){var G__57042 = com.fulcrologic.fulcro.components._STAR_app_STAR_;\r\nvar G__57042__$1 = (((G__57042 == null))?null:new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"state-atom\",\"com.fulcrologic.fulcro.application/state-atom\",648128366).cljs$core$IFn$_invoke$arity$1(G__57042));\r\nif((G__57042__$1 == null)){\r\nreturn null;\r\n} else {\r\nreturn cljs.core.deref(G__57042__$1);\r\n}\r\n})();\r\nif(cljs.core.truth_(or__4253__auto____$1)){\r\nreturn or__4253__auto____$1;\r\n} else {\r\nreturn cljs.core.PersistentArrayMap.EMPTY;\r\n}\r\n}\r\n})());\r\n}));\r\n\r\n(com.fulcrologic.fulcro.components.get_query.cljs$core$IFn$_invoke$arity$2 = (function (class_or_factory,state_map){\r\nreturn com.fulcrologic.fulcro.raw.components.get_query.cljs$core$IFn$_invoke$arity$2(class_or_factory,state_map);\r\n}));\r\n\r\n(com.fulcrologic.fulcro.components.get_query.cljs$lang$maxFixedArity = 2);\r\n\r\n/**\r\n * Build a component's initial state using the defsc initial-state-data from\r\n *   options, the children from options, and the params from the invocation of get-initial-state.\r\n */\r\ncom.fulcrologic.fulcro.components.make_state_map = (function com$fulcrologic$fulcro$components$make_state_map(initial_state,children_by_query_key,params){\r\nvar join_keys = cljs.core.set(cljs.core.keys(children_by_query_key));\r\nvar init_keys = cljs.core.set(cljs.core.keys(initial_state));\r\nvar is_child_QMARK_ = (function (k){\r\nreturn cljs.core.contains_QMARK_(join_keys,k);\r\n});\r\nvar value_of = (function com$fulcrologic$fulcro$components$make_state_map_$_value_of_STAR_(p__57043){\r\nvar vec__57044 = p__57043;\r\nvar isk = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__57044,(0),null);\r\nvar isv = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__57044,(1),null);\r\nvar param_name = (function (v){\r\nvar and__4251__auto__ = (v instanceof cljs.core.Keyword);\r\nif(and__4251__auto__){\r\nvar and__4251__auto____$1 = cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(\"param\",cljs.core.namespace(v));\r\nif(and__4251__auto____$1){\r\nreturn cljs.core.keyword.cljs$core$IFn$_invoke$arity$1(cljs.core.name(v));\r\n} else {\r\nreturn and__4251__auto____$1;\r\n}\r\n} else {\r\nreturn and__4251__auto__;\r\n}\r\n});\r\nvar substitute = (function (ele){\r\nvar temp__5751__auto__ = param_name(ele);\r\nif(cljs.core.truth_(temp__5751__auto__)){\r\nvar k = temp__5751__auto__;\r\nreturn cljs.core.get.cljs$core$IFn$_invoke$arity$2(params,k);\r\n} else {\r\nreturn ele;\r\n}\r\n});\r\nvar param_key = param_name(isv);\r\nvar param_exists_QMARK_ = cljs.core.contains_QMARK_(params,param_key);\r\nvar param_value = cljs.core.get.cljs$core$IFn$_invoke$arity$2(params,param_key);\r\nvar child_class = cljs.core.get.cljs$core$IFn$_invoke$arity$2(children_by_query_key,isk);\r\nif(cljs.core.truth_((function (){var and__4251__auto__ = param_key;\r\nif(cljs.core.truth_(and__4251__auto__)){\r\nreturn (!(param_exists_QMARK_));\r\n} else {\r\nreturn and__4251__auto__;\r\n}\r\n})())){\r\nreturn null;\r\n} else {\r\nif(((cljs.core.map_QMARK_(isv)) && (is_child_QMARK_(isk)))){\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [isk,(function (){var G__57047 = child_class;\r\nvar G__57048 = cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentArrayMap.EMPTY,cljs.core.keep.cljs$core$IFn$_invoke$arity$2(com$fulcrologic$fulcro$components$make_state_map_$_value_of_STAR_,isv));\r\nreturn (com.fulcrologic.fulcro.components.get_initial_state.cljs$core$IFn$_invoke$arity$2 ? com.fulcrologic.fulcro.components.get_initial_state.cljs$core$IFn$_invoke$arity$2(G__57047,G__57048) : com.fulcrologic.fulcro.components.get_initial_state.call(null,G__57047,G__57048));\r\n})()], null);\r\n} else {\r\nif(cljs.core.map_QMARK_(isv)){\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [isk,cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentArrayMap.EMPTY,cljs.core.keep.cljs$core$IFn$_invoke$arity$2(com$fulcrologic$fulcro$components$make_state_map_$_value_of_STAR_,isv))], null);\r\n} else {\r\nif(((cljs.core.vector_QMARK_(isv)) && (is_child_QMARK_(isk)))){\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [isk,cljs.core.mapv.cljs$core$IFn$_invoke$arity$2((function (m){\r\nvar G__57049 = child_class;\r\nvar G__57050 = cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentArrayMap.EMPTY,cljs.core.keep.cljs$core$IFn$_invoke$arity$2(com$fulcrologic$fulcro$components$make_state_map_$_value_of_STAR_,m));\r\nreturn (com.fulcrologic.fulcro.components.get_initial_state.cljs$core$IFn$_invoke$arity$2 ? com.fulcrologic.fulcro.components.get_initial_state.cljs$core$IFn$_invoke$arity$2(G__57049,G__57050) : com.fulcrologic.fulcro.components.get_initial_state.call(null,G__57049,G__57050));\r\n}),isv)], null);\r\n} else {\r\nif(((cljs.core.vector_QMARK_(param_value)) && (is_child_QMARK_(isk)))){\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [isk,cljs.core.mapv.cljs$core$IFn$_invoke$arity$2((function (params__$1){\r\nif(cljs.core.truth_(com.fulcrologic.fulcro.components.computed_initial_state_QMARK_(params__$1))){\r\nreturn params__$1;\r\n} else {\r\nreturn (com.fulcrologic.fulcro.components.get_initial_state.cljs$core$IFn$_invoke$arity$2 ? com.fulcrologic.fulcro.components.get_initial_state.cljs$core$IFn$_invoke$arity$2(child_class,params__$1) : com.fulcrologic.fulcro.components.get_initial_state.call(null,child_class,params__$1));\r\n}\r\n}),param_value)], null);\r\n} else {\r\nif(cljs.core.vector_QMARK_(isv)){\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [isk,cljs.core.mapv.cljs$core$IFn$_invoke$arity$2((function (ele){\r\nreturn substitute(ele);\r\n}),isv)], null);\r\n} else {\r\nif(cljs.core.truth_((function (){var and__4251__auto__ = param_key;\r\nif(cljs.core.truth_(and__4251__auto__)){\r\nreturn ((is_child_QMARK_(isk)) && (param_exists_QMARK_));\r\n} else {\r\nreturn and__4251__auto__;\r\n}\r\n})())){\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [isk,(cljs.core.truth_(com.fulcrologic.fulcro.components.computed_initial_state_QMARK_(param_value))?param_value:(com.fulcrologic.fulcro.components.get_initial_state.cljs$core$IFn$_invoke$arity$2 ? com.fulcrologic.fulcro.components.get_initial_state.cljs$core$IFn$_invoke$arity$2(child_class,param_value) : com.fulcrologic.fulcro.components.get_initial_state.call(null,child_class,param_value)))], null);\r\n} else {\r\nif(cljs.core.truth_(param_key)){\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [isk,param_value], null);\r\n} else {\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [isk,isv], null);\r\n\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n});\r\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentArrayMap.EMPTY,cljs.core.keep.cljs$core$IFn$_invoke$arity$2(value_of,initial_state));\r\n});\r\n/**\r\n * Run `real-render`, possibly through :render-middleware configured on your app.\r\n */\r\ncom.fulcrologic.fulcro.components.wrapped_render = (function com$fulcrologic$fulcro$components$wrapped_render(this$,real_render){\r\nvar app__$1 = com.fulcrologic.fulcro.components.goog$module$goog$object.getValueByKeys(this$,\"props\",\"fulcro$app\");\r\nvar render_middleware = com.fulcrologic.fulcro.algorithms.lookup.app_algorithm(app__$1,new cljs.core.Keyword(null,\"render-middleware\",\"render-middleware\",1183628797));\r\nif(cljs.core.truth_(render_middleware)){\r\nreturn (render_middleware.cljs$core$IFn$_invoke$arity$2 ? render_middleware.cljs$core$IFn$_invoke$arity$2(this$,real_render) : render_middleware.call(null,this$,real_render));\r\n} else {\r\nreturn (real_render.cljs$core$IFn$_invoke$arity$0 ? real_render.cljs$core$IFn$_invoke$arity$0() : real_render.call(null));\r\n}\r\n});\r\n/**\r\n * Configure a function `(f [this fulcro-props] ...)` to work properly as a hook-based react component. This can be\r\n *   used in leiu of `defsc` to create a component, where `options` is the (non-magic) map of component options\r\n *   (i.e. :query is a `(fn [this])`, not a vector).\r\n * \r\n *   IMPORTANT: Your options must include `:componentName`, a fully-qualified keyword to use in the component registry.\r\n * \r\n *   Returns a new function that wraps yours (to properly extract Fulcro props) and installs the proper Fulcro component\r\n *   options on the low-level function so that it will act properly when used within React as a hook-based component.\r\n * \r\n *   (def MyComponent\r\n *  (configure-hooks-component!\r\n *    (fn [this props]\r\n *      (let [[v set-v!] (use-state this 0)\r\n *        (dom/div ...)))\r\n *    {:query ... :ident (fn [_ props] ...) :componentName ::MyComponent}))\r\n * \r\n *   (def ui-my-component (comp/factory MyComponent {:keyfn :id})\r\n * \r\n *   This can be used to easily generate dynamic components at runtime (as can `configure-component!`).\r\n *   \r\n */\r\ncom.fulcrologic.fulcro.components.configure_hooks_component_BANG_ = (function com$fulcrologic$fulcro$components$configure_hooks_component_BANG_(f,options){\r\nvar cls_atom = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(null);\r\nvar js_fn = (function (js_props){\r\nvar vec__57051 = com.fulcrologic.fulcro.components.use_fulcro(js_props,cljs.core.deref(cls_atom));\r\nvar this$ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__57051,(0),null);\r\nvar props = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__57051,(1),null);\r\nreturn com.fulcrologic.fulcro.components.wrapped_render(this$,(function (){\r\nvar _STAR_app_STAR__orig_val__57054 = com.fulcrologic.fulcro.components._STAR_app_STAR_;\r\nvar _STAR_depth_STAR__orig_val__57055 = com.fulcrologic.fulcro.components._STAR_depth_STAR_;\r\nvar _STAR_shared_STAR__orig_val__57056 = com.fulcrologic.fulcro.components._STAR_shared_STAR_;\r\nvar _STAR_parent_STAR__orig_val__57057 = com.fulcrologic.fulcro.components._STAR_parent_STAR_;\r\nvar _STAR_app_STAR__temp_val__57058 = (function (){var or__4253__auto__ = com.fulcrologic.fulcro.components._STAR_app_STAR_;\r\nif(cljs.core.truth_(or__4253__auto__)){\r\nreturn or__4253__auto__;\r\n} else {\r\nreturn com.fulcrologic.fulcro.components.any__GT_app(this$);\r\n}\r\n})();\r\nvar _STAR_depth_STAR__temp_val__57059 = (com.fulcrologic.fulcro.components.depth(this$) + (1));\r\nvar _STAR_shared_STAR__temp_val__57060 = com.fulcrologic.fulcro.components.shared.cljs$core$IFn$_invoke$arity$1(com.fulcrologic.fulcro.components._STAR_app_STAR_);\r\nvar _STAR_parent_STAR__temp_val__57061 = this$;\r\n(com.fulcrologic.fulcro.components._STAR_app_STAR_ = _STAR_app_STAR__temp_val__57058);\r\n\r\n(com.fulcrologic.fulcro.components._STAR_depth_STAR_ = _STAR_depth_STAR__temp_val__57059);\r\n\r\n(com.fulcrologic.fulcro.components._STAR_shared_STAR_ = _STAR_shared_STAR__temp_val__57060);\r\n\r\n(com.fulcrologic.fulcro.components._STAR_parent_STAR_ = _STAR_parent_STAR__temp_val__57061);\r\n\r\ntry{return (f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(this$,props) : f.call(null,this$,props));\r\n}finally {(com.fulcrologic.fulcro.components._STAR_parent_STAR_ = _STAR_parent_STAR__orig_val__57057);\r\n\r\n(com.fulcrologic.fulcro.components._STAR_shared_STAR_ = _STAR_shared_STAR__orig_val__57056);\r\n\r\n(com.fulcrologic.fulcro.components._STAR_depth_STAR_ = _STAR_depth_STAR__orig_val__57055);\r\n\r\n(com.fulcrologic.fulcro.components._STAR_app_STAR_ = _STAR_app_STAR__orig_val__57054);\r\n}}));\r\n});\r\ncljs.core.reset_BANG_(cls_atom,js_fn);\r\n\r\nreturn com.fulcrologic.fulcro.components.add_hook_options_BANG_(js_fn,options);\r\n});\r\n/**\r\n * Create a react element for a Fulcro class.  In CLJ this returns the same thing as a mounted instance, whereas in CLJS it is an\r\n *   element (which has yet to instantiate an instance).\r\n */\r\ncom.fulcrologic.fulcro.components.create_element = (function com$fulcrologic$fulcro$components$create_element(class$,props,children){\r\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$4(module$node_modules$react$index.createElement,class$,props,com.fulcrologic.fulcro.components.force_children(children));\r\n});\r\n/**\r\n * Create a factory constructor from a component class created with\r\n * defsc.\r\n */\r\ncom.fulcrologic.fulcro.components.factory = (function com$fulcrologic$fulcro$components$factory(var_args){\r\nvar G__57063 = arguments.length;\r\nswitch (G__57063) {\r\ncase 1:\r\nreturn com.fulcrologic.fulcro.components.factory.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\r\n\r\nbreak;\r\ncase 2:\r\nreturn com.fulcrologic.fulcro.components.factory.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\r\n\r\nbreak;\r\ndefault:\r\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\r\n\r\n}\r\n});\r\n\r\n(com.fulcrologic.fulcro.components.factory.cljs$core$IFn$_invoke$arity$1 = (function (class$){\r\nreturn com.fulcrologic.fulcro.components.factory.cljs$core$IFn$_invoke$arity$2(class$,null);\r\n}));\r\n\r\n(com.fulcrologic.fulcro.components.factory.cljs$core$IFn$_invoke$arity$2 = (function (class$,p__57064){\r\nvar map__57065 = p__57064;\r\nvar map__57065__$1 = cljs.core.__destructure_map(map__57065);\r\nvar opts = map__57065__$1;\r\nvar keyfn = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__57065__$1,new cljs.core.Keyword(null,\"keyfn\",\"keyfn\",780060332));\r\nvar qualifier = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__57065__$1,new cljs.core.Keyword(null,\"qualifier\",\"qualifier\",125841738));\r\nvar qid = (com.fulcrologic.fulcro.components.query_id.cljs$core$IFn$_invoke$arity$2 ? com.fulcrologic.fulcro.components.query_id.cljs$core$IFn$_invoke$arity$2(class$,qualifier) : com.fulcrologic.fulcro.components.query_id.call(null,class$,qualifier));\r\nreturn cljs.core.with_meta((function() { \r\nvar com$fulcrologic$fulcro$components$element_factory__delegate = function (props,children){\r\nvar key = new cljs.core.Keyword(null,\"react-key\",\"react-key\",1337881348).cljs$core$IFn$_invoke$arity$1(props);\r\nvar key__$1 = (cljs.core.truth_(key)?key:(cljs.core.truth_(keyfn)?(keyfn.cljs$core$IFn$_invoke$arity$1 ? keyfn.cljs$core$IFn$_invoke$arity$1(props) : keyfn.call(null,props)):null));\r\nvar ref = new cljs.core.Keyword(null,\"ref\",\"ref\",1289896967).cljs$core$IFn$_invoke$arity$1(props);\r\nvar ref__$1 = (function (){var G__57066 = ref;\r\nif((ref instanceof cljs.core.Keyword)){\r\nreturn cljs.core.str.cljs$core$IFn$_invoke$arity$1(G__57066);\r\n} else {\r\nreturn G__57066;\r\n}\r\n})();\r\nvar props_middleware = (function (){var G__57067 = com.fulcrologic.fulcro.components._STAR_app_STAR_;\r\nif((G__57067 == null)){\r\nreturn null;\r\n} else {\r\nreturn com.fulcrologic.fulcro.algorithms.lookup.app_algorithm(G__57067,new cljs.core.Keyword(null,\"props-middleware\",\"props-middleware\",358176739));\r\n}\r\n})();\r\nvar props__$1 = ({\"fulcro$value\": props, \"fulcro$queryid\": qid, \"fulcro$app\": com.fulcrologic.fulcro.components._STAR_app_STAR_, \"fulcro$parent\": com.fulcrologic.fulcro.components._STAR_parent_STAR_, \"fulcro$depth\": com.fulcrologic.fulcro.components._STAR_depth_STAR_});\r\nvar props__$2 = (cljs.core.truth_(props_middleware)?(props_middleware.cljs$core$IFn$_invoke$arity$2 ? props_middleware.cljs$core$IFn$_invoke$arity$2(class$,props__$1) : props_middleware.call(null,class$,props__$1)):props__$1);\r\nif(cljs.core.truth_(key__$1)){\r\ncom.fulcrologic.fulcro.components.goog$module$goog$object.set(props__$2,\"key\",key__$1);\r\n} else {\r\n}\r\n\r\nif(cljs.core.truth_(ref__$1)){\r\ncom.fulcrologic.fulcro.components.goog$module$goog$object.set(props__$2,\"ref\",ref__$1);\r\n} else {\r\n}\r\n\r\nif(cljs.core.truth_(goog.DEBUG)){\r\nif((com.fulcrologic.fulcro.components._STAR_app_STAR_ == null)){\r\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$11(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.components\",null,769,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay((function (){\r\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"A Fulcro component was rendered outside of a parent context. This probably means you are using a library that has you pass rendering code to it as a lambda. Use `with-parent-context` to fix this. See https://book.fulcrologic.com/#err-comp-rendered-outside-parent-ctx\"], null);\r\n}),null)),null,-1373566292,null);\r\n} else {\r\n}\r\n\r\nif(((cljs.core.map_QMARK_(key__$1)) || (cljs.core.vector_QMARK_(key__$1)))){\r\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$11(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"warn\",\"warn\",-436710552),\"com.fulcrologic.fulcro.components\",null,771,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay((function (){\r\nreturn new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"React key for \",(com.fulcrologic.fulcro.components.component_name.cljs$core$IFn$_invoke$arity$1 ? com.fulcrologic.fulcro.components.component_name.cljs$core$IFn$_invoke$arity$1(class$) : com.fulcrologic.fulcro.components.component_name.call(null,class$)),\" is not a simple scalar value. This could cause spurious component remounts. See https://book.fulcrologic.com/#warn-react-key-not-simple-scalar\"], null);\r\n}),null)),null,333259727,null);\r\n} else {\r\n}\r\n\r\nif(typeof ref__$1 === 'string'){\r\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$11(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"warn\",\"warn\",-436710552),\"com.fulcrologic.fulcro.components\",null,774,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay((function (){\r\nreturn new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"String ref on \",(com.fulcrologic.fulcro.components.component_name.cljs$core$IFn$_invoke$arity$1 ? com.fulcrologic.fulcro.components.component_name.cljs$core$IFn$_invoke$arity$1(class$) : com.fulcrologic.fulcro.components.component_name.call(null,class$)),\" should be a function. See https://book.fulcrologic.com/#warn-string-ref-not-function\"], null);\r\n}),null)),null,1580169571,null);\r\n} else {\r\n}\r\n\r\nif((((props__$2 == null)) || (cljs.core.not(com.fulcrologic.fulcro.components.goog$module$goog$object.containsKey(props__$2,\"fulcro$value\"))))){\r\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$11(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.components\",null,777,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay((function (){\r\nreturn new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"Props middleware seems to have corrupted props for \",(com.fulcrologic.fulcro.components.component_name.cljs$core$IFn$_invoke$arity$1 ? com.fulcrologic.fulcro.components.component_name.cljs$core$IFn$_invoke$arity$1(class$) : com.fulcrologic.fulcro.components.component_name.call(null,class$)),\"See https://book.fulcrologic.com/#err-comp-props-middleware-corrupts\"], null);\r\n}),null)),null,-131037557,null);\r\n} else {\r\n}\r\n\r\nif(cljs.core.truth_(cljs.core.fnil.cljs$core$IFn$_invoke$arity$2(cljs.core.map_QMARK_,cljs.core.PersistentArrayMap.EMPTY)(com.fulcrologic.fulcro.components.goog$module$goog$object.get(props__$2,\"fulcro$value\")))){\r\n} else {\r\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$11(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.components\",null,780,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay((function (){\r\nreturn new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"Props passed to\",(com.fulcrologic.fulcro.components.component_name.cljs$core$IFn$_invoke$arity$1 ? com.fulcrologic.fulcro.components.component_name.cljs$core$IFn$_invoke$arity$1(class$) : com.fulcrologic.fulcro.components.component_name.call(null,class$)),\"are of the type\",cljs.core.type__GT_str(cljs.core.type(com.fulcrologic.fulcro.components.goog$module$goog$object.get(props__$2,\"fulcro$value\"))),\"instead of a map. Perhaps you meant to `map` the component over the props? See https://book.fulcrologic.com/#err-comp-props-not-a-map\"], null);\r\n}),null)),null,-1215326864,null);\r\n}\r\n} else {\r\n}\r\n\r\nreturn com.fulcrologic.fulcro.components.create_element(class$,props__$2,children);\r\n};\r\nvar com$fulcrologic$fulcro$components$element_factory = function (props,var_args){\r\nvar children = null;\r\nif (arguments.length > 1) {\r\nvar G__57253__i = 0, G__57253__a = new Array(arguments.length -  1);\r\nwhile (G__57253__i < G__57253__a.length) {G__57253__a[G__57253__i] = arguments[G__57253__i + 1]; ++G__57253__i;}\r\n  children = new cljs.core.IndexedSeq(G__57253__a,0,null);\r\n} \r\nreturn com$fulcrologic$fulcro$components$element_factory__delegate.call(this,props,children);};\r\ncom$fulcrologic$fulcro$components$element_factory.cljs$lang$maxFixedArity = 1;\r\ncom$fulcrologic$fulcro$components$element_factory.cljs$lang$applyTo = (function (arglist__57255){\r\nvar props = cljs.core.first(arglist__57255);\r\nvar children = cljs.core.rest(arglist__57255);\r\nreturn com$fulcrologic$fulcro$components$element_factory__delegate(props,children);\r\n});\r\ncom$fulcrologic$fulcro$components$element_factory.cljs$core$IFn$_invoke$arity$variadic = com$fulcrologic$fulcro$components$element_factory__delegate;\r\nreturn com$fulcrologic$fulcro$components$element_factory;\r\n})()\r\n,new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"class\",\"class\",-2030961996),class$,new cljs.core.Keyword(null,\"queryid\",\"queryid\",-271432056),qid,new cljs.core.Keyword(null,\"qualifier\",\"qualifier\",125841738),qualifier], null));\r\n}));\r\n\r\n(com.fulcrologic.fulcro.components.factory.cljs$lang$maxFixedArity = 2);\r\n\r\n/**\r\n * Similar to factory, but returns a function with the signature\r\n *   [props computed & children] instead of default [props & children].\r\n *   This makes easier to send computed.\r\n */\r\ncom.fulcrologic.fulcro.components.computed_factory = (function com$fulcrologic$fulcro$components$computed_factory(var_args){\r\nvar G__57069 = arguments.length;\r\nswitch (G__57069) {\r\ncase 1:\r\nreturn com.fulcrologic.fulcro.components.computed_factory.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\r\n\r\nbreak;\r\ncase 2:\r\nreturn com.fulcrologic.fulcro.components.computed_factory.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\r\n\r\nbreak;\r\ndefault:\r\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\r\n\r\n}\r\n});\r\n\r\n(com.fulcrologic.fulcro.components.computed_factory.cljs$core$IFn$_invoke$arity$1 = (function (class$){\r\nreturn com.fulcrologic.fulcro.components.computed_factory.cljs$core$IFn$_invoke$arity$2(class$,cljs.core.PersistentArrayMap.EMPTY);\r\n}));\r\n\r\n(com.fulcrologic.fulcro.components.computed_factory.cljs$core$IFn$_invoke$arity$2 = (function (class$,options){\r\nvar real_factory = com.fulcrologic.fulcro.components.factory.cljs$core$IFn$_invoke$arity$2(class$,options);\r\nreturn cljs.core.with_meta((function() {\r\nvar G__57259 = null;\r\nvar G__57259__1 = (function (props){\r\nreturn (real_factory.cljs$core$IFn$_invoke$arity$1 ? real_factory.cljs$core$IFn$_invoke$arity$1(props) : real_factory.call(null,props));\r\n});\r\nvar G__57259__2 = (function (props,computed_props){\r\nvar G__57070 = (com.fulcrologic.fulcro.components.computed.cljs$core$IFn$_invoke$arity$2 ? com.fulcrologic.fulcro.components.computed.cljs$core$IFn$_invoke$arity$2(props,computed_props) : com.fulcrologic.fulcro.components.computed.call(null,props,computed_props));\r\nreturn (real_factory.cljs$core$IFn$_invoke$arity$1 ? real_factory.cljs$core$IFn$_invoke$arity$1(G__57070) : real_factory.call(null,G__57070));\r\n});\r\nvar G__57259__3 = (function() { \r\nvar G__57268__delegate = function (props,computed_props,children){\r\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$3(real_factory,(com.fulcrologic.fulcro.components.computed.cljs$core$IFn$_invoke$arity$2 ? com.fulcrologic.fulcro.components.computed.cljs$core$IFn$_invoke$arity$2(props,computed_props) : com.fulcrologic.fulcro.components.computed.call(null,props,computed_props)),children);\r\n};\r\nvar G__57268 = function (props,computed_props,var_args){\r\nvar children = null;\r\nif (arguments.length > 2) {\r\nvar G__57269__i = 0, G__57269__a = new Array(arguments.length -  2);\r\nwhile (G__57269__i < G__57269__a.length) {G__57269__a[G__57269__i] = arguments[G__57269__i + 2]; ++G__57269__i;}\r\n  children = new cljs.core.IndexedSeq(G__57269__a,0,null);\r\n} \r\nreturn G__57268__delegate.call(this,props,computed_props,children);};\r\nG__57268.cljs$lang$maxFixedArity = 2;\r\nG__57268.cljs$lang$applyTo = (function (arglist__57270){\r\nvar props = cljs.core.first(arglist__57270);\r\narglist__57270 = cljs.core.next(arglist__57270);\r\nvar computed_props = cljs.core.first(arglist__57270);\r\nvar children = cljs.core.rest(arglist__57270);\r\nreturn G__57268__delegate(props,computed_props,children);\r\n});\r\nG__57268.cljs$core$IFn$_invoke$arity$variadic = G__57268__delegate;\r\nreturn G__57268;\r\n})()\r\n;\r\nG__57259 = function(props,computed_props,var_args){\r\nvar children = var_args;\r\nswitch(arguments.length){\r\ncase 1:\r\nreturn G__57259__1.call(this,props);\r\ncase 2:\r\nreturn G__57259__2.call(this,props,computed_props);\r\ndefault:\r\nvar G__57271 = null;\r\nif (arguments.length > 2) {\r\nvar G__57272__i = 0, G__57272__a = new Array(arguments.length -  2);\r\nwhile (G__57272__i < G__57272__a.length) {G__57272__a[G__57272__i] = arguments[G__57272__i + 2]; ++G__57272__i;}\r\nG__57271 = new cljs.core.IndexedSeq(G__57272__a,0,null);\r\n}\r\nreturn G__57259__3.cljs$core$IFn$_invoke$arity$variadic(props,computed_props, G__57271);\r\n}\r\nthrow(new Error('Invalid arity: ' + arguments.length));\r\n};\r\nG__57259.cljs$lang$maxFixedArity = 2;\r\nG__57259.cljs$lang$applyTo = G__57259__3.cljs$lang$applyTo;\r\nG__57259.cljs$core$IFn$_invoke$arity$1 = G__57259__1;\r\nG__57259.cljs$core$IFn$_invoke$arity$2 = G__57259__2;\r\nG__57259.cljs$core$IFn$_invoke$arity$variadic = G__57259__3.cljs$core$IFn$_invoke$arity$variadic;\r\nreturn G__57259;\r\n})()\r\n,cljs.core.meta(real_factory));\r\n}));\r\n\r\n(com.fulcrologic.fulcro.components.computed_factory.cljs$lang$maxFixedArity = 2);\r\n\r\n/**\r\n * Submit a transaction for processing.\r\n * \r\n *   The underlying transaction system is pluggable, but the *default* supported options are:\r\n * \r\n *   - `:optimistic?` - boolean. Should the transaction be processed optimistically?\r\n *   - `:ref` - ident. The ident of the component used to submit this transaction. This is set automatically if you use a component to call this function.\r\n *   - `:component` - React element. Set automatically if you call this function using a component.\r\n *   - `:refresh` - Vector containing idents (of components) and keywords (of props). Things that have changed and should be re-rendered\r\n *  on screen. Only necessary when the underlying rendering algorithm won't auto-detect, such as when UI is derived from the\r\n *  state of other components or outside of the directly queried props. Interpretation depends on the renderer selected:\r\n *  The ident-optimized render treats these as \"extras\".\r\n *   - `:only-refresh` - Vector of idents/keywords.  If the underlying rendering configured algorithm supports it: The\r\n *  components using these are the *only* things that will be refreshed in the UI.\r\n *  This can be used to avoid the overhead of looking for stale data when you know exactly what\r\n *  you want to refresh on screen as an extra optimization. Idents are *not* checked against queries.\r\n *   - `:abort-id` - An ID (you make up) that makes it possible (if the plugins you're using support it) to cancel\r\n *  the network portion of the transaction (assuming it has not already completed).\r\n *   - `:compressible?` - boolean. Check compressible-transact! docs.\r\n *   - `:synchronous?` - boolean. When turned on the transaction will run immediately on the calling thread. If run against\r\n *   a component then the props will be immediately tunneled back to the calling component, allowing for React (raw) input\r\n *   event handlers to behave as described in standard React Forms docs (uses setState behind the scenes). Any remote operations\r\n *   will still be queued as normal. Calling `transact!!` is a shorthand for this option. WARNING: ONLY the given component will\r\n *   be refreshed in the UI. If you have dependent data elsewhere in the UI you must either use `transact!` or schedule\r\n *   your own global render using `app/schedule-render!`.\r\n *   - `:after-render?` - Wait until the next render completes before allowing this transaction to run. This can be used\r\n *   when calling `transact!` from *within* another mutation to ensure that the effects of the current mutation finish\r\n *   before this transaction takes control of the CPU. This option defaults to `false`, but `defmutation` causes it to\r\n *   be set to true for any transactions run within mutation action sections. You can affect the default for this value\r\n *   in a dynamic scope by binding `rc/*after-render*` to true\r\n *   - `:parallel?` - Boolean. If true, the mutation(s) in the transaction will NOT go into a network queue, nor\r\n *  will it block later mutations or queries.\r\n * \r\n *   You may add any additional keys to the option map (namespaced is ideal), and any value is legal in the options\r\n *   map, including functions. The options will appear in the `env` of all mutations run in the transaction as\r\n *   `:com.fulcrologic.fulcro.algorithms.tx-processing/options`. This is the preferred way of passing things like\r\n *   lambdas (if you wanted something like a callback) to mutations. Note that mutation symbols are perfectly legal\r\n *   as mutation *arguments*, so chaining mutations can already be done via the normal transaction mechanism, and\r\n *   callbacks, while sometimes necessary/useful, should be limited to usages where there is no other clean way\r\n *   to accomplish the goal.\r\n * \r\n *   NOTE: This function calls the application's `tx!` function (which is configurable). Fulcro 2 'follow-on reads' are\r\n *   supported by the default version and are added to the `:refresh` entries. Your choice of rendering algorithm will\r\n *   influence their necessity.\r\n * \r\n *   Returns the transaction ID of the submitted transaction.\r\n *   \r\n */\r\ncom.fulcrologic.fulcro.components.transact_BANG_ = (function com$fulcrologic$fulcro$components$transact_BANG_(var_args){\r\nvar G__57072 = arguments.length;\r\nswitch (G__57072) {\r\ncase 3:\r\nreturn com.fulcrologic.fulcro.components.transact_BANG_.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\r\n\r\nbreak;\r\ncase 2:\r\nreturn com.fulcrologic.fulcro.components.transact_BANG_.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\r\n\r\nbreak;\r\ndefault:\r\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\r\n\r\n}\r\n});\r\n\r\n(com.fulcrologic.fulcro.components.transact_BANG_.cljs$core$IFn$_invoke$arity$3 = (function (app_or_component,tx,options){\r\nreturn com.fulcrologic.fulcro.raw.components.transact_BANG_.cljs$core$IFn$_invoke$arity$3(app_or_component,tx,options);\r\n}));\r\n\r\n(com.fulcrologic.fulcro.components.transact_BANG_.cljs$core$IFn$_invoke$arity$2 = (function (app_or_comp,tx){\r\nreturn com.fulcrologic.fulcro.raw.components.transact_BANG_.cljs$core$IFn$_invoke$arity$3(app_or_comp,tx,cljs.core.PersistentArrayMap.EMPTY);\r\n}));\r\n\r\n(com.fulcrologic.fulcro.components.transact_BANG_.cljs$lang$maxFixedArity = 3);\r\n\r\n/**\r\n * Shorthand for exactly `(transact! component tx (merge options {:synchronous? true}))`.\r\n * \r\n *   Runs a synchronous transaction, which is an optimized mode where the optimistic behaviors of the mutations in the\r\n *   transaction run on the calling thread, and new props are immediately made available to the calling component via\r\n *   \"props tunneling\" (a behind-the-scenes mechanism using js/setState).\r\n * \r\n *   This mode is meant to be used in form input event handlers, since React is designed to only work properly with\r\n *   raw DOM inputs via component-local state. This prevents things like the cursor jumping to the end of inputs\r\n *   unexpectedly.\r\n * \r\n *   WARNING: Using an `app` instead of a component in synchronous transactions makes no sense. You must pass a component\r\n *   that has an ident.\r\n * \r\n *   If you're using this, you can also set the compiler option:\r\n * \r\n *   ```\r\n *   :compiler-options {:external-config {:fulcro     {:wrap-inputs? false}}}\r\n *   ```\r\n * \r\n *   to turn off Fulcro DOM's generation of wrapped inputs (which try to solve this problem in a less-effective way).\r\n * \r\n *   WARNING: Synchronous rendering does *not* refresh the full UI, only the component.\r\n *   \r\n */\r\ncom.fulcrologic.fulcro.components.transact_BANG__BANG_ = (function com$fulcrologic$fulcro$components$transact_BANG__BANG_(var_args){\r\nvar G__57074 = arguments.length;\r\nswitch (G__57074) {\r\ncase 2:\r\nreturn com.fulcrologic.fulcro.components.transact_BANG__BANG_.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\r\n\r\nbreak;\r\ncase 3:\r\nreturn com.fulcrologic.fulcro.components.transact_BANG__BANG_.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\r\n\r\nbreak;\r\ndefault:\r\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\r\n\r\n}\r\n});\r\n\r\n(com.fulcrologic.fulcro.components.transact_BANG__BANG_.cljs$core$IFn$_invoke$arity$2 = (function (component,tx){\r\nreturn com.fulcrologic.fulcro.raw.components.transact_BANG__BANG_.cljs$core$IFn$_invoke$arity$3(component,tx,cljs.core.PersistentArrayMap.EMPTY);\r\n}));\r\n\r\n(com.fulcrologic.fulcro.components.transact_BANG__BANG_.cljs$core$IFn$_invoke$arity$3 = (function (component,tx,options){\r\nreturn com.fulcrologic.fulcro.raw.components.transact_BANG_.cljs$core$IFn$_invoke$arity$3(component,tx,cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([options,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"synchronous?\",\"synchronous?\",1705588391),true], null)], 0)));\r\n}));\r\n\r\n(com.fulcrologic.fulcro.components.transact_BANG__BANG_.cljs$lang$maxFixedArity = 3);\r\n\r\n/**\r\n * Part of internal implementation of dynamic queries.\r\n */\r\ncom.fulcrologic.fulcro.components.link_element = com.fulcrologic.fulcro.raw.components.link_element;\r\n/**\r\n * Part of internal implementation of dynamic queries.\r\n * \r\n *   Determines if there are query elements in the `query` that need to be normalized. If so, it does so.\r\n * \r\n *   Returns the new state map containing potentially-updated normalized queries.\r\n */\r\ncom.fulcrologic.fulcro.components.normalize_query_elements = com.fulcrologic.fulcro.raw.components.normalize_query_elements;\r\n/**\r\n * Part of dyn query implementation. Find all of the elements (only at the top level) of the given query and replace them\r\n *   with their query ID.\r\n */\r\ncom.fulcrologic.fulcro.components.link_query = com.fulcrologic.fulcro.raw.components.link_query;\r\n/**\r\n * Given a state map and a query, returns a state map with the query normalized into the database. Query fragments\r\n *   that already appear in the state will not be added.  Part of dynamic query implementation.\r\n */\r\ncom.fulcrologic.fulcro.components.normalize_query = com.fulcrologic.fulcro.raw.components.normalize_query;\r\n/**\r\n * Put a query in app state.\r\n * \r\n *   NOTE: Indexes must be rebuilt after setting a query, so this function should primarily be used to build\r\n *   up an initial app state.\r\n */\r\ncom.fulcrologic.fulcro.components.set_query_STAR_ = (function com$fulcrologic$fulcro$components$set_query_STAR_(state_map,class_or_factory,p__57075){\r\nvar map__57076 = p__57075;\r\nvar map__57076__$1 = cljs.core.__destructure_map(map__57076);\r\nvar args = map__57076__$1;\r\nvar query = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__57076__$1,new cljs.core.Keyword(null,\"query\",\"query\",-1288509510));\r\nreturn com.fulcrologic.fulcro.raw.components.set_query_STAR_(state_map,class_or_factory,args);\r\n});\r\n/**\r\n * Public API for setting a dynamic query on a component. This function alters the query and rebuilds internal indexes.\r\n * \r\n *   * `x` : is anything that any->app accepts.\r\n *   * `class-or-factory` : A component class or factory for that class (if using query qualifiers)\r\n *   * `opts` : A map with `query` and optionally `params` (substitutions on queries)\r\n *   \r\n */\r\ncom.fulcrologic.fulcro.components.set_query_BANG_ = (function com$fulcrologic$fulcro$components$set_query_BANG_(x,class_or_factory,p__57077){\r\nvar map__57078 = p__57077;\r\nvar map__57078__$1 = cljs.core.__destructure_map(map__57078);\r\nvar opts = map__57078__$1;\r\nvar query = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__57078__$1,new cljs.core.Keyword(null,\"query\",\"query\",-1288509510));\r\nvar params = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__57078__$1,new cljs.core.Keyword(null,\"params\",\"params\",710516235));\r\nreturn com.fulcrologic.fulcro.raw.components.set_query_BANG_(x,class_or_factory,opts);\r\n});\r\n/**\r\n * Refresh the current dynamic queries in app state to reflect any updates to the static queries of the components.\r\n * \r\n * This can be used at development time to update queries that have changed but that hot code reload does not\r\n * reflect (because there is a current saved query in state). This is *not* always what you want, since a component\r\n * may have a custom query whose prop-level elements are set to a particular thing on purpose.\r\n * \r\n * An component that has `:preserve-dynamic-query? true` in its component options will be ignored by\r\n * this function.\r\n */\r\ncom.fulcrologic.fulcro.components.refresh_dynamic_queries_BANG_ = (function com$fulcrologic$fulcro$components$refresh_dynamic_queries_BANG_(var_args){\r\nvar G__57080 = arguments.length;\r\nswitch (G__57080) {\r\ncase 3:\r\nreturn com.fulcrologic.fulcro.components.refresh_dynamic_queries_BANG_.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\r\n\r\nbreak;\r\ncase 1:\r\nreturn com.fulcrologic.fulcro.components.refresh_dynamic_queries_BANG_.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\r\n\r\nbreak;\r\ndefault:\r\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\r\n\r\n}\r\n});\r\n\r\n(com.fulcrologic.fulcro.components.refresh_dynamic_queries_BANG_.cljs$core$IFn$_invoke$arity$3 = (function (app_ish,cls,force_QMARK_){\r\nreturn com.fulcrologic.fulcro.raw.components.refresh_dynamic_queries_BANG_.cljs$core$IFn$_invoke$arity$3(app_ish,cls,force_QMARK_);\r\n}));\r\n\r\n(com.fulcrologic.fulcro.components.refresh_dynamic_queries_BANG_.cljs$core$IFn$_invoke$arity$1 = (function (app_ish){\r\nreturn com.fulcrologic.fulcro.raw.components.refresh_dynamic_queries_BANG_.cljs$core$IFn$_invoke$arity$1(app_ish);\r\n}));\r\n\r\n(com.fulcrologic.fulcro.components.refresh_dynamic_queries_BANG_.cljs$lang$maxFixedArity = 3);\r\n\r\n/**\r\n * Get all of the indexes from a component instance or app. See also `ident->any`, `class->any`, etc.\r\n */\r\ncom.fulcrologic.fulcro.components.get_indexes = (function com$fulcrologic$fulcro$components$get_indexes(x){\r\nvar app__$1 = com.fulcrologic.fulcro.components.any__GT_app(x);\r\nvar G__57081 = app__$1;\r\nvar G__57081__$1 = (((G__57081 == null))?null:new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"runtime-atom\",\"com.fulcrologic.fulcro.application/runtime-atom\",-1167397772).cljs$core$IFn$_invoke$arity$1(G__57081));\r\nvar G__57081__$2 = (((G__57081__$1 == null))?null:cljs.core.deref(G__57081__$1));\r\nif((G__57081__$2 == null)){\r\nreturn null;\r\n} else {\r\nreturn new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"indexes\",\"com.fulcrologic.fulcro.application/indexes\",-165326938).cljs$core$IFn$_invoke$arity$1(G__57081__$2);\r\n}\r\n});\r\n/**\r\n * Return all on-screen component instances that are rendering the data for a given ident. `x` is anything any->app accepts.\r\n */\r\ncom.fulcrologic.fulcro.components.ident__GT_components = (function com$fulcrologic$fulcro$components$ident__GT_components(x,ident){\r\nvar G__57082 = com.fulcrologic.fulcro.components.get_indexes(x);\r\nvar G__57082__$1 = (((G__57082 == null))?null:new cljs.core.Keyword(null,\"ident->components\",\"ident->components\",-1952169224).cljs$core$IFn$_invoke$arity$1(G__57082));\r\nif((G__57082__$1 == null)){\r\nreturn null;\r\n} else {\r\nreturn cljs.core.get.cljs$core$IFn$_invoke$arity$2(G__57082__$1,ident);\r\n}\r\n});\r\n/**\r\n * Return some (random) on-screen components that uses the given ident. `x` is anything any->app accepts.\r\n */\r\ncom.fulcrologic.fulcro.components.ident__GT_any = (function com$fulcrologic$fulcro$components$ident__GT_any(x,ident){\r\nreturn cljs.core.first(com.fulcrologic.fulcro.components.ident__GT_components(x,ident));\r\n});\r\n/**\r\n * Get all component classes that query for the given prop.\r\n *   `x` can be anything `any->app` is ok with.\r\n * \r\n *   Returns all classes that query for that prop (or ident)\r\n */\r\ncom.fulcrologic.fulcro.components.prop__GT_classes = (function com$fulcrologic$fulcro$components$prop__GT_classes(x,prop){\r\nvar G__57083 = com.fulcrologic.fulcro.components.get_indexes(x);\r\nvar G__57083__$1 = (((G__57083 == null))?null:new cljs.core.Keyword(null,\"prop->classes\",\"prop->classes\",515892717).cljs$core$IFn$_invoke$arity$1(G__57083));\r\nif((G__57083__$1 == null)){\r\nreturn null;\r\n} else {\r\nreturn cljs.core.get.cljs$core$IFn$_invoke$arity$2(G__57083__$1,prop);\r\n}\r\n});\r\n/**\r\n * Get all of the on-screen component instances from the indexes that have the type of the component class.\r\n *   `x` can be anything `any->app` is ok with.\r\n */\r\ncom.fulcrologic.fulcro.components.class__GT_all = (function com$fulcrologic$fulcro$components$class__GT_all(x,class$){\r\nvar k = (com.fulcrologic.fulcro.components.class__GT_registry_key.cljs$core$IFn$_invoke$arity$1 ? com.fulcrologic.fulcro.components.class__GT_registry_key.cljs$core$IFn$_invoke$arity$1(class$) : com.fulcrologic.fulcro.components.class__GT_registry_key.call(null,class$));\r\nvar G__57084 = com.fulcrologic.fulcro.components.get_indexes(x);\r\nvar G__57084__$1 = (((G__57084 == null))?null:new cljs.core.Keyword(null,\"class->components\",\"class->components\",436435919).cljs$core$IFn$_invoke$arity$1(G__57084));\r\nif((G__57084__$1 == null)){\r\nreturn null;\r\n} else {\r\nreturn cljs.core.get.cljs$core$IFn$_invoke$arity$2(G__57084__$1,k);\r\n}\r\n});\r\n/**\r\n * Get a (random) on-screen component instance from the indexes that has type of the given component class.\r\n *   `x` can be anything `any->app` is ok with.\r\n */\r\ncom.fulcrologic.fulcro.components.class__GT_any = (function com$fulcrologic$fulcro$components$class__GT_any(x,cls){\r\nreturn cljs.core.first(com.fulcrologic.fulcro.components.class__GT_all(x,cls));\r\n});\r\n/**\r\n * Returns the current value of the state map via a component instance. Note that it is not safe to render\r\n *   arbitrary data from the state map since Fulcro will have no idea that it should refresh a component that\r\n *   does so; however, it is sometimes useful to look at the state map for information that doesn't\r\n *   change over time.\r\n */\r\ncom.fulcrologic.fulcro.components.component__GT_state_map = (function com$fulcrologic$fulcro$components$component__GT_state_map(this$){\r\nvar G__57085 = this$;\r\nvar G__57085__$1 = (((G__57085 == null))?null:com.fulcrologic.fulcro.components.any__GT_app(G__57085));\r\nvar G__57085__$2 = (((G__57085__$1 == null))?null:new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"state-atom\",\"com.fulcrologic.fulcro.application/state-atom\",648128366).cljs$core$IFn$_invoke$arity$1(G__57085__$1));\r\nif((G__57085__$2 == null)){\r\nreturn null;\r\n} else {\r\nreturn cljs.core.deref(G__57085__$2);\r\n}\r\n});\r\n/**\r\n * Wrap the props middleware such that `f` is called to get extra props that should be placed\r\n *   in the extra-props arg of the component.\r\n * \r\n *   `handler` - (optional) The next item in the props middleware chain.\r\n *   `f` - A (fn [cls extra-props] new-extra-props)\r\n * \r\n *   `f` will be passed the class being rendered and the current map of extra props. It should augment\r\n *   those and return a new version.\r\n */\r\ncom.fulcrologic.fulcro.components.wrap_update_extra_props = (function com$fulcrologic$fulcro$components$wrap_update_extra_props(var_args){\r\nvar G__57087 = arguments.length;\r\nswitch (G__57087) {\r\ncase 1:\r\nreturn com.fulcrologic.fulcro.components.wrap_update_extra_props.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\r\n\r\nbreak;\r\ncase 2:\r\nreturn com.fulcrologic.fulcro.components.wrap_update_extra_props.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\r\n\r\nbreak;\r\ndefault:\r\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\r\n\r\n}\r\n});\r\n\r\n(com.fulcrologic.fulcro.components.wrap_update_extra_props.cljs$core$IFn$_invoke$arity$1 = (function (f){\r\nreturn (function (cls,raw_props){\r\nvar existing = (function (){var or__4253__auto__ = com.fulcrologic.fulcro.components.goog$module$goog$object.get(raw_props,\"fulcro$extra_props\");\r\nif(cljs.core.truth_(or__4253__auto__)){\r\nreturn or__4253__auto__;\r\n} else {\r\nreturn cljs.core.PersistentArrayMap.EMPTY;\r\n}\r\n})();\r\nvar new$ = (f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(cls,existing) : f.call(null,cls,existing));\r\ncom.fulcrologic.fulcro.components.goog$module$goog$object.set(raw_props,\"fulcro$extra_props\",new$);\r\n\r\nreturn raw_props;\r\n});\r\n}));\r\n\r\n(com.fulcrologic.fulcro.components.wrap_update_extra_props.cljs$core$IFn$_invoke$arity$2 = (function (handler,f){\r\nreturn (function (cls,raw_props){\r\nvar existing = (function (){var or__4253__auto__ = com.fulcrologic.fulcro.components.goog$module$goog$object.get(raw_props,\"fulcro$extra_props\");\r\nif(cljs.core.truth_(or__4253__auto__)){\r\nreturn or__4253__auto__;\r\n} else {\r\nreturn cljs.core.PersistentArrayMap.EMPTY;\r\n}\r\n})();\r\nvar new$ = (f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(cls,existing) : f.call(null,cls,existing));\r\ncom.fulcrologic.fulcro.components.goog$module$goog$object.set(raw_props,\"fulcro$extra_props\",new$);\r\n\r\nreturn (handler.cljs$core$IFn$_invoke$arity$2 ? handler.cljs$core$IFn$_invoke$arity$2(cls,raw_props) : handler.call(null,cls,raw_props));\r\n});\r\n}));\r\n\r\n(com.fulcrologic.fulcro.components.wrap_update_extra_props.cljs$lang$maxFixedArity = 2);\r\n\r\n/**\r\n * Wraps children in a React.Fragment. Props are optional, like normal DOM elements.\r\n */\r\ncom.fulcrologic.fulcro.components.fragment = (function com$fulcrologic$fulcro$components$fragment(var_args){\r\nvar args__4870__auto__ = [];\r\nvar len__4864__auto___57285 = arguments.length;\r\nvar i__4865__auto___57286 = (0);\r\nwhile(true){\r\nif((i__4865__auto___57286 < len__4864__auto___57285)){\r\nargs__4870__auto__.push((arguments[i__4865__auto___57286]));\r\n\r\nvar G__57287 = (i__4865__auto___57286 + (1));\r\ni__4865__auto___57286 = G__57287;\r\ncontinue;\r\n} else {\r\n}\r\nbreak;\r\n}\r\n\r\nvar argseq__4871__auto__ = ((((0) < args__4870__auto__.length))?(new cljs.core.IndexedSeq(args__4870__auto__.slice((0)),(0),null)):null);\r\nreturn com.fulcrologic.fulcro.components.fragment.cljs$core$IFn$_invoke$arity$variadic(argseq__4871__auto__);\r\n});\r\n\r\n(com.fulcrologic.fulcro.components.fragment.cljs$core$IFn$_invoke$arity$variadic = (function (args){\r\nvar vec__57089 = ((cljs.core.map_QMARK_(cljs.core.first(args)))?new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.first(args),cljs.core.rest(args)], null):new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [({}),args], null));\r\nvar props = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__57089,(0),null);\r\nvar children = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__57089,(1),null);\r\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$4(module$node_modules$react$index.createElement,module$node_modules$react$index.Fragment,cljs.core.clj__GT_js(props),com.fulcrologic.fulcro.components.force_children(children));\r\n}));\r\n\r\n(com.fulcrologic.fulcro.components.fragment.cljs$lang$maxFixedArity = (0));\r\n\r\n/** @this {Function} */\r\n(com.fulcrologic.fulcro.components.fragment.cljs$lang$applyTo = (function (seq57088){\r\nvar self__4852__auto__ = this;\r\nreturn self__4852__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq57088));\r\n}));\r\n\r\n/**\r\n * \r\n *   DEPRECATED: Generally use `result-action` in mutations to chain sequences instead. This call is equivalent\r\n *   to `transact!` with an `:optimistic? false` option.\r\n * \r\n *   Like `transact!`, but ensures each call completes (in a full-stack, pessimistic manner) before the next call starts\r\n *   in any way. Note that two calls of this function have no guaranteed relationship to each other. They could end up\r\n *   intermingled at runtime. The only guarantee is that for *a single call* to `ptransact!`, the calls in the given tx will run\r\n *   pessimistically (one at a time) in the order given. Follow-on reads in the given transaction will be repeated after each remote\r\n *   interaction.\r\n * \r\n *   `component-or-app` a mounted component or the app\r\n *   `tx` the tx to run\r\n *   `ref` the ident (ref context) in which to run the transaction (including all deferrals)\r\n */\r\ncom.fulcrologic.fulcro.components.ptransact_BANG_ = (function com$fulcrologic$fulcro$components$ptransact_BANG_(var_args){\r\nvar G__57098 = arguments.length;\r\nswitch (G__57098) {\r\ncase 2:\r\nreturn com.fulcrologic.fulcro.components.ptransact_BANG_.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\r\n\r\nbreak;\r\ncase 3:\r\nreturn com.fulcrologic.fulcro.components.ptransact_BANG_.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\r\n\r\nbreak;\r\ndefault:\r\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\r\n\r\n}\r\n});\r\n\r\n(com.fulcrologic.fulcro.components.ptransact_BANG_.cljs$core$IFn$_invoke$arity$2 = (function (component_or_app,tx){\r\nreturn com.fulcrologic.fulcro.components.transact_BANG_.cljs$core$IFn$_invoke$arity$3(component_or_app,tx,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"optimistic?\",\"optimistic?\",1829830869),false], null));\r\n}));\r\n\r\n(com.fulcrologic.fulcro.components.ptransact_BANG_.cljs$core$IFn$_invoke$arity$3 = (function (component_or_app,ref,tx){\r\nreturn com.fulcrologic.fulcro.components.transact_BANG_.cljs$core$IFn$_invoke$arity$3(component_or_app,tx,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"optimistic?\",\"optimistic?\",1829830869),false,new cljs.core.Keyword(null,\"ref\",\"ref\",1289896967),ref], null));\r\n}));\r\n\r\n(com.fulcrologic.fulcro.components.ptransact_BANG_.cljs$lang$maxFixedArity = 3);\r\n\r\n/**\r\n * Identical to `transact!` with `:compressible? true` option. This means that if more than one\r\n *   adjacent history transition edge is compressible, only the more recent of the sequence of them is kept. This\r\n *   is useful for things like form input fields, where storing every keystoke in history is undesirable. This\r\n *   also compress the transactions in Fulcro Inspect.\r\n * \r\n *   NOTE: history events that trigger remote interactions are not compressible, since they may be needed for\r\n *   automatic network error recovery handling.\r\n */\r\ncom.fulcrologic.fulcro.components.compressible_transact_BANG_ = (function com$fulcrologic$fulcro$components$compressible_transact_BANG_(var_args){\r\nvar G__57100 = arguments.length;\r\nswitch (G__57100) {\r\ncase 2:\r\nreturn com.fulcrologic.fulcro.components.compressible_transact_BANG_.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\r\n\r\nbreak;\r\ncase 3:\r\nreturn com.fulcrologic.fulcro.components.compressible_transact_BANG_.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\r\n\r\nbreak;\r\ndefault:\r\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\r\n\r\n}\r\n});\r\n\r\n(com.fulcrologic.fulcro.components.compressible_transact_BANG_.cljs$core$IFn$_invoke$arity$2 = (function (app_ish,tx){\r\nreturn com.fulcrologic.fulcro.raw.components.transact_BANG_.cljs$core$IFn$_invoke$arity$3(app_ish,tx,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"compressible?\",\"compressible?\",153543246),true], null));\r\n}));\r\n\r\n(com.fulcrologic.fulcro.components.compressible_transact_BANG_.cljs$core$IFn$_invoke$arity$3 = (function (app_ish,ref,tx){\r\nreturn com.fulcrologic.fulcro.raw.components.transact_BANG_.cljs$core$IFn$_invoke$arity$3(app_ish,tx,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"compressible?\",\"compressible?\",153543246),true,new cljs.core.Keyword(null,\"ref\",\"ref\",1289896967),ref], null));\r\n}));\r\n\r\n(com.fulcrologic.fulcro.components.compressible_transact_BANG_.cljs$lang$maxFixedArity = 3);\r\n\r\ncom.fulcrologic.fulcro.components.external_config = com.fulcrologic.fulcro.raw.components.external_config;\r\n/**\r\n * Request that the given subtree starting a component be refreshed from the app database without re-rendering any parent. This\r\n *   is a synchronous call that will tunnel the props to the given component via an internal call to React setState.\r\n */\r\ncom.fulcrologic.fulcro.components.refresh_component_BANG_ = (function com$fulcrologic$fulcro$components$refresh_component_BANG_(component){\r\nif(cljs.core.truth_((com.fulcrologic.fulcro.components.component_QMARK_.cljs$core$IFn$_invoke$arity$1 ? com.fulcrologic.fulcro.components.component_QMARK_.cljs$core$IFn$_invoke$arity$1(component) : com.fulcrologic.fulcro.components.component_QMARK_.call(null,component)))){\r\nvar prior_computed = (function (){var or__4253__auto__ = (com.fulcrologic.fulcro.components.get_computed.cljs$core$IFn$_invoke$arity$1 ? com.fulcrologic.fulcro.components.get_computed.cljs$core$IFn$_invoke$arity$1(component) : com.fulcrologic.fulcro.components.get_computed.call(null,component));\r\nif(cljs.core.truth_(or__4253__auto__)){\r\nreturn or__4253__auto__;\r\n} else {\r\nreturn cljs.core.PersistentArrayMap.EMPTY;\r\n}\r\n})();\r\nvar map__57114 = com.fulcrologic.fulcro.components.any__GT_app(component);\r\nvar map__57114__$1 = cljs.core.__destructure_map(map__57114);\r\nvar state_atom = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__57114__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"state-atom\",\"com.fulcrologic.fulcro.application/state-atom\",648128366));\r\nvar runtime_atom = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__57114__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"runtime-atom\",\"com.fulcrologic.fulcro.application/runtime-atom\",-1167397772));\r\nvar state_map = cljs.core.deref(state_atom);\r\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(runtime_atom,cljs.core.update,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"basis-t\",\"com.fulcrologic.fulcro.application/basis-t\",-1038783437),cljs.core.inc);\r\n\r\nvar _STAR_denormalize_time_STAR__orig_val__57115 = com.fulcrologic.fulcro.algorithms.denormalize._STAR_denormalize_time_STAR_;\r\nvar _STAR_denormalize_time_STAR__temp_val__57116 = new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"basis-t\",\"com.fulcrologic.fulcro.application/basis-t\",-1038783437).cljs$core$IFn$_invoke$arity$1(cljs.core.deref(runtime_atom));\r\n(com.fulcrologic.fulcro.algorithms.denormalize._STAR_denormalize_time_STAR_ = _STAR_denormalize_time_STAR__temp_val__57116);\r\n\r\ntry{var ident = (com.fulcrologic.fulcro.components.get_ident.cljs$core$IFn$_invoke$arity$1 ? com.fulcrologic.fulcro.components.get_ident.cljs$core$IFn$_invoke$arity$1(component) : com.fulcrologic.fulcro.components.get_ident.call(null,component));\r\nvar query = com.fulcrologic.fulcro.components.get_query.cljs$core$IFn$_invoke$arity$2(component,state_map);\r\nvar ui_props = (function (){var G__57117 = com.fulcrologic.fulcro.algorithms.denormalize.db__GT_tree(query,cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(state_map,ident),state_map);\r\nvar G__57118 = prior_computed;\r\nreturn (com.fulcrologic.fulcro.components.computed.cljs$core$IFn$_invoke$arity$2 ? com.fulcrologic.fulcro.components.computed.cljs$core$IFn$_invoke$arity$2(G__57117,G__57118) : com.fulcrologic.fulcro.components.computed.call(null,G__57117,G__57118));\r\n})();\r\nreturn com.fulcrologic.fulcro.components.tunnel_props_BANG_(component,ui_props);\r\n}finally {(com.fulcrologic.fulcro.algorithms.denormalize._STAR_denormalize_time_STAR_ = _STAR_denormalize_time_STAR__orig_val__57115);\r\n}} else {\r\nreturn taoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$11(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.components\",null,1518,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay((function (){\r\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"Cannot re-render a non-component. See https://book.fulcrologic.com/#err-comp-cannot-rerender-non-comp\"], null);\r\n}),null)),null,274861388,null);\r\n}\r\n});\r\n/**\r\n * Returns the nth parent of `this` (a React element). The optional `n` can be 0 (the immediate parent) or any positive\r\n *   integer. If this walks past root then this function returns nil.\r\n */\r\ncom.fulcrologic.fulcro.components.get_parent = (function com$fulcrologic$fulcro$components$get_parent(var_args){\r\nvar G__57120 = arguments.length;\r\nswitch (G__57120) {\r\ncase 2:\r\nreturn com.fulcrologic.fulcro.components.get_parent.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\r\n\r\nbreak;\r\ncase 1:\r\nreturn com.fulcrologic.fulcro.components.get_parent.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\r\n\r\nbreak;\r\ndefault:\r\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\r\n\r\n}\r\n});\r\n\r\n(com.fulcrologic.fulcro.components.get_parent.cljs$core$IFn$_invoke$arity$2 = (function (this$,n){\r\nif(com.fulcrologic.fulcro.components.component_instance_QMARK_(this$)){\r\n} else {\r\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2(\"Cannot get parent. First argument is not a component instance.\",new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"arg\",\"arg\",-1747261837),this$], null));\r\n}\r\n\r\nvar element = this$;\r\nvar level = n;\r\nwhile(true){\r\nvar result = (function (){var G__57121 = element;\r\nvar G__57122 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"props\",\"props\",453281727),new cljs.core.Keyword(null,\"fulcro$parent\",\"fulcro$parent\",798142831)], null);\r\nreturn (com.fulcrologic.fulcro.components.isoget_in.cljs$core$IFn$_invoke$arity$2 ? com.fulcrologic.fulcro.components.isoget_in.cljs$core$IFn$_invoke$arity$2(G__57121,G__57122) : com.fulcrologic.fulcro.components.isoget_in.call(null,G__57121,G__57122));\r\n})();\r\nif(cljs.core.truth_((function (){var and__4251__auto__ = result;\r\nif(cljs.core.truth_(and__4251__auto__)){\r\nreturn cljs.core.pos_int_QMARK_(level);\r\n} else {\r\nreturn and__4251__auto__;\r\n}\r\n})())){\r\nvar G__57308 = result;\r\nvar G__57309 = (level - (1));\r\nelement = G__57308;\r\nlevel = G__57309;\r\ncontinue;\r\n} else {\r\nreturn result;\r\n}\r\nbreak;\r\n}\r\n}));\r\n\r\n(com.fulcrologic.fulcro.components.get_parent.cljs$core$IFn$_invoke$arity$1 = (function (this$){\r\nreturn com.fulcrologic.fulcro.components.get_parent.cljs$core$IFn$_invoke$arity$2(this$,(0));\r\n}));\r\n\r\n(com.fulcrologic.fulcro.components.get_parent.cljs$lang$maxFixedArity = 2);\r\n\r\n/**\r\n * Walks the complete list of components in the component registry and looks for problems. Used during dev mode to\r\n * detect common problems that can cause runtime misbehavior.\r\n */\r\ncom.fulcrologic.fulcro.components.check_component_registry_BANG_ = com.fulcrologic.fulcro.raw.components.check_component_registry_BANG_;\r\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","com/fulcrologic/fulcro/components.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",38],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$clojure.spec.alpha","~$cljs.spec.alpha","~$clojure.core.async","~$cljs.core.async","~$clojure.pprint","~$cljs.pprint"],"~:use-macros",["^ ","~$>def","~$com.fulcrologic.guardrails.core"],"~:excludes",["~#set",[]],"~:macros",["^ ","~$defsc",["^ ","~:doc","Define a stateful component. This macro emits a React UI class with a query,\n   optional ident (if :ident is specified in options), optional initial state, optional css, lifecycle methods,\n   and a render method. It can also cause the class to implement additional protocols that you specify. Destructuring is\n   supported in the argument list.\n\n   The template (data-only) versions do not have any arguments in scope\n   The lambda versions have arguments in scope that make sense for those lambdas, as listed below:\n\n   ```\n   (defsc Component [this {:keys [db/id x] :as props} {:keys [onSelect] :as computed} extended-args]\n     {\n      ;; stateful component options\n      ;; query template is literal. Use the lambda if you have ident-joins or unions.\n      :query [:db/id :x] ; OR (fn [] [:db/id :x]) ; this in scope\n      ;; ident template is table name and ID property name\n      :ident [:table/by-id :id] ; OR (fn [] [:table/by-id id]) ; this and props in scope\n      ;; initial-state template is magic..see dev guide. Lambda version is normal.\n      :initial-state {:x :param/x} ; OR (fn [params] {:x (:x params)}) ; nothing is in scope\n      ;; pre-merge, use a lamba to modify new merged data with component needs\n      :pre-merge (fn [{:keys [data-tree current-normalized state-map query]}] (merge {:ui/default-value :start} data-tree))\n\n      ; React Lifecycle Methods (for the default, class-based components)\n      :initLocalState            (fn [this props] ...) ; CAN BE used to call things as you might in a constructor. Return value is initial state.\n      :shouldComponentUpdate     (fn [this next-props next-state] ...)\n\n      :componentDidUpdate        (fn [this prev-props prev-state snapshot] ...) ; snapshot is optional, and is 16+. Is context for 15\n      :componentDidMount         (fn [this] ...)\n      :componentWillUnmount      (fn [this] ...)\n\n      ;; DEPRECATED IN REACT 16 (to be removed in 17):\n      :componentWillReceiveProps        (fn [this next-props] ...)\n      :componentWillUpdate              (fn [this next-props next-state] ...)\n      :componentWillMount               (fn [this] ...)\n\n      ;; Replacements for deprecated methods in React 16.3+\n      :UNSAFE_componentWillReceiveProps (fn [this next-props] ...)\n      :UNSAFE_componentWillUpdate       (fn [this next-props next-state] ...)\n      :UNSAFE_componentWillMount        (fn [this] ...)\n\n      ;; ADDED for React 16:\n      :componentDidCatch         (fn [this error info] ...)\n      :getSnapshotBeforeUpdate   (fn [this prevProps prevState] ...)\n\n      ;; static.\n      :getDerivedStateFromProps  (fn [props state] ...)\n\n      ;; ADDED for React 16.6:\n      ;; NOTE: The state returned from this function can either be:\n      ;; a raw js map, where Fulcro's state is in a sub-key: `#js {\"fulcro$state\" {:fulcro :state}}`.\n      ;; or a clj map. In either case this function will *overwrite* Fulcro's component-local state, which is\n      ;; slighly different behavior than raw React (we have no `this`, so we cannot read Fulcro's state to merge it).\n      :getDerivedStateFromError  (fn [error] ...)\n\n      NOTE: shouldComponentUpdate should generally not be overridden other than to force it false so\n      that other libraries can control the sub-dom. If you do want to implement it, then old props can\n      be obtained from (prim/props this), and old state via (gobj/get (. this -state) \"fulcro$state\").\n      \n      ; React Hooks support\n      ;; if true, creates a function-based instead of a class-based component, see the Developer's Guide for details\n      :use-hooks? true\n\n      ; BODY forms. May be omitted IFF there is an options map, in order to generate a component that is used only for queries/normalization.\n      (dom/div #js {:onClick onSelect} x))\n   ```\n\n   NOTE: The options map is \"open\". That is: you can add whatever extra stuff you want to in order\n   to co-locate data for component-related concerns. This is exactly what component-local css, the\n   dynamic router, and form-state do.  The data that you add is available from `comp/component-options`\n   on the component class and instances (i.e. `this`).\n\n   See the Developer's Guide at book.fulcrologic.com for more details.\n   ","~:arglists",["~#list",[["~$&","~$args"]]],"^7",1419,"^8",4,"^6","com/fulcrologic/fulcro/components.cljc","~:name","~$com.fulcrologic.fulcro.components/defsc","~:ns","~$com.fulcrologic.fulcro.components","~:macro",true],"~$with-parent-context",["^ ","^L",["^M",[["~$outer-parent","~$&","~$body"]]],"^K","Wraps the given body with the correct internal bindings of the parent so that Fulcro internals\n     will work when that body is embedded in unusual ways (e.g. as the body in a child-as-a-function\n     React pattern).\n\n     ```\n     (defsc X [this props]\n       ...\n       ;; WRONG:\n       (some-react-thing {:child (fn [] (ui-fulcro-thing ...))})\n       ;; CORRECT:\n       (some-react-thing {:child (fn [] (with-parent-context this (ui-fulcro-thing ...)))})\n     ```\n     ","^7",1020,"^8",4,"^6","com/fulcrologic/fulcro/components.cljc","^O","~$com.fulcrologic.fulcro.components/with-parent-context","^Q","^R","^S",true]],"^O","^R","~:reader-aliases",["^ "],"~:js-aliases",["^ ","react","~$module$node_modules$react$index"],"~:op","^Q","~:imports",null,"~:requires",["^ ","~$ah","~$com.fulcrologic.fulcro.algorithms.lookup","~$set","~$clojure.set","~$edn-query-language.core","^17","^>","^?","^F","^F","~$log","~$taoensso.timbre","~$eql","^17","~$com.fulcrologic.fulcro.algorithms.denormalize","^1;","~$react","^[","~$cljs.core","^1=","~$rc","~$com.fulcrologic.fulcro.raw.components","^[","^[","~$gobj","~$goog.object","~$goog","^1B","^1A","^1A","^16","^16","~$util","~$com.fulcrologic.fulcro.algorithms.do-not-use","~$s","^?","^14","^14","^19","^19","^1?","^1?","~$str","~$clojure.string","^1F","^1F","^?","^?","~$fdn","^1;","~$clojure.walk","^1H","^1D","^1D"],"~:seen",["^H",["~:require","~:require-macros"]],"~:uses",["^ ","~$prewalk","^1H","^E","^F"],"^1K",["^ ","^R","^R","^1=","^1=","^>","^?","^F","^F","^18","^19","~$s","^?","^19","^19","^?","^?"],"~:form",["^M",["~$ns","^R",["^M",["^1K","^R"]],["^M",["^1J",["^1A","~:as","^1@"],["react","^1P","^1<"],["^17","^1P","^1:"],["^>","^1P","~$s"],["^19","^1P","^18"],["^1H","~:refer",["^1M"]],["^1F","^1P","^1E"],["^1D","^1P","^1C"],["^1;","^1P","^1G"],["^14","^1P","^13"],["^1?","^1P","^1>"],["^F","^1Q",["^E"]],["^16","^1P","^15"]]]]],"~:flags",["^ ","^1K",["^H",[]],"^1J",["^H",[]]],"~:js-deps",["^ ","^Z",["^ ","^1P","^1<"]],"~:deps",["^1B","^1=","^1A","^[","^17","^?","^19","^1H","^1F","^1D","^1;","^14","^1?","^F","^16"]],"^Q","^R","~:resource-id",["~:shadow.build.classpath/resource","com/fulcrologic/fulcro/components.cljc"],"~:compiled-at",1676259841250,"^X",["^ ","^13","^14","^15","^16","^17","^17","^>","^?","^F","^F","^18","^19","^1:","^17","^1;","^1;","^1<","^[","^1=","^1=","^1>","^1?","^[","^[","^1@","^1A","^1B","^1B","^1A","^1A","^16","^16","^1C","^1D","~$s","^?","^14","^14","^R","^R","^19","^19","^1?","^1?","^1E","^1F","^1F","^1F","^?","^?","^1G","^1;","^1H","^1H","^1D","^1D"],"~:resource-name","com/fulcrologic/fulcro/components.cljc","~:warnings",[],"~:source","(ns com.fulcrologic.fulcro.components\n  #?(:cljs (:require-macros com.fulcrologic.fulcro.components))\n  (:require\n    #?@(:clj\n        [[cljs.analyzer :as ana]\n         [cljs.env :as cljs-env]]\n        :cljs\n        [[goog.object :as gobj]\n         [\"react\" :as react]])\n    [edn-query-language.core :as eql]\n    [clojure.spec.alpha :as s]\n    [taoensso.timbre :as log]\n    [clojure.walk :refer [prewalk]]\n    [clojure.string :as str]\n    [com.fulcrologic.fulcro.algorithms.do-not-use :as util]\n    [com.fulcrologic.fulcro.algorithms.denormalize :as fdn]\n    [com.fulcrologic.fulcro.algorithms.lookup :as ah]\n    [com.fulcrologic.fulcro.raw.components :as rc]\n    [com.fulcrologic.guardrails.core :refer [>def]]\n    [clojure.set :as set])\n  #?(:clj\n     (:import\n       [clojure.lang Associative IDeref APersistentMap])))\n\n#?(:clj\n   (defn current-config []\n     (let [config (some-> cljs-env/*compiler* deref (get-in [:options :external-config :fulcro]))]\n       config)))\n\n;; Bound during Fulcro-driven renders to communicate critical information to components *on their initial render*.\n;; Due to the nature of js and React there is no guarantee that future `render` (or lifecycle calls) will actually be done synchronously,\n;; so these are *copied* into the raw react props of the component for future reference (a mounted component won't change\n;; depth, will know its parent, and the app is a immutable map with atoms). You must ensure these are bound using\n;; `with-parent-context` if you cause an initial mount of a component via things like the child-as-a-function, or HOC patterns.\n;; If a raw js library wants a Fulcro component (class), then you may need to use the multiple-roots renderer so that\n;; it can register on mount with Fulcro.\n(def ^:dynamic *app* nil)\n(def ^:dynamic *parent* nil)\n(def ^:dynamic *depth* nil)\n(def ^:dynamic *shared* nil)\n\n;; Used by default shouldComponentUpdate. If set to `true`, then SCU will return true. This is used by hot code reload\n;; to know when it should re-render even if props have not changed so you can see the effects of rendering code changes.\n;; Also used when you force a root render.\n(def ^:dynamic *blindly-render* false)\n\n(def isoget-in\n  \"\n  [obj kvs]\n  [obj kvs default]\n\n  Like get-in, but for js objects, and in CLJC. In clj, it is just get-in. In cljs it is\n  gobj/getValueByKeys.\"\n  rc/isoget-in)\n\n(def isoget\n  \"\n  [obj k]\n  [obj k default]\n\n  Like get, but for js objects, and in CLJC. In clj, it is just `get`. In cljs it is\n  `gobj/get`.\"\n  rc/isoget)\n\n(def register-component!\n  \"\n  [k component-class]\n\n  Add a component to Fulcro's component registry.  This is used by defsc to ensure that all Fulcro classes\n  that have been compiled (transitively required) will be accessible for lookup by fully-qualified symbol/keyword.\n  Not meant for public use, unless you're creating your own component macro that doesn't directly leverage defsc.\"\n  rc/register-component!)\n\n(defn force-children\n  \"Utility function that will force a lazy sequence of children (recursively) into realized\n  vectors (React cannot deal with lazy seqs in production mode)\"\n  [x]\n  (cond->> x\n    (seq? x) (into [] (map force-children))))\n\n(def newer-props\n  \"\n  [props-a props-b]\n\n  Returns whichever of the given Fulcro props were most recently generated according to `denormalization-time`. This\n  is part of props 'tunnelling', an optimization to get updated props to instances without going through the root.\"\n  rc/newer-props)\n\n(defn component-instance?\n  \"[x]\n\n   Returns true if the argument is a component. A component is defined as a *mounted component*.\n   This function returns false for component classes, and also returns false for the output of a Fulcro component factory.\"\n  #?(:cljs {:tag boolean})\n  [x]\n  (rc/component-instance? x))\n\n(def component?\n  \"[x]\n\n   Returns true if the argument is a component instance.\n\n   DEPRECATED for terminology clarity. Use `component-instance?` instead.\"\n  component-instance?)\n\n(defn component-class?\n  \"Returns true if the argument is a component class.\"\n  #?(:cljs {:tag boolean})\n  [x]\n  (rc/component-class? x))\n\n(>def ::component-class component-class?)\n\n(def component-name\n  \"[class]\n\n   Returns a string version of the given react component's name. Works on component instances and classes.\"\n  rc/component-name)\n\n(def class->registry-key\n  \"[class]\n\n   Returns the registry key for the given component class.\"\n  rc/class->registry-key)\n\n(def registry-key->class\n  \"[classname]\n\n  Look up the given component in Fulcro's global component registry. Will only be able to find components that have\n  been (transitively) required by your application.\n\n  `classname` can be a fully-qualified keyword or symbol.\"\n  rc/registry-key->class)\n\n(def computed\n  \"\n  [props computed-map]\n\n  Add computed properties to props. This will *replace* any pre-existing computed properties. Computed props are\n  necessary when a parent component wishes to pass callbacks or other data to children that *have a query*. This\n  is not necessary for \\\"stateless\\\" components, though it will work properly for both.\n\n  Computed props are \\\"remembered\\\" so that a targeted update (which can only happen on a component with a query\n  and ident) can use new props from the database without \\\"losing\\\" the computed props that were originally passed\n  from the parent. If you pass things like callbacks through normal props, then targeted updates will seem to \\\"lose\n  track of\\\" them.\n  \"\n  rc/computed)\n\n(def get-computed\n  \"[this-or-props]\n   [this-or-props k-or-ks]\n\n   Return the computed properties on a component or its props. Note that it requires that the normal properties are not nil.\"\n  rc/get-computed)\n\n(defn get-extra-props\n  \"Get any data (as a map) that props extensions have associated with the given Fulcro component. Extra props will\n  be empty unless you've installed props-middleware (on your app) that sets them.\"\n  [this]\n  (isoget-in this [:props :fulcro$extra_props] {}))\n\n(def props\n  \"[this]\n\n   Return a component's props.\"\n  rc/props)\n\n(defn children\n  \"[this]\n\n   Get the sequence of react children of the given component.\"\n  [component]\n  (let [cs #?(:clj (get-in component [:children])\n              :cljs (gobj/getValueByKeys component \"props\" \"children\"))]\n    (if (or (coll? cs) #?(:cljs (array? cs))) cs [cs])))\n\n(defn react-type\n  \"Returns the component type, regardless of whether the component has been\n   mounted\"\n  [x]\n  (rc/component-type x))\n\n(def get-class\n  \"[instance]\n\n   Returns the react type (component class) of the given React element (instance). Is identity if used on a class.\"\n  rc/get-class)\n\n(def component-options\n  \"[component & ks]\n\n   Returns the map of options that was specified (via `defsc`) for the component class.\"\n  rc/component-options)\n\n(defn has-feature?\n  \"Returns true if the component has `option-key` declared in the component options map.\"\n  #?(:cljs {:tag boolean}) [component option-key]\n  (contains? (component-options component) option-key))\n(defn has-initial-app-state?\n  \"Returns true if the component has initial app state.\"\n  #?(:cljs {:tag boolean}) [component]\n  (has-feature? component :initial-state))\n(defn has-ident?\n  \"Returns true if the component has an ident\"\n  #?(:cljs {:tag boolean}) [component] (has-feature? component :ident))\n(defn has-query?\n  \"Returns true if the component has a query\"\n  #?(:cljs {:tag boolean}) [component] (has-feature? component :query))\n(defn has-pre-merge?\n  \"Returns true if the component has a pre-merge\"\n  #?(:cljs {:tag boolean}) [component] (has-feature? component :pre-merge))\n(defn ident\n  \"Returns the ident that would be generated by the given component instance or class IF it was supplied props\"\n  [this props] (when (has-feature? this :ident) ((component-options this :ident) this props)))\n(defn query\n  \"Returns the STATIC query of the fgiven component\"\n  [this] (when (has-feature? this :query) ((component-options this :query) this)))\n(defn initial-state\n  \"Returns the initial state of component clz if it was passed the given params\"\n  [clz params] (when (has-feature? clz :initial-state) ((component-options clz :initial-state) params)))\n(defn pre-merge [this data] (when (has-feature? this :pre-merge) ((component-options this :pre-merge) data)))\n(defn depth [this] (isoget-in this [:props :fulcro$depth]))\n\n(defn get-raw-react-prop\n  \"GET a RAW react prop. Used internally. Safe in CLJC, but equivalent to `(gobj/getValueByKeys this \\\"props\\\" (name k)`.\"\n  [c k]\n  (isoget-in c [:props k]))\n\n(defn any->app\n  \"Attempt to coerce `x` to an app.  Legal inputs are a fulcro application, a mounted component,\n  or an atom holding any of the above.\"\n  [x]\n  (rc/any->app x))\n\n(defn raw->newest-props\n  \"Using raw react props/state returns the newest Fulcro props. This is part of \\\"props tunneling\\\", where component\n  local state is leveraged as a communication mechanism of updated props directly to a component that has an ident.\n  This function will return the correct version of props based on timestamps.\"\n  [raw-props raw-state]\n  #?(:clj  raw-props\n     :cljs (let [next-props (gobj/get raw-props \"fulcro$value\")\n                 opt-props  (gobj/get raw-state \"fulcro$value\")]\n             (newer-props next-props opt-props))))\n\n(defn shared\n  \"Return the global shared properties of the root. See :shared and\n   :shared-fn app options. NOTE: Shared props only update on root render and by explicit calls to\n   `app/update-shared!`.\n\n   This function attempts to rely on the dynamic var *shared* (first), but will make a best-effort of\n   finding shared props when run within a component's render or lifecycle. Passing your app will\n   ensure this returns the current shared props.\"\n  ([] *shared*)\n  ([comp-or-app]\n   (shared comp-or-app []))\n  ([comp-or-app k-or-ks]\n   (let [shared (or *shared* (some-> (any->app comp-or-app) :com.fulcrologic.fulcro.application/runtime-atom deref :com.fulcrologic.fulcro.application/shared-props))\n         ks     (cond-> k-or-ks\n                  (not (sequential? k-or-ks)) vector)]\n     (cond-> shared\n       (not (empty? ks)) (get-in ks)))))\n\n(letfn\n  [(wrap-props-state-handler\n     ([handler]\n      (wrap-props-state-handler handler true))\n     ([handler check-for-fresh-props-in-state?]\n      #?(:clj (fn [& args] (apply handler args))\n         :cljs\n              (fn [raw-props raw-state]\n                (this-as this\n                  (let [props (if check-for-fresh-props-in-state?\n                                (raw->newest-props raw-props raw-state)\n                                (gobj/get raw-props \"fulcro$props\"))\n                        state (gobj/get raw-state \"fulcro$state\")]\n                    (handler this props state)))))))\n   (static-wrap-props-state-handler\n     [handler]\n     #?(:clj (fn [& args] (apply handler args))\n        :cljs\n        (fn [raw-props raw-state]\n          (let [props (raw->newest-props raw-props raw-state)\n                state (gobj/get raw-state \"fulcro$state\")]\n            (handler props state)))))\n   (should-component-update?\n     [raw-next-props raw-next-state]\n     #?(:clj true\n        :cljs (if *blindly-render*\n                true\n                (this-as this\n                  (let [current-props     (props this)\n                        next-props        (raw->newest-props raw-next-props raw-next-state)\n                        next-state        (gobj/get raw-next-state \"fulcro$state\")\n                        current-state     (gobj/getValueByKeys this \"state\" \"fulcro$state\")\n                        props-changed?    (not= current-props next-props)\n                        state-changed?    (not= current-state next-state)\n                        next-children     (gobj/get raw-next-props \"children\")\n                        children-changed? (not= (gobj/getValueByKeys this \"props\" \"children\") next-children)]\n                    (or props-changed? state-changed? children-changed?))))))\n   (component-did-update\n     [raw-prev-props raw-prev-state snapshot]\n     #?(:cljs\n        (this-as this\n          (let [{:keys [ident componentDidUpdate]} (component-options this)\n                prev-state (gobj/get raw-prev-state \"fulcro$state\")\n                prev-props (raw->newest-props raw-prev-props raw-prev-state)]\n            (when componentDidUpdate\n              (componentDidUpdate this prev-props prev-state snapshot))\n            (when ident\n              (let [old-ident        (ident this prev-props)\n                    next-ident       (ident this (props this))\n                    app              (any->app this)\n                    drop-component!  (ah/app-algorithm app :drop-component!)\n                    index-component! (ah/app-algorithm app :index-component!)]\n                (when (not= old-ident next-ident)\n                  (drop-component! this old-ident)\n                  (index-component! this))))))))\n   (component-did-mount\n     []\n     #?(:cljs\n        (this-as this\n          (gobj/set this \"fulcro$mounted\" true)\n          (let [{:keys [componentDidMount]} (component-options this)\n                app              (any->app this)\n                index-component! (ah/app-algorithm app :index-component!)]\n            (index-component! this)\n            (when componentDidMount\n              (componentDidMount this))))))\n   (component-will-unmount []\n     #?(:cljs\n        (this-as this\n          (let [{:keys [componentWillUnmount]} (component-options this)\n                app             (any->app this)\n                drop-component! (ah/app-algorithm app :drop-component!)]\n            (when componentWillUnmount\n              (componentWillUnmount this))\n            (gobj/set this \"fulcro$mounted\" false)\n            (drop-component! this)))))\n   (wrap-this\n     [handler]\n     #?(:clj (fn [& args] (apply handler args))\n        :cljs\n        (fn [& args] (this-as this (apply handler this args)))))\n   (wrap-props-handler\n     ([handler]\n      (wrap-props-handler handler true))\n     ([handler check-for-fresh-props-in-state?]\n      #?(:clj #(handler %1)\n         :cljs\n              (fn [raw-props]\n                (this-as this\n                  (let [raw-state (.-state this)\n                        props     (if check-for-fresh-props-in-state?\n                                    (raw->newest-props raw-props raw-state)\n                                    (gobj/get raw-props \"fulcro$props\"))]\n                    (handler this props)))))))\n\n   (wrap-base-render [render]\n     #?(:clj (fn [& args]\n               (binding [*parent* (first args)]\n                 (apply render args)))\n        :cljs\n        (fn [& args]\n          (this-as this\n            (if-let [app (any->app this)]\n              (binding [*app*    app\n                        *depth*  (inc (depth this))\n                        *shared* (shared this)\n                        *parent* this]\n                (apply render this args))\n              (log/fatal \"Cannot find app on component!\"))))))]\n\n  (defn configure-component!\n    \"Configure the given `cls` (a function) to act as a react component within the Fulcro ecosystem.\n\n    cls - A js function (in clj, this is ignored)\n    fqkw - A keyword that shares the exact fully-qualified name of the component class\n    options - A component options map (no magic) containing things like `:query` and `:ident`.\n\n\n    NOTE: the `options` map expects proper function signatures for:\n\n    `:query` - (fn [this] ...)\n    `:ident` - (fn [this props] ...)\n    `:initial-state` - (fn [cls params] ...)\n\n    Returns (and registers) a new react class.\n    \"\n    [cls fqkw options]\n    #?(:clj\n       (let [name   (str/join \"/\" [(namespace fqkw) (name fqkw)])\n             {:keys [render]} options\n             result {::component-class?  true\n                     :fulcro$options     (assoc options :render (wrap-base-render render))\n                     :fulcro$registryKey fqkw\n                     :displayName        name}]\n         (register-component! fqkw result)\n         result)\n       :cljs\n       ;; This user-supplied versions will expect `this` as first arg\n       (let [{:keys [getDerivedStateFromProps shouldComponentUpdate getSnapshotBeforeUpdate render\n                     initLocalState componentDidCatch getDerivedStateFromError\n                     componentWillUpdate componentWillMount componentWillReceiveProps\n                     UNSAFE_componentWillMount UNSAFE_componentWillUpdate UNSAFE_componentWillReceiveProps]} options\n             name              (str/join \"/\" [(namespace fqkw) (name fqkw)])\n             js-instance-props (clj->js\n                                 (-> {:componentDidMount     component-did-mount\n                                      :componentWillUnmount  component-will-unmount\n                                      :componentDidUpdate    component-did-update\n                                      :shouldComponentUpdate (if shouldComponentUpdate\n                                                               (wrap-props-state-handler shouldComponentUpdate)\n                                                               should-component-update?)\n                                      :fulcro$isComponent    true\n                                      :type                  cls\n                                      :displayName           name}\n                                   (cond->\n                                     render (assoc :render (wrap-base-render render))\n                                     getSnapshotBeforeUpdate (assoc :getSnapshotBeforeUpdate (wrap-props-state-handler getSnapshotBeforeUpdate))\n                                     componentDidCatch (assoc :componentDidCatch (wrap-this componentDidCatch))\n                                     UNSAFE_componentWillMount (assoc :UNSAFE_componentWillMount (wrap-this UNSAFE_componentWillMount))\n                                     UNSAFE_componentWillUpdate (assoc :UNSAFE_componentWillUpdate (wrap-props-state-handler UNSAFE_componentWillUpdate))\n                                     UNSAFE_componentWillReceiveProps (assoc :UNSAFE_componentWillReceiveProps (wrap-props-handler UNSAFE_componentWillReceiveProps))\n                                     componentWillMount (assoc :componentWillMount (wrap-this componentWillMount))\n                                     componentWillUpdate (assoc :componentWillUpdate (wrap-this componentWillUpdate))\n                                     componentWillReceiveProps (assoc :componentWillReceiveProps (wrap-props-handler componentWillReceiveProps))\n                                     initLocalState (assoc :initLocalState (wrap-this initLocalState)))))\n             statics           (cond-> {:displayName            name\n                                        :fulcro$class           cls\n                                        :cljs$lang$type         true\n                                        :cljs$lang$ctorStr      name\n                                        :cljs$lang$ctorPrWriter (fn [_ writer _] (cljs.core/-write writer name))}\n                                 getDerivedStateFromError (assoc :getDerivedStateFromError (fn [error]\n                                                                                             (let [v (getDerivedStateFromError error)]\n                                                                                               (if (coll? v)\n                                                                                                 #js {\"fulcro$state\" v}\n                                                                                                 v))))\n                                 getDerivedStateFromProps (assoc :getDerivedStateFromProps (static-wrap-props-state-handler getDerivedStateFromProps)))]\n         (gobj/extend (.-prototype cls) (.-prototype react/Component) js-instance-props\n           #js {\"fulcro$options\" options})\n         (gobj/extend cls (clj->js statics) #js {\"fulcro$options\" options})\n         (gobj/set cls \"fulcro$registryKey\" fqkw)           ; done here instead of in extend (clj->js screws it up)\n         (register-component! fqkw cls)))))\n\n(defn add-hook-options!\n  \"Make a given `cls` (a plain fn) act like a a Fulcro component with the given component options map. Registers the\n  new component in the component-registry. Component options MUST contain :componentName as be a fully-qualified\n  keyword to name the component in the registry.\n\n  component-options *must* include a unique `:componentName` (keyword) that will be used for registering the given\n  function as the faux class in the component registry.\"\n  [render-fn component-options]\n  (rc/configure-anonymous-component! render-fn component-options))\n\n(defn use-fulcro\n  \"Allows you to use a plain function as a Fulcro-managed React hooks component.\n\n  * `js-props` - The React js props from the parent.\n  * `faux-class` - A Fulcro faux class, which is a fn that has had `add-options!` called on it.\n\n  Returns a cljs vector containing `this` and fulcro `props`. You should *not* use the returned `this` directly,\n  as it is a placeholder.\n\n  Prefer `defsc` or `configure-hooks-component! over using this directly.`\n  \"\n  [js-props faux-class]\n  #?(:cljs\n     (let [app                     (isoget js-props :fulcro$app)\n           tunnelled-props-state   (react/useState #js {})\n           js-set-tunnelled-props! (aget tunnelled-props-state 1)\n           {:keys [ident] :as options} (isoget faux-class :fulcro$options)\n           faux-component-state    (react/useState (fn []\n                                                        (when-not app\n                                                          (log/error \"Cannot create proper fulcro component, as *app* isn't bound.\"\n                                                            \"This happens when something renders a Fulcro component outside of Fulcro's render context.\"\n                                                            \"See `with-parent-context`.\"\n                                                            \"See https://book.fulcrologic.com/#err-comp-app-not-bound\"))\n                                                        (let [depth                (or *depth* (isoget js-props :fulcro$depth))\n                                                              set-tunnelled-props! (fn [updater] (let [new-props (updater nil)] (js-set-tunnelled-props! new-props)))]\n                                                          #js {:setState           set-tunnelled-props!\n                                                               :fulcro$isComponent true\n                                                               :fulcro$class       faux-class\n                                                               :type               faux-class\n                                                               :fulcro$options     options\n                                                               :fulcro$mounted     false\n                                                               :props              #js {:fulcro$app   app\n                                                                                        :fulcro$depth (inc depth)}})))\n           faux-component          (aget faux-component-state 0)\n           current-state           (aget tunnelled-props-state 0 \"fulcro$value\")\n           props                   (isoget js-props :fulcro$value)\n           children                (isoget js-props :children)\n           current-props           (newer-props props current-state)\n           current-ident           (when ident (ident faux-class current-props))\n           shared-props            (when app (shared app))]\n       (doto (gobj/get faux-component \"props\")\n         (gobj/set \"fulcro$shared\" shared-props)\n         (gobj/set \"fulcro$value\" current-props)\n         (gobj/set \"children\" children))\n       (react/useEffect\n         (fn []\n           (let [original-ident   current-ident\n                 index-component! (ah/app-algorithm app :index-component!)\n                 drop-component!  (ah/app-algorithm app :drop-component!)]\n             (gobj/set faux-component \"fulcro$mounted\" true)\n             (index-component! faux-component)\n             (fn []\n               (gobj/set faux-component \"fulcro$mounted\" false)\n               (drop-component! faux-component original-ident))))\n         #?(:cljs #js [(second current-ident)]))\n       [faux-component current-props])))\n\n(defn mounted?\n  \"Returns true if the given component instance is mounted on the DOM.\"\n  [this]\n  #?(:clj  false\n     :cljs (gobj/get this \"fulcro$mounted\" false)))\n\n(defn set-state!\n  \"Set React component-local state.  The `new-state` is actually merged with the existing state (as per React docs),\n  but is wrapped so that cljs maps are used (instead of js objs).  `callback` is an optional callback that will be\n  called as per the React docs on setState.\"\n  ([component new-state callback]\n   #?(:clj\n      (when-let [state-atom (:state component)]\n        (swap! state-atom update merge new-state)\n        (callback))\n      :cljs\n      (if (mounted? component)\n        (.setState ^js component\n          (fn [prev-state props]\n            #js {\"fulcro$state\" (merge (gobj/get prev-state \"fulcro$state\") new-state)})\n          callback))))\n  ([component new-state]\n   (set-state! component new-state nil)))\n\n(defn get-state\n  \"Get a component's local state. May provide a single key or a sequential\n   collection of keys for indexed access into the component's local state. NOTE: This is Fulcro's wrapped component\n   local state. The low-level React state is as described in the React docs (e.g. `(.-state this)`).\"\n  ([component]\n   (get-state component []))\n  ([component k-or-ks]\n   (let [cst #?(:clj (some-> component :state deref)\n                :cljs (gobj/getValueByKeys component \"state\" \"fulcro$state\"))]\n     (get-in cst (if (sequential? k-or-ks) k-or-ks [k-or-ks])))))\n\n(let [update-fn (fn [component f args]\n                  #?(:cljs (.setState ^js component\n                             (fn [prev-state props]\n                               #js {\"fulcro$state\" (apply f (gobj/get prev-state \"fulcro$state\") args)}))))]\n  (defn update-state!\n    \"Update a component's local state. Similar to Clojure(Script)'s swap!\n\n    This function affects a managed cljs map maintained in React state.  If you want to affect the low-level\n    js state itself use React's own `.setState` directly on the component.\"\n    ([component f]\n     (update-fn component f []))\n    ([component f & args]\n     (update-fn component f args))))\n\n(def get-initial-state\n  \"\n  [cls] [cls params]\n\n  Get the declared :initial-state value for a component.\"\n  rc/get-initial-state)\n\n(defn computed-initial-state?\n  \"Returns true if the given initial state was returned from a call to get-initial-state. This is used by internal\n  algorithms when interpreting initial state shorthand in `defsc`.\"\n  [s]\n  (and (map? s) (some-> s meta :computed)))\n\n(def get-ident\n  \"\n  [x] [class props]\n\n  Get the ident for a mounted component OR using a component class.\n\n  That arity-2 will return the ident using the supplied props map.\n\n  The single-arity version should only be used with a mounted component (e.g. `this` from `render`), and will derive the\n  props that were sent to it most recently.\"\n  rc/get-ident)\n\n(defn tunnel-props!\n  \"CLJS-only.  When the `component` is mounted this will tunnel `new-props` to that component through React `setState`. If you're in\n  an event handler, this means the tunnelling will be synchronous, and can be useful when updating props that could affect DOM\n  inputs. This is typically used internally (see `transact!!`, and should generally not be used in applications unless it is a very advanced\n  scenario and you've studied how this works. NOTE: You should `tick!` the application clock and bind *denormalize-time*\n  when generating `new-props` so they are properly time-stamped by `db->tree`, or manually add time to `new-props`\n  using `fdn/with-time` directly.\"\n  [component new-props]\n  #?(:cljs\n     (when (mounted? component)\n       (.setState ^js component (fn [s] #js {\"fulcro$value\" new-props})))))\n\n(defn is-factory?\n  \"Returns true if the given argument is a component factory.\"\n  [class-or-factory]\n  (rc/is-factory? class-or-factory))\n\n(def query-id\n  \"[class qualifier]\n\n   Returns a string ID for the query of the given class with qualifier.\"\n  rc/query-id)\n\n(def denormalize-query rc/denormalize-query)\n(def get-query-by-id rc/get-query-by-id)\n\n(defn get-query\n  \"Get the query for the given class or factory. If called without a state map, then you'll get the declared static\n  query of the class. If a state map is supplied, then the dynamically set queries in that state will result in\n  the current dynamically-set query according to that state.\"\n  ([class-or-factory]\n   (rc/get-query class-or-factory (or rc/*query-state*\n                                    (some-> *app* :com.fulcrologic.fulcro.application/state-atom deref) {})))\n  ([class-or-factory state-map]\n   (rc/get-query class-or-factory state-map)))\n\n(defn make-state-map\n  \"Build a component's initial state using the defsc initial-state-data from\n  options, the children from options, and the params from the invocation of get-initial-state.\"\n  [initial-state children-by-query-key params]\n  (let [join-keys (set (keys children-by-query-key))\n        init-keys (set (keys initial-state))\n        is-child? (fn [k] (contains? join-keys k))\n        value-of  (fn value-of* [[isk isv]]\n                    (let [param-name    (fn [v] (and (keyword? v) (= \"param\" (namespace v)) (keyword (name v))))\n                          substitute    (fn [ele] (if-let [k (param-name ele)]\n                                                    (get params k)\n                                                    ele))\n                          param-key     (param-name isv)\n                          param-exists? (contains? params param-key)\n                          param-value   (get params param-key)\n                          child-class   (get children-by-query-key isk)]\n                      (cond\n                        ; parameterized lookup with no value\n                        (and param-key (not param-exists?)) nil\n\n                        ; to-one join, where initial state is a map to be used as child initial state *parameters* (enforced by defsc macro)\n                        ; and which may *contain* parameters\n                        (and (map? isv) (is-child? isk)) [isk (get-initial-state child-class (into {} (keep value-of* isv)))]\n\n                        ; not a join. Map is literal initial value.\n                        (map? isv) [isk (into {} (keep value-of* isv))]\n\n                        ; to-many join. elements MUST be parameters (enforced by defsc macro)\n                        (and (vector? isv) (is-child? isk)) [isk (mapv (fn [m] (get-initial-state child-class (into {} (keep value-of* m)))) isv)]\n\n                        ; to-many join. elements might be parameter maps or already-obtained initial-state\n                        (and (vector? param-value) (is-child? isk)) [isk (mapv (fn [params]\n                                                                                 (if (computed-initial-state? params)\n                                                                                   params\n                                                                                   (get-initial-state child-class params))) param-value)]\n\n                        ; vector of non-children\n                        (vector? isv) [isk (mapv (fn [ele] (substitute ele)) isv)]\n\n                        ; to-one join with parameter. value might be params, or an already-obtained initial-state\n                        (and param-key (is-child? isk) param-exists?) [isk (if (computed-initial-state? param-value)\n                                                                             param-value\n                                                                             (get-initial-state child-class param-value))]\n                        param-key [isk param-value]\n                        :else [isk isv])))]\n    (into {} (keep value-of initial-state))))\n\n(defn wrapped-render\n  \"Run `real-render`, possibly through :render-middleware configured on your app.\"\n  [this real-render]\n  #?(:clj\n     (real-render)\n     :cljs\n     (let [app               (gobj/getValueByKeys this \"props\" \"fulcro$app\")\n           render-middleware (ah/app-algorithm app :render-middleware)]\n       (if render-middleware\n         (render-middleware this real-render)\n         (real-render)))))\n\n(defn configure-hooks-component!\n  \"Configure a function `(f [this fulcro-props] ...)` to work properly as a hook-based react component. This can be\n  used in leiu of `defsc` to create a component, where `options` is the (non-magic) map of component options\n  (i.e. :query is a `(fn [this])`, not a vector).\n\n  IMPORTANT: Your options must include `:componentName`, a fully-qualified keyword to use in the component registry.\n\n  Returns a new function that wraps yours (to properly extract Fulcro props) and installs the proper Fulcro component\n  options on the low-level function so that it will act properly when used within React as a hook-based component.\n\n  (def MyComponent\n    (configure-hooks-component!\n      (fn [this props]\n        (let [[v set-v!] (use-state this 0)\n          (dom/div ...)))\n      {:query ... :ident (fn [_ props] ...) :componentName ::MyComponent}))\n\n  (def ui-my-component (comp/factory MyComponent {:keyfn :id})\n\n  This can be used to easily generate dynamic components at runtime (as can `configure-component!`).\n  \"\n  [f options]\n  (let [cls-atom (atom nil)\n        js-fn    (fn [js-props]\n                   (let [[this props] (use-fulcro js-props @cls-atom)]\n                     (wrapped-render this\n                       (fn []\n                         (binding [*app*    (or *app* (any->app this))\n                                   *depth*  (inc (depth this))\n                                   *shared* (shared *app*)\n                                   *parent* this]\n                           (f this props))))))]\n    (reset! cls-atom js-fn)\n    (add-hook-options! js-fn options)))\n\n(defn- create-element\n  \"Create a react element for a Fulcro class.  In CLJ this returns the same thing as a mounted instance, whereas in CLJS it is an\n  element (which has yet to instantiate an instance).\"\n  [class props children]\n  #?(:clj\n     (let [init-state (component-options class :initLocalState)\n           state-atom (atom {})\n           this       {::element?          true\n                       :fulcro$isComponent true\n                       :props              props\n                       :children           children\n                       :state              state-atom\n                       :fulcro$class       class}\n           state      (when init-state (init-state this))]\n       (when (map? state)\n         (reset! state-atom state))\n       this)\n     :cljs\n     (apply react/createElement class props (force-children children))))\n\n(defn factory\n  \"Create a factory constructor from a component class created with\n   defsc.\"\n  ([class] (factory class nil))\n  ([class {:keys [keyfn qualifier] :as opts}]\n   (let [qid (query-id class qualifier)]\n     (with-meta\n       (fn element-factory [props & children]\n         (let [key              (:react-key props)\n               key              (cond\n                                  key key\n                                  keyfn (keyfn props))\n               ref              (:ref props)\n               ref              (cond-> ref (keyword? ref) str)\n               props-middleware (some-> *app* (ah/app-algorithm :props-middleware))\n               ;; Our data-readers.clj makes #js == identity in CLJ\n               props            #js {:fulcro$value   props\n                                     :fulcro$queryid qid\n                                     :fulcro$app     *app*\n                                     :fulcro$parent  *parent*\n                                     :fulcro$depth   *depth*}\n               props            (if props-middleware\n                                  (props-middleware class props)\n                                  props)]\n           #?(:cljs\n              (do\n                (when key\n                  (gobj/set props \"key\" key))\n                (when ref\n                  (gobj/set props \"ref\" ref))\n                ;; dev time warnings/errors\n                (when goog.DEBUG\n                  (when (nil? *app*)\n                    (log/error \"A Fulcro component was rendered outside of a parent context. This probably means you are using a library that has you pass rendering code to it as a lambda. Use `with-parent-context` to fix this. See https://book.fulcrologic.com/#err-comp-rendered-outside-parent-ctx\"))\n                  (when (or (map? key) (vector? key))\n                    (log/warn \"React key for \" (component-name class) \" is not a simple scalar value. This could cause spurious component remounts. See https://book.fulcrologic.com/#warn-react-key-not-simple-scalar\"))\n\n                  (when (string? ref)\n                    (log/warn \"String ref on \" (component-name class) \" should be a function. See https://book.fulcrologic.com/#warn-string-ref-not-function\"))\n\n                  (when (or (nil? props) (not (gobj/containsKey props \"fulcro$value\")))\n                    (log/error \"Props middleware seems to have corrupted props for \" (component-name class) \"See https://book.fulcrologic.com/#err-comp-props-middleware-corrupts\"))\n\n                  (when-not ((fnil map? {}) (gobj/get props \"fulcro$value\"))\n                    (log/error \"Props passed to\" (component-name class) \"are of the type\"\n                      (type->str (type (gobj/get props \"fulcro$value\")))\n                      \"instead of a map. Perhaps you meant to `map` the component over the props? See https://book.fulcrologic.com/#err-comp-props-not-a-map\")))))\n           (create-element class props children)))\n       {:class     class\n        :queryid   qid\n        :qualifier qualifier}))))\n\n(defn computed-factory\n  \"Similar to factory, but returns a function with the signature\n  [props computed & children] instead of default [props & children].\n  This makes easier to send computed.\"\n  ([class] (computed-factory class {}))\n  ([class options]\n   (let [real-factory (factory class options)]\n     (with-meta\n       (fn\n         ([props] (real-factory props))\n         ([props computed-props]\n          (real-factory (computed props computed-props)))\n         ([props computed-props & children]\n          (apply real-factory (computed props computed-props) children)))\n       (meta real-factory)))))\n\n(defn transact!\n  \"Submit a transaction for processing.\n\n  The underlying transaction system is pluggable, but the *default* supported options are:\n\n  - `:optimistic?` - boolean. Should the transaction be processed optimistically?\n  - `:ref` - ident. The ident of the component used to submit this transaction. This is set automatically if you use a component to call this function.\n  - `:component` - React element. Set automatically if you call this function using a component.\n  - `:refresh` - Vector containing idents (of components) and keywords (of props). Things that have changed and should be re-rendered\n    on screen. Only necessary when the underlying rendering algorithm won't auto-detect, such as when UI is derived from the\n    state of other components or outside of the directly queried props. Interpretation depends on the renderer selected:\n    The ident-optimized render treats these as \\\"extras\\\".\n  - `:only-refresh` - Vector of idents/keywords.  If the underlying rendering configured algorithm supports it: The\n    components using these are the *only* things that will be refreshed in the UI.\n    This can be used to avoid the overhead of looking for stale data when you know exactly what\n    you want to refresh on screen as an extra optimization. Idents are *not* checked against queries.\n  - `:abort-id` - An ID (you make up) that makes it possible (if the plugins you're using support it) to cancel\n    the network portion of the transaction (assuming it has not already completed).\n  - `:compressible?` - boolean. Check compressible-transact! docs.\n  - `:synchronous?` - boolean. When turned on the transaction will run immediately on the calling thread. If run against\n  a component then the props will be immediately tunneled back to the calling component, allowing for React (raw) input\n  event handlers to behave as described in standard React Forms docs (uses setState behind the scenes). Any remote operations\n  will still be queued as normal. Calling `transact!!` is a shorthand for this option. WARNING: ONLY the given component will\n  be refreshed in the UI. If you have dependent data elsewhere in the UI you must either use `transact!` or schedule\n  your own global render using `app/schedule-render!`.\n  - `:after-render?` - Wait until the next render completes before allowing this transaction to run. This can be used\n  when calling `transact!` from *within* another mutation to ensure that the effects of the current mutation finish\n  before this transaction takes control of the CPU. This option defaults to `false`, but `defmutation` causes it to\n  be set to true for any transactions run within mutation action sections. You can affect the default for this value\n  in a dynamic scope by binding `rc/*after-render*` to true\n  - `:parallel?` - Boolean. If true, the mutation(s) in the transaction will NOT go into a network queue, nor\n    will it block later mutations or queries.\n\n  You may add any additional keys to the option map (namespaced is ideal), and any value is legal in the options\n  map, including functions. The options will appear in the `env` of all mutations run in the transaction as\n  `:com.fulcrologic.fulcro.algorithms.tx-processing/options`. This is the preferred way of passing things like\n  lambdas (if you wanted something like a callback) to mutations. Note that mutation symbols are perfectly legal\n  as mutation *arguments*, so chaining mutations can already be done via the normal transaction mechanism, and\n  callbacks, while sometimes necessary/useful, should be limited to usages where there is no other clean way\n  to accomplish the goal.\n\n  NOTE: This function calls the application's `tx!` function (which is configurable). Fulcro 2 'follow-on reads' are\n  supported by the default version and are added to the `:refresh` entries. Your choice of rendering algorithm will\n  influence their necessity.\n\n  Returns the transaction ID of the submitted transaction.\n  \"\n  ([app-or-component tx options] (rc/transact! app-or-component tx options))\n  ([app-or-comp tx] (rc/transact! app-or-comp tx {})))\n\n(defn transact!!\n  \"Shorthand for exactly `(transact! component tx (merge options {:synchronous? true}))`.\n\n  Runs a synchronous transaction, which is an optimized mode where the optimistic behaviors of the mutations in the\n  transaction run on the calling thread, and new props are immediately made available to the calling component via\n  \\\"props tunneling\\\" (a behind-the-scenes mechanism using js/setState).\n\n  This mode is meant to be used in form input event handlers, since React is designed to only work properly with\n  raw DOM inputs via component-local state. This prevents things like the cursor jumping to the end of inputs\n  unexpectedly.\n\n  WARNING: Using an `app` instead of a component in synchronous transactions makes no sense. You must pass a component\n  that has an ident.\n\n  If you're using this, you can also set the compiler option:\n\n  ```\n  :compiler-options {:external-config {:fulcro     {:wrap-inputs? false}}}\n  ```\n\n  to turn off Fulcro DOM's generation of wrapped inputs (which try to solve this problem in a less-effective way).\n\n  WARNING: Synchronous rendering does *not* refresh the full UI, only the component.\n  \"\n  ([component tx] (rc/transact!! component tx {}))\n  ([component tx options]\n   (rc/transact! component tx (merge options {:synchronous? true}))))\n\n(declare normalize-query)\n\n(def link-element \"Part of internal implementation of dynamic queries.\" rc/link-element)\n\n(def normalize-query-elements\n  \"Part of internal implementation of dynamic queries.\n\n  Determines if there are query elements in the `query` that need to be normalized. If so, it does so.\n\n  Returns the new state map containing potentially-updated normalized queries.\"\n  rc/normalize-query-elements)\n\n(def link-query\n  \"Part of dyn query implementation. Find all of the elements (only at the top level) of the given query and replace them\n  with their query ID.\"\n  rc/link-query)\n\n(def normalize-query\n  \"Given a state map and a query, returns a state map with the query normalized into the database. Query fragments\n  that already appear in the state will not be added.  Part of dynamic query implementation.\"\n  rc/normalize-query)\n\n(defn set-query*\n  \"Put a query in app state.\n\n  NOTE: Indexes must be rebuilt after setting a query, so this function should primarily be used to build\n  up an initial app state.\"\n  [state-map class-or-factory {:keys [query] :as args}]\n  (rc/set-query* state-map class-or-factory args))\n\n(defn set-query!\n  \"Public API for setting a dynamic query on a component. This function alters the query and rebuilds internal indexes.\n\n  * `x` : is anything that any->app accepts.\n  * `class-or-factory` : A component class or factory for that class (if using query qualifiers)\n  * `opts` : A map with `query` and optionally `params` (substitutions on queries)\n  \"\n  [x class-or-factory {:keys [query params] :as opts}]\n  (rc/set-query! x class-or-factory opts))\n\n(defn refresh-dynamic-queries!\n  \"Refresh the current dynamic queries in app state to reflect any updates to the static queries of the components.\n\n   This can be used at development time to update queries that have changed but that hot code reload does not\n   reflect (because there is a current saved query in state). This is *not* always what you want, since a component\n   may have a custom query whose prop-level elements are set to a particular thing on purpose.\n\n   An component that has `:preserve-dynamic-query? true` in its component options will be ignored by\n   this function.\"\n  ([app-ish cls force?] (rc/refresh-dynamic-queries! app-ish cls force?))\n  ([app-ish] (rc/refresh-dynamic-queries! app-ish)))\n\n(defn get-indexes\n  \"Get all of the indexes from a component instance or app. See also `ident->any`, `class->any`, etc.\"\n  [x]\n  (let [app (any->app x)]\n    (some-> app :com.fulcrologic.fulcro.application/runtime-atom deref :com.fulcrologic.fulcro.application/indexes)))\n\n(defn ident->components\n  \"Return all on-screen component instances that are rendering the data for a given ident. `x` is anything any->app accepts.\"\n  [x ident]\n  (some-> (get-indexes x) :ident->components (get ident)))\n\n(defn ident->any\n  \"Return some (random) on-screen components that uses the given ident. `x` is anything any->app accepts.\"\n  [x ident]\n  (first (ident->components x ident)))\n\n(defn prop->classes\n  \"Get all component classes that query for the given prop.\n  `x` can be anything `any->app` is ok with.\n\n  Returns all classes that query for that prop (or ident)\"\n  [x prop]\n  (some-> (get-indexes x) :prop->classes (get prop)))\n\n(defn class->all\n  \"Get all of the on-screen component instances from the indexes that have the type of the component class.\n  `x` can be anything `any->app` is ok with.\"\n  [x class]\n  (let [k (class->registry-key class)]\n    (some-> (get-indexes x) :class->components (get k))))\n\n(defn class->any\n  \"Get a (random) on-screen component instance from the indexes that has type of the given component class.\n  `x` can be anything `any->app` is ok with.\"\n  [x cls]\n  (first (class->all x cls)))\n\n(defn component->state-map\n  \"Returns the current value of the state map via a component instance. Note that it is not safe to render\n  arbitrary data from the state map since Fulcro will have no idea that it should refresh a component that\n  does so; however, it is sometimes useful to look at the state map for information that doesn't\n  change over time.\"\n  [this] (some-> this any->app :com.fulcrologic.fulcro.application/state-atom deref))\n\n(defn wrap-update-extra-props\n  \"Wrap the props middleware such that `f` is called to get extra props that should be placed\n  in the extra-props arg of the component.\n\n  `handler` - (optional) The next item in the props middleware chain.\n  `f` - A (fn [cls extra-props] new-extra-props)\n\n  `f` will be passed the class being rendered and the current map of extra props. It should augment\n  those and return a new version.\"\n  ([f]\n   (fn [cls raw-props]\n     #?(:clj  (update raw-props :fulcro$extra_props (partial f cls))\n        :cljs (let [existing (or (gobj/get raw-props \"fulcro$extra_props\") {})\n                    new      (f cls existing)]\n                (gobj/set raw-props \"fulcro$extra_props\" new)\n                raw-props))))\n  ([handler f]\n   (fn [cls raw-props]\n     #?(:clj  (let [props (update raw-props :fulcro$extra_props (partial f cls))]\n                (handler cls props))\n        :cljs (let [existing (or (gobj/get raw-props \"fulcro$extra_props\") {})\n                    new      (f cls existing)]\n                (gobj/set raw-props \"fulcro$extra_props\" new)\n                (handler cls raw-props))))))\n\n(defn fragment\n  \"Wraps children in a React.Fragment. Props are optional, like normal DOM elements.\"\n  [& args]\n  #?(:clj\n     (let [optional-props (first args)\n           props?         (and (instance? APersistentMap optional-props) (not (component-instance? optional-props)))\n           [_ children] (if props?\n                          [(first args) (rest args)]\n                          [{} args])]\n       (vec children))\n     :cljs\n     (let [[props children] (if (map? (first args))\n                              [(first args) (rest args)]\n                              [#js {} args])]\n       (apply react/createElement react/Fragment (clj->js props) (force-children children)))))\n\n#?(:clj\n   (defmacro with-parent-context\n     \"Wraps the given body with the correct internal bindings of the parent so that Fulcro internals\n     will work when that body is embedded in unusual ways (e.g. as the body in a child-as-a-function\n     React pattern).\n\n     ```\n     (defsc X [this props]\n       ...\n       ;; WRONG:\n       (some-react-thing {:child (fn [] (ui-fulcro-thing ...))})\n       ;; CORRECT:\n       (some-react-thing {:child (fn [] (with-parent-context this (ui-fulcro-thing ...)))})\n     ```\n     \"\n     [outer-parent & body]\n     (if-not (:ns &env)\n       `(do ~@body)\n       `(let [parent# ~outer-parent\n              app#    (or *app* (any->app parent#))\n              d#      (or *depth* (inc (depth parent#)))\n              s#      (shared app#)\n              p#      (or *parent* parent#)]\n          (binding [*app*    app#\n                    *depth*  d#\n                    *shared* s#\n                    *parent* p#]\n            ~@body)))))\n\n(defn ptransact!\n  \"\n  DEPRECATED: Generally use `result-action` in mutations to chain sequences instead. This call is equivalent\n  to `transact!` with an `:optimistic? false` option.\n\n  Like `transact!`, but ensures each call completes (in a full-stack, pessimistic manner) before the next call starts\n  in any way. Note that two calls of this function have no guaranteed relationship to each other. They could end up\n  intermingled at runtime. The only guarantee is that for *a single call* to `ptransact!`, the calls in the given tx will run\n  pessimistically (one at a time) in the order given. Follow-on reads in the given transaction will be repeated after each remote\n  interaction.\n\n  `component-or-app` a mounted component or the app\n  `tx` the tx to run\n  `ref` the ident (ref context) in which to run the transaction (including all deferrals)\"\n  ([component-or-app tx]\n   (transact! component-or-app tx {:optimistic? false}))\n  ([component-or-app ref tx]\n   (transact! component-or-app tx {:optimistic? false\n                                   :ref         ref})))\n\n(defn compressible-transact!\n  \"Identical to `transact!` with `:compressible? true` option. This means that if more than one\n  adjacent history transition edge is compressible, only the more recent of the sequence of them is kept. This\n  is useful for things like form input fields, where storing every keystoke in history is undesirable. This\n  also compress the transactions in Fulcro Inspect.\n\n  NOTE: history events that trigger remote interactions are not compressible, since they may be needed for\n  automatic network error recovery handling.\"\n  ([app-ish tx]\n   (rc/transact! app-ish tx {:compressible? true}))\n  ([app-ish ref tx]\n   (rc/transact! app-ish tx {:compressible? true\n                             :ref           ref})))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; DEFSC MACRO SUPPORT. Most of this could be in a diff ns, but then hot code reload while working on the macro\n;; does not work right.\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n#?(:clj\n   (defn cljs?\n     \"A CLJ macro helper. `env` is the macro's `&env` value. Returns true when expanding a macro while compiling CLJS.\"\n     [env]\n     (boolean (:ns env))))\n\n#?(:clj\n   (defn- is-link?\n     \"Returns true if the given query element is a link query like [:x '_].\"\n     [query-element] (and (vector? query-element)\n                       (keyword? (first query-element))\n                       ; need the double-quote because when in a macro we'll get the literal quote.\n                       (#{''_ '_} (second query-element)))))\n\n#?(:clj\n   (defn -legal-keys\n     \"PRIVATE. Find the legal keys in a query. NOTE: This is at compile time, so the get-query calls are still embedded (thus cannot\n     use the AST)\"\n     [query]\n     (letfn [(keeper [ele]\n               (cond\n                 (list? ele) (recur (first ele))\n                 (keyword? ele) ele\n                 (is-link? ele) (first ele)\n                 (and (map? ele) (keyword? (ffirst ele))) (ffirst ele)\n                 (and (map? ele) (is-link? (ffirst ele))) (first (ffirst ele))\n                 :else nil))]\n       (set (keep keeper query)))))\n\n#?(:clj\n   (defn- children-by-prop\n     \"Part of Defsc macro implementation. Calculates a map from join key to class (symbol).\"\n     [query]\n     (into {}\n       (keep #(if (and (map? %) (or (is-link? (ffirst %)) (keyword? (ffirst %))))\n                (let [k   (if (vector? (ffirst %))\n                            (first (ffirst %))\n                            (ffirst %))\n                      cls (-> % first second second)]\n                  [k cls])\n                nil) query))))\n\n#?(:clj\n   (defn- replace-and-validate-fn\n     \"Replace the first sym in a list (the function name) with the given symbol.\n\n     env - the macro &env\n     sym - The symbol that the lambda should have\n     external-args - A sequence of arguments that the user should not include, but that you want to be inserted in the external-args by this function.\n     user-arity - The number of external-args the user should supply (resulting user-arity is (count external-args) + user-arity).\n     fn-form - The form to rewrite\n     sym - The symbol to report in the error message (in case the rewrite uses a different target that the user knows).\"\n     ([env sym external-args user-arity fn-form] (replace-and-validate-fn env sym external-args user-arity fn-form sym))\n     ([env sym external-args user-arity fn-form user-known-sym]\n      (when-not (<= user-arity (count (second fn-form)))\n        (throw (ana/error (merge env (meta fn-form)) (str \"Invalid arity for \" user-known-sym \". Expected \" user-arity \" or more.\"))))\n      (let [user-args    (second fn-form)\n            updated-args (into (vec (or external-args [])) user-args)\n            body-forms   (drop 2 fn-form)]\n        (->> body-forms\n          (cons updated-args)\n          (cons sym)\n          (cons 'fn))))))\n\n#?(:clj\n   (defn- component-query [query-part]\n     (and (list? query-part)\n       (symbol? (first query-part))\n       (= \"get-query\" (name (first query-part)))\n       query-part)))\n\n#?(:clj\n   (defn- compile-time-query->checkable\n     \"Try to simplify the compile-time query (as seen by the macro)\n     to something that EQL can check (`(get-query ..)` => a made-up vector).\n     Returns nil if this is not possible.\"\n     [query]\n     (try\n       (prewalk\n         (fn [form]\n           (cond\n             (component-query form)\n             [(keyword (str \"subquery-of-\" (some-> form second name)))]\n\n             ;; Replace idents with idents that contain only keywords, so syms don't trip us up\n             (and (vector? form) (= 2 (count form)))\n             (mapv #(if (symbol? %) :placeholder %) form)\n\n             (symbol? form)\n             (throw (ex-info \"Cannot proceed, the query contains a symbol\" {:sym form}))\n\n             :else\n             form))\n         query)\n       (catch Throwable _\n         nil))))\n\n#?(:clj\n   (defn- check-query-looks-valid [err-env comp-class compile-time-query]\n     (let [checkable-query (compile-time-query->checkable compile-time-query)]\n       (when (false? (some->> checkable-query (s/valid? ::eql/query)))\n         (let [{:clojure.spec.alpha/keys [problems]} (s/explain-data ::eql/query checkable-query)\n               {:keys [in]} (first problems)]\n           (when (vector? in)\n             (throw (ana/error err-env (str \"The element '\" (get-in compile-time-query in) \"' of the query of \" comp-class \" is not valid EQL\")))))))))\n\n#?(:clj\n   (defn- build-query-forms\n     \"Validate that the property destructuring and query make sense with each other.\"\n     [env class thissym propargs {:keys [template method]}]\n     (cond\n       template\n       (do\n         (assert (or (symbol? propargs) (map? propargs)) \"Property args must be a symbol or destructuring expression.\")\n         (let [to-keyword            (fn [s] (cond\n                                               (nil? s) nil\n                                               (keyword? s) s\n                                               :otherwise (let [nspc (namespace s)\n                                                                nm   (name s)]\n                                                            (keyword nspc nm))))\n               destructured-keywords (when (map? propargs) (util/destructured-keys propargs))\n               queried-keywords      (-legal-keys template)\n               has-wildcard?         (some #{'*} template)\n               to-sym                (fn [k] (symbol (namespace k) (name k)))\n               illegal-syms          (mapv to-sym (set/difference destructured-keywords queried-keywords))\n               err-env               (merge env (meta template))]\n           (when-let [child-query (some component-query template)]\n             (throw (ana/error err-env (str \"defsc \" class \": `get-query` calls in :query can only be inside a join value, i.e. `{:some/key \" child-query \"}`\"))))\n           (when (and (not has-wildcard?) (seq illegal-syms))\n             (throw (ana/error err-env (str \"defsc \" class \": \" illegal-syms \" was destructured in props, but does not appear in the :query!\"))))\n           `(~'fn ~'query* [~thissym] ~template)))\n       method\n       (replace-and-validate-fn env 'query* [thissym] 0 method))))\n\n#?(:clj\n   (defn- build-ident\n     \"Builds the ident form. If ident is a vector, then it generates the function and validates that the ID is\n     in the query. Otherwise, if ident is of the form (ident [this props] ...) it simply generates the correct\n     entry in defsc without error checking.\"\n     [env thissym propsarg {:keys [method template keyword]} is-legal-key?]\n     (cond\n       keyword (if (is-legal-key? keyword)\n                 `(~'fn ~'ident* [~'_ ~'props] [~keyword (~keyword ~'props)])\n                 (throw (ana/error (merge env (meta template)) (str \"The table/id \" keyword \" of :ident does not appear in your :query\"))))\n       method (replace-and-validate-fn env 'ident* [thissym propsarg] 0 method)\n       template (let [table   (first template)\n                      id-prop (or (second template) :db/id)]\n                  (cond\n                    (nil? table) (throw (ana/error (merge env (meta template)) \"TABLE part of ident template was nil\" {}))\n                    (not (is-legal-key? id-prop)) (throw (ana/error (merge env (meta template)) (str \"The ID property \" id-prop \" of :ident does not appear in your :query\")))\n                    :otherwise `(~'fn ~'ident* [~'this ~'props] [~table (~id-prop ~'props)]))))))\n\n#?(:clj\n   (defn- build-render [classsym thissym propsym compsym extended-args-sym body]\n     (let [computed-bindings (when compsym `[~compsym (com.fulcrologic.fulcro.components/get-computed ~thissym)])\n           extended-bindings (when extended-args-sym `[~extended-args-sym (com.fulcrologic.fulcro.components/get-extra-props ~thissym)])\n           render-fn         (symbol (str \"render-\" (name classsym)))]\n       `(~'fn ~render-fn [~thissym]\n          (com.fulcrologic.fulcro.components/wrapped-render ~thissym\n            (fn []\n              (let [~propsym (com.fulcrologic.fulcro.components/props ~thissym)\n                    ~@computed-bindings\n                    ~@extended-bindings]\n                ~@body)))))))\n\n#?(:clj\n   (defn- build-hooks-render [classsym thissym propsym compsym extended-args-sym body]\n     (let [computed-bindings (when compsym `[~compsym (com.fulcrologic.fulcro.components/get-computed ~thissym)])\n           extended-bindings (when extended-args-sym `[~extended-args-sym (com.fulcrologic.fulcro.components/get-extra-props ~thissym)])\n           render-fn         (symbol (str \"render-\" (name classsym)))]\n       `(~'fn ~render-fn [~thissym ~propsym]\n          (com.fulcrologic.fulcro.components/wrapped-render ~thissym\n            (fn []\n              (binding [*app*    (or *app* (isoget-in ~thissym [\"props\" \"fulcro$app\"]))\n                        *depth*  (inc (or *depth* (isoget-in ~thissym [\"props\" \"fulcro$depth\"])))\n                        *shared* (shared (or *app* (isoget-in ~thissym [\"props\" \"fulcro$app\"])))\n                        *parent* ~thissym]\n                (let [~@computed-bindings\n                      ~@extended-bindings]\n                  ~@body))))))))\n\n#?(:clj\n   (defn- build-and-validate-initial-state-map [env sym initial-state legal-keys children-by-query-key]\n     (let [env           (merge env (meta initial-state))\n           join-keys     (set (keys children-by-query-key))\n           init-keys     (set (keys initial-state))\n           illegal-keys  (if (set? legal-keys) (set/difference init-keys legal-keys) #{})\n           is-child?     (fn [k] (contains? join-keys k))\n           param-expr    (fn [v]\n                           (if-let [kw (and (keyword? v) (= \"param\" (namespace v))\n                                         (keyword (name v)))]\n                             `(~kw ~'params)\n                             v))\n           parameterized (fn [init-map] (into {} (map (fn [[k v]] (if-let [expr (param-expr v)] [k expr] [k v])) init-map)))\n           child-state   (fn [k]\n                           (let [state-params    (get initial-state k)\n                                 to-one?         (map? state-params)\n                                 to-many?        (and (vector? state-params) (every? map? state-params))\n                                 code?           (list? state-params)\n                                 from-parameter? (and (keyword? state-params) (= \"param\" (namespace state-params)))\n                                 child-class     (get children-by-query-key k)]\n                             (when code?\n                               (throw (ana/error env (str \"defsc \" sym \": Illegal parameters to :initial-state \" state-params \". Use a lambda if you want to write code for initial state. Template mode for initial state requires simple maps (or vectors of maps) as parameters to children. See Developer's Guide.\"))))\n                             (cond\n                               (not (or from-parameter? to-many? to-one?)) (throw (ana/error env (str \"Initial value for a child (\" k \") must be a map or vector of maps!\")))\n                               to-one? `(com.fulcrologic.fulcro.components/get-initial-state ~child-class ~(parameterized state-params))\n                               to-many? (mapv (fn [params]\n                                                `(com.fulcrologic.fulcro.components/get-initial-state ~child-class ~(parameterized params)))\n                                          state-params)\n                               from-parameter? `(com.fulcrologic.fulcro.components/get-initial-state ~child-class ~(param-expr state-params))\n                               :otherwise nil)))\n           kv-pairs      (map (fn [k]\n                                [k (if (is-child? k)\n                                     (child-state k)\n                                     (param-expr (get initial-state k)))]) init-keys)\n           state-map     (into {} kv-pairs)]\n       (when (seq illegal-keys)\n         (throw (ana/error env (str \"Initial state includes keys \" illegal-keys \", but they are not in your query.\"))))\n       `(~'fn ~'build-initial-state* [~'params] (com.fulcrologic.fulcro.components/make-state-map ~initial-state ~children-by-query-key ~'params)))))\n\n#?(:clj\n   (defn- build-raw-initial-state\n     \"Given an initial state form that is a list (function-form), simple copy it into the form needed by defsc.\"\n     [env method]\n     (replace-and-validate-fn env 'build-raw-initial-state* [] 1 method)))\n\n#?(:clj\n   (defn- build-initial-state [env sym {:keys [template method]} legal-keys query-template-or-method]\n     (when (and template (contains? query-template-or-method :method))\n       (throw (ana/error (merge env (meta template)) (str \"When query is a method, initial state MUST be as well.\"))))\n     (cond\n       method (build-raw-initial-state env method)\n       template (let [query    (:template query-template-or-method)\n                      children (or (children-by-prop query) {})]\n                  (build-and-validate-initial-state-map env sym template legal-keys children)))))\n\n#?(:clj\n   (s/def ::ident (s/or :template (s/and vector? #(= 2 (count %))) :method list? :keyword keyword?)))\n#?(:clj\n   ;; NOTE: We cannot reuse ::eql/query because we have the raw input *form* inside a macro,\n   ;; not the actual *data* that will be there at runtime (i.e. it may contain raw fn calls etc.)\n   (s/def ::query (s/or :template vector? :method list?)))\n#?(:clj\n   (s/def ::initial-state (s/or :template map? :method list?)))\n#?(:clj\n   (s/def ::options (s/keys :opt-un [::query\n                                     ::ident\n                                     ::initial-state])))\n\n#?(:clj\n   (s/def ::args (s/cat\n                   :sym symbol?\n                   :doc (s/? string?)\n                   :arglist (s/and vector? #(<= 2 (count %) 5))\n                   :options (s/? map?)\n                   :body (s/* any?))))\n\n#?(:clj\n   (defn defsc*\n     [env args]\n     (when-not (s/valid? ::args args)\n       (throw (ana/error env (str \"Invalid arguments. \" (-> (s/explain-data ::args args)\n                                                          ::s/problems\n                                                          first\n                                                          :path) \" is invalid.\"))))\n     (let [{:keys [sym doc arglist options body]} (s/conform ::args args)\n           [thissym propsym computedsym extra-args] arglist\n           _                                (when (and options (not (s/valid? ::options options)))\n                                              (let [path    (-> (s/explain-data ::options options) ::s/problems first :path)\n                                                    message (cond\n                                                              (= path [:query :template]) \"The query template only supports vectors as queries. Unions or expression require the lambda form.\"\n                                                              (= :ident (first path)) \"The ident must be a keyword, 2-vector, or lambda of no arguments.\"\n                                                              :else \"Invalid component options. Please check to make\\nsure your query, ident, and initial state are correct.\")]\n                                                (throw (ana/error env message))))\n           {:keys [ident query initial-state]} (s/conform ::options options)\n           body                             (or body ['nil])\n           ident-template-or-method         (into {} [ident]) ;clojure spec returns a map entry as a vector\n           initial-state-template-or-method (into {} [initial-state])\n           query-template-or-method         (into {} [query])\n           validate-query?                  (and (:template query-template-or-method) (not (some #{'*} (:template query-template-or-method))))\n           legal-key-checker                (if validate-query?\n                                              (or (-legal-keys (:template query-template-or-method)) #{})\n                                              (complement #{}))\n           ident-form                       (build-ident env thissym propsym ident-template-or-method legal-key-checker)\n           state-form                       (build-initial-state env sym initial-state-template-or-method legal-key-checker query-template-or-method)\n           query-form                       (build-query-forms env sym thissym propsym query-template-or-method)\n           _                                (when validate-query?\n                                              ;; after build-query-forms as it also does some useful checks\n                                              (check-query-looks-valid env sym (:template query-template-or-method)))\n           hooks?                           (and (cljs? env) (:use-hooks? options))\n           render-form                      (if hooks?\n                                              (build-hooks-render sym thissym propsym computedsym extra-args body)\n                                              (build-render sym thissym propsym computedsym extra-args body))\n           nspc                             (if (cljs? env) (-> env :ns :name str) (name (ns-name *ns*)))\n           fqkw                             (keyword (str nspc) (name sym))\n           options-map                      (cond-> options\n                                              state-form (assoc :initial-state state-form)\n                                              ident-form (assoc :ident ident-form)\n                                              query-form (assoc :query query-form)\n                                              hooks? (assoc :componentName fqkw)\n                                              render-form (assoc :render render-form))]\n       (cond\n         hooks?\n         `(do\n            (defonce ~sym\n              (fn [js-props#]\n                (let [render# (:render (component-options ~sym))\n                      [this# props#] (use-fulcro js-props# ~sym)]\n                  (render# this# props#))))\n            (add-hook-options! ~sym ~options-map))\n\n         (cljs? env)\n         `(do\n            (declare ~sym)\n            (let [options# ~options-map]\n              (defonce ~(vary-meta sym assoc :doc doc :jsdoc [\"@constructor\"])\n                (fn [props#]\n                  (cljs.core/this-as this#\n                    (if-let [init-state# (get options# :initLocalState)]\n                      (set! (.-state this#) (cljs.core/js-obj \"fulcro$state\" (init-state# this# (isoget props# \"fulcro$value\"))))\n                      (set! (.-state this#) (cljs.core/js-obj \"fulcro$state\" {})))\n                    nil)))\n              (com.fulcrologic.fulcro.components/configure-component! ~sym ~fqkw options#)))\n\n         :else\n         `(do\n            (declare ~sym)\n            (let [options# ~options-map]\n              (def ~(vary-meta sym assoc :doc doc :once true)\n                (com.fulcrologic.fulcro.components/configure-component! ~(str sym) ~fqkw options#))))))))\n\n#?(:clj\n   (defmacro ^{:doc      \"Define a stateful component. This macro emits a React UI class with a query,\n   optional ident (if :ident is specified in options), optional initial state, optional css, lifecycle methods,\n   and a render method. It can also cause the class to implement additional protocols that you specify. Destructuring is\n   supported in the argument list.\n\n   The template (data-only) versions do not have any arguments in scope\n   The lambda versions have arguments in scope that make sense for those lambdas, as listed below:\n\n   ```\n   (defsc Component [this {:keys [db/id x] :as props} {:keys [onSelect] :as computed} extended-args]\n     {\n      ;; stateful component options\n      ;; query template is literal. Use the lambda if you have ident-joins or unions.\n      :query [:db/id :x] ; OR (fn [] [:db/id :x]) ; this in scope\n      ;; ident template is table name and ID property name\n      :ident [:table/by-id :id] ; OR (fn [] [:table/by-id id]) ; this and props in scope\n      ;; initial-state template is magic..see dev guide. Lambda version is normal.\n      :initial-state {:x :param/x} ; OR (fn [params] {:x (:x params)}) ; nothing is in scope\n      ;; pre-merge, use a lamba to modify new merged data with component needs\n      :pre-merge (fn [{:keys [data-tree current-normalized state-map query]}] (merge {:ui/default-value :start} data-tree))\n\n      ; React Lifecycle Methods (for the default, class-based components)\n      :initLocalState            (fn [this props] ...) ; CAN BE used to call things as you might in a constructor. Return value is initial state.\n      :shouldComponentUpdate     (fn [this next-props next-state] ...)\n\n      :componentDidUpdate        (fn [this prev-props prev-state snapshot] ...) ; snapshot is optional, and is 16+. Is context for 15\n      :componentDidMount         (fn [this] ...)\n      :componentWillUnmount      (fn [this] ...)\n\n      ;; DEPRECATED IN REACT 16 (to be removed in 17):\n      :componentWillReceiveProps        (fn [this next-props] ...)\n      :componentWillUpdate              (fn [this next-props next-state] ...)\n      :componentWillMount               (fn [this] ...)\n\n      ;; Replacements for deprecated methods in React 16.3+\n      :UNSAFE_componentWillReceiveProps (fn [this next-props] ...)\n      :UNSAFE_componentWillUpdate       (fn [this next-props next-state] ...)\n      :UNSAFE_componentWillMount        (fn [this] ...)\n\n      ;; ADDED for React 16:\n      :componentDidCatch         (fn [this error info] ...)\n      :getSnapshotBeforeUpdate   (fn [this prevProps prevState] ...)\n\n      ;; static.\n      :getDerivedStateFromProps  (fn [props state] ...)\n\n      ;; ADDED for React 16.6:\n      ;; NOTE: The state returned from this function can either be:\n      ;; a raw js map, where Fulcro's state is in a sub-key: `#js {\\\"fulcro$state\\\" {:fulcro :state}}`.\n      ;; or a clj map. In either case this function will *overwrite* Fulcro's component-local state, which is\n      ;; slighly different behavior than raw React (we have no `this`, so we cannot read Fulcro's state to merge it).\n      :getDerivedStateFromError  (fn [error] ...)\n\n      NOTE: shouldComponentUpdate should generally not be overridden other than to force it false so\n      that other libraries can control the sub-dom. If you do want to implement it, then old props can\n      be obtained from (prim/props this), and old state via (gobj/get (. this -state) \\\"fulcro$state\\\").\n      \n      ; React Hooks support\n      ;; if true, creates a function-based instead of a class-based component, see the Developer's Guide for details\n      :use-hooks? true\n\n      ; BODY forms. May be omitted IFF there is an options map, in order to generate a component that is used only for queries/normalization.\n      (dom/div #js {:onClick onSelect} x))\n   ```\n\n   NOTE: The options map is \\\"open\\\". That is: you can add whatever extra stuff you want to in order\n   to co-locate data for component-related concerns. This is exactly what component-local css, the\n   dynamic router, and form-state do.  The data that you add is available from `comp/component-options`\n   on the component class and instances (i.e. `this`).\n\n   See the Developer's Guide at book.fulcrologic.com for more details.\n   \"\n               :arglists '([this dbprops computedprops]\n                           [this dbprops computedprops extended-args])}\n     defsc\n     [& args]\n     (try\n       (defsc* &env args)\n       (catch Exception e\n         (if (contains? (ex-data e) :tag)\n           (throw e)\n           (throw (ana/error &env \"Unexpected internal error while processing defsc. Please check your syntax.\" e)))))))\n\n(def external-config rc/external-config)\n\n(defn refresh-component!\n  \"Request that the given subtree starting a component be refreshed from the app database without re-rendering any parent. This\n  is a synchronous call that will tunnel the props to the given component via an internal call to React setState.\"\n  [component]\n  (if (component? component)\n    (let [prior-computed (or (get-computed component) {})\n          {:com.fulcrologic.fulcro.application/keys [state-atom runtime-atom]} (any->app component)\n          state-map      @state-atom]\n      (swap! runtime-atom update :com.fulcrologic.fulcro.application/basis-t inc)\n      (binding [fdn/*denormalize-time* (-> @runtime-atom :com.fulcrologic.fulcro.application/basis-t)]\n        (let [ident    (get-ident component)\n              query    (get-query component state-map)\n              ui-props (computed (fdn/db->tree query (get-in state-map ident) state-map) prior-computed)]\n          (tunnel-props! component ui-props))))\n    (log/error \"Cannot re-render a non-component. See https://book.fulcrologic.com/#err-comp-cannot-rerender-non-comp\")))\n\n(defn get-parent\n  \"Returns the nth parent of `this` (a React element). The optional `n` can be 0 (the immediate parent) or any positive\n  integer. If this walks past root then this function returns nil.\"\n  ([this n]\n   (when-not (component-instance? this)\n     (throw (ex-info \"Cannot get parent. First argument is not a component instance.\" {:arg this})))\n   (loop [element this\n          level   n]\n     (let [result (isoget-in element [:props :fulcro$parent])]\n       (if (and result (pos-int? level))\n         (recur result (dec level))\n         result))))\n  ([this]\n   (get-parent this 0)))\n\n(def check-component-registry!\n  \"Walks the complete list of components in the component registry and looks for problems. Used during dev mode to\n   detect common problems that can cause runtime misbehavior.\"\n  rc/check-component-registry!)","~:reader-features",["^H",["~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings","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","names",["com.fulcrologic.fulcro.components/*app*","com.fulcrologic.fulcro.components/*parent*","com.fulcrologic.fulcro.components/*depth*","com.fulcrologic.fulcro.components/*shared*","com.fulcrologic.fulcro.components/*blindly-render*","com.fulcrologic.fulcro.components/isoget-in","com.fulcrologic.fulcro.raw.components/isoget-in","com.fulcrologic.fulcro.components/isoget","com.fulcrologic.fulcro.raw.components/isoget","com.fulcrologic.fulcro.components/register-component!","com.fulcrologic.fulcro.raw.components/register-component!","com.fulcrologic.fulcro.components/force-children","x","G__56981","cljs.core/seq?","cljs.core.into","cljs.core.map","com.fulcrologic.fulcro.components/newer-props","com.fulcrologic.fulcro.raw.components/newer-props","com.fulcrologic.fulcro.components/component-instance?","com.fulcrologic.fulcro.raw.components/component-instance?","com.fulcrologic.fulcro.components/component?","com.fulcrologic.fulcro.components/component-class?","com.fulcrologic.fulcro.raw.components/component-class?","cljs.spec.alpha/def-impl","com.fulcrologic.fulcro.components/component-name","com.fulcrologic.fulcro.raw.components/component-name","com.fulcrologic.fulcro.components/class->registry-key","com.fulcrologic.fulcro.raw.components/class->registry-key","com.fulcrologic.fulcro.components/registry-key->class","com.fulcrologic.fulcro.raw.components/registry-key->class","com.fulcrologic.fulcro.components/computed","com.fulcrologic.fulcro.raw.components/computed","com.fulcrologic.fulcro.components/get-computed","com.fulcrologic.fulcro.raw.components/get-computed","com.fulcrologic.fulcro.components/get-extra-props","this","G__56982","G__56983","G__56984","com.fulcrologic.fulcro.components/props","com.fulcrologic.fulcro.raw.components/props","com.fulcrologic.fulcro.components/children","component","cs","com.fulcrologic.fulcro.components.goog$module$goog$object.getValueByKeys","cljs.core/coll?","cljs.core/array?","com.fulcrologic.fulcro.components/react-type","com.fulcrologic.fulcro.raw.components/component-type","com.fulcrologic.fulcro.components/get-class","com.fulcrologic.fulcro.raw.components/get-class","com.fulcrologic.fulcro.components/component-options","com.fulcrologic.fulcro.raw.components/component-options","com.fulcrologic.fulcro.components/has-feature?","option-key","cljs.core/contains?","com.fulcrologic.fulcro.components/has-initial-app-state?","com.fulcrologic.fulcro.components/has-ident?","com.fulcrologic.fulcro.components/has-query?","com.fulcrologic.fulcro.components/has-pre-merge?","com.fulcrologic.fulcro.components/ident","props","fexpr__56985","com.fulcrologic.fulcro.components/query","fexpr__56986","com.fulcrologic.fulcro.components/initial-state","clz","params","fexpr__56987","com.fulcrologic.fulcro.components/pre-merge","data","fexpr__56988","com.fulcrologic.fulcro.components/depth","G__56989","G__56990","com.fulcrologic.fulcro.components/get-raw-react-prop","c","k","G__56991","G__56992","com.fulcrologic.fulcro.components/any->app","com.fulcrologic.fulcro.raw.components/any->app","com.fulcrologic.fulcro.components/raw->newest-props","raw-props","raw-state","next-props","com.fulcrologic.fulcro.components.goog$module$goog$object.get","opt-props","var_args","G__56994","com.fulcrologic.fulcro.components/shared","js/Error","comp-or-app","com.fulcrologic.fulcro.components.shared","k-or-ks","shared","or__4253__auto__","G__56995","cljs.core/deref","ks","G__56996","cljs.core/PersistentVector","cljs.core/sequential?","G__56997","cljs.core/empty?","cljs.core.get_in","handler","com$fulcrologic$fulcro$components$wrap_props_state_handler","check-for-fresh-props-in-state?","state","raw-next-props","raw-next-state","current-props","next-state","current-state","props-changed?","cljs.core.not_EQ_","state-changed?","next-children","children-changed?","raw-prev-props","raw-prev-state","snapshot","map__57013","cljs.core/--destructure-map","cljs.core.get","ident","componentDidUpdate","prev-state","prev-props","old-ident","next-ident","G__57014","G__57015","app","drop-component!","com.fulcrologic.fulcro.algorithms.lookup/app-algorithm","index-component!","com.fulcrologic.fulcro.components.goog$module$goog$object.set","map__57012","componentDidMount","map__57024","componentWillUnmount","args","cljs.core.apply","com$fulcrologic$fulcro$components$wrap_props_handler","render","temp__5751__auto__","*app*-orig-val__57016","*depth*-orig-val__57017","*shared*-orig-val__57018","*parent*-orig-val__57019","*app*-temp-val__57020","*depth*-temp-val__57021","*shared*-temp-val__57022","*parent*-temp-val__57023","taoensso.timbre._log_BANG_","taoensso.timbre/*config*","cljs.core/Delay","com.fulcrologic.fulcro.components/configure-component!","cls","fqkw","options","map__57025","getDerivedStateFromProps","shouldComponentUpdate","getSnapshotBeforeUpdate","initLocalState","componentDidCatch","getDerivedStateFromError","componentWillUpdate","componentWillMount","componentWillReceiveProps","UNSAFE_componentWillMount","UNSAFE_componentWillUpdate","UNSAFE_componentWillReceiveProps","name","clojure.string.join","cljs.core/namespace","cljs.core/name","js-instance-props","cljs.core/clj->js","component-did-mount","component-will-unmount","component-did-update","wrap-props-state-handler","should-component-update?","G__57026","cljs.core.assoc","wrap-base-render","wrap-this","wrap-props-handler","statics","G__57027","_","writer","cljs.core/-write","error","v","static-wrap-props-state-handler","com.fulcrologic.fulcro.components.goog$module$goog$object.extend","js/module$node_modules$react$index.Component","com.fulcrologic.fulcro.components/add-hook-options!","render-fn","component-options","com.fulcrologic.fulcro.raw.components/configure-anonymous-component!","com.fulcrologic.fulcro.components/use-fulcro","js-props","faux-class","map__57028","tunnelled-props-state","js/module$node_modules$react$index.useState","js-set-tunnelled-props!","faux-component-state","depth","set-tunnelled-props!","updater","new-props","faux-component","children","current-ident","shared-props","G__57029","js/module$node_modules$react$index.useEffect","original-ident","cljs.core/second","com.fulcrologic.fulcro.components/mounted?","G__57031","com.fulcrologic.fulcro.components/set-state!","new-state","callback","cljs.core.merge","com.fulcrologic.fulcro.components.set_state_BANG_","G__57033","com.fulcrologic.fulcro.components/get-state","com.fulcrologic.fulcro.components.get_state","cst","update-fn","f","G__57038","com.fulcrologic.fulcro.components/update-state!","args-arr__4885__auto__","len__4864__auto__","i__4865__auto__","argseq__4886__auto__","cljs.core/IndexedSeq","seq57035","G__57036","cljs.core/first","cljs.core/next","G__57037","self__4851__auto__","com.fulcrologic.fulcro.components/get-initial-state","com.fulcrologic.fulcro.raw.components/get-initial-state","com.fulcrologic.fulcro.components/computed-initial-state?","s","and__4251__auto__","cljs.core/map?","G__57039","cljs.core/meta","com.fulcrologic.fulcro.components/get-ident","com.fulcrologic.fulcro.raw.components/get-ident","com.fulcrologic.fulcro.components/tunnel-props!","com.fulcrologic.fulcro.components/is-factory?","class-or-factory","com.fulcrologic.fulcro.raw.components/is-factory?","com.fulcrologic.fulcro.components/query-id","com.fulcrologic.fulcro.raw.components/query-id","com.fulcrologic.fulcro.components/denormalize-query","com.fulcrologic.fulcro.raw.components/denormalize-query","com.fulcrologic.fulcro.components/get-query-by-id","com.fulcrologic.fulcro.raw.components/get-query-by-id","G__57041","com.fulcrologic.fulcro.components/get-query","com.fulcrologic.fulcro.raw.components.get_query","com.fulcrologic.fulcro.raw.components/*query-state*","G__57042","state-map","com.fulcrologic.fulcro.components/make-state-map","initial-state","children-by-query-key","join-keys","cljs.core/set","cljs.core/keys","init-keys","is-child?","value-of","p__57043","vec__57044","cljs.core.nth","isk","isv","param-name","cljs.core/Keyword","cljs.core._EQ_","cljs.core.keyword","substitute","ele","param-key","param-exists?","param-value","child-class","G__57047","G__57048","cljs.core.keep","value-of*","cljs.core/vector?","cljs.core.mapv","m","G__57049","G__57050","com.fulcrologic.fulcro.components/wrapped-render","real-render","render-middleware","com.fulcrologic.fulcro.components/configure-hooks-component!","cls-atom","cljs.core.atom","js-fn","vec__57051","*app*-orig-val__57054","*depth*-orig-val__57055","*shared*-orig-val__57056","*parent*-orig-val__57057","*app*-temp-val__57058","*depth*-temp-val__57059","*shared*-temp-val__57060","*parent*-temp-val__57061","cljs.core/reset!","com.fulcrologic.fulcro.components/create-element","class","js/module$node_modules$react$index.createElement","G__57063","com.fulcrologic.fulcro.components/factory","p__57064","map__57065","com.fulcrologic.fulcro.components.factory","keyfn","qualifier","opts","qid","cljs.core/with-meta","key","ref","G__57066","props-middleware","G__57067","js/goog.DEBUG","cljs.core/not","com.fulcrologic.fulcro.components.goog$module$goog$object.containsKey","cljs.core.fnil","cljs.core/type->str","cljs.core/type","G__57069","com.fulcrologic.fulcro.components/computed-factory","com.fulcrologic.fulcro.components.computed_factory","real-factory","computed-props","G__57070","G__57072","com.fulcrologic.fulcro.components/transact!","app-or-component","tx","com.fulcrologic.fulcro.raw.components.transact_BANG_","app-or-comp","G__57074","com.fulcrologic.fulcro.components/transact!!","com.fulcrologic.fulcro.raw.components.transact_BANG__BANG_","com.fulcrologic.fulcro.components/link-element","com.fulcrologic.fulcro.raw.components/link-element","com.fulcrologic.fulcro.components/normalize-query-elements","com.fulcrologic.fulcro.raw.components/normalize-query-elements","com.fulcrologic.fulcro.components/link-query","com.fulcrologic.fulcro.raw.components/link-query","com.fulcrologic.fulcro.components/normalize-query","com.fulcrologic.fulcro.raw.components/normalize-query","p__57075","map__57076","com.fulcrologic.fulcro.components/set-query*","query","com.fulcrologic.fulcro.raw.components/set-query*","p__57077","map__57078","com.fulcrologic.fulcro.components/set-query!","com.fulcrologic.fulcro.raw.components/set-query!","G__57080","com.fulcrologic.fulcro.components/refresh-dynamic-queries!","app-ish","force?","com.fulcrologic.fulcro.raw.components.refresh_dynamic_queries_BANG_","com.fulcrologic.fulcro.components/get-indexes","G__57081","com.fulcrologic.fulcro.components/ident->components","G__57082","com.fulcrologic.fulcro.components/ident->any","com.fulcrologic.fulcro.components/prop->classes","prop","G__57083","com.fulcrologic.fulcro.components/class->all","G__57084","com.fulcrologic.fulcro.components/class->any","com.fulcrologic.fulcro.components/component->state-map","G__57085","G__57087","com.fulcrologic.fulcro.components/wrap-update-extra-props","existing","new","args__4870__auto__","argseq__4871__auto__","com.fulcrologic.fulcro.components/fragment","seq57088","self__4852__auto__","cljs.core/seq","vec__57089","cljs.core/rest","js/module$node_modules$react$index.Fragment","G__57098","com.fulcrologic.fulcro.components/ptransact!","component-or-app","com.fulcrologic.fulcro.components.transact_BANG_","G__57100","com.fulcrologic.fulcro.components/compressible-transact!","com.fulcrologic.fulcro.components/external-config","com.fulcrologic.fulcro.raw.components/external-config","com.fulcrologic.fulcro.components/refresh-component!","map__57114","prior-computed","state-atom","runtime-atom","cljs.core.swap_BANG_","cljs.core/update","cljs.core/inc","*denormalize-time*-orig-val__57115","*denormalize-time*-temp-val__57116","com.fulcrologic.fulcro.algorithms.denormalize/*denormalize-time*","com.fulcrologic.fulcro.components.get_query","ui-props","G__57117","G__57118","com.fulcrologic.fulcro.algorithms.denormalize/db->tree","G__57120","com.fulcrologic.fulcro.components/get-parent","n","cljs.core.ex_info","element","level","result","G__57121","G__57122","cljs.core/pos-int?","com.fulcrologic.fulcro.components.get_parent","com.fulcrologic.fulcro.components/check-component-registry!","com.fulcrologic.fulcro.raw.components/check-component-registry!"]],"~:used-vars",["^H",["~$cljs.core/array?","~$com.fulcrologic.fulcro.components/query","~$cljs.core/--destructure-map","~$cljs.core/keep","~$clojure.string/join","~$com.fulcrologic.fulcro.components/normalize-query","~$com.fulcrologic.fulcro.components/class->any","~$com.fulcrologic.fulcro.components/get-parent","~$com.fulcrologic.fulcro.components.goog$module$goog$object.containsKey","~$com.fulcrologic.fulcro.components/initial-state","~$cljs.core/rest","~$com.fulcrologic.fulcro.components/ident->any","~$com.fulcrologic.fulcro.components/is-factory?","~$cljs.core/keyword","~$com.fulcrologic.fulcro.raw.components/register-component!","~$com.fulcrologic.fulcro.raw.components/set-query!","~$com.fulcrologic.fulcro.raw.components/transact!!","~$cljs.core/pos-int?","~$com.fulcrologic.fulcro.components/computed","~$cljs.core/sequential?","~$com.fulcrologic.fulcro.raw.components/registry-key->class","~$com.fulcrologic.fulcro.raw.components/check-component-registry!","~$com.fulcrologic.fulcro.raw.components/component-class?","~$com.fulcrologic.fulcro.raw.components/get-ident","~$com.fulcrologic.fulcro.raw.components/computed","~$cljs.core/vector?","~$com.fulcrologic.fulcro.components/get-class","~$com.fulcrologic.fulcro.components/compressible-transact!","~$cljs.core/=","~$cljs.core/keys","~$com.fulcrologic.fulcro.components/external-config","~$com.fulcrologic.fulcro.components/component-class?","~$cljs.core/-write","~$taoensso.timbre/-log!","~$cljs.core/IndexedSeq","~$com.fulcrologic.fulcro.raw.components/component-options","~$com.fulcrologic.fulcro.components.goog$module$goog$object.extend","~$com.fulcrologic.fulcro.components/react-type","~$cljs.core/deref","~$com.fulcrologic.fulcro.components/has-ident?","~$com.fulcrologic.fulcro.components/props","~$cljs.core/seq","~$com.fulcrologic.fulcro.components/denormalize-query","~$cljs.core/apply","~$com.fulcrologic.fulcro.components/set-query!","~$cljs.core/Keyword","~$cljs.spec.alpha/def-impl","~$com.fulcrologic.fulcro.components/use-fulcro","~$cljs.core/mapv","~$cljs.core/not=","~$com.fulcrologic.fulcro.raw.components/get-computed","~$com.fulcrologic.fulcro.components/newer-props","~$com.fulcrologic.fulcro.components/*blindly-render*","~$cljs.core/Delay","~$cljs.core/atom","~$com.fulcrologic.fulcro.raw.components/normalize-query","~$com.fulcrologic.fulcro.components/children","~$com.fulcrologic.fulcro.components/ptransact!","~$js/module$node_modules$react$index.createElement","~$com.fulcrologic.fulcro.raw.components/is-factory?","~$com.fulcrologic.fulcro.components/wrap-update-extra-props","~$com.fulcrologic.fulcro.components/wrapped-render","~$com.fulcrologic.fulcro.raw.components/any->app","~$com.fulcrologic.fulcro.components/set-state!","~$com.fulcrologic.fulcro.components/fragment","~$cljs.core/set","~$com.fulcrologic.fulcro.raw.components/set-query*","~$com.fulcrologic.fulcro.components/pre-merge","~$cljs.core/empty?","~$cljs.core/fnil","~$com.fulcrologic.fulcro.components/normalize-query-elements","~$com.fulcrologic.fulcro.raw.components/props","~$cljs.core/contains?","~$cljs.core/into","~$cljs.core/map?","~$cljs.core/reset!","~$com.fulcrologic.fulcro.components/get-ident","~$com.fulcrologic.fulcro.components/component-name","~$taoensso.timbre/*config*","~$com.fulcrologic.fulcro.raw.components/refresh-dynamic-queries!","~$cljs.core/update","~$com.fulcrologic.fulcro.components/mounted?","~$cljs.core/with-meta","~$cljs.core/namespace","~$com.fulcrologic.fulcro.raw.components/isoget-in","~$cljs.core/map","~$cljs.core/PersistentVector","~$com.fulcrologic.fulcro.components/ident->components","~$com.fulcrologic.fulcro.components/add-hook-options!","~$com.fulcrologic.fulcro.components/refresh-dynamic-queries!","~$com.fulcrologic.fulcro.components/update-state!","~$com.fulcrologic.fulcro.components/computed-initial-state?","~$cljs.core/get-in","~$com.fulcrologic.fulcro.components/get-raw-react-prop","~$com.fulcrologic.fulcro.components/create-element","~$com.fulcrologic.fulcro.components/isoget-in","~$cljs.core/swap!","~$com.fulcrologic.fulcro.components/*parent*","~$com.fulcrologic.fulcro.raw.components/component-instance?","~$com.fulcrologic.fulcro.components/has-query?","~$com.fulcrologic.fulcro.components.goog$module$goog$object.get","~$com.fulcrologic.fulcro.components/shared","~$cljs.core/get","~$com.fulcrologic.fulcro.raw.components/get-query-by-id","~$js/module$node_modules$react$index.Fragment","~$com.fulcrologic.fulcro.components/query-id","~$com.fulcrologic.fulcro.components/*app*","~$com.fulcrologic.fulcro.components/get-initial-state","~$com.fulcrologic.fulcro.components/component?","~$com.fulcrologic.fulcro.components/set-query*","~$com.fulcrologic.fulcro.raw.components/transact!","~$com.fulcrologic.fulcro.raw.components/configure-anonymous-component!","~$com.fulcrologic.fulcro.components.goog$module$goog$object.getValueByKeys","~$com.fulcrologic.fulcro.components/*shared*","~$com.fulcrologic.fulcro.raw.components/newer-props","~$cljs.core/clj->js","~$com.fulcrologic.fulcro.components/get-state","~$com.fulcrologic.fulcro.components.goog$module$goog$object.set","~$com.fulcrologic.fulcro.raw.components/component-name","~$com.fulcrologic.fulcro.components/has-pre-merge?","~$com.fulcrologic.fulcro.components/transact!","~$com.fulcrologic.fulcro.algorithms.denormalize/db->tree","~$com.fulcrologic.fulcro.components/any->app","~$com.fulcrologic.fulcro.components/get-extra-props","~$cljs.core/nth","~$cljs.core/ex-info","~$cljs.core/meta","~$com.fulcrologic.fulcro.components/tunnel-props!","~$com.fulcrologic.fulcro.components/configure-component!","~$js/module$node_modules$react$index.useState","~$com.fulcrologic.fulcro.components/*depth*","~$cljs.core/second","~$com.fulcrologic.fulcro.components/link-query","~$js/goog.DEBUG","~$com.fulcrologic.fulcro.components/component-instance?","~$com.fulcrologic.fulcro.raw.components/normalize-query-elements","~$com.fulcrologic.fulcro.components/get-computed","~$com.fulcrologic.fulcro.components/prop->classes","~$cljs.core/next","~$com.fulcrologic.fulcro.components/link-element","~$com.fulcrologic.fulcro.components/get-query","~$com.fulcrologic.fulcro.raw.components/query-id","~$com.fulcrologic.fulcro.components/registry-key->class","~$com.fulcrologic.fulcro.raw.components/get-initial-state","~$com.fulcrologic.fulcro.components/factory","~$com.fulcrologic.fulcro.components/check-component-registry!","~$com.fulcrologic.fulcro.components/force-children","~$cljs.core/not","~$com.fulcrologic.fulcro.algorithms.lookup/app-algorithm","~$com.fulcrologic.fulcro.components/make-state-map","~$com.fulcrologic.fulcro.components/refresh-component!","~$com.fulcrologic.fulcro.components/isoget","~$com.fulcrologic.fulcro.raw.components/denormalize-query","~$com.fulcrologic.fulcro.components/class->all","~$cljs.core/assoc","~$com.fulcrologic.fulcro.components/raw->newest-props","~$com.fulcrologic.fulcro.components/configure-hooks-component!","~$com.fulcrologic.fulcro.components/computed-factory","~$com.fulcrologic.fulcro.raw.components/get-class","~$com.fulcrologic.fulcro.raw.components/class->registry-key","~$js/module$node_modules$react$index.useEffect","~$cljs.core/coll?","~$com.fulcrologic.fulcro.raw.components/*query-state*","~$com.fulcrologic.fulcro.raw.components/external-config","~$com.fulcrologic.fulcro.components/register-component!","~$com.fulcrologic.fulcro.algorithms.denormalize/*denormalize-time*","~$com.fulcrologic.fulcro.components/transact!!","~$com.fulcrologic.fulcro.components/ident","~$com.fulcrologic.fulcro.components/component-options","~$com.fulcrologic.fulcro.components/class->registry-key","~$cljs.core/first","~$cljs.core/seq?","~$com.fulcrologic.fulcro.components/get-indexes","~$com.fulcrologic.fulcro.components/depth","~$js/module$node_modules$react$index.Component","~$com.fulcrologic.fulcro.raw.components/link-query","~$com.fulcrologic.fulcro.components/has-feature?","~$cljs.core/name","~$cljs.core/merge","~$com.fulcrologic.fulcro.raw.components/link-element","~$com.fulcrologic.fulcro.raw.components/get-query","~$com.fulcrologic.fulcro.components/has-initial-app-state?","~$js/Error","~$com.fulcrologic.fulcro.components/component->state-map","~$com.fulcrologic.fulcro.raw.components/component-type","~$cljs.core/type","~$cljs.core/inc","~$cljs.core/type->str","~$com.fulcrologic.fulcro.raw.components/isoget","~$com.fulcrologic.fulcro.components/get-query-by-id"]]],"~:cache-keys",["~#cmap",[["^1V","goog/dom/tagname.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^H",[]],"~:deps-syms",["^1B","~$goog.dom.HtmlElement"]]],["^1V","goog/async/freelist.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^6F",["^ ","^6G",null,"^6H",["^H",[]],"^6I",["^1B"]]],["^1V","cljs/core/async/impl/ioc_helpers.cljs"],["c55a0f6d67abac2efcfddf7621cac07d90298cab","^6F",["^ ","^6G",null,"^6H",["^H",[]],"^6I",["^1B","^1=","~$cljs.core.async.impl.protocols"]]],["^1V","goog/i18n/datetimesymbols.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^6F",["^ ","^6G",null,"^6H",["^H",[]],"^6I",["^1B"]]],["^1V","goog/labs/useragent/platform.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^6F",["^ ","^6G",null,"^6H",["^H",[]],"^6I",["^1B","~$goog.string.internal","~$goog.labs.userAgent.util"]]],["^1V","expound/util.cljc"],["f84ecd45aeef38fd6f1c53d8323e6abc5dc5a0e4","^6F",["^ ","^6G",null,"^6H",["^H",[]],"^6I",["^1B","^1="]]],["^1V","goog/crypt/crypt.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^6F",["^ ","^6G",null,"^6H",["^H",[]],"^6I",["^1B","~$goog.asserts"]]],["^1V","cljs/core/async.cljs"],["c55a0f6d67abac2efcfddf7621cac07d90298cab","^6F",["^ ","^6G",null,"^6H",["^H",[]],"^6I",["^1B","^1=","^6K","~$cljs.core.async.impl.channels","~$cljs.core.async.impl.buffers","~$cljs.core.async.impl.timers","~$cljs.core.async.impl.dispatch","~$cljs.core.async.impl.ioc-helpers","~$goog.array"]]],["^1V","goog/timer/timer.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^6F",["^ ","^6G",null,"^6H",["^H",[]],"^6I",["^1B","~$goog.Promise","~$goog.events.EventTarget","~$goog.Thenable"]]],["^1V","com/fulcrologic/fulcro/algorithms/lookup.cljc"],["aa10be524799b8f5dcb1cab659b996577fc15d41","^6F",["^ ","^6G",null,"^6H",["^H",[]],"^6I",["^1B","^1=","^19"]]],["^1V","cljs/spec/gen/alpha.cljs"],["e2ad9a4500a5ecabaf01429c4f0d6f7fac146951","^6F",["^ ","^6G",null,"^6H",["^H",[]],"^6I",["^1B","^1=","~$goog.Uri"]]],["^1V","cljs/tools/reader/impl/utils.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^6F",["^ ","^6G",null,"^6H",["^H",[]],"^6I",["^1B","^1=","^1F","~$goog.string"]]],["^1V","goog/math/math.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^6F",["^ ","^6G",null,"^6H",["^H",[]],"^6I",["^1B","^6N"]]],["^1V","goog/html/trustedtypes.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^6F",["^ ","^6G",null,"^6H",["^H",[]],"^6I",["^1B"]]],["^1V","goog/string/stringformat.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^6F",["^ ","^6G",null,"^6H",["^H",[]],"^6I",["^1B","^6Y"]]],["^1V","goog/events/eventtype.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^6F",["^ ","^6G",null,"^6H",["^H",[]],"^6I",["^1B","~$goog.events.BrowserFeature","~$goog.userAgent"]]],["^1V","goog/labs/useragent/browser.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^6F",["^ ","^6G",null,"^6H",["^H",[]],"^6I",["^1B","^6T","^1A","^6M","^6L"]]],["^1V","goog/html/safeurl.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^6F",["^ ","^6G",null,"^6H",["^H",[]],"^6I",["^1B","^6N","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.i18n.bidi.Dir","~$goog.i18n.bidi.DirectionalString","~$goog.string.Const","~$goog.string.TypedString","^6L"]]],["^1V","goog/array/array.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^6F",["^ ","^6G",null,"^6H",["^H",[]],"^6I",["^1B","^6N"]]],["^1V","com/fulcrologic/fulcro/algorithms/do_not_use.cljc"],["aa10be524799b8f5dcb1cab659b996577fc15d41","^6F",["^ ","^6G",null,"^6H",["^H",[]],"^6I",["^1B","^1=","^19","^1F","^17","^1A","~$goog.crypt","~$goog.crypt.base64","^?"]]],["^1V","expound/problems.cljc"],["f84ecd45aeef38fd6f1c53d8323e6abc5dc5a0e4","^6F",["^ ","^6G",null,"^6H",["^H",[]],"^6I",["^1B","^1=","~$expound.paths","^?"]]],["^1V","goog/useragent/useragent.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^6F",["^ ","^6G",null,"^6H",["^H",[]],"^6I",["^1B","~$goog.labs.userAgent.browser","~$goog.labs.userAgent.engine","~$goog.labs.userAgent.platform","^6M","~$goog.reflect","^6L"]]],["^1V","goog/structs/prioritypool.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^6F",["^ ","^6G",null,"^6H",["^H",[]],"^6I",["^1B","~$goog.structs.Pool","~$goog.structs.PriorityQueue"]]],["^1V","goog/events/eventlike.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^6F",["^ ","^6G",null,"^6H",["^H",[]],"^6I",["^1B","~$goog.events.Event","~$goog.events.EventId"]]],["^1V","goog/async/run.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^6F",["^ ","^6G",null,"^6H",["^H",[]],"^6I",["^1B","~$goog.async.WorkQueue","~$goog.async.nextTick","~$goog.async.throwException"]]],["^1V","com/cognitect/transit/impl/reader.js"],["f8b4f570ca4d41649190efecac27a5932cc11429","^6F",["^ ","^6G",null,"^6H",["^H",[]],"^6I",["^1B","~$com.cognitect.transit.impl.decoder","~$com.cognitect.transit.caching"]]],["^1V","goog/debug/error.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^6F",["^ ","^6G",null,"^6H",["^H",[]],"^6I",["^1B"]]],["^1V","goog/async/workqueue.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^6F",["^ ","^6G",null,"^6H",["^H",[]],"^6I",["^1B","~$goog.async.FreeList","^6N"]]],["^1V","goog/events/events.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^6F",["^ ","^6G",null,"^6H",["^H",[]],"^6I",["^1B","^6N","~$goog.debug.entryPointRegistry","~$goog.events.BrowserEvent","^6Z","~$goog.events.Listenable","~$goog.events.ListenerMap","~$goog.debug.ErrorHandler","^7@","~$goog.events.EventLike","~$goog.events.EventWrapper","~$goog.events.ListenableKey","~$goog.events.Listener"]]],["^1V","goog/promise/resolver.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^6F",["^ ","^6G",null,"^6H",["^H",[]],"^6I",["^1B","^6U"]]],["^1V","goog/events/browserfeature.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^6F",["^ ","^6G",null,"^6H",["^H",[]],"^6I",["^1B"]]],["^1V","cljs/tools/reader/edn.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^6F",["^ ","^6G",null,"^6H",["^H",[]],"^6I",["^1B","^1=","~$cljs.tools.reader.impl.errors","~$cljs.tools.reader.reader-types","~$cljs.tools.reader.impl.utils","~$cljs.tools.reader.impl.commons","~$cljs.tools.reader","^6Y","~$goog.string.StringBuffer"]]],["^1V","goog/structs/priorityqueue.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^6F",["^ ","^6G",null,"^6H",["^H",[]],"^6I",["^1B","~$goog.structs.Heap"]]],["^1V","goog/net/xhrio.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^6F",["^ ","^6G",null,"^6H",["^H",[]],"^6I",["^1B","~$goog.Timer","^6T","^6N","~$goog.collections.maps","^7G","^6V","~$goog.json.hybrid","~$goog.log","~$goog.net.ErrorCode","~$goog.net.EventType","~$goog.net.HttpStatus","~$goog.net.XmlHttp","^1A","^6Y","~$goog.uri.utils","^6[","^6X","^7K","~$goog.net.XhrLike","~$goog.net.XmlHttpFactory"]]],["^1V","goog/promise/thenable.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^6F",["^ ","^6G",null,"^6H",["^H",[]],"^6I",["^1B","^6U"]]],["^1V","goog/collections/iters.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^6F",["^ ","^6G",null,"^6H",["^H",[]],"^6I",["^1B"]]],["^1V","com/fulcrologic/fulcro/algorithms/transit.cljc"],["aa10be524799b8f5dcb1cab659b996577fc15d41","^6F",["^ ","^6G",null,"^6H",["^H",[]],"^6I",["^1B","^1=","~$cognitect.transit","^F","^?","~$com.fulcrologic.fulcro.algorithms.tempid"]]],["^1V","goog/dom/nodetype.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^6F",["^ ","^6G",null,"^6H",["^H",[]],"^6I",["^1B"]]],["^1V","com/fulcrologic/guardrails/utils.cljc"],["1c3188d13b2f3b2324bad6f65cc78cd4b193445e","^6F",["^ ","^6G",null,"^6H",["^H",[]],"^6I",["^1B","^1=","^1H"]]],["^1V","cljs/tools/reader/impl/inspect.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^6F",["^ ","^6G",null,"^6H",["^H",[]],"^6I",["^1B","^1="]]],["^1V","com/cognitect/transit/util.js"],["f8b4f570ca4d41649190efecac27a5932cc11429","^6F",["^ ","^6G",null,"^6H",["^H",[]],"^6I",["^1B","^1A"]]],["^1V","cljs/pprint.cljs"],["e2ad9a4500a5ecabaf01429c4f0d6f7fac146951","^6F",["^ ","^6G",null,"^6H",["^H",[]],"^6I",["^1B","^1=","^1F","^6Y","^7U"]]],["^1V","cljs/tools/reader.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^6F",["^ ","^6G",null,"^6H",["^H",[]],"^6I",["^1B","^1=","^7Q","^7R","^7S","^7P","^6T","^6Y","^7U"]]],["^1V","expound/alpha.cljc"],["f84ecd45aeef38fd6f1c53d8323e6abc5dc5a0e4","^6F",["^ ","^6G",null,"^6H",["^H",[]],"^6I",["^1B","^1=","~$expound.problems","^?","^1F","^16","~$expound.printer","~$expound.util","~$expound.ansi"]]],["^1V","taoensso/timbre.cljc"],["ed86c0ab3cf1c4771c5f9bf201405e20c3027ced","^6F",["^ ","^6G",null,"^6H",["^H",[]],"^6I",["^1B","^1=","^1F","~$goog.i18n.DateTimeFormat","~$taoensso.encore","~$taoensso.timbre.appenders.core"]]],["^1V","goog/net/wrapperxmlhttpfactory.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^6F",["^ ","^6G",null,"^6H",["^H",[]],"^6I",["^1B","^84","^85"]]],["^1V","goog/date/utcdatetime.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^6F",["^ ","^6G",null,"^6H",["^H",[]],"^6I",["^1B","~$goog.date","~$goog.date.Date","~$goog.date.DateTime","~$goog.date.Interval"]]],["^1V","goog/i18n/nativelocaledigits.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^6F",["^ ","^6G",null,"^6H",["^H",[]],"^6I",["^1B"]]],["^1V","goog/events/eventtarget.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^6F",["^ ","^6G",null,"^6H",["^H",[]],"^6I",["^1B","~$goog.Disposable","^6N","~$goog.events","^7?","^7I","^7J","^1A","^7@","^7L","^7N"]]],["^1V","com/fulcrologic/guardrails/core.cljc"],["1c3188d13b2f3b2324bad6f65cc78cd4b193445e","^6F",["^ ","^6G",null,"^6H",["^H",[]],"^6I",["^1B","^1=","~$com.fulcrologic.guardrails.impl.externs","~$com.fulcrologic.guardrails.utils","^A","^?","^1F","~$expound.alpha"]]],["^1V","goog/disposable/disposable.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^6F",["^ ","^6G",null,"^6H",["^H",[]],"^6I",["^1B","~$goog.disposable.IDisposable","~$goog.dispose","~$goog.disposeAll"]]],["^1V","expound/ansi.cljc"],["f84ecd45aeef38fd6f1c53d8323e6abc5dc5a0e4","^6F",["^ ","^6G",null,"^6H",["^H",[]],"^6I",["^1B","^1=","^1F"]]],["^1V","goog/string/typedstring.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^6F",["^ ","^6G",null,"^6H",["^H",[]],"^6I",["^1B"]]],["~:shadow.build.npm/resource","node_modules/react/index.js"],["1c6e82d3f9756822c3b08dd8f8e1d7c23a7f1630","3679a1a898d0c80b330819274df3fe1302fa19d1","a69a7f3d4a4636bf9035bc53c05b2d99a7b8af7f","^6F",["^ ","^6G",null,"^6H",["^H",[]],"^6I",["~$shadow.js","~$module$node_modules$react$cjs$react_production_min","~$module$node_modules$react$cjs$react_development"]]],["^1V","shadow/js.js"],["dcbbe536346aae67f50c45a19f6541141d5c98c1","^6F",["^ ","^6G",null,"^6H",["^H",[]],"^6I",["^1B"]]],["^1V","goog/object/object.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^6F",["^ ","^6G",null,"^6H",["^H",[]],"^6I",["^1B"]]],["^1V","goog/dom/asserts.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^6F",["^ ","^6G",null,"^6H",["^H",[]],"^6I",["^1B","^6N"]]],["^1V","taoensso/encore.cljc"],["8ce32d99c08a853f8a56322b5aab80e59c3bd4d6","^6F",["^ ","^6G",null,"^6H",["^H",[]],"^6I",["^1B","^1=","^1F","^16","~$cljs.reader","~$cljs.tools.reader.edn","^1A","^6T","^6Y","~$goog.string.format","^7U","^8D","~$goog.net.XhrIo","~$goog.net.XhrIoPool","~$goog.Uri.QueryData","^80","^7[","~$taoensso.truss"]]],["^1V","goog/structs/set.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^6F",["^ ","^6G",null,"^6H",["^H",[]],"^6I",["^1B","~$goog.structs","~$goog.structs.Collection","~$goog.structs.Map","~$goog.iter.Iterator"]]],"~:SHADOW-TIMESTAMP",[1676259735000,1676259735000,1676259734000],["^8K","node_modules/react/cjs/react.development.js"],["1c6e82d3f9756822c3b08dd8f8e1d7c23a7f1630","3679a1a898d0c80b330819274df3fe1302fa19d1","1df918e8981877c2759388dfae58a059e089860d","^6F",["^ ","^6G",null,"^6H",["^H",[]],"^6I",["^8L"]]],["^1V","taoensso/timbre/appenders/core.cljc"],["ed86c0ab3cf1c4771c5f9bf201405e20c3027ced","^6F",["^ ","^6G",null,"^6H",["^H",[]],"^6I",["^1B","^1=","^1F","^8="]]],["^1V","goog/math/long.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^6F",["^ ","^6G",null,"^6H",["^H",[]],"^6I",["^1B","^6N","^7<"]]],["^1V","goog/events/listener.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^6F",["^ ","^6G",null,"^6H",["^H",[]],"^6I",["^1B","^7N","^7I"]]],["^1V","goog/html/trustedresourceurl.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^6F",["^ ","^6G",null,"^6H",["^H",[]],"^6I",["^1B","^6N","~$goog.fs.blob","^70","~$goog.html.SafeScript","~$goog.html.trustedtypes","^72","^73","^74","^75"]]],["^1V","cljs/core/async/impl/channels.cljs"],["c55a0f6d67abac2efcfddf7621cac07d90298cab","^6F",["^ ","^6G",null,"^6H",["^H",[]],"^6I",["^1B","^1=","^6K","^6R","^6P"]]],["^1V","goog/events/listenermap.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^6F",["^ ","^6G",null,"^6H",["^H",[]],"^6I",["^1B","^6T","^7O","^1A","^7@","^7I","^7N"]]],["^1V","goog/events/eventid.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^6F",["^ ","^6G",null,"^6H",["^H",[]],"^6I",["^1B"]]],["^1V","taoensso/truss.cljs"],["02c08dae83153a50eb946c4d742f574a24bb2a76","^6F",["^ ","^6G",null,"^6H",["^H",[]],"^6I",["^1B","^1=","~$taoensso.truss.impl"]]],["^1V","com/fulcrologic/guardrails/registry.cljc"],["1c3188d13b2f3b2324bad6f65cc78cd4b193445e","^6F",["^ ","^6G",null,"^6H",["^H",[]],"^6I",["^1B","^1="]]],["^1V","goog/string/internal.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^6F",["^ ","^6G",null,"^6H",["^H",[]],"^6I",["^1B"]]],["^1V","goog/events/eventwrapper.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^6F",["^ ","^6G",null,"^6H",["^H",[]],"^6I",["^1B","~$goog.events.EventHandler","~$goog.events.ListenableType"]]],["^1V","edn_query_language/core.cljc"],["839028d06d9cc88b18b20c77c53a2bb77140d1f7","^6F",["^ ","^6G",null,"^6H",["^H",[]],"^6I",["^1B","^1=","^?"]]],["^1V","goog/functions/functions.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^6F",["^ ","^6G",null,"^6H",["^H",[]],"^6I",["^1B"]]],["^1V","cljs/core/async/impl/dispatch.cljs"],["c55a0f6d67abac2efcfddf7621cac07d90298cab","^6F",["^ ","^6G",null,"^6H",["^H",[]],"^6I",["^1B","^1=","^6P","^7B"]]],["^1V","goog/html/safestyle.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^6F",["^ ","^6G",null,"^6H",["^H",[]],"^6I",["^1B","^74","~$goog.html.SafeUrl","^75","^6N","^6L"]]],["^1V","goog/dom/safe.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^6F",["^ ","^6G",null,"^6H",["^H",[]],"^6I",["^1B","^6N","~$goog.dom.asserts","~$goog.functions","~$goog.html.SafeHtml","^90","~$goog.html.SafeStyle","^95","^71","~$goog.html.uncheckedconversions","^74","^6L"]]],["^1V","expound/paths.cljc"],["f84ecd45aeef38fd6f1c53d8323e6abc5dc5a0e4","^6F",["^ ","^6G",null,"^6H",["^H",[]],"^6I",["^1B","^1=","^?","^8:"]]],["^1V","taoensso/truss/impl.cljs"],["02c08dae83153a50eb946c4d742f574a24bb2a76","^6F",["^ ","^6G",null,"^6H",["^H",[]],"^6I",["^1B","^1=","^16"]]],["^1V","clojure/walk.cljs"],["e2ad9a4500a5ecabaf01429c4f0d6f7fac146951","^6F",["^ ","^6G",null,"^6H",["^H",[]],"^6I",["^1B","^1="]]],["^1V","goog/useragent/product.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^6F",["^ ","^6G",null,"^6H",["^H",[]],"^6I",["^1B","^79","^7;","^6["]]],["^1V","cljs/core/async/impl/protocols.cljs"],["c55a0f6d67abac2efcfddf7621cac07d90298cab","^6F",["^ ","^6G",null,"^6H",["^H",[]],"^6I",["^1B","^1="]]],["^1V","goog/net/eventtype.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^6F",["^ ","^6G",null,"^6H",["^H",[]],"^6I",["^1B"]]],["^1V","goog/structs/map.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^6F",["^ ","^6G",null,"^6H",["^H",[]],"^6I",["^1B","~$goog.collections.iters","^8Y","~$goog.iter.StopIteration","~$goog.iter.es6"]]],["^1V","goog/net/xhriopool.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^6F",["^ ","^6G",null,"^6H",["^H",[]],"^6I",["^1B","^8R","~$goog.structs.PriorityPool","^8X"]]],["^1V","com/cognitect/transit/delimiters.js"],["f8b4f570ca4d41649190efecac27a5932cc11429","^6F",["^ ","^6G",null,"^6H",["^H",[]],"^6I",["^1B"]]],["^1V","goog/date/date.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^6F",["^ ","^6G",null,"^6H",["^H",[]],"^6I",["^1B","^6N","~$goog.i18n.DateTimeSymbols","^6Y"]]],["^1V","goog/html/safehtml.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^6F",["^ ","^6G",null,"^6H",["^H",[]],"^6I",["^1B","^74","^72","^73","^90","^99","~$goog.html.SafeStyleSheet","^95","~$goog.dom.TagName","^71","^75","^6N","^79","^6T","^1A","^6L","~$goog.dom.tags","^91"]]],["^1V","goog/dom/tags.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^6F",["^ ","^6G",null,"^6H",["^H",[]],"^6I",["^1B","^1A"]]],["^1V","goog/math/size.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^6F",["^ ","^6G",null,"^6H",["^H",[]],"^6I",["^1B"]]],["^1V","com/fulcrologic/fulcro/raw/components.cljc"],["aa10be524799b8f5dcb1cab659b996577fc15d41","^6F",["^ ","^6G",null,"^6H",["^H",[]],"^6I",["^1B","^1=","^1A","^16","^1F","^1H","^1;","^1D","^14","~$com.fulcrologic.fulcro.algorithms.transit","^17","^8=","^19"]]],["^1V","goog/structs/queue.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^6F",["^ ","^6G",null,"^6H",["^H",[]],"^6I",["^1B","^6T"]]],["^1V","goog/labs/useragent/engine.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^6F",["^ ","^6G",null,"^6H",["^H",[]],"^6I",["^1B","^6T","^6L","^6M"]]],["^1V","com/cognitect/transit/impl/decoder.js"],["f8b4f570ca4d41649190efecac27a5932cc11429","^6F",["^ ","^6G",null,"^6H",["^H",[]],"^6I",["^1B","~$com.cognitect.transit.util","~$com.cognitect.transit.delimiters","^7E","~$com.cognitect.transit.types"]]],["^1V","goog/fs/blob.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^6F",["^ ","^6G",null,"^6H",["^H",[]],"^6I",["^1B"]]],["^1V","cljs/reader.cljs"],["e2ad9a4500a5ecabaf01429c4f0d6f7fac146951","^6F",["^ ","^6G",null,"^6H",["^H",[]],"^6I",["^1B","^1=","^1A","^7T","^8P","^7U"]]],["^1V","goog/dom/dom.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^6F",["^ ","^6G",null,"^6H",["^H",[]],"^6I",["^1B","^6T","^6N","~$goog.dom.BrowserFeature","~$goog.dom.NodeType","^9A","~$goog.dom.safe","^98","^9:","~$goog.math.Coordinate","~$goog.math.Size","^1A","^6Y","^74","~$goog.string.Unicode","^6["]]],["^1V","com/fulcrologic/guardrails/impl/externs.cljc"],["1c3188d13b2f3b2324bad6f65cc78cd4b193445e","^6F",["^ ","^6G",null,"^6H",["^H",[]],"^6I",["^1B","^1=","~$com.fulcrologic.guardrails.registry","^8F"]]],["^1V","com/fulcrologic/fulcro/components.cljc"],["aa10be524799b8f5dcb1cab659b996577fc15d41","^6F",["^ ","^6G",null,"^6H",["^H",[]],"^6I",["^1B","^1=","^1A","^[","^17","^?","^19","^1H","^1F","^1D","^1;","^14","^1?","^F","^16"]]],["^1V","goog/asserts/asserts.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^6F",["^ ","^6G",null,"^6H",["^H",[]],"^6I",["^1B","~$goog.debug.Error","^9H"]]],["^1V","cljs/core/async/impl/buffers.cljs"],["c55a0f6d67abac2efcfddf7621cac07d90298cab","^6F",["^ ","^6G",null,"^6H",["^H",[]],"^6I",["^1B","^1=","^6K"]]],["^1V","goog/i18n/timezone.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^6F",["^ ","^6G",null,"^6H",["^H",[]],"^6I",["^1B","^6T","~$goog.date.DateLike","^1A","^6Y"]]],["^1V","goog/uri/uri.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^6F",["^ ","^6G",null,"^6H",["^H",[]],"^6I",["^1B","^6T","^6N","^7X","^6Y","^8V","^83","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^1V","goog/net/errorcode.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^6F",["^ ","^6G",null,"^6H",["^H",[]],"^6I",["^1B"]]],["^1V","goog/collections/maps.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^6F",["^ ","^6G",null,"^6H",["^H",[]],"^6I",["^1B"]]],["^1V","goog/iter/es6.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^6F",["^ ","^6G",null,"^6H",["^H",[]],"^6I",["^1B","~$goog.iter.Iterable","^8Y","^9<"]]],["^1V","goog/i18n/bidi.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^6F",["^ ","^6G",null,"^6H",["^H",[]],"^6I",["^1B"]]],["^1V","goog/debug/errorhandler.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^6F",["^ ","^6G",null,"^6H",["^H",[]],"^6I",["^1B","^8C","^6N","~$goog.debug.EntryPointMonitor","^9N"]]],["^1V","goog/disposable/idisposable.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^6F",["^ ","^6G",null,"^6H",["^H",[]],"^6I",["^1B"]]],["^1V","goog/promise/promise.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^6F",["^ ","^6G",null,"^6H",["^H",[]],"^6I",["^1B","^6W","^6N","^7F","~$goog.async.run","^7C","^9N","~$goog.promise.Resolver"]]],["^1V","cljs/core/async/impl/timers.cljs"],["c55a0f6d67abac2efcfddf7621cac07d90298cab","^6F",["^ ","^6G",null,"^6H",["^H",[]],"^6I",["^1B","^1=","^6K","^6O","^6R"]]],["^1V","cljs/spec/alpha.cljs"],["e2ad9a4500a5ecabaf01429c4f0d6f7fac146951","^6F",["^ ","^6G",null,"^6H",["^H",[]],"^6I",["^1B","^1=","^1A","^1H","~$cljs.spec.gen.alpha","^1F"]]],["^1V","goog/fs/url.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^6F",["^ ","^6G",null,"^6H",["^H",[]],"^6I",["^1B"]]],["^1V","goog/base.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^6F",["^ ","^6G",null,"^6H",["^H",[]],"^6I",[]]],["^1V","goog/json/hybrid.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^6F",["^ ","^6G",null,"^6H",["^H",[]],"^6I",["^1B","^6N","~$goog.json"]]],["^1V","goog/structs/structs.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^6F",["^ ","^6G",null,"^6H",["^H",[]],"^6I",["^1B","^6T","^1A"]]],["^1V","cljs/tools/reader/impl/errors.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^6F",["^ ","^6G",null,"^6H",["^H",[]],"^6I",["^1B","^1=","^7Q","^1F","~$cljs.tools.reader.impl.inspect"]]],["^1V","goog/disposable/dispose.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^6F",["^ ","^6G",null,"^6H",["^H",[]],"^6I",["^1B"]]],["^1V","clojure/string.cljs"],["e2ad9a4500a5ecabaf01429c4f0d6f7fac146951","^6F",["^ ","^6G",null,"^6H",["^H",[]],"^6I",["^1B","^1=","^6Y","^7U"]]],["^1V","com/fulcrologic/fulcro/algorithms/tempid.cljc"],["aa10be524799b8f5dcb1cab659b996577fc15d41","^6F",["^ ","^6G",null,"^6H",["^H",[]],"^6I",["^1B","^1=","^19","^1H"]]],["^1V","goog/structs/pool.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^6F",["^ ","^6G",null,"^6H",["^H",[]],"^6I",["^1B","^8C","~$goog.structs.Queue","~$goog.structs.Set"]]],["^8K","node_modules/react/cjs/react.production.min.js"],["1c6e82d3f9756822c3b08dd8f8e1d7c23a7f1630","3679a1a898d0c80b330819274df3fe1302fa19d1","f5f2e0db62a5ce44eafff60d4f3577b8796734e4","^6F",["^ ","^6G",null,"^6H",["^H",[]],"^6I",["^8L"]]],["^1V","goog/net/httpstatus.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^6F",["^ ","^6G",null,"^6H",["^H",[]],"^6I",["^1B"]]],["^1V","goog/i18n/datetimeformat.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^6F",["^ ","^6G",null,"^6H",["^H",[]],"^6I",["^1B","^6N","^8?","~$goog.date.UtcDateTime","^9?","~$goog.i18n.LocaleFeature","~$goog.i18n.NativeLocaleDigits","~$goog.i18n.TimeZone","^6Y","~$goog.i18n.DateTimeSymbolsType"]]],["^1V","com/cognitect/transit/handlers.js"],["f8b4f570ca4d41649190efecac27a5932cc11429","^6F",["^ ","^6G",null,"^6H",["^H",[]],"^6I",["^1B","^9D","^9F","~$goog.math.Long"]]],["^1V","goog/structs/heap.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^6F",["^ ","^6G",null,"^6H",["^H",[]],"^6I",["^1B","^6T","^1A","~$goog.structs.Node"]]],["^1V","goog/debug/entrypointregistry.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^6F",["^ ","^6G",null,"^6H",["^H",[]],"^6I",["^1B","^6N"]]],["^1V","goog/string/string.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^6F",["^ ","^6G",null,"^6H",["^H",[]],"^6I",["^1B","^9I","^9:","^74","^6L"]]],["^1V","com/cognitect/transit/types.js"],["f8b4f570ca4d41649190efecac27a5932cc11429","^6F",["^ ","^6G",null,"^6H",["^H",[]],"^6I",["^1B","^9D","~$com.cognitect.transit.eq","^:4"]]],["^1V","goog/reflect/reflect.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^6F",["^ ","^6G",null,"^6H",["^H",[]],"^6I",["^1B"]]],["^1V","goog/labs/useragent/util.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^6F",["^ ","^6G",null,"^6H",["^H",[]],"^6I",["^1B","~$goog.labs.userAgent","^6L"]]],["^1V","expound/printer.cljc"],["f84ecd45aeef38fd6f1c53d8323e6abc5dc5a0e4","^6F",["^ ","^6G",null,"^6H",["^H",[]],"^6I",["^1B","^1=","^1F","^?","^C","^16","^8:","^8;","^78","^1H","^8Q","^6Y"]]],["^1V","com/cognitect/transit/eq.js"],["f8b4f570ca4d41649190efecac27a5932cc11429","^6F",["^ ","^6G",null,"^6H",["^H",[]],"^6I",["^1B","^9D"]]],["^1V","goog/debug/debug.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^6F",["^ ","^6G",null,"^6H",["^H",[]],"^6I",["^1B","^6T","~$goog.debug.errorcontext"]]],["^1V","goog/string/stringbuffer.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^6F",["^ ","^6G",null,"^6H",["^H",[]],"^6I",["^1B"]]],["^1V","goog/math/coordinate.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^6F",["^ ","^6G",null,"^6H",["^H",[]],"^6I",["^1B","~$goog.math"]]],["^1V","goog/debug/errorcontext.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^6F",["^ ","^6G",null,"^6H",["^H",[]],"^6I",["^1B"]]],["^1V","cljs/tools/reader/reader_types.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^6F",["^ ","^6G",null,"^6H",["^H",[]],"^6I",["^1B","^1=","^7R","^6Y","^7U"]]],["^1V","goog/iter/iter.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^6F",["^ ","^6G",null,"^6H",["^H",[]],"^6I",["^1B","^6T","^6N","~$goog.debug","^97","^:9"]]],["^1V","goog/labs/useragent/useragent.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^6F",["^ ","^6G",null,"^6H",["^H",[]],"^6I",["^1B"]]],["^1V","goog/async/nexttick.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^6F",["^ ","^6G",null,"^6H",["^H",[]],"^6I",["^1B","^7G","~$goog.dom","^9A","^97","^79","^7:"]]],["^1V","goog/html/uncheckedconversions.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^6F",["^ ","^6G",null,"^6H",["^H",[]],"^6I",["^1B","^6N","^98","^90","^99","^9@","^95","^71","^74","^6L","^72"]]],["^1V","com/cognitect/transit/caching.js"],["f8b4f570ca4d41649190efecac27a5932cc11429","^6F",["^ ","^6G",null,"^6H",["^H",[]],"^6I",["^1B","^9E"]]],["^1V","goog/events/event.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^6F",["^ ","^6G",null,"^6H",["^H",[]],"^6I",["^1B","^8C","^7@"]]],["^1V","cljs/tools/reader/impl/commons.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^6F",["^ ","^6G",null,"^6H",["^H",[]],"^6I",["^1B","^1=","^7P","^7Q","^7R"]]],["^1V","goog/events/eventhandler.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^6F",["^ ","^6G",null,"^6H",["^H",[]],"^6I",["^1B","^8C","^8D","^1A","^7?","^7@","^6V","^7M"]]],["^1V","goog/dom/htmlelement.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^6F",["^ ","^6G",null,"^6H",["^H",[]],"^6I",["^1B"]]],["^1V","cljs/core.cljs"],["e2ad9a4500a5ecabaf01429c4f0d6f7fac146951","^6F",["^ ","^6G",null,"^6H",["^H",[]],"^6I",["^1B","^:4","~$goog.math.Integer","^6Y","^1A","^6T","^6X","^7U"]]],["^1V","com/cognitect/transit.js"],["f8b4f570ca4d41649190efecac27a5932cc11429","^6F",["^ ","^6G",null,"^6H",["^H",[]],"^6I",["^1B","^9D","~$com.cognitect.transit.impl.reader","~$com.cognitect.transit.impl.writer","^9F","^:6","^7D","^7E"]]],["^1V","goog/html/safescript.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^6F",["^ ","^6G",null,"^6H",["^H",[]],"^6I",["^1B","^74","^75","^91","^6N"]]],["^1V","goog/log/log.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^6F",["^ ","^6G",null,"^6H",["^H",[]],"^6I",["^1B","^6N","^::"]]],["^1V","goog/async/throwexception.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^6F",["^ ","^6G",null,"^6H",["^H",[]],"^6I",["^1B"]]],["^1V","goog/html/safestylesheet.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^6F",["^ ","^6G",null,"^6H",["^H",[]],"^6I",["^1B","^74","^99","^75","^1A","^6N","^6L"]]],["^1V","goog/structs/collection.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^6F",["^ ","^6G",null,"^6H",["^H",[]],"^6I",["^1B"]]],["^1V","goog/events/browserevent.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^6F",["^ ","^6G",null,"^6H",["^H",[]],"^6I",["^1B","^::","^7?","~$goog.events.EventType","^7<","^6["]]],["^1V","goog/math/integer.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^6F",["^ ","^6G",null,"^6H",["^H",[]],"^6I",["^1B","^7<"]]],["^1V","goog/structs/node.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^6F",["^ ","^6G",null,"^6H",["^H",[]],"^6I",["^1B"]]],["^1V","goog/dom/browserfeature.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^6F",["^ ","^6G",null,"^6H",["^H",[]],"^6I",["^1B","^6["]]],["^1V","clojure/set.cljs"],["e2ad9a4500a5ecabaf01429c4f0d6f7fac146951","^6F",["^ ","^6G",null,"^6H",["^H",[]],"^6I",["^1B","^1="]]],["^1V","goog/uri/utils.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^6F",["^ ","^6G",null,"^6H",["^H",[]],"^6I",["^1B","^6N","^6Y"]]],["^1V","goog/string/const.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^6F",["^ ","^6G",null,"^6H",["^H",[]],"^6I",["^1B","^6N","^75"]]],["^1V","goog/disposable/disposeall.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^6F",["^ ","^6G",null,"^6H",["^H",[]],"^6I",["^1B","^8I"]]],["^1V","goog/json/json.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^6F",["^ ","^6G",null,"^6H",["^H",[]],"^6I",["^1B"]]],["^1V","goog/i18n/localefeature.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^6F",["^ ","^6G",null,"^6H",["^H",[]],"^6I",["^1B"]]],["^1V","goog/events/listenable.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^6F",["^ ","^6G",null,"^6H",["^H",[]],"^6I",["^1B","^7@","^7L","^7N"]]],["^1V","goog/events/listenablekey.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^6F",["^ ","^6G",null,"^6H",["^H",[]],"^6I",["^1B","^7I"]]],["^1V","com/cognitect/transit/impl/writer.js"],["f8b4f570ca4d41649190efecac27a5932cc11429","^6F",["^ ","^6G",null,"^6H",["^H",[]],"^6I",["^1B","^9D","^7E","~$com.cognitect.transit.handlers","^9F","^9E","^:4"]]],["^1V","goog/net/xmlhttpfactory.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^6F",["^ ","^6G",null,"^6H",["^H",[]],"^6I",["^1B","^84"]]],["^1V","com/fulcrologic/fulcro/algorithms/denormalize.cljc"],["aa10be524799b8f5dcb1cab659b996577fc15d41","^6F",["^ ","^6G",null,"^6H",["^H",[]],"^6I",["^1B","^1=","^16","^17","^19"]]],["^1V","goog/net/xmlhttp.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^6F",["^ ","^6G",null,"^6H",["^H",[]],"^6I",["^1B","^6N","~$goog.net.WrapperXmlHttpFactory","^85","^84"]]],["^1V","goog/net/xhrlike.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^6F",["^ ","^6G",null,"^6H",["^H",[]],"^6I",["^1B"]]],["^1V","cognitect/transit.cljs"],["ae688999ee978d238bffd4df0c0323e552d6d8dc","^6F",["^ ","^6G",null,"^6H",["^H",[]],"^6I",["^1B","^1=","~$com.cognitect.transit","^9F","^:6","^:4"]]],["^1V","goog/crypt/base64.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^6F",["^ ","^6G",null,"^6H",["^H",[]],"^6I",["^1B","^6N","^76","^6L","^6[","~$goog.userAgent.product"]]]]],"~:clj-info",["^ ","jar:file:/C:/Users/carre/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/main.clj",1675466804000,"jar:file:/C:/Users/carre/.m2/repository/com/fulcrologic/fulcro/3.5.9/fulcro-3.5.9.jar!/com/fulcrologic/fulcro/raw/components.cljc",1676259735000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader.clj",1675288215000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/impl/errors.clj",1675288215000,"jar:file:/C:/Users/carre/.m2/repository/com/taoensso/truss/1.6.0/truss-1.6.0.jar!/taoensso/truss.clj",1676259735000,"jar:file:/C:/Users/carre/.m2/repository/com/fulcrologic/guardrails/1.1.4/guardrails-1.1.4.jar!/com/fulcrologic/guardrails/impl/externs.cljc",1676259733000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/tools.analyzer/1.1.0/tools.analyzer-1.1.0.jar!/clojure/tools/analyzer/ast.clj",1675288214000,"jar:file:/C:/Users/carre/.m2/repository/com/taoensso/timbre/5.1.1/timbre-5.1.1.jar!/taoensso/timbre/appenders/core.cljc",1676259736000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/core.async/1.4.627/core.async-1.4.627.jar!/clojure/core/async/impl/ioc_macros.clj",1676259738000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/default_data_readers.clj",1675288215000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/clojurescript/1.10.914/clojurescript-1.10.914.jar!/cljs/util.cljc",1676259734000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/core.async/1.4.627/core.async-1.4.627.jar!/clojure/core/async/impl/buffers.clj",1676259738000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/data.json/2.4.0/data.json-2.4.0.jar!/clojure/data/json.clj",1675288214000,"jar:file:/C:/Users/carre/.m2/repository/com/fulcrologic/guardrails/1.1.4/guardrails-1.1.4.jar!/com/fulcrologic/guardrails/impl/parser.clj",1676259733000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/tools.analyzer/1.1.0/tools.analyzer-1.1.0.jar!/clojure/tools/analyzer/env.clj",1675288214000,"jar:file:/C:/Users/carre/.m2/repository/com/fulcrologic/fulcro/3.5.9/fulcro-3.5.9.jar!/com/fulcrologic/fulcro/algorithms/lookup.cljc",1676259735000,"jar:file:/C:/Users/carre/.m2/repository/io/aviso/pretty/0.1.37/pretty-0.1.37.jar!/io/aviso/columns.clj",1676259734000,"jar:file:/C:/Users/carre/.m2/repository/com/fulcrologic/guardrails/1.1.4/guardrails-1.1.4.jar!/com/fulcrologic/guardrails/utils.cljc",1676259733000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/clojurescript/1.10.914/clojurescript-1.10.914.jar!/cljs/reader.clj",1676259734000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/spec.alpha/0.2.194/spec.alpha-0.2.194.jar!/clojure/spec/gen/alpha.clj",1675466804000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/clojurescript/1.10.914/clojurescript-1.10.914.jar!/cljs/analyzer/passes.cljc",1676259734000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/core.async/1.4.627/core.async-1.4.627.jar!/clojure/core/async/impl/timers.clj",1676259738000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/clojurescript/1.10.914/clojurescript-1.10.914.jar!/cljs/source_map/base64.clj",1676259734000,"jar:file:/C:/Users/carre/.m2/repository/expound/expound/0.8.9/expound-0.8.9.jar!/expound/problems.cljc",1676259733000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/clojurescript/1.10.914/clojurescript-1.10.914.jar!/cljs/analyzer.cljc",1676259734000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/tools.analyzer.jvm/1.2.0/tools.analyzer.jvm-1.2.0.jar!/clojure/tools/analyzer/jvm/utils.clj",1676259734000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/clojurescript/1.10.914/clojurescript-1.10.914.jar!/cljs/source_map.clj",1676259734000,"jar:file:/C:/Users/carre/.m2/repository/edn-query-language/eql/1.0.1/eql-1.0.1.jar!/edn_query_language/core.cljc",1676259733000,"jar:file:/C:/Users/carre/.m2/repository/com/fulcrologic/fulcro/3.5.9/fulcro-3.5.9.jar!/com/fulcrologic/fulcro/components.cljc",1676259735000,"jar:file:/C:/Users/carre/.m2/repository/com/fulcrologic/fulcro/3.5.9/fulcro-3.5.9.jar!/com/fulcrologic/fulcro/algorithms/do_not_use.cljc",1676259735000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/stacktrace.clj",1675466804000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/edn.clj",1675466804000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/clojurescript/1.10.914/clojurescript-1.10.914.jar!/cljs/source_map/base64_vlq.clj",1676259734000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/impl/inspect.clj",1675288215000,"jar:file:/C:/Users/carre/.m2/repository/com/fulcrologic/guardrails/1.1.4/guardrails-1.1.4.jar!/com/fulcrologic/guardrails/core.cljc",1676259733000,"jar:file:/C:/Users/carre/.m2/repository/com/taoensso/truss/1.6.0/truss-1.6.0.jar!/taoensso/truss/impl.clj",1676259735000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/clojurescript/1.10.914/clojurescript-1.10.914.jar!/cljs/spec/alpha.cljc",1676259734000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/core.async/1.4.627/core.async-1.4.627.jar!/cljs/core/async/impl/ioc_macros.clj",1676259738000,"jar:file:/C:/Users/carre/.m2/repository/com/fulcrologic/fulcro/3.5.9/fulcro-3.5.9.jar!/com/fulcrologic/fulcro/algorithms/denormalize.cljc",1676259735000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/clojurescript/1.10.914/clojurescript-1.10.914.jar!/cljs/js_deps.cljc",1676259734000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/tools.analyzer/1.1.0/tools.analyzer-1.1.0.jar!/clojure/tools/analyzer/utils.clj",1675288214000,"jar:file:/C:/Users/carre/.m2/repository/com/fulcrologic/fulcro/3.5.9/fulcro-3.5.9.jar!/com/fulcrologic/fulcro/algorithms/transit.cljc",1676259735000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/cljs/tools/reader/reader_types.clj",1675288215000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/instant.clj",1675466804000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/clojurescript/1.10.914/clojurescript-1.10.914.jar!/cljs/core.cljc",1676259734000,"jar:file:/C:/Users/carre/.m2/repository/expound/expound/0.8.9/expound-0.8.9.jar!/expound/paths.cljc",1676259733000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/java/io.clj",1675466804000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/clojurescript/1.10.914/clojurescript-1.10.914.jar!/cljs/env.cljc",1676259734000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/clojurescript/1.10.914/clojurescript-1.10.914.jar!/cljs/instant.clj",1676259734000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/spec.alpha/0.2.194/spec.alpha-0.2.194.jar!/clojure/spec/alpha.clj",1675466804000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/core.async/1.4.627/core.async-1.4.627.jar!/clojure/core/async/impl/exec/threadpool.clj",1676259738000,"jar:file:/C:/Users/carre/.m2/repository/io/aviso/pretty/0.1.37/pretty-0.1.37.jar!/io/aviso/ansi.clj",1676259734000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/core.clj",1675466804000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/clojurescript/1.10.914/clojurescript-1.10.914.jar!/cljs/analyzer/passes/and_or.cljc",1676259734000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/core.async/1.4.627/core.async-1.4.627.jar!/clojure/core/async/impl/mutex.clj",1676259738000,"jar:file:/C:/Users/carre/.m2/repository/io/aviso/pretty/0.1.37/pretty-0.1.37.jar!/io/aviso/exception.clj",1676259734000,"jar:file:/C:/Users/carre/.m2/repository/expound/expound/0.8.9/expound-0.8.9.jar!/expound/util.cljc",1676259733000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/clojurescript/1.10.914/clojurescript-1.10.914.jar!/cljs/analyzer/impl.cljc",1676259734000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/clojurescript/1.10.914/clojurescript-1.10.914.jar!/cljs/pprint.cljc",1676259734000,"jar:file:/C:/Users/carre/.m2/repository/expound/expound/0.8.9/expound-0.8.9.jar!/expound/printer.cljc",1676259733000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/core.async/1.4.627/core.async-1.4.627.jar!/cljs/core/async.clj",1676259738000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/pprint.clj",1675466804000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/reader_types.clj",1675288215000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/core.async/1.4.627/core.async-1.4.627.jar!/clojure/core/async/impl/dispatch.clj",1676259738000,"jar:file:/C:/Users/carre/.m2/repository/com/taoensso/timbre/5.1.1/timbre-5.1.1.jar!/taoensso/timbre.cljc",1676259736000,"jar:file:/C:/Users/carre/.m2/repository/expound/expound/0.8.9/expound-0.8.9.jar!/expound/alpha.cljc",1676259733000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/core.async/1.4.627/core.async-1.4.627.jar!/clojure/core/async/impl/channels.clj",1676259738000,"jar:file:/C:/Users/carre/.m2/repository/expound/expound/0.8.9/expound-0.8.9.jar!/expound/ansi.cljc",1676259733000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/core.async/1.4.627/core.async-1.4.627.jar!/clojure/core/async/impl/concurrent.clj",1676259738000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/set.clj",1675466804000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/walk.clj",1675466804000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/string.clj",1675466804000,"jar:file:/C:/Users/carre/.m2/repository/com/fulcrologic/guardrails/1.1.4/guardrails-1.1.4.jar!/com/fulcrologic/guardrails/impl/pro.cljc",1676259733000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/clojurescript/1.10.914/clojurescript-1.10.914.jar!/cljs/tagged_literals.cljc",1676259734000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/tools.analyzer/1.1.0/tools.analyzer-1.1.0.jar!/clojure/tools/analyzer.clj",1675288214000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/clojurescript/1.10.914/clojurescript-1.10.914.jar!/cljs/compiler.cljc",1676259734000,"jar:file:/C:/Users/carre/.m2/repository/com/fulcrologic/guardrails/1.1.4/guardrails-1.1.4.jar!/com/fulcrologic/guardrails/registry.cljc",1676259733000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/reflect.clj",1675466804000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/core.async/1.4.627/core.async-1.4.627.jar!/clojure/core/async.clj",1676259738000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/clojurescript/1.10.914/clojurescript-1.10.914.jar!/cljs/spec/gen/alpha.cljc",1676259734000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/clojurescript/1.10.914/clojurescript-1.10.914.jar!/cljs/externs.clj",1676259734000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/edn.clj",1675288215000,"jar:file:/C:/Users/carre/.m2/repository/com/cognitect/transit-clj/1.0.324/transit-clj-1.0.324.jar!/cognitect/transit.clj",1676259736000,"jar:file:/C:/Users/carre/.m2/repository/com/fulcrologic/guardrails/1.1.4/guardrails-1.1.4.jar!/com/fulcrologic/guardrails/config.cljc",1676259733000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/tools.analyzer.jvm/1.2.0/tools.analyzer.jvm-1.2.0.jar!/clojure/tools/analyzer/jvm.clj",1676259734000,"jar:file:/C:/Users/carre/.m2/repository/com/taoensso/encore/3.10.1/encore-3.10.1.jar!/taoensso/encore.cljc",1676259733000,"jar:file:/C:/Users/carre/.m2/repository/binaryage/devtools/1.0.4/devtools-1.0.4.jar!/devtools/defaults.clj",1676259736000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/core.async/1.4.627/core.async-1.4.627.jar!/clojure/core/async/impl/protocols.clj",1676259738000,"jar:file:/C:/Users/carre/.m2/repository/com/fulcrologic/fulcro/3.5.9/fulcro-3.5.9.jar!/com/fulcrologic/fulcro/algorithms/tempid.cljc",1676259735000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","com/fulcrologic/fulcro/components.cljc","^7",1,"^8",5,"^9",1,"^:",38],"^;",["^ ","^<","^=","^>","^?","^@","^A","^B","^C"],"^D",["^ ","^E","^F"],"^G",["^H",[]],"^I",["^ ","^J",["^ ","^K","Define a stateful component. This macro emits a React UI class with a query,\n   optional ident (if :ident is specified in options), optional initial state, optional css, lifecycle methods,\n   and a render method. It can also cause the class to implement additional protocols that you specify. Destructuring is\n   supported in the argument list.\n\n   The template (data-only) versions do not have any arguments in scope\n   The lambda versions have arguments in scope that make sense for those lambdas, as listed below:\n\n   ```\n   (defsc Component [this {:keys [db/id x] :as props} {:keys [onSelect] :as computed} extended-args]\n     {\n      ;; stateful component options\n      ;; query template is literal. Use the lambda if you have ident-joins or unions.\n      :query [:db/id :x] ; OR (fn [] [:db/id :x]) ; this in scope\n      ;; ident template is table name and ID property name\n      :ident [:table/by-id :id] ; OR (fn [] [:table/by-id id]) ; this and props in scope\n      ;; initial-state template is magic..see dev guide. Lambda version is normal.\n      :initial-state {:x :param/x} ; OR (fn [params] {:x (:x params)}) ; nothing is in scope\n      ;; pre-merge, use a lamba to modify new merged data with component needs\n      :pre-merge (fn [{:keys [data-tree current-normalized state-map query]}] (merge {:ui/default-value :start} data-tree))\n\n      ; React Lifecycle Methods (for the default, class-based components)\n      :initLocalState            (fn [this props] ...) ; CAN BE used to call things as you might in a constructor. Return value is initial state.\n      :shouldComponentUpdate     (fn [this next-props next-state] ...)\n\n      :componentDidUpdate        (fn [this prev-props prev-state snapshot] ...) ; snapshot is optional, and is 16+. Is context for 15\n      :componentDidMount         (fn [this] ...)\n      :componentWillUnmount      (fn [this] ...)\n\n      ;; DEPRECATED IN REACT 16 (to be removed in 17):\n      :componentWillReceiveProps        (fn [this next-props] ...)\n      :componentWillUpdate              (fn [this next-props next-state] ...)\n      :componentWillMount               (fn [this] ...)\n\n      ;; Replacements for deprecated methods in React 16.3+\n      :UNSAFE_componentWillReceiveProps (fn [this next-props] ...)\n      :UNSAFE_componentWillUpdate       (fn [this next-props next-state] ...)\n      :UNSAFE_componentWillMount        (fn [this] ...)\n\n      ;; ADDED for React 16:\n      :componentDidCatch         (fn [this error info] ...)\n      :getSnapshotBeforeUpdate   (fn [this prevProps prevState] ...)\n\n      ;; static.\n      :getDerivedStateFromProps  (fn [props state] ...)\n\n      ;; ADDED for React 16.6:\n      ;; NOTE: The state returned from this function can either be:\n      ;; a raw js map, where Fulcro's state is in a sub-key: `#js {\"fulcro$state\" {:fulcro :state}}`.\n      ;; or a clj map. In either case this function will *overwrite* Fulcro's component-local state, which is\n      ;; slighly different behavior than raw React (we have no `this`, so we cannot read Fulcro's state to merge it).\n      :getDerivedStateFromError  (fn [error] ...)\n\n      NOTE: shouldComponentUpdate should generally not be overridden other than to force it false so\n      that other libraries can control the sub-dom. If you do want to implement it, then old props can\n      be obtained from (prim/props this), and old state via (gobj/get (. this -state) \"fulcro$state\").\n      \n      ; React Hooks support\n      ;; if true, creates a function-based instead of a class-based component, see the Developer's Guide for details\n      :use-hooks? true\n\n      ; BODY forms. May be omitted IFF there is an options map, in order to generate a component that is used only for queries/normalization.\n      (dom/div #js {:onClick onSelect} x))\n   ```\n\n   NOTE: The options map is \"open\". That is: you can add whatever extra stuff you want to in order\n   to co-locate data for component-related concerns. This is exactly what component-local css, the\n   dynamic router, and form-state do.  The data that you add is available from `comp/component-options`\n   on the component class and instances (i.e. `this`).\n\n   See the Developer's Guide at book.fulcrologic.com for more details.\n   ","^L",["^M",[["~$&","^N"]]],"^7",1419,"^8",4,"^6","com/fulcrologic/fulcro/components.cljc","^O","^P","^Q","^R","^S",true],"^T",["^ ","^L",["^M",[["^U","~$&","^V"]]],"^K","Wraps the given body with the correct internal bindings of the parent so that Fulcro internals\n     will work when that body is embedded in unusual ways (e.g. as the body in a child-as-a-function\n     React pattern).\n\n     ```\n     (defsc X [this props]\n       ...\n       ;; WRONG:\n       (some-react-thing {:child (fn [] (ui-fulcro-thing ...))})\n       ;; CORRECT:\n       (some-react-thing {:child (fn [] (with-parent-context this (ui-fulcro-thing ...)))})\n     ```\n     ","^7",1020,"^8",4,"^6","com/fulcrologic/fulcro/components.cljc","^O","^W","^Q","^R","^S",true]],"~:shadow/js-access-properties",["^H",["createElement","Fragment","Component","useEffect","useState"]],"^O","^R","^X",["^ "],"^Y",["^ ","^Z","^["],"^11",null,"^12",["^ ","^13","^14","^15","^16","^17","^17","^>","^?","^F","^F","^18","^19","^1:","^17","^1;","^1;","^1<","^[","^1=","^1=","^1>","^1?","^[","^[","^1@","^1A","^1B","^1B","^1A","^1A","^16","^16","^1C","^1D","~$s","^?","^14","^14","^19","^19","^1?","^1?","^1E","^1F","^1F","^1F","^?","^?","^1G","^1;","^1H","^1H","^1D","^1D"],"^1I",["^H",["^1J","^1K"]],"~:shadow/js-access-global",["^H",["Error"]],"^1L",["^ ","^1M","^1H","^E","^F"],"~:defs",["^ ","~$ident->any",["^ ","~:protocol-inline",null,"^5",["^ ","^6","com/fulcrologic/fulcro/components.cljc","^7",945,"^8",7,"^9",945,"^:",17,"^L",["^M",["~$quote",["^M",[["~$x","~$ident"]]]]],"^K","Return some (random) on-screen components that uses the given ident. `x` is anything any->app accepts."],"^O","^2A","^6","com/fulcrologic/fulcro/components.cljc","^:",17,"~:method-params",["^M",[["~$x","^<M"]]],"~:protocol-impl",null,"~:arglists-meta",["^M",[null,null]],"^8",1,"~:variadic?",false,"^7",945,"~:ret-tag",["^H",["~$any","~$clj-nil"]],"^9",945,"~:max-fixed-arity",2,"~:fn-var",true,"^L",["^M",["^<L",["^M",[["~$x","^<M"]]]]],"^K","Return some (random) on-screen components that uses the given ident. `x` is anything any->app accepts."],"~$denormalize-query",["^ ","^O","^34","^6","com/fulcrologic/fulcro/components.cljc","^7",609,"^8",1,"^9",609,"^:",23,"^5",["^ ","^6","com/fulcrologic/fulcro/components.cljc","^7",609,"^8",6,"^9",609,"^:",23]],"~$initial-state",["^ ","^<K",null,"^5",["^ ","^6","com/fulcrologic/fulcro/components.cljc","^7",219,"^8",7,"^9",219,"^:",20,"^L",["^M",["^<L",["^M",[["~$clz","~$params"]]]]],"^K","Returns the initial state of component clz if it was passed the given params"],"^O","^2?","^6","com/fulcrologic/fulcro/components.cljc","^:",20,"^<N",["^M",[["^<Y","^<Z"]]],"^<O",null,"^<P",["^M",[null,null]],"^8",1,"^<Q",false,"^7",219,"^<R",["^H",["^<S","^<T"]],"^9",219,"^<U",2,"^<V",true,"^L",["^M",["^<L",["^M",[["^<Y","^<Z"]]]]],"^K","Returns the initial state of component clz if it was passed the given params"],"~$query",["^ ","^<K",null,"^5",["^ ","^6","com/fulcrologic/fulcro/components.cljc","^7",216,"^8",7,"^9",216,"^:",12,"^L",["^M",["^<L",["^M",[["~$this"]]]]],"^K","Returns the STATIC query of the fgiven component"],"^O","^27","^6","com/fulcrologic/fulcro/components.cljc","^:",12,"^<N",["^M",[["^=0"]]],"^<O",null,"^<P",["^M",[null,null]],"^8",1,"^<Q",false,"^7",216,"^<R",["^H",["^<S","^<T"]],"^9",216,"^<U",1,"^<V",true,"^L",["^M",["^<L",["^M",[["^=0"]]]]],"^K","Returns the STATIC query of the fgiven component"],"~$is-factory?",["^ ","^<K",null,"^5",["^ ","^6","com/fulcrologic/fulcro/components.cljc","^7",598,"^8",7,"^9",598,"^:",18,"^L",["^M",["^<L",["^M",[["~$class-or-factory"]]]]],"^K","Returns true if the given argument is a component factory."],"^O","^2B","^6","com/fulcrologic/fulcro/components.cljc","^:",18,"^<N",["^M",[["^=2"]]],"^<O",null,"^<P",["^M",[null,null]],"^8",1,"^<Q",false,"^7",598,"^<R","~$boolean","^9",598,"^<U",1,"^<V",true,"^L",["^M",["^<L",["^M",[["^=2"]]]]],"^K","Returns true if the given argument is a component factory."],"~$external-config",["^ ","^O","^2T","^6","com/fulcrologic/fulcro/components.cljc","^7",1502,"^8",1,"^9",1502,"^:",21,"^5",["^ ","^6","com/fulcrologic/fulcro/components.cljc","^7",1502,"^8",6,"^9",1502,"^:",21]],"~$normalize-query",["^ ","^O","^2;","^6","com/fulcrologic/fulcro/components.cljc","^7",899,"^8",1,"^9",899,"^:",21,"^5",["^ ","^6","com/fulcrologic/fulcro/components.cljc","^7",899,"^8",6,"^9",899,"^:",21],"^K","Given a state map and a query, returns a state map with the query normalized into the database. Query fragments\n  that already appear in the state will not be added.  Part of dynamic query implementation."],"~$get-class",["^ ","^O","^2P","^6","com/fulcrologic/fulcro/components.cljc","^7",184,"^8",1,"^9",184,"^:",15,"^5",["^ ","^6","com/fulcrologic/fulcro/components.cljc","^7",184,"^8",6,"^9",184,"^:",15],"^K","[instance]\n\n   Returns the react type (component class) of the given React element (instance). Is identity if used on a class."],"~$component-class?",["^ ","^<K",null,"^5",["^ ","^6","com/fulcrologic/fulcro/components.cljc","^7",106,"^8",7,"^9",106,"^:",23,"^L",["^M",["^<L",["^M",[["~$x"]]]]],"^K","Returns true if the argument is a component class.","~:tag","^=3"],"^O","^2U","^6","com/fulcrologic/fulcro/components.cljc","^:",23,"^<N",["^M",[["~$x"]]],"^<O",null,"^<P",["^M",[null,null]],"^8",1,"^<Q",false,"^7",106,"^<R","^=3","^9",106,"^<U",1,"^=8","^=3","^<V",true,"^L",["^M",["^<L",["^M",[["~$x"]]]]],"^K","Returns true if the argument is a component class."],"~$react-type",["^ ","^<K",null,"^5",["^ ","^6","com/fulcrologic/fulcro/components.cljc","^7",178,"^8",7,"^9",178,"^:",17,"^L",["^M",["^<L",["^M",[["~$x"]]]]],"^K","Returns the component type, regardless of whether the component has been\n   mounted"],"^O","^2[","^6","com/fulcrologic/fulcro/components.cljc","^:",17,"^<N",["^M",[["~$x"]]],"^<O",null,"^<P",["^M",[null,null]],"^8",1,"^<Q",false,"^7",178,"^<R",["^H",["^<S","^<T"]],"^9",178,"^<U",1,"^<V",true,"^L",["^M",["^<L",["^M",[["~$x"]]]]],"^K","Returns the component type, regardless of whether the component has been\n   mounted"],"~$compressible-transact!",["^ ","^<K",null,"^5",["^ ","^6","com/fulcrologic/fulcro/components.cljc","^7",1068,"^8",7,"^9",1068,"^:",29,"^L",["^M",["^<L",["^M",[["~$app-ish","~$tx"],["^=;","~$ref","^=<"]]]]],"^K","Identical to `transact!` with `:compressible? true` option. This means that if more than one\n  adjacent history transition edge is compressible, only the more recent of the sequence of them is kept. This\n  is useful for things like form input fields, where storing every keystoke in history is undesirable. This\n  also compress the transactions in Fulcro Inspect.\n\n  NOTE: history events that trigger remote interactions are not compressible, since they may be needed for\n  automatic network error recovery handling.","~:top-fn",["^ ","^<Q",false,"~:fixed-arity",3,"^<U",3,"^<N",[["^=;","^=<"],["^=;","^==","^=<"]],"^L",["^M",[["^=;","^=<"],["^=;","^==","^=<"]]],"^<P",["^M",[null,null]]]],"^O","^2Q","^6","com/fulcrologic/fulcro/components.cljc","^:",29,"^=>",["^ ","^<Q",false,"^=?",3,"^<U",3,"^<N",[["^=;","^=<"],["^=;","^==","^=<"]],"^L",["^M",[["^=;","^=<"],["^=;","^==","^=<"]]],"^<P",["^M",[null,null]]],"^<N",[["^=;","^=<"],["^=;","^==","^=<"]],"^<O",null,"^=?",3,"^<P",["^M",[null,null]],"^8",1,"^<Q",false,"~:methods",[["^ ","^=?",2,"^<Q",false,"^=8",["^H",["^<S","^<T"]]],["^ ","^=?",3,"^<Q",false,"^=8",["^H",["^<S","^<T"]]]],"^7",1068,"^9",1068,"^<U",3,"^<V",true,"^L",["^M",[["^=;","^=<"],["^=;","^==","^=<"]]],"^K","Identical to `transact!` with `:compressible? true` option. This means that if more than one\n  adjacent history transition edge is compressible, only the more recent of the sequence of them is kept. This\n  is useful for things like form input fields, where storing every keystoke in history is undesirable. This\n  also compress the transactions in Fulcro Inspect.\n\n  NOTE: history events that trigger remote interactions are not compressible, since they may be needed for\n  automatic network error recovery handling."],"~$set-query!",["^ ","^<K",null,"^5",["^ ","^6","com/fulcrologic/fulcro/components.cljc","^7",912,"^8",7,"^9",912,"^:",17,"^L",["^M",["^<L",["^M",[["~$x","^=2",["^ ","~:keys",["^<[","^<Z"],"^1P","~$opts"]]]]]],"^K","Public API for setting a dynamic query on a component. This function alters the query and rebuilds internal indexes.\n\n  * `x` : is anything that any->app accepts.\n  * `class-or-factory` : A component class or factory for that class (if using query qualifiers)\n  * `opts` : A map with `query` and optionally `params` (substitutions on queries)\n  "],"^O","^36","^6","com/fulcrologic/fulcro/components.cljc","^:",17,"^<N",["^M",[["~$x","^=2","~$p__57077"]]],"^<O",null,"^<P",["^M",[null,null]],"^8",1,"^<Q",false,"^7",912,"^<R",["^H",["^<S","^<T"]],"^9",912,"^<U",3,"^<V",true,"^L",["^M",["^<L",["^M",[["~$x","^=2",["^ ","^=B",["^<[","^<Z"],"^1P","^=C"]]]]]],"^K","Public API for setting a dynamic query on a component. This function alters the query and rebuilds internal indexes.\n\n  * `x` : is anything that any->app accepts.\n  * `class-or-factory` : A component class or factory for that class (if using query qualifiers)\n  * `opts` : A map with `query` and optionally `params` (substitutions on queries)\n  "],"~$props",["^ ","^O","^32","^6","com/fulcrologic/fulcro/components.cljc","^7",163,"^8",1,"^9",163,"^:",11,"^5",["^ ","^6","com/fulcrologic/fulcro/components.cljc","^7",163,"^8",6,"^9",163,"^:",11],"^K","[this]\n\n   Return a component's props."],"~$has-ident?",["^ ","^<K",null,"^5",["^ ","^6","com/fulcrologic/fulcro/components.cljc","^7",204,"^8",7,"^9",204,"^:",17,"^L",["^M",["^<L",["^M",[["~$component"]]]]],"^K","Returns true if the component has an ident","^=8","^=3"],"^O","^31","^6","com/fulcrologic/fulcro/components.cljc","^:",17,"^<N",["^M",[["^=G"]]],"^<O",null,"^<P",["^M",[null,null]],"^8",1,"^<Q",false,"^7",204,"^<R","^=3","^9",204,"^<U",1,"^=8","^=3","^<V",true,"^L",["^M",["^<L",["^M",[["^=G"]]]]],"^K","Returns true if the component has an ident"],"~$isoget",["^ ","^O","^5I","^6","com/fulcrologic/fulcro/components.cljc","^7",56,"^8",1,"^9",56,"^:",12,"^5",["^ ","^6","com/fulcrologic/fulcro/components.cljc","^7",56,"^8",6,"^9",56,"^:",12],"^K","\n  [obj k]\n  [obj k default]\n\n  Like get, but for js objects, and in CLJC. In clj, it is just `get`. In cljs it is\n  `gobj/get`."],"~$wrapped-render",["^ ","^<K",null,"^5",["^ ","^6","com/fulcrologic/fulcro/components.cljc","^7",669,"^8",7,"^9",669,"^:",21,"^L",["^M",["^<L",["^M",[["^=0","~$real-render"]]]]],"^K","Run `real-render`, possibly through :render-middleware configured on your app."],"^O","^3G","^6","com/fulcrologic/fulcro/components.cljc","^:",21,"^<N",["^M",[["^=0","^=J"]]],"^<O",null,"^<P",["^M",[null,null]],"^8",1,"^<Q",false,"^7",669,"^<R","^<S","^9",669,"^<U",2,"^<V",true,"^L",["^M",["^<L",["^M",[["^=0","^=J"]]]]],"^K","Run `real-render`, possibly through :render-middleware configured on your app."],"~$wrap-update-extra-props",["^ ","^<K",null,"^5",["^ ","^6","com/fulcrologic/fulcro/components.cljc","^7",978,"^8",7,"^9",978,"^:",30,"^L",["^M",["^<L",["^M",[["~$f"],["~$handler","~$f"]]]]],"^K","Wrap the props middleware such that `f` is called to get extra props that should be placed\n  in the extra-props arg of the component.\n\n  `handler` - (optional) The next item in the props middleware chain.\n  `f` - A (fn [cls extra-props] new-extra-props)\n\n  `f` will be passed the class being rendered and the current map of extra props. It should augment\n  those and return a new version.","^=>",["^ ","^<Q",false,"^=?",2,"^<U",2,"^<N",[["~$f"],["^=L","~$f"]],"^L",["^M",[["~$f"],["^=L","~$f"]]],"^<P",["^M",[null,null]]]],"^O","^3F","^6","com/fulcrologic/fulcro/components.cljc","^:",30,"^=>",["^ ","^<Q",false,"^=?",2,"^<U",2,"^<N",[["~$f"],["^=L","~$f"]],"^L",["^M",[["~$f"],["^=L","~$f"]]],"^<P",["^M",[null,null]]],"^<N",[["~$f"],["^=L","~$f"]],"^<O",null,"^=?",2,"^<P",["^M",[null,null]],"^8",1,"^<Q",false,"^=@",[["^ ","^=?",1,"^<Q",false,"^=8","~$function"],["^ ","^=?",2,"^<Q",false,"^=8","^=M"]],"^7",978,"^9",978,"^<U",2,"^<V",true,"^L",["^M",[["~$f"],["^=L","~$f"]]],"^K","Wrap the props middleware such that `f` is called to get extra props that should be placed\n  in the extra-props arg of the component.\n\n  `handler` - (optional) The next item in the props middleware chain.\n  `f` - A (fn [cls extra-props] new-extra-props)\n\n  `f` will be passed the class being rendered and the current map of extra props. It should augment\n  those and return a new version."],"~$children",["^ ","^<K",null,"^5",["^ ","^6","com/fulcrologic/fulcro/components.cljc","^7",169,"^8",7,"^9",169,"^:",15,"^L",["^M",["^<L",["^M",[["^=G"]]]]],"^K","[this]\n\n   Get the sequence of react children of the given component."],"^O","^3B","^6","com/fulcrologic/fulcro/components.cljc","^:",15,"^<N",["^M",[["^=G"]]],"^<O",null,"^<P",["^M",[null,null]],"^8",1,"^<Q",false,"^7",169,"^<R",["^H",["~$cljs.core/IVector","^<S"]],"^9",169,"^<U",1,"^<V",true,"^L",["^M",["^<L",["^M",[["^=G"]]]]],"^K","[this]\n\n   Get the sequence of react children of the given component."],"~$use-fulcro",["^ ","^<K",null,"^5",["^ ","^6","com/fulcrologic/fulcro/components.cljc","^7",455,"^8",7,"^9",455,"^:",17,"^L",["^M",["^<L",["^M",[["~$js-props","~$faux-class"]]]]],"^K","Allows you to use a plain function as a Fulcro-managed React hooks component.\n\n  * `js-props` - The React js props from the parent.\n  * `faux-class` - A Fulcro faux class, which is a fn that has had `add-options!` called on it.\n\n  Returns a cljs vector containing `this` and fulcro `props`. You should *not* use the returned `this` directly,\n  as it is a placeholder.\n\n  Prefer `defsc` or `configure-hooks-component! over using this directly.`\n  "],"^O","^39","^6","com/fulcrologic/fulcro/components.cljc","^:",17,"^<N",["^M",[["^=Q","^=R"]]],"^<O",null,"^<P",["^M",[null,null]],"^8",1,"^<Q",false,"^7",455,"^<R","^=O","^9",455,"^<U",2,"^<V",true,"^L",["^M",["^<L",["^M",[["^=Q","^=R"]]]]],"^K","Allows you to use a plain function as a Fulcro-managed React hooks component.\n\n  * `js-props` - The React js props from the parent.\n  * `faux-class` - A Fulcro faux class, which is a fn that has had `add-options!` called on it.\n\n  Returns a cljs vector containing `this` and fulcro `props`. You should *not* use the returned `this` directly,\n  as it is a placeholder.\n\n  Prefer `defsc` or `configure-hooks-component! over using this directly.`\n  "],"~$ptransact!",["^ ","^<K",null,"^5",["^ ","^6","com/fulcrologic/fulcro/components.cljc","^7",1048,"^8",7,"^9",1048,"^:",17,"^L",["^M",["^<L",["^M",[["~$component-or-app","^=<"],["^=T","^==","^=<"]]]]],"^K","\n  DEPRECATED: Generally use `result-action` in mutations to chain sequences instead. This call is equivalent\n  to `transact!` with an `:optimistic? false` option.\n\n  Like `transact!`, but ensures each call completes (in a full-stack, pessimistic manner) before the next call starts\n  in any way. Note that two calls of this function have no guaranteed relationship to each other. They could end up\n  intermingled at runtime. The only guarantee is that for *a single call* to `ptransact!`, the calls in the given tx will run\n  pessimistically (one at a time) in the order given. Follow-on reads in the given transaction will be repeated after each remote\n  interaction.\n\n  `component-or-app` a mounted component or the app\n  `tx` the tx to run\n  `ref` the ident (ref context) in which to run the transaction (including all deferrals)","^=>",["^ ","^<Q",false,"^=?",3,"^<U",3,"^<N",[["^=T","^=<"],["^=T","^==","^=<"]],"^L",["^M",[["^=T","^=<"],["^=T","^==","^=<"]]],"^<P",["^M",[null,null]]]],"^O","^3C","^6","com/fulcrologic/fulcro/components.cljc","^:",17,"^=>",["^ ","^<Q",false,"^=?",3,"^<U",3,"^<N",[["^=T","^=<"],["^=T","^==","^=<"]],"^L",["^M",[["^=T","^=<"],["^=T","^==","^=<"]]],"^<P",["^M",[null,null]]],"^<N",[["^=T","^=<"],["^=T","^==","^=<"]],"^<O",null,"^=?",3,"^<P",["^M",[null,null]],"^8",1,"^<Q",false,"^=@",[["^ ","^=?",2,"^<Q",false,"^=8",["^H",["^<S","^<T"]]],["^ ","^=?",3,"^<Q",false,"^=8",["^H",["^<S","^<T"]]]],"^7",1048,"^9",1048,"^<U",3,"^<V",true,"^L",["^M",[["^=T","^=<"],["^=T","^==","^=<"]]],"^K","\n  DEPRECATED: Generally use `result-action` in mutations to chain sequences instead. This call is equivalent\n  to `transact!` with an `:optimistic? false` option.\n\n  Like `transact!`, but ensures each call completes (in a full-stack, pessimistic manner) before the next call starts\n  in any way. Note that two calls of this function have no guaranteed relationship to each other. They could end up\n  intermingled at runtime. The only guarantee is that for *a single call* to `ptransact!`, the calls in the given tx will run\n  pessimistically (one at a time) in the order given. Follow-on reads in the given transaction will be repeated after each remote\n  interaction.\n\n  `component-or-app` a mounted component or the app\n  `tx` the tx to run\n  `ref` the ident (ref context) in which to run the transaction (including all deferrals)"],"~$get-ident",["^ ","^O","^3V","^6","com/fulcrologic/fulcro/components.cljc","^7",574,"^8",1,"^9",574,"^:",15,"^5",["^ ","^6","com/fulcrologic/fulcro/components.cljc","^7",574,"^8",6,"^9",574,"^:",15],"^K","\n  [x] [class props]\n\n  Get the ident for a mounted component OR using a component class.\n\n  That arity-2 will return the ident using the supplied props map.\n\n  The single-arity version should only be used with a mounted component (e.g. `this` from `render`), and will derive the\n  props that were sent to it most recently."],"~$newer-props",["^ ","^O","^3=","^6","com/fulcrologic/fulcro/components.cljc","^7",81,"^8",1,"^9",81,"^:",17,"^5",["^ ","^6","com/fulcrologic/fulcro/components.cljc","^7",81,"^8",6,"^9",81,"^:",17],"^K","\n  [props-a props-b]\n\n  Returns whichever of the given Fulcro props were most recently generated according to `denormalization-time`. This\n  is part of props 'tunnelling', an optimization to get updated props to instances without going through the root."],"~$*blindly-render*",["^ ","^5",["^ ","^6","com/fulcrologic/fulcro/components.cljc","^7",45,"^8",16,"^9",45,"^:",32,"~:dynamic",true],"^O","^3>","^6","com/fulcrologic/fulcro/components.cljc","^:",32,"^8",1,"^=X",true,"^7",45,"^9",45,"^=8","^<S"],"~$pre-merge",["^ ","^<K",null,"^5",["^ ","^6","com/fulcrologic/fulcro/components.cljc","^7",222,"^8",7,"^9",222,"^:",16,"^L",["^M",["^<L",["^M",[["^=0","~$data"]]]]]],"^O","^3M","^6","com/fulcrologic/fulcro/components.cljc","^:",16,"^<N",["^M",[["^=0","^=Z"]]],"^<O",null,"^<P",["^M",[null,null]],"^8",1,"^<Q",false,"^7",222,"^<R",["^H",["^<S","^<T"]],"^9",222,"^<U",2,"^<V",true,"^L",["^M",["^<L",["^M",[["^=0","^=Z"]]]]]],"~$set-state!",["^ ","^<K",null,"^5",["^ ","^6","com/fulcrologic/fulcro/components.cljc","^7",518,"^8",7,"^9",518,"^:",17,"^L",["^M",["^<L",["^M",[["^=G","~$new-state","~$callback"],["^=G","^>0"]]]]],"^K","Set React component-local state.  The `new-state` is actually merged with the existing state (as per React docs),\n  but is wrapped so that cljs maps are used (instead of js objs).  `callback` is an optional callback that will be\n  called as per the React docs on setState.","^=>",["^ ","^<Q",false,"^=?",3,"^<U",3,"^<N",[["^=G","^>0","^>1"],["^=G","^>0"]],"^L",["^M",[["^=G","^>0","^>1"],["^=G","^>0"]]],"^<P",["^M",[null,null]]]],"^O","^3I","^6","com/fulcrologic/fulcro/components.cljc","^:",17,"^=>",["^ ","^<Q",false,"^=?",3,"^<U",3,"^<N",[["^=G","^>0","^>1"],["^=G","^>0"]],"^L",["^M",[["^=G","^>0","^>1"],["^=G","^>0"]]],"^<P",["^M",[null,null]]],"^<N",[["^=G","^>0","^>1"],["^=G","^>0"]],"^<O",null,"^=?",3,"^<P",["^M",[null,null]],"^8",1,"^<Q",false,"^=@",[["^ ","^=?",3,"^<Q",false,"^=8",["^H",["~$js","^<T"]]],["^ ","^=?",2,"^<Q",false,"^=8",["^H",["^>2","^<T"]]]],"^7",518,"^9",518,"^<U",3,"^<V",true,"^L",["^M",[["^=G","^>0","^>1"],["^=G","^>0"]]],"^K","Set React component-local state.  The `new-state` is actually merged with the existing state (as per React docs),\n  but is wrapped so that cljs maps are used (instead of js objs).  `callback` is an optional callback that will be\n  called as per the React docs on setState."],"~$normalize-query-elements",["^ ","^O","^3P","^6","com/fulcrologic/fulcro/components.cljc","^7",886,"^8",1,"^9",886,"^:",30,"^5",["^ ","^6","com/fulcrologic/fulcro/components.cljc","^7",886,"^8",6,"^9",886,"^:",30],"^K","Part of internal implementation of dynamic queries.\n\n  Determines if there are query elements in the `query` that need to be normalized. If so, it does so.\n\n  Returns the new state map containing potentially-updated normalized queries."],"~$computed",["^ ","^O","^2H","^6","com/fulcrologic/fulcro/components.cljc","^7",135,"^8",1,"^9",135,"^:",14,"^5",["^ ","^6","com/fulcrologic/fulcro/components.cljc","^7",135,"^8",6,"^9",135,"^:",14],"^K","\n  [props computed-map]\n\n  Add computed properties to props. This will *replace* any pre-existing computed properties. Computed props are\n  necessary when a parent component wishes to pass callbacks or other data to children that *have a query*. This\n  is not necessary for \"stateless\" components, though it will work properly for both.\n\n  Computed props are \"remembered\" so that a targeted update (which can only happen on a component with a query\n  and ident) can use new props from the database without \"losing\" the computed props that were originally passed\n  from the parent. If you pass things like callbacks through normal props, then targeted updates will seem to \"lose\n  track of\" them.\n  "],"~$class->any",["^ ","^<K",null,"^5",["^ ","^6","com/fulcrologic/fulcro/components.cljc","^7",965,"^8",7,"^9",965,"^:",17,"^L",["^M",["^<L",["^M",[["~$x","~$cls"]]]]],"^K","Get a (random) on-screen component instance from the indexes that has type of the given component class.\n  `x` can be anything `any->app` is ok with."],"^O","^2<","^6","com/fulcrologic/fulcro/components.cljc","^:",17,"^<N",["^M",[["~$x","^>6"]]],"^<O",null,"^<P",["^M",[null,null]],"^8",1,"^<Q",false,"^7",965,"^<R",["^H",["^<S","^<T"]],"^9",965,"^<U",2,"^<V",true,"^L",["^M",["^<L",["^M",[["~$x","^>6"]]]]],"^K","Get a (random) on-screen component instance from the indexes that has type of the given component class.\n  `x` can be anything `any->app` is ok with."],"~$mounted?",["^ ","^<K",null,"^5",["^ ","^6","com/fulcrologic/fulcro/components.cljc","^7",512,"^8",7,"^9",512,"^:",15,"^L",["^M",["^<L",["^M",[["^=0"]]]]],"^K","Returns true if the given component instance is mounted on the DOM."],"^O","^3[","^6","com/fulcrologic/fulcro/components.cljc","^:",15,"^<N",["^M",[["^=0"]]],"^<O",null,"^<P",["^M",[null,null]],"^8",1,"^<Q",false,"^7",512,"^<R","^<S","^9",512,"^<U",1,"^<V",true,"^L",["^M",["^<L",["^M",[["^=0"]]]]],"^K","Returns true if the given component instance is mounted on the DOM."],"~$get-parent",["^ ","^<K",null,"^5",["^ ","^6","com/fulcrologic/fulcro/components.cljc","^7",1520,"^8",7,"^9",1520,"^:",17,"^L",["^M",["^<L",["^M",[["^=0","~$n"],["^=0"]]]]],"^K","Returns the nth parent of `this` (a React element). The optional `n` can be 0 (the immediate parent) or any positive\n  integer. If this walks past root then this function returns nil.","^=>",["^ ","^<Q",false,"^=?",2,"^<U",2,"^<N",[["^=0","~$n"],["^=0"]],"^L",["^M",[["^=0","~$n"],["^=0"]]],"^<P",["^M",[null,null]]]],"^O","^2=","^6","com/fulcrologic/fulcro/components.cljc","^:",17,"^=>",["^ ","^<Q",false,"^=?",2,"^<U",2,"^<N",[["^=0","~$n"],["^=0"]],"^L",["^M",[["^=0","~$n"],["^=0"]]],"^<P",["^M",[null,null]]],"^<N",[["^=0","~$n"],["^=0"]],"^<O",null,"^=?",2,"^<P",["^M",[null,null]],"^8",1,"^<Q",false,"^=@",[["^ ","^=?",2,"^<Q",false,"^=8","^<S"],["^ ","^=?",1,"^<Q",false,"^=8","^<S"]],"^7",1520,"^9",1520,"^<U",2,"^<V",true,"^L",["^M",[["^=0","~$n"],["^=0"]]],"^K","Returns the nth parent of `this` (a React element). The optional `n` can be 0 (the immediate parent) or any positive\n  integer. If this walks past root then this function returns nil."],"~$fragment",["^ ","^<K",null,"^5",["^ ","^6","com/fulcrologic/fulcro/components.cljc","^7",1003,"^8",7,"^9",1003,"^:",15,"^L",["^M",["^<L",["^M",[["~$&","^N"]]]]],"^K","Wraps children in a React.Fragment. Props are optional, like normal DOM elements.","^=>",["^ ","^<Q",true,"^=?",0,"^<U",0,"^<N",[["^M",["^N"]]],"^L",["^M",[["~$&","^N"]]],"^<P",["^M",[null]]]],"^O","^3J","^6","com/fulcrologic/fulcro/components.cljc","^:",15,"^=>",["^ ","^<Q",true,"^=?",0,"^<U",0,"^<N",[["^M",["^N"]]],"^L",["^M",[["~$&","^N"]]],"^<P",["^M",[null]]],"^<N",[["^M",["^N"]]],"^<O",null,"^=?",0,"^<P",["^M",[null]],"^8",1,"^<Q",true,"^=@",[["^ ","^=?",0,"^<Q",true,"^=8","^<S"]],"^7",1003,"^<R","^<S","^9",1003,"^<U",0,"^<V",true,"^L",["^M",[["~$&","^N"]]],"^K","Wraps children in a React.Fragment. Props are optional, like normal DOM elements."],"~$component-name",["^ ","^O","^3W","^6","com/fulcrologic/fulcro/components.cljc","^7",114,"^8",1,"^9",114,"^:",20,"^5",["^ ","^6","com/fulcrologic/fulcro/components.cljc","^7",114,"^8",6,"^9",114,"^:",20],"^K","[class]\n\n   Returns a string version of the given react component's name. Works on component instances and classes."],"~$get-computed",["^ ","^O","^5:","^6","com/fulcrologic/fulcro/components.cljc","^7",150,"^8",1,"^9",150,"^:",18,"^5",["^ ","^6","com/fulcrologic/fulcro/components.cljc","^7",150,"^8",6,"^9",150,"^:",18],"^K","[this-or-props]\n   [this-or-props k-or-ks]\n\n   Return the computed properties on a component or its props. Note that it requires that the normal properties are not nil."],"~$get-state",["^ ","^<K",null,"^5",["^ ","^6","com/fulcrologic/fulcro/components.cljc","^7",536,"^8",7,"^9",536,"^:",16,"^L",["^M",["^<L",["^M",[["^=G"],["^=G","~$k-or-ks"]]]]],"^K","Get a component's local state. May provide a single key or a sequential\n   collection of keys for indexed access into the component's local state. NOTE: This is Fulcro's wrapped component\n   local state. The low-level React state is as described in the React docs (e.g. `(.-state this)`).","^=>",["^ ","^<Q",false,"^=?",2,"^<U",2,"^<N",[["^=G"],["^=G","^>="]],"^L",["^M",[["^=G"],["^=G","^>="]]],"^<P",["^M",[null,null]]]],"^O","^4R","^6","com/fulcrologic/fulcro/components.cljc","^:",16,"^=>",["^ ","^<Q",false,"^=?",2,"^<U",2,"^<N",[["^=G"],["^=G","^>="]],"^L",["^M",[["^=G"],["^=G","^>="]]],"^<P",["^M",[null,null]]],"^<N",[["^=G"],["^=G","^>="]],"^<O",null,"^=?",2,"^<P",["^M",[null,null]],"^8",1,"^<Q",false,"^=@",[["^ ","^=?",1,"^<Q",false,"^=8","^<S"],["^ ","^=?",2,"^<Q",false,"^=8",["^H",[null,"^<S"]]]],"^7",536,"^9",536,"^<U",2,"^<V",true,"^L",["^M",[["^=G"],["^=G","^>="]]],"^K","Get a component's local state. May provide a single key or a sequential\n   collection of keys for indexed access into the component's local state. NOTE: This is Fulcro's wrapped component\n   local state. The low-level React state is as described in the React docs (e.g. `(.-state this)`)."],"~$*parent*",["^ ","^5",["^ ","^6","com/fulcrologic/fulcro/components.cljc","^7",38,"^8",16,"^9",38,"^:",24,"^=X",true],"^O","^4?","^6","com/fulcrologic/fulcro/components.cljc","^:",24,"^8",1,"^=X",true,"^7",38,"^9",38,"^=8","^<S"],"~$has-query?",["^ ","^<K",null,"^5",["^ ","^6","com/fulcrologic/fulcro/components.cljc","^7",207,"^8",7,"^9",207,"^:",17,"^L",["^M",["^<L",["^M",[["^=G"]]]]],"^K","Returns true if the component has a query","^=8","^=3"],"^O","^4A","^6","com/fulcrologic/fulcro/components.cljc","^:",17,"^<N",["^M",[["^=G"]]],"^<O",null,"^<P",["^M",[null,null]],"^8",1,"^<Q",false,"^7",207,"^<R","^=3","^9",207,"^<U",1,"^=8","^=3","^<V",true,"^L",["^M",["^<L",["^M",[["^=G"]]]]],"^K","Returns true if the component has a query"],"~$update-state!",["^ ","^<K",null,"^5",["^ ","^6","com/fulcrologic/fulcro/components.cljc","^7",551,"^8",9,"^9",551,"^:",22,"^L",["^M",["^<L",["^M",[["^=G","~$f"],["^=G","~$f","~$&","^N"]]]]],"^K","Update a component's local state. Similar to Clojure(Script)'s swap!\n\n    This function affects a managed cljs map maintained in React state.  If you want to affect the low-level\n    js state itself use React's own `.setState` directly on the component.","^=>",["^ ","^<Q",true,"^=?",2,"^<U",2,"^<N",[["^=G","~$f"]],"^L",["^M",[["^=G","~$f"],["^=G","~$f","~$&","^N"]]],"^<P",["^M",[null,null]]]],"^O","^48","^6","com/fulcrologic/fulcro/components.cljc","^:",22,"^=>",["^ ","^<Q",true,"^=?",2,"^<U",2,"^<N",[["^=G","~$f"]],"^L",["^M",[["^=G","~$f"],["^=G","~$f","~$&","^N"]]],"^<P",["^M",[null,null]]],"^<N",[["^=G","~$f"]],"^<O",null,"^=?",2,"^<P",["^M",[null,null]],"^8",3,"^<Q",true,"^=@",[["^ ","^=?",2,"^<Q",false,"^=8","^>2"],["^ ","^=?",2,"^<Q",true,"^=8","^>2"]],"^7",551,"^9",551,"^<U",2,"^<V",true,"^L",["^M",[["^=G","~$f"],["^=G","~$f","~$&","^N"]]],"^K","Update a component's local state. Similar to Clojure(Script)'s swap!\n\n    This function affects a managed cljs map maintained in React state.  If you want to affect the low-level\n    js state itself use React's own `.setState` directly on the component."],"~$add-hook-options!",["^ ","^<K",null,"^5",["^ ","^6","com/fulcrologic/fulcro/components.cljc","^7",445,"^8",7,"^9",445,"^:",24,"^L",["^M",["^<L",["^M",[["~$render-fn","~$component-options"]]]]],"^K","Make a given `cls` (a plain fn) act like a a Fulcro component with the given component options map. Registers the\n  new component in the component-registry. Component options MUST contain :componentName as be a fully-qualified\n  keyword to name the component in the registry.\n\n  component-options *must* include a unique `:componentName` (keyword) that will be used for registering the given\n  function as the faux class in the component registry."],"^O","^46","^6","com/fulcrologic/fulcro/components.cljc","^:",24,"^<N",["^M",[["^>B","^>C"]]],"^<O",null,"^<P",["^M",[null,null]],"^8",1,"^<Q",false,"^7",445,"^<R","^<S","^9",445,"^<U",2,"^<V",true,"^L",["^M",["^<L",["^M",[["^>B","^>C"]]]]],"^K","Make a given `cls` (a plain fn) act like a a Fulcro component with the given component options map. Registers the\n  new component in the component-registry. Component options MUST contain :componentName as be a fully-qualified\n  keyword to name the component in the registry.\n\n  component-options *must* include a unique `:componentName` (keyword) that will be used for registering the given\n  function as the faux class in the component registry."],"~$isoget-in",["^ ","^O","^4=","^6","com/fulcrologic/fulcro/components.cljc","^7",47,"^8",1,"^9",47,"^:",15,"^5",["^ ","^6","com/fulcrologic/fulcro/components.cljc","^7",47,"^8",6,"^9",47,"^:",15],"^K","\n  [obj kvs]\n  [obj kvs default]\n\n  Like get-in, but for js objects, and in CLJC. In clj, it is just get-in. In cljs it is\n  gobj/getValueByKeys."],"~$query-id",["^ ","^O","^4G","^6","com/fulcrologic/fulcro/components.cljc","^7",603,"^8",1,"^9",603,"^:",14,"^5",["^ ","^6","com/fulcrologic/fulcro/components.cljc","^7",603,"^8",6,"^9",603,"^:",14],"^K","[class qualifier]\n\n   Returns a string ID for the query of the given class with qualifier."],"~$refresh-dynamic-queries!",["^ ","^<K",null,"^5",["^ ","^6","com/fulcrologic/fulcro/components.cljc","^7",922,"^8",7,"^9",922,"^:",31,"^L",["^M",["^<L",["^M",[["^=;","^>6","~$force?"],["^=;"]]]]],"^K","Refresh the current dynamic queries in app state to reflect any updates to the static queries of the components.\n\n   This can be used at development time to update queries that have changed but that hot code reload does not\n   reflect (because there is a current saved query in state). This is *not* always what you want, since a component\n   may have a custom query whose prop-level elements are set to a particular thing on purpose.\n\n   An component that has `:preserve-dynamic-query? true` in its component options will be ignored by\n   this function.","^=>",["^ ","^<Q",false,"^=?",3,"^<U",3,"^<N",[["^=;","^>6","^>G"],["^=;"]],"^L",["^M",[["^=;","^>6","^>G"],["^=;"]]],"^<P",["^M",[null,null]]]],"^O","^47","^6","com/fulcrologic/fulcro/components.cljc","^:",31,"^=>",["^ ","^<Q",false,"^=?",3,"^<U",3,"^<N",[["^=;","^>6","^>G"],["^=;"]],"^L",["^M",[["^=;","^>6","^>G"],["^=;"]]],"^<P",["^M",[null,null]]],"^<N",[["^=;","^>6","^>G"],["^=;"]],"^<O",null,"^=?",3,"^<P",["^M",[null,null]],"^8",1,"^<Q",false,"^=@",[["^ ","^=?",3,"^<Q",false,"^=8",["^H",["^<S","^<T"]]],["^ ","^=?",1,"^<Q",false,"^=8",["^H",["^<S","^<T"]]]],"^7",922,"^9",922,"^<U",3,"^<V",true,"^L",["^M",[["^=;","^>6","^>G"],["^=;"]]],"^K","Refresh the current dynamic queries in app state to reflect any updates to the static queries of the components.\n\n   This can be used at development time to update queries that have changed but that hot code reload does not\n   reflect (because there is a current saved query in state). This is *not* always what you want, since a component\n   may have a custom query whose prop-level elements are set to a particular thing on purpose.\n\n   An component that has `:preserve-dynamic-query? true` in its component options will be ignored by\n   this function."],"~$get-initial-state",["^ ","^O","^4I","^6","com/fulcrologic/fulcro/components.cljc","^7",561,"^8",1,"^9",561,"^:",23,"^5",["^ ","^6","com/fulcrologic/fulcro/components.cljc","^7",561,"^8",6,"^9",561,"^:",23],"^K","\n  [cls] [cls params]\n\n  Get the declared :initial-state value for a component."],"~$any->app",["^ ","^<K",null,"^5",["^ ","^6","com/fulcrologic/fulcro/components.cljc","^7",230,"^8",7,"^9",230,"^:",15,"^L",["^M",["^<L",["^M",[["~$x"]]]]],"^K","Attempt to coerce `x` to an app.  Legal inputs are a fulcro application, a mounted component,\n  or an atom holding any of the above."],"^O","^4X","^6","com/fulcrologic/fulcro/components.cljc","^:",15,"^<N",["^M",[["~$x"]]],"^<O",null,"^<P",["^M",[null,null]],"^8",1,"^<Q",false,"^7",230,"^<R","^<S","^9",230,"^<U",1,"^<V",true,"^L",["^M",["^<L",["^M",[["~$x"]]]]],"^K","Attempt to coerce `x` to an app.  Legal inputs are a fulcro application, a mounted component,\n  or an atom holding any of the above."],"~$*shared*",["^ ","^5",["^ ","^6","com/fulcrologic/fulcro/components.cljc","^7",40,"^8",16,"^9",40,"^:",24,"^=X",true],"^O","^4O","^6","com/fulcrologic/fulcro/components.cljc","^:",24,"^8",1,"^=X",true,"^7",40,"^9",40,"^=8","^<S"],"~$get-extra-props",["^ ","^<K",null,"^5",["^ ","^6","com/fulcrologic/fulcro/components.cljc","^7",157,"^8",7,"^9",157,"^:",22,"^L",["^M",["^<L",["^M",[["^=0"]]]]],"^K","Get any data (as a map) that props extensions have associated with the given Fulcro component. Extra props will\n  be empty unless you've installed props-middleware (on your app) that sets them."],"^O","^4Y","^6","com/fulcrologic/fulcro/components.cljc","^:",22,"^<N",["^M",[["^=0"]]],"^<O",null,"^<P",["^M",[null,null]],"^8",1,"^<Q",false,"^7",157,"^<R","^<S","^9",157,"^<U",1,"^<V",true,"^L",["^M",["^<L",["^M",[["^=0"]]]]],"^K","Get any data (as a map) that props extensions have associated with the given Fulcro component. Extra props will\n  be empty unless you've installed props-middleware (on your app) that sets them."],"~$computed-initial-state?",["^ ","^<K",null,"^5",["^ ","^6","com/fulcrologic/fulcro/components.cljc","^7",568,"^8",7,"^9",568,"^:",30,"^L",["^M",["^<L",["^M",[["~$s"]]]]],"^K","Returns true if the given initial state was returned from a call to get-initial-state. This is used by internal\n  algorithms when interpreting initial state shorthand in `defsc`."],"^O","^49","^6","com/fulcrologic/fulcro/components.cljc","^:",30,"^<N",["^M",[["~$s"]]],"^<O",null,"^<P",["^M",[null,null]],"^8",1,"^<Q",false,"^7",568,"^<R",["^H",["^=3","^<S","^<T"]],"^9",568,"^<U",1,"^<V",true,"^L",["^M",["^<L",["^M",[["~$s"]]]]],"^K","Returns true if the given initial state was returned from a call to get-initial-state. This is used by internal\n  algorithms when interpreting initial state shorthand in `defsc`."],"~$get-raw-react-prop",["^ ","^<K",null,"^5",["^ ","^6","com/fulcrologic/fulcro/components.cljc","^7",225,"^8",7,"^9",225,"^:",25,"^L",["^M",["^<L",["^M",[["~$c","~$k"]]]]],"^K","GET a RAW react prop. Used internally. Safe in CLJC, but equivalent to `(gobj/getValueByKeys this \"props\" (name k)`."],"^O","^4;","^6","com/fulcrologic/fulcro/components.cljc","^:",25,"^<N",["^M",[["~$c","~$k"]]],"^<O",null,"^<P",["^M",[null,null]],"^8",1,"^<Q",false,"^7",225,"^<R","^<S","^9",225,"^<U",2,"^<V",true,"^L",["^M",["^<L",["^M",[["~$c","~$k"]]]]],"^K","GET a RAW react prop. Used internally. Safe in CLJC, but equivalent to `(gobj/getValueByKeys this \"props\" (name k)`."],"~$set-query*",["^ ","^<K",null,"^5",["^ ","^6","com/fulcrologic/fulcro/components.cljc","^7",904,"^8",7,"^9",904,"^:",17,"^L",["^M",["^<L",["^M",[["~$state-map","^=2",["^ ","^=B",["^<["],"^1P","^N"]]]]]],"^K","Put a query in app state.\n\n  NOTE: Indexes must be rebuilt after setting a query, so this function should primarily be used to build\n  up an initial app state."],"^O","^4K","^6","com/fulcrologic/fulcro/components.cljc","^:",17,"^<N",["^M",[["^>O","^=2","~$p__57075"]]],"^<O",null,"^<P",["^M",[null,null]],"^8",1,"^<Q",false,"^7",904,"^<R",["^H",[null,"~$clj","^<S","^<T"]],"^9",904,"^<U",3,"^<V",true,"^L",["^M",["^<L",["^M",[["^>O","^=2",["^ ","^=B",["^<["],"^1P","^N"]]]]]],"^K","Put a query in app state.\n\n  NOTE: Indexes must be rebuilt after setting a query, so this function should primarily be used to build\n  up an initial app state."],"~$*app*",["^ ","^5",["^ ","^6","com/fulcrologic/fulcro/components.cljc","^7",37,"^8",16,"^9",37,"^:",21,"^=X",true],"^O","^4H","^6","com/fulcrologic/fulcro/components.cljc","^:",21,"^8",1,"^=X",true,"^7",37,"^9",37,"^=8","^<S"],"~$prop->classes",["^ ","^<K",null,"^5",["^ ","^6","com/fulcrologic/fulcro/components.cljc","^7",950,"^8",7,"^9",950,"^:",20,"^L",["^M",["^<L",["^M",[["~$x","~$prop"]]]]],"^K","Get all component classes that query for the given prop.\n  `x` can be anything `any->app` is ok with.\n\n  Returns all classes that query for that prop (or ident)"],"^O","^5;","^6","com/fulcrologic/fulcro/components.cljc","^:",20,"^<N",["^M",[["~$x","^>T"]]],"^<O",null,"^<P",["^M",[null,null]],"^8",1,"^<Q",false,"^7",950,"^<R",["^H",["^<S","^<T"]],"^9",950,"^<U",2,"^<V",true,"^L",["^M",["^<L",["^M",[["~$x","^>T"]]]]],"^K","Get all component classes that query for the given prop.\n  `x` can be anything `any->app` is ok with.\n\n  Returns all classes that query for that prop (or ident)"],"~$link-element",["^ ","^O","^5=","^6","com/fulcrologic/fulcro/components.cljc","^7",884,"^8",1,"^9",884,"^:",18,"^5",["^ ","^6","com/fulcrologic/fulcro/components.cljc","^7",884,"^8",6,"^9",884,"^:",18],"^K","Part of internal implementation of dynamic queries."],"~$transact!",["^ ","^<K",null,"^5",["^ ","^6","com/fulcrologic/fulcro/components.cljc","^7",804,"^8",7,"^9",804,"^:",16,"^L",["^M",["^<L",["^M",[["~$app-or-component","^=<","~$options"],["~$app-or-comp","^=<"]]]]],"^K","Submit a transaction for processing.\n\n  The underlying transaction system is pluggable, but the *default* supported options are:\n\n  - `:optimistic?` - boolean. Should the transaction be processed optimistically?\n  - `:ref` - ident. The ident of the component used to submit this transaction. This is set automatically if you use a component to call this function.\n  - `:component` - React element. Set automatically if you call this function using a component.\n  - `:refresh` - Vector containing idents (of components) and keywords (of props). Things that have changed and should be re-rendered\n    on screen. Only necessary when the underlying rendering algorithm won't auto-detect, such as when UI is derived from the\n    state of other components or outside of the directly queried props. Interpretation depends on the renderer selected:\n    The ident-optimized render treats these as \"extras\".\n  - `:only-refresh` - Vector of idents/keywords.  If the underlying rendering configured algorithm supports it: The\n    components using these are the *only* things that will be refreshed in the UI.\n    This can be used to avoid the overhead of looking for stale data when you know exactly what\n    you want to refresh on screen as an extra optimization. Idents are *not* checked against queries.\n  - `:abort-id` - An ID (you make up) that makes it possible (if the plugins you're using support it) to cancel\n    the network portion of the transaction (assuming it has not already completed).\n  - `:compressible?` - boolean. Check compressible-transact! docs.\n  - `:synchronous?` - boolean. When turned on the transaction will run immediately on the calling thread. If run against\n  a component then the props will be immediately tunneled back to the calling component, allowing for React (raw) input\n  event handlers to behave as described in standard React Forms docs (uses setState behind the scenes). Any remote operations\n  will still be queued as normal. Calling `transact!!` is a shorthand for this option. WARNING: ONLY the given component will\n  be refreshed in the UI. If you have dependent data elsewhere in the UI you must either use `transact!` or schedule\n  your own global render using `app/schedule-render!`.\n  - `:after-render?` - Wait until the next render completes before allowing this transaction to run. This can be used\n  when calling `transact!` from *within* another mutation to ensure that the effects of the current mutation finish\n  before this transaction takes control of the CPU. This option defaults to `false`, but `defmutation` causes it to\n  be set to true for any transactions run within mutation action sections. You can affect the default for this value\n  in a dynamic scope by binding `rc/*after-render*` to true\n  - `:parallel?` - Boolean. If true, the mutation(s) in the transaction will NOT go into a network queue, nor\n    will it block later mutations or queries.\n\n  You may add any additional keys to the option map (namespaced is ideal), and any value is legal in the options\n  map, including functions. The options will appear in the `env` of all mutations run in the transaction as\n  `:com.fulcrologic.fulcro.algorithms.tx-processing/options`. This is the preferred way of passing things like\n  lambdas (if you wanted something like a callback) to mutations. Note that mutation symbols are perfectly legal\n  as mutation *arguments*, so chaining mutations can already be done via the normal transaction mechanism, and\n  callbacks, while sometimes necessary/useful, should be limited to usages where there is no other clean way\n  to accomplish the goal.\n\n  NOTE: This function calls the application's `tx!` function (which is configurable). Fulcro 2 'follow-on reads' are\n  supported by the default version and are added to the `:refresh` entries. Your choice of rendering algorithm will\n  influence their necessity.\n\n  Returns the transaction ID of the submitted transaction.\n  ","^=>",["^ ","^<Q",false,"^=?",3,"^<U",3,"^<N",[["^>W","^=<","^>X"],["^>Y","^=<"]],"^L",["^M",[["^>W","^=<","^>X"],["^>Y","^=<"]]],"^<P",["^M",[null,null]]]],"^O","^4V","^6","com/fulcrologic/fulcro/components.cljc","^:",16,"^=>",["^ ","^<Q",false,"^=?",3,"^<U",3,"^<N",[["^>W","^=<","^>X"],["^>Y","^=<"]],"^L",["^M",[["^>W","^=<","^>X"],["^>Y","^=<"]]],"^<P",["^M",[null,null]]],"^<N",[["^>W","^=<","^>X"],["^>Y","^=<"]],"^<O",null,"^=?",3,"^<P",["^M",[null,null]],"^8",1,"^<Q",false,"^=@",[["^ ","^=?",3,"^<Q",false,"^=8",["^H",["^<S","^<T"]]],["^ ","^=?",2,"^<Q",false,"^=8",["^H",["^<S","^<T"]]]],"^7",804,"^9",804,"^<U",3,"^<V",true,"^L",["^M",[["^>W","^=<","^>X"],["^>Y","^=<"]]],"^K","Submit a transaction for processing.\n\n  The underlying transaction system is pluggable, but the *default* supported options are:\n\n  - `:optimistic?` - boolean. Should the transaction be processed optimistically?\n  - `:ref` - ident. The ident of the component used to submit this transaction. This is set automatically if you use a component to call this function.\n  - `:component` - React element. Set automatically if you call this function using a component.\n  - `:refresh` - Vector containing idents (of components) and keywords (of props). Things that have changed and should be re-rendered\n    on screen. Only necessary when the underlying rendering algorithm won't auto-detect, such as when UI is derived from the\n    state of other components or outside of the directly queried props. Interpretation depends on the renderer selected:\n    The ident-optimized render treats these as \"extras\".\n  - `:only-refresh` - Vector of idents/keywords.  If the underlying rendering configured algorithm supports it: The\n    components using these are the *only* things that will be refreshed in the UI.\n    This can be used to avoid the overhead of looking for stale data when you know exactly what\n    you want to refresh on screen as an extra optimization. Idents are *not* checked against queries.\n  - `:abort-id` - An ID (you make up) that makes it possible (if the plugins you're using support it) to cancel\n    the network portion of the transaction (assuming it has not already completed).\n  - `:compressible?` - boolean. Check compressible-transact! docs.\n  - `:synchronous?` - boolean. When turned on the transaction will run immediately on the calling thread. If run against\n  a component then the props will be immediately tunneled back to the calling component, allowing for React (raw) input\n  event handlers to behave as described in standard React Forms docs (uses setState behind the scenes). Any remote operations\n  will still be queued as normal. Calling `transact!!` is a shorthand for this option. WARNING: ONLY the given component will\n  be refreshed in the UI. If you have dependent data elsewhere in the UI you must either use `transact!` or schedule\n  your own global render using `app/schedule-render!`.\n  - `:after-render?` - Wait until the next render completes before allowing this transaction to run. This can be used\n  when calling `transact!` from *within* another mutation to ensure that the effects of the current mutation finish\n  before this transaction takes control of the CPU. This option defaults to `false`, but `defmutation` causes it to\n  be set to true for any transactions run within mutation action sections. You can affect the default for this value\n  in a dynamic scope by binding `rc/*after-render*` to true\n  - `:parallel?` - Boolean. If true, the mutation(s) in the transaction will NOT go into a network queue, nor\n    will it block later mutations or queries.\n\n  You may add any additional keys to the option map (namespaced is ideal), and any value is legal in the options\n  map, including functions. The options will appear in the `env` of all mutations run in the transaction as\n  `:com.fulcrologic.fulcro.algorithms.tx-processing/options`. This is the preferred way of passing things like\n  lambdas (if you wanted something like a callback) to mutations. Note that mutation symbols are perfectly legal\n  as mutation *arguments*, so chaining mutations can already be done via the normal transaction mechanism, and\n  callbacks, while sometimes necessary/useful, should be limited to usages where there is no other clean way\n  to accomplish the goal.\n\n  NOTE: This function calls the application's `tx!` function (which is configurable). Fulcro 2 'follow-on reads' are\n  supported by the default version and are added to the `:refresh` entries. Your choice of rendering algorithm will\n  influence their necessity.\n\n  Returns the transaction ID of the submitted transaction.\n  "],"~$tunnel-props!",["^ ","^<K",null,"^5",["^ ","^6","com/fulcrologic/fulcro/components.cljc","^7",586,"^8",7,"^9",586,"^:",20,"^L",["^M",["^<L",["^M",[["^=G","~$new-props"]]]]],"^K","CLJS-only.  When the `component` is mounted this will tunnel `new-props` to that component through React `setState`. If you're in\n  an event handler, this means the tunnelling will be synchronous, and can be useful when updating props that could affect DOM\n  inputs. This is typically used internally (see `transact!!`, and should generally not be used in applications unless it is a very advanced\n  scenario and you've studied how this works. NOTE: You should `tick!` the application clock and bind *denormalize-time*\n  when generating `new-props` so they are properly time-stamped by `db->tree`, or manually add time to `new-props`\n  using `fdn/with-time` directly."],"^O","^51","^6","com/fulcrologic/fulcro/components.cljc","^:",20,"^<N",["^M",[["^=G","^>["]]],"^<O",null,"^<P",["^M",[null,null]],"^8",1,"^<Q",false,"^7",586,"^<R",["^H",["^>2","^<T"]],"^9",586,"^<U",2,"^<V",true,"^L",["^M",["^<L",["^M",[["^=G","^>["]]]]],"^K","CLJS-only.  When the `component` is mounted this will tunnel `new-props` to that component through React `setState`. If you're in\n  an event handler, this means the tunnelling will be synchronous, and can be useful when updating props that could affect DOM\n  inputs. This is typically used internally (see `transact!!`, and should generally not be used in applications unless it is a very advanced\n  scenario and you've studied how this works. NOTE: You should `tick!` the application clock and bind *denormalize-time*\n  when generating `new-props` so they are properly time-stamped by `db->tree`, or manually add time to `new-props`\n  using `fdn/with-time` directly."],"~$has-pre-merge?",["^ ","^<K",null,"^5",["^ ","^6","com/fulcrologic/fulcro/components.cljc","^7",210,"^8",7,"^9",210,"^:",21,"^L",["^M",["^<L",["^M",[["^=G"]]]]],"^K","Returns true if the component has a pre-merge","^=8","^=3"],"^O","^4U","^6","com/fulcrologic/fulcro/components.cljc","^:",21,"^<N",["^M",[["^=G"]]],"^<O",null,"^<P",["^M",[null,null]],"^8",1,"^<Q",false,"^7",210,"^<R","^=3","^9",210,"^<U",1,"^=8","^=3","^<V",true,"^L",["^M",["^<L",["^M",[["^=G"]]]]],"^K","Returns true if the component has a pre-merge"],"~$*depth*",["^ ","^5",["^ ","^6","com/fulcrologic/fulcro/components.cljc","^7",39,"^8",16,"^9",39,"^:",23,"^=X",true],"^O","^54","^6","com/fulcrologic/fulcro/components.cljc","^:",23,"^8",1,"^=X",true,"^7",39,"^9",39,"^=8","^<S"],"~$get-query",["^ ","^<K",null,"^5",["^ ","^6","com/fulcrologic/fulcro/components.cljc","^7",612,"^8",7,"^9",612,"^:",16,"^L",["^M",["^<L",["^M",[["^=2"],["^=2","^>O"]]]]],"^K","Get the query for the given class or factory. If called without a state map, then you'll get the declared static\n  query of the class. If a state map is supplied, then the dynamically set queries in that state will result in\n  the current dynamically-set query according to that state.","^=>",["^ ","^<Q",false,"^=?",2,"^<U",2,"^<N",[["^=2"],["^=2","^>O"]],"^L",["^M",[["^=2"],["^=2","^>O"]]],"^<P",["^M",[null,null]]]],"^O","^5>","^6","com/fulcrologic/fulcro/components.cljc","^:",16,"^=>",["^ ","^<Q",false,"^=?",2,"^<U",2,"^<N",[["^=2"],["^=2","^>O"]],"^L",["^M",[["^=2"],["^=2","^>O"]]],"^<P",["^M",[null,null]]],"^<N",[["^=2"],["^=2","^>O"]],"^<O",null,"^=?",2,"^<P",["^M",[null,null]],"^8",1,"^<Q",false,"^=@",[["^ ","^=?",1,"^<Q",false,"^=8","^<S"],["^ ","^=?",2,"^<Q",false,"^=8","^<S"]],"^7",612,"^9",612,"^<U",2,"^<V",true,"^L",["^M",[["^=2"],["^=2","^>O"]]],"^K","Get the query for the given class or factory. If called without a state map, then you'll get the declared static\n  query of the class. If a state map is supplied, then the dynamically set queries in that state will result in\n  the current dynamically-set query according to that state."],"~$component-instance?",["^ ","^<K",null,"^5",["^ ","^6","com/fulcrologic/fulcro/components.cljc","^7",89,"^8",7,"^9",89,"^:",26,"^L",["^M",["^<L",["^M",[["~$x"]]]]],"^K","[x]\n\n   Returns true if the argument is a component. A component is defined as a *mounted component*.\n   This function returns false for component classes, and also returns false for the output of a Fulcro component factory.","^=8","^=3"],"^O","^58","^6","com/fulcrologic/fulcro/components.cljc","^:",26,"^<N",["^M",[["~$x"]]],"^<O",null,"^<P",["^M",[null,null]],"^8",1,"^<Q",false,"^7",89,"^<R","^=3","^9",89,"^<U",1,"^=8","^=3","^<V",true,"^L",["^M",["^<L",["^M",[["~$x"]]]]],"^K","[x]\n\n   Returns true if the argument is a component. A component is defined as a *mounted component*.\n   This function returns false for component classes, and also returns false for the output of a Fulcro component factory."],"~$link-query",["^ ","^O","^56","^6","com/fulcrologic/fulcro/components.cljc","^7",894,"^8",1,"^9",894,"^:",16,"^5",["^ ","^6","com/fulcrologic/fulcro/components.cljc","^7",894,"^8",6,"^9",894,"^:",16],"^K","Part of dyn query implementation. Find all of the elements (only at the top level) of the given query and replace them\n  with their query ID."],"~$configure-component!",["^ ","^<K",null,"^5",["^ ","^6","com/fulcrologic/fulcro/components.cljc","^7",374,"^8",9,"^9",374,"^:",29,"^L",["^M",["^<L",["^M",[["^>6","~$fqkw","^>X"]]]]],"^K","Configure the given `cls` (a function) to act as a react component within the Fulcro ecosystem.\n\n    cls - A js function (in clj, this is ignored)\n    fqkw - A keyword that shares the exact fully-qualified name of the component class\n    options - A component options map (no magic) containing things like `:query` and `:ident`.\n\n\n    NOTE: the `options` map expects proper function signatures for:\n\n    `:query` - (fn [this] ...)\n    `:ident` - (fn [this props] ...)\n    `:initial-state` - (fn [cls params] ...)\n\n    Returns (and registers) a new react class.\n    "],"^O","^52","^6","com/fulcrologic/fulcro/components.cljc","^:",29,"^<N",["^M",[["^>6","^?6","^>X"]]],"^<O",null,"^<P",["^M",[null,null]],"^8",3,"^<Q",false,"^7",374,"^<R","^<S","^9",374,"^<U",3,"^<V",true,"^L",["^M",["^<L",["^M",[["^>6","^?6","^>X"]]]]],"^K","Configure the given `cls` (a function) to act as a react component within the Fulcro ecosystem.\n\n    cls - A js function (in clj, this is ignored)\n    fqkw - A keyword that shares the exact fully-qualified name of the component class\n    options - A component options map (no magic) containing things like `:query` and `:ident`.\n\n\n    NOTE: the `options` map expects proper function signatures for:\n\n    `:query` - (fn [this] ...)\n    `:ident` - (fn [this props] ...)\n    `:initial-state` - (fn [cls params] ...)\n\n    Returns (and registers) a new react class.\n    "],"~$configure-hooks-component!",["^ ","^<K",null,"^5",["^ ","^6","com/fulcrologic/fulcro/components.cljc","^7",681,"^8",7,"^9",681,"^:",33,"^L",["^M",["^<L",["^M",[["~$f","^>X"]]]]],"^K","Configure a function `(f [this fulcro-props] ...)` to work properly as a hook-based react component. This can be\n  used in leiu of `defsc` to create a component, where `options` is the (non-magic) map of component options\n  (i.e. :query is a `(fn [this])`, not a vector).\n\n  IMPORTANT: Your options must include `:componentName`, a fully-qualified keyword to use in the component registry.\n\n  Returns a new function that wraps yours (to properly extract Fulcro props) and installs the proper Fulcro component\n  options on the low-level function so that it will act properly when used within React as a hook-based component.\n\n  (def MyComponent\n    (configure-hooks-component!\n      (fn [this props]\n        (let [[v set-v!] (use-state this 0)\n          (dom/div ...)))\n      {:query ... :ident (fn [_ props] ...) :componentName ::MyComponent}))\n\n  (def ui-my-component (comp/factory MyComponent {:keyfn :id})\n\n  This can be used to easily generate dynamic components at runtime (as can `configure-component!`).\n  "],"^O","^5N","^6","com/fulcrologic/fulcro/components.cljc","^:",33,"^<N",["^M",[["~$f","^>X"]]],"^<O",null,"^<P",["^M",[null,null]],"^8",1,"^<Q",false,"^7",681,"^<R","^<S","^9",681,"^<U",2,"^<V",true,"^L",["^M",["^<L",["^M",[["~$f","^>X"]]]]],"^K","Configure a function `(f [this fulcro-props] ...)` to work properly as a hook-based react component. This can be\n  used in leiu of `defsc` to create a component, where `options` is the (non-magic) map of component options\n  (i.e. :query is a `(fn [this])`, not a vector).\n\n  IMPORTANT: Your options must include `:componentName`, a fully-qualified keyword to use in the component registry.\n\n  Returns a new function that wraps yours (to properly extract Fulcro props) and installs the proper Fulcro component\n  options on the low-level function so that it will act properly when used within React as a hook-based component.\n\n  (def MyComponent\n    (configure-hooks-component!\n      (fn [this props]\n        (let [[v set-v!] (use-state this 0)\n          (dom/div ...)))\n      {:query ... :ident (fn [_ props] ...) :componentName ::MyComponent}))\n\n  (def ui-my-component (comp/factory MyComponent {:keyfn :id})\n\n  This can be used to easily generate dynamic components at runtime (as can `configure-component!`).\n  "],"~$raw->newest-props",["^ ","^<K",null,"^5",["^ ","^6","com/fulcrologic/fulcro/components.cljc","^7",236,"^8",7,"^9",236,"^:",24,"^L",["^M",["^<L",["^M",[["~$raw-props","~$raw-state"]]]]],"^K","Using raw react props/state returns the newest Fulcro props. This is part of \"props tunneling\", where component\n  local state is leveraged as a communication mechanism of updated props directly to a component that has an ident.\n  This function will return the correct version of props based on timestamps."],"^O","^5M","^6","com/fulcrologic/fulcro/components.cljc","^:",24,"^<N",["^M",[["^?9","^?:"]]],"^<O",null,"^<P",["^M",[null,null]],"^8",1,"^<Q",false,"^7",236,"^<R","^<S","^9",236,"^<U",2,"^<V",true,"^L",["^M",["^<L",["^M",[["^?9","^?:"]]]]],"^K","Using raw react props/state returns the newest Fulcro props. This is part of \"props tunneling\", where component\n  local state is leveraged as a communication mechanism of updated props directly to a component that has an ident.\n  This function will return the correct version of props based on timestamps."],"~$get-query-by-id",["^ ","^O","^6C","^6","com/fulcrologic/fulcro/components.cljc","^7",610,"^8",1,"^9",610,"^:",21,"^5",["^ ","^6","com/fulcrologic/fulcro/components.cljc","^7",610,"^8",6,"^9",610,"^:",21]],"~$transact!!",["^ ","^<K",null,"^5",["^ ","^6","com/fulcrologic/fulcro/components.cljc","^7",854,"^8",7,"^9",854,"^:",17,"^L",["^M",["^<L",["^M",[["^=G","^=<"],["^=G","^=<","^>X"]]]]],"^K","Shorthand for exactly `(transact! component tx (merge options {:synchronous? true}))`.\n\n  Runs a synchronous transaction, which is an optimized mode where the optimistic behaviors of the mutations in the\n  transaction run on the calling thread, and new props are immediately made available to the calling component via\n  \"props tunneling\" (a behind-the-scenes mechanism using js/setState).\n\n  This mode is meant to be used in form input event handlers, since React is designed to only work properly with\n  raw DOM inputs via component-local state. This prevents things like the cursor jumping to the end of inputs\n  unexpectedly.\n\n  WARNING: Using an `app` instead of a component in synchronous transactions makes no sense. You must pass a component\n  that has an ident.\n\n  If you're using this, you can also set the compiler option:\n\n  ```\n  :compiler-options {:external-config {:fulcro     {:wrap-inputs? false}}}\n  ```\n\n  to turn off Fulcro DOM's generation of wrapped inputs (which try to solve this problem in a less-effective way).\n\n  WARNING: Synchronous rendering does *not* refresh the full UI, only the component.\n  ","^=>",["^ ","^<Q",false,"^=?",3,"^<U",3,"^<N",[["^=G","^=<"],["^=G","^=<","^>X"]],"^L",["^M",[["^=G","^=<"],["^=G","^=<","^>X"]]],"^<P",["^M",[null,null]]]],"^O","^5X","^6","com/fulcrologic/fulcro/components.cljc","^:",17,"^=>",["^ ","^<Q",false,"^=?",3,"^<U",3,"^<N",[["^=G","^=<"],["^=G","^=<","^>X"]],"^L",["^M",[["^=G","^=<"],["^=G","^=<","^>X"]]],"^<P",["^M",[null,null]]],"^<N",[["^=G","^=<"],["^=G","^=<","^>X"]],"^<O",null,"^=?",3,"^<P",["^M",[null,null]],"^8",1,"^<Q",false,"^=@",[["^ ","^=?",2,"^<Q",false,"^=8",["^H",["^<S","^<T"]]],["^ ","^=?",3,"^<Q",false,"^=8",["^H",["^<S","^<T"]]]],"^7",854,"^9",854,"^<U",3,"^<V",true,"^L",["^M",[["^=G","^=<"],["^=G","^=<","^>X"]]],"^K","Shorthand for exactly `(transact! component tx (merge options {:synchronous? true}))`.\n\n  Runs a synchronous transaction, which is an optimized mode where the optimistic behaviors of the mutations in the\n  transaction run on the calling thread, and new props are immediately made available to the calling component via\n  \"props tunneling\" (a behind-the-scenes mechanism using js/setState).\n\n  This mode is meant to be used in form input event handlers, since React is designed to only work properly with\n  raw DOM inputs via component-local state. This prevents things like the cursor jumping to the end of inputs\n  unexpectedly.\n\n  WARNING: Using an `app` instead of a component in synchronous transactions makes no sense. You must pass a component\n  that has an ident.\n\n  If you're using this, you can also set the compiler option:\n\n  ```\n  :compiler-options {:external-config {:fulcro     {:wrap-inputs? false}}}\n  ```\n\n  to turn off Fulcro DOM's generation of wrapped inputs (which try to solve this problem in a less-effective way).\n\n  WARNING: Synchronous rendering does *not* refresh the full UI, only the component.\n  "],"~$computed-factory",["^ ","^<K",null,"^5",["^ ","^6","com/fulcrologic/fulcro/components.cljc","^7",788,"^8",7,"^9",788,"^:",23,"^L",["^M",["^<L",["^M",[["~$class"],["^?>","^>X"]]]]],"^K","Similar to factory, but returns a function with the signature\n  [props computed & children] instead of default [props & children].\n  This makes easier to send computed.","^=>",["^ ","^<Q",false,"^=?",2,"^<U",2,"^<N",[["^?>"],["^?>","^>X"]],"^L",["^M",[["^?>"],["^?>","^>X"]]],"^<P",["^M",[null,null]]]],"^O","^5O","^6","com/fulcrologic/fulcro/components.cljc","^:",23,"^=>",["^ ","^<Q",false,"^=?",2,"^<U",2,"^<N",[["^?>"],["^?>","^>X"]],"^L",["^M",[["^?>"],["^?>","^>X"]]],"^<P",["^M",[null,null]]],"^<N",[["^?>"],["^?>","^>X"]],"^<O",null,"^=?",2,"^<P",["^M",[null,null]],"^8",1,"^<Q",false,"^=@",[["^ ","^=?",1,"^<Q",false,"^=8","^<S"],["^ ","^=?",2,"^<Q",false,"^=8",["^H",["^>Q","~$cljs.core/MetaFn","^<T"]]]],"^7",788,"^9",788,"^<U",2,"^<V",true,"^L",["^M",[["^?>"],["^?>","^>X"]]],"^K","Similar to factory, but returns a function with the signature\n  [props computed & children] instead of default [props & children].\n  This makes easier to send computed."],"~$register-component!",["^ ","^O","^5V","^6","com/fulcrologic/fulcro/components.cljc","^7",65,"^8",1,"^9",65,"^:",25,"^5",["^ ","^6","com/fulcrologic/fulcro/components.cljc","^7",65,"^8",6,"^9",65,"^:",25],"^K","\n  [k component-class]\n\n  Add a component to Fulcro's component registry.  This is used by defsc to ensure that all Fulcro classes\n  that have been compiled (transitively required) will be accessible for lookup by fully-qualified symbol/keyword.\n  Not meant for public use, unless you're creating your own component macro that doesn't directly leverage defsc."],"~$refresh-component!",["^ ","^<K",null,"^5",["^ ","^6","com/fulcrologic/fulcro/components.cljc","^7",1504,"^8",7,"^9",1504,"^:",25,"^L",["^M",["^<L",["^M",[["^=G"]]]]],"^K","Request that the given subtree starting a component be refreshed from the app database without re-rendering any parent. This\n  is a synchronous call that will tunnel the props to the given component via an internal call to React setState."],"^O","^5H","^6","com/fulcrologic/fulcro/components.cljc","^:",25,"^<N",["^M",[["^=G"]]],"^<O",null,"^<P",["^M",[null,null]],"^8",1,"^<Q",false,"^7",1504,"^<R",["^H",[null,"^<T"]],"^9",1504,"^<U",1,"^<V",true,"^L",["^M",["^<L",["^M",[["^=G"]]]]],"^K","Request that the given subtree starting a component be refreshed from the app database without re-rendering any parent. This\n  is a synchronous call that will tunnel the props to the given component via an internal call to React setState."],"~$force-children",["^ ","^<K",null,"^5",["^ ","^6","com/fulcrologic/fulcro/components.cljc","^7",74,"^8",7,"^9",74,"^:",21,"^L",["^M",["^<L",["^M",[["~$x"]]]]],"^K","Utility function that will force a lazy sequence of children (recursively) into realized\n  vectors (React cannot deal with lazy seqs in production mode)"],"^O","^5D","^6","com/fulcrologic/fulcro/components.cljc","^:",21,"^<N",["^M",[["~$x"]]],"^<O",null,"^<P",["^M",[null,null]],"^8",1,"^<Q",false,"^7",74,"^<R",["^H",[null,"^>Q","^<S"]],"^9",74,"^<U",1,"^<V",true,"^L",["^M",["^<L",["^M",[["~$x"]]]]],"^K","Utility function that will force a lazy sequence of children (recursively) into realized\n  vectors (React cannot deal with lazy seqs in production mode)"],"~$registry-key->class",["^ ","^O","^5@","^6","com/fulcrologic/fulcro/components.cljc","^7",126,"^8",1,"^9",126,"^:",25,"^5",["^ ","^6","com/fulcrologic/fulcro/components.cljc","^7",126,"^8",6,"^9",126,"^:",25],"^K","[classname]\n\n  Look up the given component in Fulcro's global component registry. Will only be able to find components that have\n  been (transitively) required by your application.\n\n  `classname` can be a fully-qualified keyword or symbol."],"~$factory",["^ ","^<K",null,"^5",["^ ","^6","com/fulcrologic/fulcro/components.cljc","^7",736,"^8",7,"^9",736,"^:",14,"^L",["^M",["^<L",["^M",[["^?>"],["^?>",["^ ","^=B",["~$keyfn","~$qualifier"],"^1P","^=C"]]]]]],"^K","Create a factory constructor from a component class created with\n   defsc.","^=>",["^ ","^<Q",false,"^=?",2,"^<U",2,"^<N",[["^?>"],["^?>",["^ ","^=B",["^?E","^?F"],"^1P","^=C"]]],"^L",["^M",[["^?>"],["^?>",["^ ","^=B",["^?E","^?F"],"^1P","^=C"]]]],"^<P",["^M",[null,null]]]],"^O","^5B","^6","com/fulcrologic/fulcro/components.cljc","^:",14,"^=>",["^ ","^<Q",false,"^=?",2,"^<U",2,"^<N",[["^?>"],["^?>",["^ ","^=B",["^?E","^?F"],"^1P","^=C"]]],"^L",["^M",[["^?>"],["^?>",["^ ","^=B",["^?E","^?F"],"^1P","^=C"]]]],"^<P",["^M",[null,null]]],"^<N",[["^?>"],["^?>",["^ ","^=B",["^?E","^?F"],"^1P","^=C"]]],"^<O",null,"^=?",2,"^<P",["^M",[null,null]],"^8",1,"^<Q",false,"^=@",[["^ ","^=?",1,"^<Q",false,"^=8","^<S"],["^ ","^=?",2,"^<Q",false,"^=8",["^H",["^>Q","^??","^<T"]]]],"^7",736,"^9",736,"^<U",2,"^<V",true,"^L",["^M",[["^?>"],["^?>",["^ ","^=B",["^?E","^?F"],"^1P","^=C"]]]],"^K","Create a factory constructor from a component class created with\n   defsc."],"~$class->all",["^ ","^<K",null,"^5",["^ ","^6","com/fulcrologic/fulcro/components.cljc","^7",958,"^8",7,"^9",958,"^:",17,"^L",["^M",["^<L",["^M",[["~$x","^?>"]]]]],"^K","Get all of the on-screen component instances from the indexes that have the type of the component class.\n  `x` can be anything `any->app` is ok with."],"^O","^5K","^6","com/fulcrologic/fulcro/components.cljc","^:",17,"^<N",["^M",[["~$x","^?>"]]],"^<O",null,"^<P",["^M",[null,null]],"^8",1,"^<Q",false,"^7",958,"^<R",["^H",["^<S","^<T"]],"^9",958,"^<U",2,"^<V",true,"^L",["^M",["^<L",["^M",[["~$x","^?>"]]]]],"^K","Get all of the on-screen component instances from the indexes that have the type of the component class.\n  `x` can be anything `any->app` is ok with."],"~$make-state-map",["^ ","^<K",null,"^5",["^ ","^6","com/fulcrologic/fulcro/components.cljc","^7",622,"^8",7,"^9",622,"^:",21,"^L",["^M",["^<L",["^M",[["^<X","~$children-by-query-key","^<Z"]]]]],"^K","Build a component's initial state using the defsc initial-state-data from\n  options, the children from options, and the params from the invocation of get-initial-state."],"^O","^5G","^6","com/fulcrologic/fulcro/components.cljc","^:",21,"^<N",["^M",[["^<X","^?I","^<Z"]]],"^<O",null,"^<P",["^M",[null,null]],"^8",1,"^<Q",false,"^7",622,"^<R",["^H",[null,"^>Q","^<S"]],"^9",622,"^<U",3,"^<V",true,"^L",["^M",["^<L",["^M",[["^<X","^?I","^<Z"]]]]],"^K","Build a component's initial state using the defsc initial-state-data from\n  options, the children from options, and the params from the invocation of get-initial-state."],"~$has-feature?",["^ ","^<K",null,"^5",["^ ","^6","com/fulcrologic/fulcro/components.cljc","^7",196,"^8",7,"^9",196,"^:",19,"^L",["^M",["^<L",["^M",[["^=G","~$option-key"]]]]],"^K","Returns true if the component has `option-key` declared in the component options map.","^=8","^=3"],"^O","^66","^6","com/fulcrologic/fulcro/components.cljc","^:",19,"^<N",["^M",[["^=G","^?K"]]],"^<O",null,"^<P",["^M",[null,null]],"^8",1,"^<Q",false,"^7",196,"^<R","^=3","^9",196,"^<U",2,"^=8","^=3","^<V",true,"^L",["^M",["^<L",["^M",[["^=G","^?K"]]]]],"^K","Returns true if the component has `option-key` declared in the component options map."],"~$check-component-registry!",["^ ","^O","^5C","^6","com/fulcrologic/fulcro/components.cljc","^7",1535,"^8",1,"^9",1535,"^:",31,"^5",["^ ","^6","com/fulcrologic/fulcro/components.cljc","^7",1535,"^8",6,"^9",1535,"^:",31],"^K","Walks the complete list of components in the component registry and looks for problems. Used during dev mode to\n   detect common problems that can cause runtime misbehavior."],"~$class->registry-key",["^ ","^O","^5[","^6","com/fulcrologic/fulcro/components.cljc","^7",120,"^8",1,"^9",120,"^:",25,"^5",["^ ","^6","com/fulcrologic/fulcro/components.cljc","^7",120,"^8",6,"^9",120,"^:",25],"^K","[class]\n\n   Returns the registry key for the given component class."],"~$component?",["^ ","^5",["^ ","^6","com/fulcrologic/fulcro/components.cljc","^7",98,"^8",6,"^9",98,"^:",16],"^O","^4J","^6","com/fulcrologic/fulcro/components.cljc","^:",16,"^8",1,"^7",98,"^9",98,"^=8","^=3","^K","[x]\n\n   Returns true if the argument is a component instance.\n\n   DEPRECATED for terminology clarity. Use `component-instance?` instead."],"~$component->state-map",["^ ","^<K",null,"^5",["^ ","^6","com/fulcrologic/fulcro/components.cljc","^7",971,"^8",7,"^9",971,"^:",27,"^L",["^M",["^<L",["^M",[["^=0"]]]]],"^K","Returns the current value of the state map via a component instance. Note that it is not safe to render\n  arbitrary data from the state map since Fulcro will have no idea that it should refresh a component that\n  does so; however, it is sometimes useful to look at the state map for information that doesn't\n  change over time."],"^O","^6=","^6","com/fulcrologic/fulcro/components.cljc","^:",27,"^<N",["^M",[["^=0"]]],"^<O",null,"^<P",["^M",[null,null]],"^8",1,"^<Q",false,"^7",971,"^<R",["^H",["^<S","^<T"]],"^9",971,"^<U",1,"^<V",true,"^L",["^M",["^<L",["^M",[["^=0"]]]]],"^K","Returns the current value of the state map via a component instance. Note that it is not safe to render\n  arbitrary data from the state map since Fulcro will have no idea that it should refresh a component that\n  does so; however, it is sometimes useful to look at the state map for information that doesn't\n  change over time."],"~$get-indexes",["^ ","^<K",null,"^5",["^ ","^6","com/fulcrologic/fulcro/components.cljc","^7",934,"^8",7,"^9",934,"^:",18,"^L",["^M",["^<L",["^M",[["~$x"]]]]],"^K","Get all of the indexes from a component instance or app. See also `ident->any`, `class->any`, etc."],"^O","^62","^6","com/fulcrologic/fulcro/components.cljc","^:",18,"^<N",["^M",[["~$x"]]],"^<O",null,"^<P",["^M",[null,null]],"^8",1,"^<Q",false,"^7",934,"^<R",["^H",["^<S","^<T"]],"^9",934,"^<U",1,"^<V",true,"^L",["^M",["^<L",["^M",[["~$x"]]]]],"^K","Get all of the indexes from a component instance or app. See also `ident->any`, `class->any`, etc."],"^<M",["^ ","^<K",null,"^5",["^ ","^6","com/fulcrologic/fulcro/components.cljc","^7",213,"^8",7,"^9",213,"^:",12,"^L",["^M",["^<L",["^M",[["^=0","^=E"]]]]],"^K","Returns the ident that would be generated by the given component instance or class IF it was supplied props"],"^O","^5Y","^6","com/fulcrologic/fulcro/components.cljc","^:",12,"^<N",["^M",[["^=0","^=E"]]],"^<O",null,"^<P",["^M",[null,null]],"^8",1,"^<Q",false,"^7",213,"^<R",["^H",["^<S","^<T"]],"^9",213,"^<U",2,"^<V",true,"^L",["^M",["^<L",["^M",[["^=0","^=E"]]]]],"^K","Returns the ident that would be generated by the given component instance or class IF it was supplied props"],"^>C",["^ ","^O","^5Z","^6","com/fulcrologic/fulcro/components.cljc","^7",190,"^8",1,"^9",190,"^:",23,"^5",["^ ","^6","com/fulcrologic/fulcro/components.cljc","^7",190,"^8",6,"^9",190,"^:",23],"^K","[component & ks]\n\n   Returns the map of options that was specified (via `defsc`) for the component class."],"~$shared",["^ ","^<K",null,"^5",["^ ","^6","com/fulcrologic/fulcro/components.cljc","^7",246,"^8",7,"^9",246,"^:",13,"^L",["^M",["^<L",["^M",[[],["~$comp-or-app"],["^?R","^>="]]]]],"^K","Return the global shared properties of the root. See :shared and\n   :shared-fn app options. NOTE: Shared props only update on root render and by explicit calls to\n   `app/update-shared!`.\n\n   This function attempts to rely on the dynamic var *shared* (first), but will make a best-effort of\n   finding shared props when run within a component's render or lifecycle. Passing your app will\n   ensure this returns the current shared props.","^=>",["^ ","^<Q",false,"^=?",2,"^<U",2,"^<N",[[],["^?R"],["^?R","^>="]],"^L",["^M",[[],["^?R"],["^?R","^>="]]],"^<P",["^M",[null,null,null]]]],"^O","^4C","^6","com/fulcrologic/fulcro/components.cljc","^:",13,"^=>",["^ ","^<Q",false,"^=?",2,"^<U",2,"^<N",[[],["^?R"],["^?R","^>="]],"^L",["^M",[[],["^?R"],["^?R","^>="]]],"^<P",["^M",[null,null,null]]],"^<N",[[],["^?R"],["^?R","^>="]],"^<O",null,"^=?",2,"^<P",["^M",[null,null,null]],"^8",1,"^<Q",false,"^=@",[["^ ","^=?",0,"^<Q",false,"^=8","^<S"],["^ ","^=?",1,"^<Q",false,"^=8","^<S"],["^ ","^=?",2,"^<Q",false,"^=8",["^H",[null,"^<S","^<T"]]]],"^7",246,"^9",246,"^<U",2,"^<V",true,"^L",["^M",[[],["^?R"],["^?R","^>="]]],"^K","Return the global shared properties of the root. See :shared and\n   :shared-fn app options. NOTE: Shared props only update on root render and by explicit calls to\n   `app/update-shared!`.\n\n   This function attempts to rely on the dynamic var *shared* (first), but will make a best-effort of\n   finding shared props when run within a component's render or lifecycle. Passing your app will\n   ensure this returns the current shared props."],"~$depth",["^ ","^<K",null,"^5",["^ ","^6","com/fulcrologic/fulcro/components.cljc","^7",223,"^8",7,"^9",223,"^:",12,"^L",["^M",["^<L",["^M",[["^=0"]]]]]],"^O","^63","^6","com/fulcrologic/fulcro/components.cljc","^:",12,"^<N",["^M",[["^=0"]]],"^<O",null,"^<P",["^M",[null,null]],"^8",1,"^<Q",false,"^7",223,"^<R","^<S","^9",223,"^<U",1,"^<V",true,"^L",["^M",["^<L",["^M",[["^=0"]]]]]],"~$ident->components",["^ ","^<K",null,"^5",["^ ","^6","com/fulcrologic/fulcro/components.cljc","^7",940,"^8",7,"^9",940,"^:",24,"^L",["^M",["^<L",["^M",[["~$x","^<M"]]]]],"^K","Return all on-screen component instances that are rendering the data for a given ident. `x` is anything any->app accepts."],"^O","^45","^6","com/fulcrologic/fulcro/components.cljc","^:",24,"^<N",["^M",[["~$x","^<M"]]],"^<O",null,"^<P",["^M",[null,null]],"^8",1,"^<Q",false,"^7",940,"^<R",["^H",["^<S","^<T"]],"^9",940,"^<U",2,"^<V",true,"^L",["^M",["^<L",["^M",[["~$x","^<M"]]]]],"^K","Return all on-screen component instances that are rendering the data for a given ident. `x` is anything any->app accepts."],"~$create-element",["^ ","^<K",null,"^5",["^ ","^6","com/fulcrologic/fulcro/components.cljc","^7",716,"^8",8,"^9",716,"^:",22,"~:private",true,"^L",["^M",["^<L",["^M",[["^?>","^=E","^=N"]]]]],"^K","Create a react element for a Fulcro class.  In CLJ this returns the same thing as a mounted instance, whereas in CLJS it is an\n  element (which has yet to instantiate an instance)."],"^?V",true,"^O","^4<","^6","com/fulcrologic/fulcro/components.cljc","^:",22,"^<N",["^M",[["^?>","^=E","^=N"]]],"^<O",null,"^<P",["^M",[null,null]],"^8",1,"^<Q",false,"^7",716,"^<R","^<S","^9",716,"^<U",3,"^<V",true,"^L",["^M",["^<L",["^M",[["^?>","^=E","^=N"]]]]],"^K","Create a react element for a Fulcro class.  In CLJ this returns the same thing as a mounted instance, whereas in CLJS it is an\n  element (which has yet to instantiate an instance)."],"~$has-initial-app-state?",["^ ","^<K",null,"^5",["^ ","^6","com/fulcrologic/fulcro/components.cljc","^7",200,"^8",7,"^9",200,"^:",29,"^L",["^M",["^<L",["^M",[["^=G"]]]]],"^K","Returns true if the component has initial app state.","^=8","^=3"],"^O","^6;","^6","com/fulcrologic/fulcro/components.cljc","^:",29,"^<N",["^M",[["^=G"]]],"^<O",null,"^<P",["^M",[null,null]],"^8",1,"^<Q",false,"^7",200,"^<R","^=3","^9",200,"^<U",1,"^=8","^=3","^<V",true,"^L",["^M",["^<L",["^M",[["^=G"]]]]],"^K","Returns true if the component has initial app state."]],"^1K",["^ ","^R","^R","^1=","^1=","^>","^?","^F","^F","^18","^19","~$s","^?","^19","^19","^?","^?"],"~:cljs.analyzer/constants",["^ ","^1I",["^H",["~:children","~:fulcro$extra_props","~:fulcro$class","~:componentDidUpdate","~:props-middleware","~:drop-component!","~:pre-merge","~:react-key","^2U","~:componentDidCatch","~:computed","~:fulcro$app","~:UNSAFE_componentWillMount","~:else","~:com.fulcrologic.fulcro.application/indexes","~:ref","~:synchronous?","~:displayName","~:cljs$lang$ctorPrWriter","~:getSnapshotBeforeUpdate","~:queryid","~:warn","~:UNSAFE_componentWillUpdate","~:qualifier","~:params","~:type","~:keyfn","~:index-component!","~:getDerivedStateFromProps","~:getDerivedStateFromError","~:prop->classes","~:componentWillUnmount","~:componentWillReceiveProps","~:compressible?","~:com.fulcrologic.fulcro.application/state-atom","~:fulcro$parent","~:fulcro$depth","~:class->components","~:shouldComponentUpdate","~:fatal","~:render","~:com.fulcrologic.fulcro.application/basis-t","~:arg","~:cljs$lang$ctorStr","~:com.fulcrologic.fulcro.application/runtime-atom","~:componentWillUpdate","~:class","~:optimistic?","~:fulcro$options","~:ident","~:UNSAFE_componentWillReceiveProps","~:componentDidMount","~:error","~:ident->components","~:fulcro$value","~:initial-state","~:query","~:com.fulcrologic.fulcro.application/shared-props","~:initLocalState","~:fulcro$isComponent","~:auto","~:p","~:cljs$lang$type","~:render-middleware","~:componentWillMount","~:com.fulcrologic.fulcro.components/component-class","~:props"]],"~:order",["^A@","^2U","^AA","^?Z","^A7","^A1","^A8","^@3","^@P","^@X","^A9","^A3","^@G","^@0","^@2","^@S","~:p","^A<","^@K","^A:","^A?","^@5","^@8","^@?","^@B","^@H","^@I","^@L","^@R","^@T","^@Y","^A2","^A;","^@E","^@=","^?[","^A=","^@W","^@>","^@7","^A0","^A4","^A6","^?Y","^@6","^@N","^@9","^A>","^@F","^@C","^@4","^@;","^@1","^@A","^@Z","^@@","^@<","^@D","^@:","^A5","^@J","^@Q","^@[","^@M","^@U","^@V","^@O"]],"^1R",["^ ","^1K",["^H",[]],"^1J",["^H",[]]],"^1S",["^ ","^Z",["^ ","^1P","^1<"]],"^1T",["^1B","^1=","^1A","^[","^17","^?","^19","^1H","^1F","^1D","^1;","^14","^1?","^F","^16"]],"^Q","^R","~:ns-specs",["^ ","^A@","^2U"],"~:ns-spec-vars",["^H",[]],"~:compiler-options",["^6E",[["^AE","~:static-fns"],true,["^AE","~:shadow-tweaks"],null,["^AE","~:source-map-inline"],null,["^AE","~:elide-asserts"],false,["^AE","~:optimize-constants"],null,["^AE","^1Y"],null,["^AE","~:external-config"],null,["^AE","~:tooling-config"],null,["^AE","~:emit-constants"],null,["^AE","~:load-tests"],null,["^AE","~:form-size-threshold"],null,["^AE","~:global-goog-object&array"],null,["^AE","~:data-readers"],null,["^AE","~:infer-externs"],"^A<",["^AE","^1["],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^AE","~:fn-invoke-direct"],null,["^AE","~:source-map"],"/dev/null"]]]