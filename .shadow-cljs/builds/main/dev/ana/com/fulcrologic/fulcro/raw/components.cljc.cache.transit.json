["^ ","~:output",["^ ","~:js","goog.provide('com.fulcrologic.fulcro.raw.components');\r\ngoog.scope(function(){\r\n  com.fulcrologic.fulcro.raw.components.goog$module$goog$object = goog.module.get('goog.object');\r\n});\r\nif((typeof com !== 'undefined') && (typeof com.fulcrologic !== 'undefined') && (typeof com.fulcrologic.fulcro !== 'undefined') && (typeof com.fulcrologic.fulcro.raw !== 'undefined') && (typeof com.fulcrologic.fulcro.raw.components !== 'undefined') && (typeof com.fulcrologic.fulcro.raw.components.component_registry !== 'undefined')){\r\n} else {\r\ncom.fulcrologic.fulcro.raw.components.component_registry = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\r\n}\r\ncom.fulcrologic.fulcro.raw.components._STAR_query_state_STAR_ = null;\r\n/**\r\n * Like get-in, but for js objects, and in CLJC. In clj, it is just get-in. In cljs it is\r\n *   gobj/getValueByKeys.\r\n */\r\ncom.fulcrologic.fulcro.raw.components.isoget_in = (function com$fulcrologic$fulcro$raw$components$isoget_in(var_args){\r\nvar G__55675 = arguments.length;\r\nswitch (G__55675) {\r\ncase 2:\r\nreturn com.fulcrologic.fulcro.raw.components.isoget_in.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\r\n\r\nbreak;\r\ncase 3:\r\nreturn com.fulcrologic.fulcro.raw.components.isoget_in.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\r\n\r\nbreak;\r\ndefault:\r\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\r\n\r\n}\r\n});\r\n\r\n(com.fulcrologic.fulcro.raw.components.isoget_in.cljs$core$IFn$_invoke$arity$2 = (function (obj,kvs){\r\nreturn com.fulcrologic.fulcro.raw.components.isoget_in.cljs$core$IFn$_invoke$arity$3(obj,kvs,null);\r\n}));\r\n\r\n(com.fulcrologic.fulcro.raw.components.isoget_in.cljs$core$IFn$_invoke$arity$3 = (function (obj,kvs,default$){\r\nvar ks = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2((function (k){\r\nvar G__55677 = k;\r\nif((G__55677 == null)){\r\nreturn null;\r\n} else {\r\nreturn cljs.core.name(G__55677);\r\n}\r\n}),kvs);\r\nvar or__4253__auto__ = cljs.core.apply.cljs$core$IFn$_invoke$arity$3(com.fulcrologic.fulcro.raw.components.goog$module$goog$object.getValueByKeys,obj,ks);\r\nif(cljs.core.truth_(or__4253__auto__)){\r\nreturn or__4253__auto__;\r\n} else {\r\nreturn default$;\r\n}\r\n}));\r\n\r\n(com.fulcrologic.fulcro.raw.components.isoget_in.cljs$lang$maxFixedArity = 3);\r\n\r\n/**\r\n * Like get, but for js objects, and in CLJC. In clj, it is just `get`. In cljs it is\r\n *   `gobj/get`.\r\n */\r\ncom.fulcrologic.fulcro.raw.components.isoget = (function com$fulcrologic$fulcro$raw$components$isoget(var_args){\r\nvar G__55679 = arguments.length;\r\nswitch (G__55679) {\r\ncase 2:\r\nreturn com.fulcrologic.fulcro.raw.components.isoget.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\r\n\r\nbreak;\r\ncase 3:\r\nreturn com.fulcrologic.fulcro.raw.components.isoget.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\r\n\r\nbreak;\r\ndefault:\r\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\r\n\r\n}\r\n});\r\n\r\n(com.fulcrologic.fulcro.raw.components.isoget.cljs$core$IFn$_invoke$arity$2 = (function (obj,k){\r\nreturn com.fulcrologic.fulcro.raw.components.isoget.cljs$core$IFn$_invoke$arity$3(obj,k,null);\r\n}));\r\n\r\n(com.fulcrologic.fulcro.raw.components.isoget.cljs$core$IFn$_invoke$arity$3 = (function (obj,k,default$){\r\nvar or__4253__auto__ = com.fulcrologic.fulcro.raw.components.goog$module$goog$object.get(obj,(function (){var G__55681 = k;\r\nif((G__55681 == null)){\r\nreturn null;\r\n} else {\r\nreturn cljs.core.name(G__55681);\r\n}\r\n})());\r\nif(cljs.core.truth_(or__4253__auto__)){\r\nreturn or__4253__auto__;\r\n} else {\r\nreturn default$;\r\n}\r\n}));\r\n\r\n(com.fulcrologic.fulcro.raw.components.isoget.cljs$lang$maxFixedArity = 3);\r\n\r\n/**\r\n * Add a component to Fulcro's component registry.  This is used by defsc to ensure that all Fulcro classes\r\n *   that have been compiled (transitively required) will be accessible for lookup by fully-qualified symbol/keyword.\r\n *   Not meant for public use, unless you're creating your own component macro that doesn't directly leverage defsc.\r\n */\r\ncom.fulcrologic.fulcro.raw.components.register_component_BANG_ = (function com$fulcrologic$fulcro$raw$components$register_component_BANG_(k,component_class){\r\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(com.fulcrologic.fulcro.raw.components.component_registry,cljs.core.assoc,k,component_class);\r\n\r\nreturn component_class;\r\n});\r\n/**\r\n * Returns whichever of the given Fulcro props were most recently generated according to `denormalization-time`. This\r\n *   is part of props 'tunnelling', an optimization to get updated props to instances without going through the root.\r\n */\r\ncom.fulcrologic.fulcro.raw.components.newer_props = (function com$fulcrologic$fulcro$raw$components$newer_props(props_a,props_b){\r\nif((props_a == null)){\r\nreturn props_b;\r\n} else {\r\nif((props_b == null)){\r\nreturn props_a;\r\n} else {\r\nif(((function (){var or__4253__auto__ = com.fulcrologic.fulcro.algorithms.denormalize.denormalization_time(props_a);\r\nif(cljs.core.truth_(or__4253__auto__)){\r\nreturn or__4253__auto__;\r\n} else {\r\nreturn (2);\r\n}\r\n})() > (function (){var or__4253__auto__ = com.fulcrologic.fulcro.algorithms.denormalize.denormalization_time(props_b);\r\nif(cljs.core.truth_(or__4253__auto__)){\r\nreturn or__4253__auto__;\r\n} else {\r\nreturn (1);\r\n}\r\n})())){\r\nreturn props_a;\r\n} else {\r\nreturn props_b;\r\n\r\n}\r\n}\r\n}\r\n});\r\n/**\r\n * Returns true if the argument is a component. A component is defined as a *mounted component*.\r\n * This function returns false for component classes, and also returns false for the output of a Fulcro component factory.\r\n */\r\ncom.fulcrologic.fulcro.raw.components.component_instance_QMARK_ = (function com$fulcrologic$fulcro$raw$components$component_instance_QMARK_(x){\r\nif((!((x == null)))){\r\nreturn com.fulcrologic.fulcro.raw.components.goog$module$goog$object.get(x,\"fulcro$isComponent\") === true;\r\n} else {\r\nreturn false;\r\n}\r\n});\r\n/**\r\n * Attempt to coerce `x` to an app.  Legal inputs are a fulcro application, a mounted component,\r\n *   or an atom holding any of the above.\r\n */\r\ncom.fulcrologic.fulcro.raw.components.any__GT_app = (function com$fulcrologic$fulcro$raw$components$any__GT_app(x){\r\nvar fulcro_app_QMARK_ = (function com$fulcrologic$fulcro$raw$components$any__GT_app_$_fulcro_app_QMARK_(x__$1){\r\nreturn ((cljs.core.map_QMARK_(x__$1)) && (cljs.core.contains_QMARK_(x__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"state-atom\",\"com.fulcrologic.fulcro.application/state-atom\",648128366))));\r\n});\r\nif(com.fulcrologic.fulcro.raw.components.component_instance_QMARK_(x)){\r\nreturn com.fulcrologic.fulcro.raw.components.isoget_in.cljs$core$IFn$_invoke$arity$2(x,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"props\",\"props\",453281727),new cljs.core.Keyword(null,\"fulcro$app\",\"fulcro$app\",-1270465306)], null));\r\n} else {\r\nif(cljs.core.truth_(fulcro_app_QMARK_(x))){\r\nreturn x;\r\n} else {\r\nif((((!((x == null))))?(((((x.cljs$lang$protocol_mask$partition0$ & (32768))) || ((cljs.core.PROTOCOL_SENTINEL === x.cljs$core$IDeref$))))?true:(((!x.cljs$lang$protocol_mask$partition0$))?cljs.core.native_satisfies_QMARK_(cljs.core.IDeref,x):false)):cljs.core.native_satisfies_QMARK_(cljs.core.IDeref,x))){\r\nvar G__55692 = cljs.core.deref(x);\r\nreturn (com.fulcrologic.fulcro.raw.components.any__GT_app.cljs$core$IFn$_invoke$arity$1 ? com.fulcrologic.fulcro.raw.components.any__GT_app.cljs$core$IFn$_invoke$arity$1(G__55692) : com.fulcrologic.fulcro.raw.components.any__GT_app.call(null,G__55692));\r\n} else {\r\nreturn null;\r\n}\r\n}\r\n}\r\n});\r\n/**\r\n * Return the global shared properties of the root. See :shared and\r\n * :shared-fn app options. NOTE: Shared props only update on root render and by explicit calls to\r\n * `app/update-shared!`.\r\n * \r\n * This version does not rely on the dynamic var *shared*, which is only available from the react-based components ns.\r\n */\r\ncom.fulcrologic.fulcro.raw.components.shared = (function com$fulcrologic$fulcro$raw$components$shared(var_args){\r\nvar G__55694 = arguments.length;\r\nswitch (G__55694) {\r\ncase 1:\r\nreturn com.fulcrologic.fulcro.raw.components.shared.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\r\n\r\nbreak;\r\ncase 2:\r\nreturn com.fulcrologic.fulcro.raw.components.shared.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\r\n\r\nbreak;\r\ndefault:\r\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\r\n\r\n}\r\n});\r\n\r\n(com.fulcrologic.fulcro.raw.components.shared.cljs$core$IFn$_invoke$arity$1 = (function (comp_or_app){\r\nreturn com.fulcrologic.fulcro.raw.components.shared.cljs$core$IFn$_invoke$arity$2(comp_or_app,cljs.core.PersistentVector.EMPTY);\r\n}));\r\n\r\n(com.fulcrologic.fulcro.raw.components.shared.cljs$core$IFn$_invoke$arity$2 = (function (comp_or_app,k_or_ks){\r\nvar shared = (function (){var G__55695 = com.fulcrologic.fulcro.raw.components.any__GT_app(comp_or_app);\r\nvar G__55695__$1 = (((G__55695 == null))?null:new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"runtime-atom\",\"com.fulcrologic.fulcro.application/runtime-atom\",-1167397772).cljs$core$IFn$_invoke$arity$1(G__55695));\r\nvar G__55695__$2 = (((G__55695__$1 == null))?null:cljs.core.deref(G__55695__$1));\r\nif((G__55695__$2 == null)){\r\nreturn null;\r\n} else {\r\nreturn new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"shared-props\",\"com.fulcrologic.fulcro.application/shared-props\",-554105157).cljs$core$IFn$_invoke$arity$1(G__55695__$2);\r\n}\r\n})();\r\nvar ks = (function (){var G__55696 = k_or_ks;\r\nif((!(cljs.core.sequential_QMARK_(k_or_ks)))){\r\nreturn (new cljs.core.PersistentVector(null,1,(5),cljs.core.PersistentVector.EMPTY_NODE,[G__55696],null));\r\n} else {\r\nreturn G__55696;\r\n}\r\n})();\r\nvar G__55699 = shared;\r\nif((!(cljs.core.empty_QMARK_(ks)))){\r\nreturn cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(G__55699,ks);\r\n} else {\r\nreturn G__55699;\r\n}\r\n}));\r\n\r\n(com.fulcrologic.fulcro.raw.components.shared.cljs$lang$maxFixedArity = 2);\r\n\r\n/**\r\n * Returns true if the argument is a component instance.\r\n * \r\n * DEPRECATED for terminology clarity. Use `component-instance?` instead.\r\n */\r\ncom.fulcrologic.fulcro.raw.components.component_QMARK_ = com.fulcrologic.fulcro.raw.components.component_instance_QMARK_;\r\n/**\r\n * Returns true if the argument is a component class.\r\n */\r\ncom.fulcrologic.fulcro.raw.components.component_class_QMARK_ = (function com$fulcrologic$fulcro$raw$components$component_class_QMARK_(x){\r\nreturn cljs.core.boolean$(com.fulcrologic.fulcro.raw.components.goog$module$goog$object.containsKey(x,\"fulcro$class\"));\r\n});\r\n/**\r\n * Returns a string version of the given react component's name. Works on component instances and classes.\r\n */\r\ncom.fulcrologic.fulcro.raw.components.component_name = (function com$fulcrologic$fulcro$raw$components$component_name(class$){\r\nreturn com.fulcrologic.fulcro.raw.components.isoget.cljs$core$IFn$_invoke$arity$2(class$,new cljs.core.Keyword(null,\"displayName\",\"displayName\",-809144601));\r\n});\r\n/**\r\n * Returns the registry key for the given component class.\r\n */\r\ncom.fulcrologic.fulcro.raw.components.class__GT_registry_key = (function com$fulcrologic$fulcro$raw$components$class__GT_registry_key(class$){\r\nreturn com.fulcrologic.fulcro.raw.components.isoget.cljs$core$IFn$_invoke$arity$2(class$,new cljs.core.Keyword(null,\"fulcro$registryKey\",\"fulcro$registryKey\",-155509270));\r\n});\r\n/**\r\n * Look up the given component in Fulcro's global component registry. Will only be able to find components that have\r\n *   been (transitively) required by your application.\r\n * \r\n *   `classname` can be a fully-qualified keyword or symbol.\r\n */\r\ncom.fulcrologic.fulcro.raw.components.registry_key__GT_class = (function com$fulcrologic$fulcro$raw$components$registry_key__GT_class(classname){\r\nif((classname instanceof cljs.core.Keyword)){\r\nreturn cljs.core.get.cljs$core$IFn$_invoke$arity$2(cljs.core.deref(com.fulcrologic.fulcro.raw.components.component_registry),classname);\r\n} else {\r\nif((classname instanceof cljs.core.Symbol)){\r\nvar k = cljs.core.keyword.cljs$core$IFn$_invoke$arity$2(cljs.core.namespace(classname),cljs.core.name(classname));\r\nreturn cljs.core.get.cljs$core$IFn$_invoke$arity$2(cljs.core.deref(com.fulcrologic.fulcro.raw.components.component_registry),k);\r\n} else {\r\nif(((typeof classname === 'string') && (clojure.string.includes_QMARK_(classname,\"/\")))){\r\nvar vec__55729 = clojure.string.split.cljs$core$IFn$_invoke$arity$2(classname,/\\//);\r\nvar nspc = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__55729,(0),null);\r\nvar nm = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__55729,(1),null);\r\nvar k = cljs.core.keyword.cljs$core$IFn$_invoke$arity$2(nspc,nm);\r\nreturn cljs.core.get.cljs$core$IFn$_invoke$arity$2(cljs.core.deref(com.fulcrologic.fulcro.raw.components.component_registry),k);\r\n} else {\r\nreturn null;\r\n\r\n}\r\n}\r\n}\r\n});\r\n/**\r\n * Add computed properties to props. This will *replace* any pre-existing computed properties. Computed props are\r\n *   necessary when a parent component wishes to pass callbacks or other data to children that *have a query*. This\r\n *   is not necessary for \"stateless\" components, though it will work properly for both.\r\n * \r\n *   Computed props are \"remembered\" so that a targeted update (which can only happen on a component with a query\r\n *   and ident) can use new props from the database without \"losing\" the computed props that were originally passed\r\n *   from the parent. If you pass things like callbacks through normal props, then targeted updates will seem to \"lose\r\n *   track of\" them.\r\n *   \r\n */\r\ncom.fulcrologic.fulcro.raw.components.computed = (function com$fulcrologic$fulcro$raw$components$computed(props,computed_map){\r\nif((props == null)){\r\nreturn null;\r\n} else {\r\nif(cljs.core.vector_QMARK_(props)){\r\nvar G__55733 = props;\r\nif((!(cljs.core.empty_QMARK_(computed_map)))){\r\nreturn cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$4(G__55733,cljs.core.assoc,new cljs.core.Keyword(\"fulcro.client.primitives\",\"computed\",\"fulcro.client.primitives/computed\",201987962),computed_map);\r\n} else {\r\nreturn G__55733;\r\n}\r\n} else {\r\nvar G__55734 = props;\r\nif((!(cljs.core.empty_QMARK_(computed_map)))){\r\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__55734,new cljs.core.Keyword(\"fulcro.client.primitives\",\"computed\",\"fulcro.client.primitives/computed\",201987962),computed_map);\r\n} else {\r\nreturn G__55734;\r\n}\r\n}\r\n}\r\n});\r\n/**\r\n * Return the computed properties on a component or its props. Note that it requires that the normal properties are not nil.\r\n */\r\ncom.fulcrologic.fulcro.raw.components.get_computed = (function com$fulcrologic$fulcro$raw$components$get_computed(var_args){\r\nvar G__55739 = arguments.length;\r\nswitch (G__55739) {\r\ncase 1:\r\nreturn com.fulcrologic.fulcro.raw.components.get_computed.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\r\n\r\nbreak;\r\ncase 2:\r\nreturn com.fulcrologic.fulcro.raw.components.get_computed.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\r\n\r\nbreak;\r\ndefault:\r\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\r\n\r\n}\r\n});\r\n\r\n(com.fulcrologic.fulcro.raw.components.get_computed.cljs$core$IFn$_invoke$arity$1 = (function (x){\r\nreturn com.fulcrologic.fulcro.raw.components.get_computed.cljs$core$IFn$_invoke$arity$2(x,cljs.core.PersistentVector.EMPTY);\r\n}));\r\n\r\n(com.fulcrologic.fulcro.raw.components.get_computed.cljs$core$IFn$_invoke$arity$2 = (function (x,k_or_ks){\r\nif((x == null)){\r\nreturn null;\r\n} else {\r\nvar props = (function (){var G__55744 = x;\r\nif(com.fulcrologic.fulcro.raw.components.component_instance_QMARK_(x)){\r\nreturn (com.fulcrologic.fulcro.raw.components.props.cljs$core$IFn$_invoke$arity$1 ? com.fulcrologic.fulcro.raw.components.props.cljs$core$IFn$_invoke$arity$1(G__55744) : com.fulcrologic.fulcro.raw.components.props.call(null,G__55744));\r\n} else {\r\nreturn G__55744;\r\n}\r\n})();\r\nvar ks = cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"fulcro.client.primitives\",\"computed\",\"fulcro.client.primitives/computed\",201987962)], null),(function (){var G__55745 = k_or_ks;\r\nif((!(cljs.core.sequential_QMARK_(k_or_ks)))){\r\nreturn (new cljs.core.PersistentVector(null,1,(5),cljs.core.PersistentVector.EMPTY_NODE,[G__55745],null));\r\n} else {\r\nreturn G__55745;\r\n}\r\n})());\r\nif(cljs.core.vector_QMARK_(props)){\r\nreturn cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(cljs.core.meta(props),ks);\r\n} else {\r\nreturn cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(props,ks);\r\n}\r\n}\r\n}));\r\n\r\n(com.fulcrologic.fulcro.raw.components.get_computed.cljs$lang$maxFixedArity = 2);\r\n\r\n/**\r\n * Return a component's props.\r\n */\r\ncom.fulcrologic.fulcro.raw.components.props = (function com$fulcrologic$fulcro$raw$components$props(component){\r\nvar props_from_parent = com.fulcrologic.fulcro.raw.components.isoget_in.cljs$core$IFn$_invoke$arity$2(component,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"props\",\"props\",453281727),new cljs.core.Keyword(null,\"fulcro$value\",\"fulcro$value\",818270554)], null));\r\nvar computed_from_parent = com.fulcrologic.fulcro.raw.components.get_computed.cljs$core$IFn$_invoke$arity$1(props_from_parent);\r\nvar props_from_updates = com.fulcrologic.fulcro.raw.components.computed(com.fulcrologic.fulcro.raw.components.isoget_in.cljs$core$IFn$_invoke$arity$2(component,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"state\",\"state\",-1988618099),new cljs.core.Keyword(null,\"fulcro$value\",\"fulcro$value\",818270554)], null)),computed_from_parent);\r\nreturn com.fulcrologic.fulcro.raw.components.newer_props(props_from_parent,props_from_updates);\r\n});\r\n/**\r\n * Get the sequence of react children of the given component.\r\n */\r\ncom.fulcrologic.fulcro.raw.components.children = (function com$fulcrologic$fulcro$raw$components$children(component){\r\nvar cs = com.fulcrologic.fulcro.raw.components.goog$module$goog$object.getValueByKeys(component,\"props\",\"children\");\r\nif(((cljs.core.coll_QMARK_(cs)) || (cljs.core.array_QMARK_(cs)))){\r\nreturn cs;\r\n} else {\r\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cs], null);\r\n}\r\n});\r\n/**\r\n * Returns the component type, regardless of whether the component has been\r\n * mounted\r\n */\r\ncom.fulcrologic.fulcro.raw.components.component_type = (function com$fulcrologic$fulcro$raw$components$component_type(x){\r\nvar or__4253__auto__ = com.fulcrologic.fulcro.raw.components.goog$module$goog$object.get(x,\"type\");\r\nif(cljs.core.truth_(or__4253__auto__)){\r\nreturn or__4253__auto__;\r\n} else {\r\nreturn cljs.core.type(x);\r\n}\r\n});\r\n/**\r\n * Returns the react type (component class) of the given React element (instance). Is identity if used on a class.\r\n */\r\ncom.fulcrologic.fulcro.raw.components.get_class = (function com$fulcrologic$fulcro$raw$components$get_class(instance){\r\nreturn com.fulcrologic.fulcro.raw.components.component_type(instance);\r\n});\r\n/**\r\n * Returns the map of options that was specified (via `defsc`) for the component class.\r\n */\r\ncom.fulcrologic.fulcro.raw.components.component_options = (function com$fulcrologic$fulcro$raw$components$component_options(var_args){\r\nvar args__4870__auto__ = [];\r\nvar len__4864__auto___56004 = arguments.length;\r\nvar i__4865__auto___56005 = (0);\r\nwhile(true){\r\nif((i__4865__auto___56005 < len__4864__auto___56004)){\r\nargs__4870__auto__.push((arguments[i__4865__auto___56005]));\r\n\r\nvar G__56006 = (i__4865__auto___56005 + (1));\r\ni__4865__auto___56005 = G__56006;\r\ncontinue;\r\n} else {\r\n}\r\nbreak;\r\n}\r\n\r\nvar argseq__4871__auto__ = ((((1) < args__4870__auto__.length))?(new cljs.core.IndexedSeq(args__4870__auto__.slice((1)),(0),null)):null);\r\nreturn com.fulcrologic.fulcro.raw.components.component_options.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),argseq__4871__auto__);\r\n});\r\n\r\n(com.fulcrologic.fulcro.raw.components.component_options.cljs$core$IFn$_invoke$arity$variadic = (function (instance_or_class,ks){\r\nvar c = com.fulcrologic.fulcro.raw.components.component_type(instance_or_class);\r\nvar options = (function (){var or__4253__auto__ = com.fulcrologic.fulcro.raw.components.isoget.cljs$core$IFn$_invoke$arity$2(instance_or_class,new cljs.core.Keyword(null,\"fulcro$options\",\"fulcro$options\",-1332196811));\r\nif(cljs.core.truth_(or__4253__auto__)){\r\nreturn or__4253__auto__;\r\n} else {\r\nreturn com.fulcrologic.fulcro.raw.components.isoget.cljs$core$IFn$_invoke$arity$2(c,new cljs.core.Keyword(null,\"fulcro$options\",\"fulcro$options\",-1332196811));\r\n}\r\n})();\r\nif(cljs.core.seq(options)){\r\nreturn cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(options,cljs.core.vec(ks));\r\n} else {\r\nreturn options;\r\n}\r\n}));\r\n\r\n(com.fulcrologic.fulcro.raw.components.component_options.cljs$lang$maxFixedArity = (1));\r\n\r\n/** @this {Function} */\r\n(com.fulcrologic.fulcro.raw.components.component_options.cljs$lang$applyTo = (function (seq55754){\r\nvar G__55755 = cljs.core.first(seq55754);\r\nvar seq55754__$1 = cljs.core.next(seq55754);\r\nvar self__4851__auto__ = this;\r\nreturn self__4851__auto__.cljs$core$IFn$_invoke$arity$variadic(G__55755,seq55754__$1);\r\n}));\r\n\r\ncom.fulcrologic.fulcro.raw.components.has_feature_QMARK_ = (function com$fulcrologic$fulcro$raw$components$has_feature_QMARK_(component,option_key){\r\nreturn cljs.core.contains_QMARK_(com.fulcrologic.fulcro.raw.components.component_options(component),option_key);\r\n});\r\ncom.fulcrologic.fulcro.raw.components.has_initial_app_state_QMARK_ = (function com$fulcrologic$fulcro$raw$components$has_initial_app_state_QMARK_(component){\r\nreturn com.fulcrologic.fulcro.raw.components.has_feature_QMARK_(component,new cljs.core.Keyword(null,\"initial-state\",\"initial-state\",-2021616806));\r\n});\r\ncom.fulcrologic.fulcro.raw.components.has_ident_QMARK_ = (function com$fulcrologic$fulcro$raw$components$has_ident_QMARK_(component){\r\nreturn com.fulcrologic.fulcro.raw.components.has_feature_QMARK_(component,new cljs.core.Keyword(null,\"ident\",\"ident\",-742346));\r\n});\r\ncom.fulcrologic.fulcro.raw.components.has_query_QMARK_ = (function com$fulcrologic$fulcro$raw$components$has_query_QMARK_(component){\r\nreturn com.fulcrologic.fulcro.raw.components.has_feature_QMARK_(component,new cljs.core.Keyword(null,\"query\",\"query\",-1288509510));\r\n});\r\ncom.fulcrologic.fulcro.raw.components.has_pre_merge_QMARK_ = (function com$fulcrologic$fulcro$raw$components$has_pre_merge_QMARK_(component){\r\nreturn com.fulcrologic.fulcro.raw.components.has_feature_QMARK_(component,new cljs.core.Keyword(null,\"pre-merge\",\"pre-merge\",-567117148));\r\n});\r\ncom.fulcrologic.fulcro.raw.components.ident = (function com$fulcrologic$fulcro$raw$components$ident(this$,props){\r\nif(com.fulcrologic.fulcro.raw.components.has_feature_QMARK_(this$,new cljs.core.Keyword(null,\"ident\",\"ident\",-742346))){\r\nvar fexpr__55761 = com.fulcrologic.fulcro.raw.components.component_options.cljs$core$IFn$_invoke$arity$variadic(this$,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"ident\",\"ident\",-742346)], 0));\r\nreturn (fexpr__55761.cljs$core$IFn$_invoke$arity$2 ? fexpr__55761.cljs$core$IFn$_invoke$arity$2(this$,props) : fexpr__55761.call(null,this$,props));\r\n} else {\r\nreturn null;\r\n}\r\n});\r\ncom.fulcrologic.fulcro.raw.components.query = (function com$fulcrologic$fulcro$raw$components$query(this$){\r\nif(com.fulcrologic.fulcro.raw.components.has_feature_QMARK_(this$,new cljs.core.Keyword(null,\"query\",\"query\",-1288509510))){\r\nvar fexpr__55762 = com.fulcrologic.fulcro.raw.components.component_options.cljs$core$IFn$_invoke$arity$variadic(this$,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"query\",\"query\",-1288509510)], 0));\r\nreturn (fexpr__55762.cljs$core$IFn$_invoke$arity$1 ? fexpr__55762.cljs$core$IFn$_invoke$arity$1(this$) : fexpr__55762.call(null,this$));\r\n} else {\r\nreturn null;\r\n}\r\n});\r\ncom.fulcrologic.fulcro.raw.components.initial_state = (function com$fulcrologic$fulcro$raw$components$initial_state(clz,params){\r\nif(com.fulcrologic.fulcro.raw.components.has_feature_QMARK_(clz,new cljs.core.Keyword(null,\"initial-state\",\"initial-state\",-2021616806))){\r\nvar fexpr__55764 = com.fulcrologic.fulcro.raw.components.component_options.cljs$core$IFn$_invoke$arity$variadic(clz,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"initial-state\",\"initial-state\",-2021616806)], 0));\r\nreturn (fexpr__55764.cljs$core$IFn$_invoke$arity$1 ? fexpr__55764.cljs$core$IFn$_invoke$arity$1(params) : fexpr__55764.call(null,params));\r\n} else {\r\nreturn null;\r\n}\r\n});\r\ncom.fulcrologic.fulcro.raw.components.pre_merge = (function com$fulcrologic$fulcro$raw$components$pre_merge(this$,data){\r\nif(com.fulcrologic.fulcro.raw.components.has_feature_QMARK_(this$,new cljs.core.Keyword(null,\"pre-merge\",\"pre-merge\",-567117148))){\r\nvar fexpr__55765 = com.fulcrologic.fulcro.raw.components.component_options.cljs$core$IFn$_invoke$arity$variadic(this$,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"pre-merge\",\"pre-merge\",-567117148)], 0));\r\nreturn (fexpr__55765.cljs$core$IFn$_invoke$arity$1 ? fexpr__55765.cljs$core$IFn$_invoke$arity$1(data) : fexpr__55765.call(null,data));\r\n} else {\r\nreturn null;\r\n}\r\n});\r\n/**\r\n * Make a given `render-fn` (a plain fn) act like a a Fulcro component with the given component options map. Registers the\r\n *   new component in the component-registry. Component options MUST contain :componentName as be a fully-qualified\r\n *   keyword to name the component in the registry.\r\n * \r\n *   component-options *must* include a unique `:componentName` (keyword) that will be used for registering the given\r\n *   function as the faux class in the component registry.\r\n * \r\n *   IMPORTANT: In CLJS this function adds extra things to the mutable js fn. In CLJ, components are just maps, and this\r\n *   side-effect cannot modify it. As such it returns the configured component so you can use it in CLJ.\r\n */\r\ncom.fulcrologic.fulcro.raw.components.configure_anonymous_component_BANG_ = (function com$fulcrologic$fulcro$raw$components$configure_anonymous_component_BANG_(render_fn,component_options){\r\nvar k = new cljs.core.Keyword(null,\"componentName\",\"componentName\",-2103437555).cljs$core$IFn$_invoke$arity$1(component_options);\r\nvar faux_classname = (cljs.core.truth_(k)?clojure.string.join.cljs$core$IFn$_invoke$arity$2(\"/\",new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.namespace(k),cljs.core.name(k)], null)):\"anonymous\");\r\nvar result = com.fulcrologic.fulcro.raw.components.goog$module$goog$object.extend(render_fn,({\"fulcro$options\": component_options, \"displayName\": faux_classname, \"fulcro$class\": render_fn, \"type\": render_fn, \"cljs$lang$type\": true, \"cljs$lang$ctorStr\": faux_classname, \"cljs$lang$ctorPrWriter\": (function (_,writer,___$1){\r\nreturn cljs.core._write(writer,faux_classname);\r\n}), \"fulcro$registryKey\": new cljs.core.Keyword(null,\"componentName\",\"componentName\",-2103437555).cljs$core$IFn$_invoke$arity$1(component_options)}));\r\nif(cljs.core.truth_(k)){\r\ncom.fulcrologic.fulcro.raw.components.register_component_BANG_(k,render_fn);\r\n} else {\r\n}\r\n\r\nreturn render_fn;\r\n});\r\n/**\r\n * Get the declared :initial-state value for a component.\r\n */\r\ncom.fulcrologic.fulcro.raw.components.get_initial_state = (function com$fulcrologic$fulcro$raw$components$get_initial_state(var_args){\r\nvar G__55774 = arguments.length;\r\nswitch (G__55774) {\r\ncase 1:\r\nreturn com.fulcrologic.fulcro.raw.components.get_initial_state.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\r\n\r\nbreak;\r\ncase 2:\r\nreturn com.fulcrologic.fulcro.raw.components.get_initial_state.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\r\n\r\nbreak;\r\ndefault:\r\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\r\n\r\n}\r\n});\r\n\r\n(com.fulcrologic.fulcro.raw.components.get_initial_state.cljs$core$IFn$_invoke$arity$1 = (function (class$){\r\nvar G__55775 = com.fulcrologic.fulcro.raw.components.initial_state(class$,cljs.core.PersistentArrayMap.EMPTY);\r\nif((G__55775 == null)){\r\nreturn null;\r\n} else {\r\nreturn cljs.core.with_meta(G__55775,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"computed\",\"computed\",-1482016762),true], null));\r\n}\r\n}));\r\n\r\n(com.fulcrologic.fulcro.raw.components.get_initial_state.cljs$core$IFn$_invoke$arity$2 = (function (class$,params){\r\nvar G__55776 = com.fulcrologic.fulcro.raw.components.initial_state(class$,params);\r\nif((G__55776 == null)){\r\nreturn null;\r\n} else {\r\nreturn cljs.core.with_meta(G__55776,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"computed\",\"computed\",-1482016762),true], null));\r\n}\r\n}));\r\n\r\n(com.fulcrologic.fulcro.raw.components.get_initial_state.cljs$lang$maxFixedArity = 2);\r\n\r\n/**\r\n * Get the ident for a mounted component OR using a component class.\r\n * \r\n *   That arity-2 will return the ident using the supplied props map.\r\n * \r\n *   The single-arity version should only be used with a mounted component (e.g. `this` from `render`), and will derive the\r\n *   props that were sent to it most recently.\r\n */\r\ncom.fulcrologic.fulcro.raw.components.get_ident = (function com$fulcrologic$fulcro$raw$components$get_ident(var_args){\r\nvar G__55778 = arguments.length;\r\nswitch (G__55778) {\r\ncase 1:\r\nreturn com.fulcrologic.fulcro.raw.components.get_ident.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\r\n\r\nbreak;\r\ncase 2:\r\nreturn com.fulcrologic.fulcro.raw.components.get_ident.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\r\n\r\nbreak;\r\ndefault:\r\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\r\n\r\n}\r\n});\r\n\r\n(com.fulcrologic.fulcro.raw.components.get_ident.cljs$core$IFn$_invoke$arity$1 = (function (x){\r\nif(com.fulcrologic.fulcro.raw.components.component_instance_QMARK_(x)){\r\n} else {\r\nthrow (new Error(\"Assert failed: (component-instance? x)\"));\r\n}\r\n\r\nvar temp__5751__auto__ = com.fulcrologic.fulcro.raw.components.props(x);\r\nif(cljs.core.truth_(temp__5751__auto__)){\r\nvar m = temp__5751__auto__;\r\nreturn com.fulcrologic.fulcro.raw.components.ident(x,m);\r\n} else {\r\nif(cljs.core.truth_(goog.DEBUG)){\r\nreturn taoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$11(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"warn\",\"warn\",-436710552),\"com.fulcrologic.fulcro.raw.components\",null,270,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay((function (){\r\nreturn new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"get-ident was invoked on \",com.fulcrologic.fulcro.raw.components.component_name(x),\" with nil props (this could mean it wasn't yet mounted): \",x,\"See https://book.fulcrologic.com/#warn-get-ident-with-nil-props\"], null);\r\n}),null)),null,-1969123315,null);\r\n} else {\r\nreturn null;\r\n}\r\n}\r\n}));\r\n\r\n(com.fulcrologic.fulcro.raw.components.get_ident.cljs$core$IFn$_invoke$arity$2 = (function (class$,props){\r\nif(cljs.core.truth_((function (){var and__4251__auto__ = goog.DEBUG;\r\nif(cljs.core.truth_(and__4251__auto__)){\r\nreturn (!(com.fulcrologic.fulcro.raw.components.has_ident_QMARK_(class$)));\r\n} else {\r\nreturn and__4251__auto__;\r\n}\r\n})())){\r\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$11(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"warn\",\"warn\",-436710552),\"com.fulcrologic.fulcro.raw.components\",null,273,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay((function (){\r\nreturn new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"get-ident called with something that does not implement ident: \",class$,\"See https://book.fulcrologic.com/#warn-get-ident-invalid-class\"], null);\r\n}),null)),null,-878196314,null);\r\n} else {\r\n}\r\n\r\nvar temp__5751__auto__ = com.fulcrologic.fulcro.raw.components.ident(class$,props);\r\nif(cljs.core.truth_(temp__5751__auto__)){\r\nvar id = temp__5751__auto__;\r\nif(cljs.core.truth_((function (){var and__4251__auto__ = goog.DEBUG;\r\nif(cljs.core.truth_(and__4251__auto__)){\r\nreturn (!(edn_query_language.core.ident_QMARK_(id)));\r\n} else {\r\nreturn and__4251__auto__;\r\n}\r\n})())){\r\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$11(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"warn\",\"warn\",-436710552),\"com.fulcrologic.fulcro.raw.components\",null,277,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay((function (){\r\nreturn new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [com.fulcrologic.fulcro.raw.components.component_name(class$),\"get-ident returned invalid ident:\",id,\"See https://book.fulcrologic.com/#warn-get-ident-invalid-ident\"], null);\r\n}),null)),null,-194571422,null);\r\n} else {\r\n}\r\n\r\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(\"com.fulcrologic.fulcro.algorithms.merge\",\"not-found\",\"com.fulcrologic.fulcro.algorithms.merge/not-found\",190673437),cljs.core.second(id))){\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.first(id),null], null);\r\n} else {\r\nreturn id;\r\n}\r\n} else {\r\nreturn null;\r\n}\r\n}));\r\n\r\n(com.fulcrologic.fulcro.raw.components.get_ident.cljs$lang$maxFixedArity = 2);\r\n\r\n/**\r\n * Returns true if the given argument is a component factory.\r\n */\r\ncom.fulcrologic.fulcro.raw.components.is_factory_QMARK_ = (function com$fulcrologic$fulcro$raw$components$is_factory_QMARK_(class_or_factory){\r\nreturn ((cljs.core.fn_QMARK_(class_or_factory)) && (cljs.core.contains_QMARK_(cljs.core.meta(class_or_factory),new cljs.core.Keyword(null,\"qualifier\",\"qualifier\",125841738))));\r\n});\r\n/**\r\n * Returns a string ID for the query of the given class with qualifier.\r\n */\r\ncom.fulcrologic.fulcro.raw.components.query_id = (function com$fulcrologic$fulcro$raw$components$query_id(class$,qualifier){\r\nif((class$ == null)){\r\nif(cljs.core.truth_(goog.DEBUG)){\r\nreturn taoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$11(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.raw.components\",null,292,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay((function (){\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"Query ID received no class (if you see this warning, it probably means metadata was lost on your query) See https://book.fulcrologic.com/#err-comp-query-id-no-class\",cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2(\"\",cljs.core.PersistentArrayMap.EMPTY)], null);\r\n}),null)),null,-532336929,null);\r\n} else {\r\nreturn null;\r\n}\r\n} else {\r\nvar temp__5753__auto__ = com.fulcrologic.fulcro.raw.components.component_name(class$);\r\nif(cljs.core.truth_(temp__5753__auto__)){\r\nvar classname = temp__5753__auto__;\r\nreturn [cljs.core.str.cljs$core$IFn$_invoke$arity$1(classname),(cljs.core.truth_(qualifier)?[\"$\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(qualifier)].join(''):null)].join('');\r\n} else {\r\nreturn null;\r\n}\r\n}\r\n});\r\n/**\r\n * Takes a state map that may contain normalized queries and a query ID. Returns the stored query or nil.\r\n */\r\ncom.fulcrologic.fulcro.raw.components.denormalize_query = (function com$fulcrologic$fulcro$raw$components$denormalize_query(state_map,ID){\r\nvar get_stored_query = (function (id){\r\nvar map__55791 = cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(state_map,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.components\",\"queries\",\"com.fulcrologic.fulcro.components/queries\",-1435852452),id], null));\r\nvar map__55791__$1 = cljs.core.__destructure_map(map__55791);\r\nvar query = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__55791__$1,new cljs.core.Keyword(null,\"query\",\"query\",-1288509510));\r\nvar component_key = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__55791__$1,new cljs.core.Keyword(null,\"component-key\",\"component-key\",1189239034));\r\nvar component = com.fulcrologic.fulcro.raw.components.registry_key__GT_class(component_key);\r\nif(cljs.core.truth_(component)){\r\n} else {\r\ncljs.core.get_in.cljs$core$IFn$_invoke$arity$2(state_map,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.components\",\"queries\",\"com.fulcrologic.fulcro.components/queries\",-1435852452),id], null));\r\n}\r\n\r\nvar G__55792 = query;\r\nif((G__55792 == null)){\r\nreturn null;\r\n} else {\r\nreturn cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$6(G__55792,cljs.core.assoc,new cljs.core.Keyword(null,\"component\",\"component\",1555936782),component,new cljs.core.Keyword(null,\"queryid\",\"queryid\",-271432056),id);\r\n}\r\n});\r\nvar temp__5753__auto__ = get_stored_query(ID);\r\nif(cljs.core.truth_(temp__5753__auto__)){\r\nvar normalized_query = temp__5753__auto__;\r\nreturn clojure.walk.prewalk((function (ele){\r\nvar temp__5751__auto__ = (function (){var and__4251__auto__ = typeof ele === 'string';\r\nif(and__4251__auto__){\r\nreturn get_stored_query(ele);\r\n} else {\r\nreturn and__4251__auto__;\r\n}\r\n})();\r\nif(cljs.core.truth_(temp__5751__auto__)){\r\nvar q = temp__5751__auto__;\r\nreturn q;\r\n} else {\r\nreturn ele;\r\n}\r\n}),normalized_query);\r\n} else {\r\nreturn null;\r\n}\r\n});\r\n/**\r\n * Get the query id that is cached in the component's props.\r\n */\r\ncom.fulcrologic.fulcro.raw.components.get_query_id = (function com$fulcrologic$fulcro$raw$components$get_query_id(component){\r\nreturn com.fulcrologic.fulcro.raw.components.isoget_in.cljs$core$IFn$_invoke$arity$2(component,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"props\",\"props\",453281727),\"fulcro$queryid\"], null));\r\n});\r\ncom.fulcrologic.fulcro.raw.components.get_query_by_id = (function com$fulcrologic$fulcro$raw$components$get_query_by_id(state_map,class$,queryid){\r\nvar query = (function (){var or__4253__auto__ = com.fulcrologic.fulcro.raw.components.denormalize_query(state_map,queryid);\r\nif(cljs.core.truth_(or__4253__auto__)){\r\nreturn or__4253__auto__;\r\n} else {\r\nreturn com.fulcrologic.fulcro.raw.components.query(class$);\r\n}\r\n})();\r\nreturn cljs.core.with_meta(query,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"component\",\"component\",1555936782),class$,new cljs.core.Keyword(null,\"queryid\",\"queryid\",-271432056),queryid], null));\r\n});\r\n/**\r\n * Get the query for the given class or factory. If called without a state map, then you'll get the declared static\r\n *   query of the class. If a state map is supplied, then the dynamically set queries in that state will result in\r\n *   the current dynamically-set query according to that state.\r\n */\r\ncom.fulcrologic.fulcro.raw.components.get_query = (function com$fulcrologic$fulcro$raw$components$get_query(var_args){\r\nvar G__55799 = arguments.length;\r\nswitch (G__55799) {\r\ncase 1:\r\nreturn com.fulcrologic.fulcro.raw.components.get_query.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\r\n\r\nbreak;\r\ncase 2:\r\nreturn com.fulcrologic.fulcro.raw.components.get_query.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\r\n\r\nbreak;\r\ndefault:\r\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\r\n\r\n}\r\n});\r\n\r\n(com.fulcrologic.fulcro.raw.components.get_query.cljs$core$IFn$_invoke$arity$1 = (function (class_or_factory){\r\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(\"anonymous\",com.fulcrologic.fulcro.raw.components.component_name(class_or_factory))){\r\nreturn com.fulcrologic.fulcro.raw.components.query(class_or_factory);\r\n} else {\r\nreturn com.fulcrologic.fulcro.raw.components.get_query.cljs$core$IFn$_invoke$arity$2(class_or_factory,com.fulcrologic.fulcro.raw.components._STAR_query_state_STAR_);\r\n}\r\n}));\r\n\r\n(com.fulcrologic.fulcro.raw.components.get_query.cljs$core$IFn$_invoke$arity$2 = (function (class_or_factory,state_map){\r\nif((class_or_factory == null)){\r\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2(\"nil passed to get-query\",cljs.core.PersistentArrayMap.EMPTY);\r\n} else {\r\n}\r\n\r\nvar _STAR_query_state_STAR__orig_val__55805 = com.fulcrologic.fulcro.raw.components._STAR_query_state_STAR_;\r\nvar _STAR_query_state_STAR__temp_val__55806 = state_map;\r\n(com.fulcrologic.fulcro.raw.components._STAR_query_state_STAR_ = _STAR_query_state_STAR__temp_val__55806);\r\n\r\ntry{var class$ = ((com.fulcrologic.fulcro.raw.components.is_factory_QMARK_(class_or_factory))?new cljs.core.Keyword(null,\"class\",\"class\",-2030961996).cljs$core$IFn$_invoke$arity$1(cljs.core.meta(class_or_factory)):((com.fulcrologic.fulcro.raw.components.component_instance_QMARK_(class_or_factory))?com.fulcrologic.fulcro.raw.components.component_type(class_or_factory):class_or_factory\r\n));\r\nvar class$__$1 = (cljs.core.truth_(goog.DEBUG)?(function (){var or__4253__auto__ = com.fulcrologic.fulcro.raw.components.registry_key__GT_class(com.fulcrologic.fulcro.raw.components.class__GT_registry_key(class$));\r\nif(cljs.core.truth_(or__4253__auto__)){\r\nreturn or__4253__auto__;\r\n} else {\r\nreturn class$;\r\n}\r\n})():class$);\r\nvar qualifier = ((com.fulcrologic.fulcro.raw.components.is_factory_QMARK_(class_or_factory))?new cljs.core.Keyword(null,\"qualifier\",\"qualifier\",125841738).cljs$core$IFn$_invoke$arity$1(cljs.core.meta(class_or_factory)):null);\r\nvar queryid = ((com.fulcrologic.fulcro.raw.components.component_instance_QMARK_(class_or_factory))?com.fulcrologic.fulcro.raw.components.get_query_id(class_or_factory):com.fulcrologic.fulcro.raw.components.query_id(class$__$1,qualifier));\r\nif(cljs.core.truth_((function (){var and__4251__auto__ = class$__$1;\r\nif(cljs.core.truth_(and__4251__auto__)){\r\nreturn com.fulcrologic.fulcro.raw.components.has_query_QMARK_(class$__$1);\r\n} else {\r\nreturn and__4251__auto__;\r\n}\r\n})())){\r\nreturn com.fulcrologic.fulcro.raw.components.get_query_by_id(state_map,class$__$1,queryid);\r\n} else {\r\nreturn null;\r\n}\r\n}finally {(com.fulcrologic.fulcro.raw.components._STAR_query_state_STAR_ = _STAR_query_state_STAR__orig_val__55805);\r\n}}));\r\n\r\n(com.fulcrologic.fulcro.raw.components.get_query.cljs$lang$maxFixedArity = 2);\r\n\r\n/**\r\n * Dynamic var that affects the activation of transactions run via `transact!`. Defaults to false. When set to true\r\n * this option prevents a transaction from running until after the next render is complete. This typically should not be set\r\n * to true in scenarios where you are unsure if a render will occur, since that could make the transaction appear to\r\n * \"hang\".\r\n */\r\ncom.fulcrologic.fulcro.raw.components._STAR_after_render_STAR_ = false;\r\n/**\r\n * Submit a transaction for processing.\r\n * \r\n *   The underlying transaction system is pluggable, but the *default* supported options are:\r\n * \r\n *   - `:optimistic?` - boolean. Should the transaction be processed optimistically?\r\n *   - `:ref` - ident. The ident of the component used to submit this transaction. This is set automatically if you use a component to call this function.\r\n *   - `:component` - React element. Set automatically if you call this function using a component.\r\n *   - `:refresh` - Vector containing idents (of components) and keywords (of props). Things that have changed and should be re-rendered\r\n *  on screen. Only necessary when the underlying rendering algorithm won't auto-detect, such as when UI is derived from the\r\n *  state of other components or outside of the directly queried props. Interpretation depends on the renderer selected:\r\n *  The ident-optimized render treats these as \"extras\".\r\n *   - `:only-refresh` - Vector of idents/keywords.  If the underlying rendering configured algorithm supports it: The\r\n *  components using these are the *only* things that will be refreshed in the UI.\r\n *  This can be used to avoid the overhead of looking for stale data when you know exactly what\r\n *  you want to refresh on screen as an extra optimization. Idents are *not* checked against queries.\r\n *   - `:abort-id` - An ID (you make up) that makes it possible (if the plugins you're using support it) to cancel\r\n *  the network portion of the transaction (assuming it has not already completed).\r\n *   - `:compressible?` - boolean. Check compressible-transact! docs.\r\n *   - `:synchronous?` - boolean. When turned on the transaction will run immediately on the calling thread. If run against\r\n *   a component then the props will be immediately tunneled back to the calling component, allowing for React (raw) input\r\n *   event handlers to behave as described in standard React Forms docs (uses setState behind the scenes). Any remote operations\r\n *   will still be queued as normal. Calling `transact!!` is a shorthand for this option. WARNING: ONLY the given component will\r\n *   be refreshed in the UI. If you have dependent data elsewhere in the UI you must either use `transact!` or schedule\r\n *   your own global render using `app/schedule-render!`.\r\n *   - `:after-render?` - Wait until the next render completes before allowing this transaction to run. This can be used\r\n *   when calling `transact!` from *within* another mutation to ensure that the effects of the current mutation finish\r\n *   before this transaction takes control of the CPU. This option defaults to `false`, but `defmutation` causes it to\r\n *   be set to true for any transactions run within mutation action sections. You can affect the default for this value\r\n *   in a dynamic scope by binding `*after-render*` to true\r\n *   - `:parallel?` - Boolean. If true, the mutation(s) in the transaction will NOT go into a network queue, nor\r\n *  will it block later mutations or queries.\r\n * \r\n *   You may add any additional keys to the option map (namespaced is ideal), and any value is legal in the options\r\n *   map, including functions. The options will appear in the `env` of all mutations run in the transaction as\r\n *   `:com.fulcrologic.fulcro.algorithms.tx-processing/options`. This is the preferred way of passing things like\r\n *   lambdas (if you wanted something like a callback) to mutations. Note that mutation symbols are perfectly legal\r\n *   as mutation *arguments*, so chaining mutations can already be done via the normal transaction mechanism, and\r\n *   callbacks, while sometimes necessary/useful, should be limited to usages where there is no other clean way\r\n *   to accomplish the goal.\r\n * \r\n * \r\n *   NOTE: This function calls the application's `tx!` function (which is configurable). Fulcro 2 'follow-on reads' are\r\n *   supported by the default version and are added to the `:refresh` entries. Your choice of rendering algorithm will\r\n *   influence their necessity.\r\n * \r\n *   Returns the transaction ID of the submitted transaction.\r\n *   \r\n */\r\ncom.fulcrologic.fulcro.raw.components.transact_BANG_ = (function com$fulcrologic$fulcro$raw$components$transact_BANG_(var_args){\r\nvar G__55812 = arguments.length;\r\nswitch (G__55812) {\r\ncase 3:\r\nreturn com.fulcrologic.fulcro.raw.components.transact_BANG_.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\r\n\r\nbreak;\r\ncase 2:\r\nreturn com.fulcrologic.fulcro.raw.components.transact_BANG_.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\r\n\r\nbreak;\r\ndefault:\r\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\r\n\r\n}\r\n});\r\n\r\n(com.fulcrologic.fulcro.raw.components.transact_BANG_.cljs$core$IFn$_invoke$arity$3 = (function (app_or_component,tx,options){\r\nvar temp__5753__auto__ = com.fulcrologic.fulcro.raw.components.any__GT_app(app_or_component);\r\nif(cljs.core.truth_(temp__5753__auto__)){\r\nvar app__$1 = temp__5753__auto__;\r\nvar tx_BANG_ = com.fulcrologic.fulcro.algorithms.lookup.app_algorithm(app__$1,new cljs.core.Keyword(null,\"tx!\",\"tx!\",-1308106263));\r\nvar options__$1 = (function (){var G__55814 = options;\r\nvar G__55814__$1 = (((((!(cljs.core.contains_QMARK_(options,new cljs.core.Keyword(null,\"after-render?\",\"after-render?\",595994030))))) && (com.fulcrologic.fulcro.raw.components._STAR_after_render_STAR_ === true)))?cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__55814,new cljs.core.Keyword(null,\"after-render?\",\"after-render?\",595994030),true):G__55814);\r\nvar G__55814__$2 = (((((new cljs.core.Keyword(null,\"ref\",\"ref\",1289896967).cljs$core$IFn$_invoke$arity$1(options) == null)) && (com.fulcrologic.fulcro.raw.components.has_ident_QMARK_(app_or_component))))?cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__55814__$1,new cljs.core.Keyword(null,\"ref\",\"ref\",1289896967),com.fulcrologic.fulcro.raw.components.get_ident.cljs$core$IFn$_invoke$arity$1(app_or_component)):G__55814__$1);\r\nif((((new cljs.core.Keyword(null,\"component\",\"component\",1555936782).cljs$core$IFn$_invoke$arity$1(options) == null)) && (com.fulcrologic.fulcro.raw.components.component_instance_QMARK_(app_or_component)))){\r\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__55814__$2,new cljs.core.Keyword(null,\"component\",\"component\",1555936782),app_or_component);\r\n} else {\r\nreturn G__55814__$2;\r\n}\r\n})();\r\nreturn (tx_BANG_.cljs$core$IFn$_invoke$arity$3 ? tx_BANG_.cljs$core$IFn$_invoke$arity$3(app__$1,tx,options__$1) : tx_BANG_.call(null,app__$1,tx,options__$1));\r\n} else {\r\nreturn null;\r\n}\r\n}));\r\n\r\n(com.fulcrologic.fulcro.raw.components.transact_BANG_.cljs$core$IFn$_invoke$arity$2 = (function (app_or_comp,tx){\r\nreturn com.fulcrologic.fulcro.raw.components.transact_BANG_.cljs$core$IFn$_invoke$arity$3(app_or_comp,tx,cljs.core.PersistentArrayMap.EMPTY);\r\n}));\r\n\r\n(com.fulcrologic.fulcro.raw.components.transact_BANG_.cljs$lang$maxFixedArity = 3);\r\n\r\n/**\r\n * Shorthand for exactly `(transact! component tx (merge options {:synchronous? true}))`.\r\n * \r\n *   Runs a synchronous transaction, which is an optimized mode where the optimistic behaviors of the mutations in the\r\n *   transaction run on the calling thread, and new props are immediately made available to the calling component via\r\n *   \"props tunneling\" (a behind-the-scenes mechanism using js/setState).\r\n * \r\n *   This mode is meant to be used in form input event handlers, since React is designed to only work properly with\r\n *   raw DOM inputs via component-local state. This prevents things like the cursor jumping to the end of inputs\r\n *   unexpectedly.\r\n * \r\n *   WARNING: Using an `app` instead of a component in synchronous transactions makes no sense. You must pass a component\r\n *   that has an ident.\r\n * \r\n *   If you're using this, you can also set the compiler option:\r\n * \r\n *   ```\r\n *   :compiler-options {:external-config {:fulcro     {:wrap-inputs? false}}}\r\n *   ```\r\n * \r\n *   to turn off Fulcro DOM's generation of wrapped inputs (which try to solve this problem in a less-effective way).\r\n * \r\n *   WARNING: Synchronous rendering does *not* refresh the full UI, only the component.\r\n *   \r\n */\r\ncom.fulcrologic.fulcro.raw.components.transact_BANG__BANG_ = (function com$fulcrologic$fulcro$raw$components$transact_BANG__BANG_(var_args){\r\nvar G__55816 = arguments.length;\r\nswitch (G__55816) {\r\ncase 2:\r\nreturn com.fulcrologic.fulcro.raw.components.transact_BANG__BANG_.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\r\n\r\nbreak;\r\ncase 3:\r\nreturn com.fulcrologic.fulcro.raw.components.transact_BANG__BANG_.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\r\n\r\nbreak;\r\ndefault:\r\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\r\n\r\n}\r\n});\r\n\r\n(com.fulcrologic.fulcro.raw.components.transact_BANG__BANG_.cljs$core$IFn$_invoke$arity$2 = (function (component,tx){\r\nreturn com.fulcrologic.fulcro.raw.components.transact_BANG__BANG_.cljs$core$IFn$_invoke$arity$3(component,tx,cljs.core.PersistentArrayMap.EMPTY);\r\n}));\r\n\r\n(com.fulcrologic.fulcro.raw.components.transact_BANG__BANG_.cljs$core$IFn$_invoke$arity$3 = (function (component,tx,options){\r\nreturn com.fulcrologic.fulcro.raw.components.transact_BANG_.cljs$core$IFn$_invoke$arity$3(component,tx,cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([options,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"synchronous?\",\"synchronous?\",1705588391),true], null)], 0)));\r\n}));\r\n\r\n(com.fulcrologic.fulcro.raw.components.transact_BANG__BANG_.cljs$lang$maxFixedArity = 3);\r\n\r\n/**\r\n * Part of internal implementation of dynamic queries.\r\n */\r\ncom.fulcrologic.fulcro.raw.components.link_element = (function com$fulcrologic$fulcro$raw$components$link_element(element){\r\nreturn clojure.walk.prewalk((function com$fulcrologic$fulcro$raw$components$link_element_$_link_element_helper(ele){\r\nvar map__55818 = cljs.core.meta(ele);\r\nvar map__55818__$1 = cljs.core.__destructure_map(map__55818);\r\nvar queryid = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__55818__$1,new cljs.core.Keyword(null,\"queryid\",\"queryid\",-271432056));\r\nif(cljs.core.truth_(queryid)){\r\nreturn queryid;\r\n} else {\r\nreturn ele;\r\n}\r\n}),element);\r\n});\r\n/**\r\n * Part of internal implementation of dynamic queries.\r\n * \r\n *   Determines if there are query elements in the `query` that need to be normalized. If so, it does so.\r\n * \r\n *   Returns the new state map containing potentially-updated normalized queries.\r\n */\r\ncom.fulcrologic.fulcro.raw.components.normalize_query_elements = (function com$fulcrologic$fulcro$raw$components$normalize_query_elements(state_map,query){\r\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function com$fulcrologic$fulcro$raw$components$normalize_query_elements_$_normalize_query_elements_reducer(state,ele){\r\ntry{var parameterized_QMARK_ = cljs.core.seq_QMARK_(ele);\r\nvar raw_element = ((parameterized_QMARK_)?cljs.core.first(ele):ele);\r\nif(com.fulcrologic.fulcro.algorithms.do_not_use.union_QMARK_(raw_element)){\r\nvar union_alternates = cljs.core.first(cljs.core.vals(raw_element));\r\nvar union_meta = cljs.core.meta(union_alternates);\r\nvar normalized_union_alternates = cljs.core.with_meta(cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentArrayMap.EMPTY,cljs.core.map.cljs$core$IFn$_invoke$arity$2(com.fulcrologic.fulcro.raw.components.link_element,union_alternates)),union_meta);\r\nvar union_query_id = new cljs.core.Keyword(null,\"queryid\",\"queryid\",-271432056).cljs$core$IFn$_invoke$arity$1(cljs.core.meta(union_alternates));\r\nvar union_component_key = com.fulcrologic.fulcro.raw.components.class__GT_registry_key(new cljs.core.Keyword(null,\"component\",\"component\",1555936782).cljs$core$IFn$_invoke$arity$1(cljs.core.meta(union_alternates)));\r\nif(cljs.core.truth_(union_query_id)){\r\n} else {\r\nthrow (new Error([\"Assert failed: \",\"Union query has an ID. Did you use extended get-query?\",\"\\n\",\"union-query-id\"].join('')));\r\n}\r\n\r\nreturn com.fulcrologic.fulcro.algorithms.do_not_use.deep_merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.components\",\"queries\",\"com.fulcrologic.fulcro.components/queries\",-1435852452),cljs.core.PersistentArrayMap.createAsIfByAssoc([union_query_id,new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"query\",\"query\",-1288509510),normalized_union_alternates,new cljs.core.Keyword(null,\"component-key\",\"component-key\",1189239034),union_component_key,new cljs.core.Keyword(null,\"id\",\"id\",-1388402092),union_query_id], null)])], null),cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function com$fulcrologic$fulcro$raw$components$normalize_query_elements_$_normalize_query_elements_reducer_$_normalize_union_reducer(s,p__55821){\r\nvar vec__55822 = p__55821;\r\nvar _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__55822,(0),null);\r\nvar subquery = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__55822,(1),null);\r\nreturn (com.fulcrologic.fulcro.raw.components.normalize_query.cljs$core$IFn$_invoke$arity$2 ? com.fulcrologic.fulcro.raw.components.normalize_query.cljs$core$IFn$_invoke$arity$2(s,subquery) : com.fulcrologic.fulcro.raw.components.normalize_query.call(null,s,subquery));\r\n}),state,union_alternates)], 0));\r\n} else {\r\nif(((com.fulcrologic.fulcro.algorithms.do_not_use.join_QMARK_(raw_element)) && (com.fulcrologic.fulcro.algorithms.do_not_use.recursion_QMARK_(com.fulcrologic.fulcro.algorithms.do_not_use.join_value(raw_element))))){\r\nreturn state;\r\n} else {\r\nif(com.fulcrologic.fulcro.algorithms.do_not_use.join_QMARK_(raw_element)){\r\nvar G__55825 = state;\r\nvar G__55826 = com.fulcrologic.fulcro.algorithms.do_not_use.join_value(raw_element);\r\nreturn (com.fulcrologic.fulcro.raw.components.normalize_query.cljs$core$IFn$_invoke$arity$2 ? com.fulcrologic.fulcro.raw.components.normalize_query.cljs$core$IFn$_invoke$arity$2(G__55825,G__55826) : com.fulcrologic.fulcro.raw.components.normalize_query.call(null,G__55825,G__55826));\r\n} else {\r\nreturn state;\r\n\r\n}\r\n}\r\n}\r\n}catch (e55819){var e = e55819;\r\nif(cljs.core.truth_(goog.DEBUG)){\r\nreturn taoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$11(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.raw.components\",null,486,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay((function (){\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [e,\"Query normalization failed. Perhaps you tried to set a query with a syntax error? See https://book.fulcrologic.com/#err-comp-q-norm-failed\"], null);\r\n}),null)),null,1510580928,null);\r\n} else {\r\nreturn null;\r\n}\r\n}}),state_map,query);\r\n});\r\n/**\r\n * Part of dyn query implementation. Find all of the elements (only at the top level) of the given query and replace them\r\n *   with their query ID.\r\n */\r\ncom.fulcrologic.fulcro.raw.components.link_query = (function com$fulcrologic$fulcro$raw$components$link_query(query){\r\nvar metadata = cljs.core.meta(query);\r\nif(cljs.core.map_QMARK_(query)){\r\nreturn cljs.core.with_meta(taoensso.encore.map_vals((function (ele){\r\nvar map__55830 = cljs.core.meta(ele);\r\nvar map__55830__$1 = cljs.core.__destructure_map(map__55830);\r\nvar queryid = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__55830__$1,new cljs.core.Keyword(null,\"queryid\",\"queryid\",-271432056));\r\nreturn queryid;\r\n}),query),metadata);\r\n} else {\r\nreturn cljs.core.with_meta(cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(com.fulcrologic.fulcro.raw.components.link_element,query),metadata);\r\n}\r\n});\r\n/**\r\n * Given a state map and a query, returns a state map with the query normalized into the database. Query fragments\r\n *   that already appear in the state will not be added.  Part of dynamic query implementation.\r\n */\r\ncom.fulcrologic.fulcro.raw.components.normalize_query = (function com$fulcrologic$fulcro$raw$components$normalize_query(state_map,query){\r\nvar queryid = (function (){var G__55834 = query;\r\nvar G__55834__$1 = (((G__55834 == null))?null:cljs.core.meta(G__55834));\r\nif((G__55834__$1 == null)){\r\nreturn null;\r\n} else {\r\nreturn new cljs.core.Keyword(null,\"queryid\",\"queryid\",-271432056).cljs$core$IFn$_invoke$arity$1(G__55834__$1);\r\n}\r\n})();\r\nvar component_key = com.fulcrologic.fulcro.raw.components.class__GT_registry_key((function (){var G__55837 = query;\r\nvar G__55837__$1 = (((G__55837 == null))?null:cljs.core.meta(G__55837));\r\nif((G__55837__$1 == null)){\r\nreturn null;\r\n} else {\r\nreturn new cljs.core.Keyword(null,\"component\",\"component\",1555936782).cljs$core$IFn$_invoke$arity$1(G__55837__$1);\r\n}\r\n})());\r\nvar query_SINGLEQUOTE_ = cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$4(query,cljs.core.dissoc,new cljs.core.Keyword(null,\"queryid\",\"queryid\",-271432056),new cljs.core.Keyword(null,\"component\",\"component\",1555936782));\r\nvar new_state = com.fulcrologic.fulcro.raw.components.normalize_query_elements(state_map,query_SINGLEQUOTE_);\r\nvar new_state__$1 = (((new cljs.core.Keyword(\"com.fulcrologic.fulcro.components\",\"queries\",\"com.fulcrologic.fulcro.components/queries\",-1435852452).cljs$core$IFn$_invoke$arity$1(new_state) == null))?cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(new_state,new cljs.core.Keyword(\"com.fulcrologic.fulcro.components\",\"queries\",\"com.fulcrologic.fulcro.components/queries\",-1435852452),cljs.core.PersistentArrayMap.EMPTY):new_state);\r\nvar top_query = com.fulcrologic.fulcro.raw.components.link_query(query_SINGLEQUOTE_);\r\nif(cljs.core.truth_((function (){var and__4251__auto__ = queryid;\r\nif(cljs.core.truth_(and__4251__auto__)){\r\nreturn component_key;\r\n} else {\r\nreturn and__4251__auto__;\r\n}\r\n})())){\r\nreturn com.fulcrologic.fulcro.algorithms.do_not_use.deep_merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.components\",\"queries\",\"com.fulcrologic.fulcro.components/queries\",-1435852452),cljs.core.PersistentArrayMap.createAsIfByAssoc([queryid,new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"query\",\"query\",-1288509510),top_query,new cljs.core.Keyword(null,\"id\",\"id\",-1388402092),queryid,new cljs.core.Keyword(null,\"component-key\",\"component-key\",1189239034),component_key], null)])], null),new_state__$1], 0));\r\n} else {\r\nreturn new_state__$1;\r\n}\r\n});\r\n/**\r\n * Put a query in app state.\r\n * \r\n *   NOTE: Indexes must be rebuilt after setting a query, so this function should primarily be used to build\r\n *   up an initial app state.\r\n */\r\ncom.fulcrologic.fulcro.raw.components.set_query_STAR_ = (function com$fulcrologic$fulcro$raw$components$set_query_STAR_(state_map,class_or_factory,p__55840){\r\nvar map__55841 = p__55840;\r\nvar map__55841__$1 = cljs.core.__destructure_map(map__55841);\r\nvar args = map__55841__$1;\r\nvar query = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__55841__$1,new cljs.core.Keyword(null,\"query\",\"query\",-1288509510));\r\nvar queryid = (((class_or_factory == null))?null:(cljs.core.truth_((function (){var G__55842 = class_or_factory;\r\nvar G__55842__$1 = (((G__55842 == null))?null:cljs.core.meta(G__55842));\r\nif((G__55842__$1 == null)){\r\nreturn null;\r\n} else {\r\nreturn cljs.core.contains_QMARK_(G__55842__$1,new cljs.core.Keyword(null,\"queryid\",\"queryid\",-271432056));\r\n}\r\n})())?(function (){var G__55843 = class_or_factory;\r\nvar G__55843__$1 = (((G__55843 == null))?null:cljs.core.meta(G__55843));\r\nif((G__55843__$1 == null)){\r\nreturn null;\r\n} else {\r\nreturn new cljs.core.Keyword(null,\"queryid\",\"queryid\",-271432056).cljs$core$IFn$_invoke$arity$1(G__55843__$1);\r\n}\r\n})():com.fulcrologic.fulcro.raw.components.query_id(class_or_factory,null)\r\n));\r\nvar component = (function (){var or__4253__auto__ = new cljs.core.Keyword(null,\"class\",\"class\",-2030961996).cljs$core$IFn$_invoke$arity$1(cljs.core.meta(class_or_factory));\r\nif(cljs.core.truth_(or__4253__auto__)){\r\nreturn or__4253__auto__;\r\n} else {\r\nreturn class_or_factory;\r\n}\r\n})();\r\nvar setq_STAR_ = (function (state){\r\nreturn com.fulcrologic.fulcro.raw.components.normalize_query(cljs.core.update.cljs$core$IFn$_invoke$arity$4(state,new cljs.core.Keyword(\"com.fulcrologic.fulcro.components\",\"queries\",\"com.fulcrologic.fulcro.components/queries\",-1435852452),cljs.core.dissoc,queryid),cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$6(query,cljs.core.assoc,new cljs.core.Keyword(null,\"queryid\",\"queryid\",-271432056),queryid,new cljs.core.Keyword(null,\"component\",\"component\",1555936782),component));\r\n});\r\nif(typeof queryid === 'string'){\r\nvar G__55844 = state_map;\r\nif(cljs.core.contains_QMARK_(args,new cljs.core.Keyword(null,\"query\",\"query\",-1288509510))){\r\nreturn setq_STAR_(G__55844);\r\n} else {\r\nreturn G__55844;\r\n}\r\n} else {\r\nif(cljs.core.truth_(goog.DEBUG)){\r\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$11(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.raw.components\",null,542,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay((function (){\r\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"Set query failed. There was no query ID. Use a class or factory for the second argument. See https://book.fulcrologic.com/#err-comp-set-q-failed\"], null);\r\n}),null)),null,1096759968,null);\r\n} else {\r\n}\r\n\r\nreturn state_map;\r\n}\r\n});\r\n/**\r\n * Public API for setting a dynamic query on a component. This function alters the query and rebuilds internal indexes.\r\n * \r\n *   * `x` : is anything that any->app accepts.\r\n *   * `class-or-factory` : A component class or factory for that class (if using query qualifiers)\r\n *   * `opts` : A map with `query` and optionally `params` (substitutions on queries)\r\n *   \r\n */\r\ncom.fulcrologic.fulcro.raw.components.set_query_BANG_ = (function com$fulcrologic$fulcro$raw$components$set_query_BANG_(x,class_or_factory,p__55858){\r\nvar map__55863 = p__55858;\r\nvar map__55863__$1 = cljs.core.__destructure_map(map__55863);\r\nvar opts = map__55863__$1;\r\nvar query = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__55863__$1,new cljs.core.Keyword(null,\"query\",\"query\",-1288509510));\r\nvar params = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__55863__$1,new cljs.core.Keyword(null,\"params\",\"params\",710516235));\r\nvar app__$1 = com.fulcrologic.fulcro.raw.components.any__GT_app(x);\r\nvar state_atom = new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"state-atom\",\"com.fulcrologic.fulcro.application/state-atom\",648128366).cljs$core$IFn$_invoke$arity$1(app__$1);\r\nvar queryid = ((typeof class_or_factory === 'string')?class_or_factory:(cljs.core.truth_((function (){var G__55867 = class_or_factory;\r\nvar G__55867__$1 = (((G__55867 == null))?null:cljs.core.meta(G__55867));\r\nif((G__55867__$1 == null)){\r\nreturn null;\r\n} else {\r\nreturn cljs.core.contains_QMARK_(G__55867__$1,new cljs.core.Keyword(null,\"queryid\",\"queryid\",-271432056));\r\n}\r\n})())?(function (){var G__55876 = class_or_factory;\r\nvar G__55876__$1 = (((G__55876 == null))?null:cljs.core.meta(G__55876));\r\nif((G__55876__$1 == null)){\r\nreturn null;\r\n} else {\r\nreturn new cljs.core.Keyword(null,\"queryid\",\"queryid\",-271432056).cljs$core$IFn$_invoke$arity$1(G__55876__$1);\r\n}\r\n})():com.fulcrologic.fulcro.raw.components.query_id(class_or_factory,null)\r\n));\r\nif(cljs.core.truth_((function (){var and__4251__auto__ = typeof queryid === 'string';\r\nif(and__4251__auto__){\r\nvar or__4253__auto__ = query;\r\nif(cljs.core.truth_(or__4253__auto__)){\r\nreturn or__4253__auto__;\r\n} else {\r\nreturn params;\r\n}\r\n} else {\r\nreturn and__4251__auto__;\r\n}\r\n})())){\r\nvar index_root_BANG_ = com.fulcrologic.fulcro.algorithms.lookup.app_algorithm(app__$1,new cljs.core.Keyword(null,\"index-root!\",\"index-root!\",-981026266));\r\nvar schedule_render_BANG_ = com.fulcrologic.fulcro.algorithms.lookup.app_algorithm(app__$1,new cljs.core.Keyword(null,\"schedule-render!\",\"schedule-render!\",2095050350));\r\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(state_atom,com.fulcrologic.fulcro.raw.components.set_query_STAR_,class_or_factory,new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"queryid\",\"queryid\",-271432056),queryid,new cljs.core.Keyword(null,\"query\",\"query\",-1288509510),query,new cljs.core.Keyword(null,\"params\",\"params\",710516235),params], null));\r\n\r\nif(cljs.core.truth_(index_root_BANG_)){\r\n(index_root_BANG_.cljs$core$IFn$_invoke$arity$1 ? index_root_BANG_.cljs$core$IFn$_invoke$arity$1(app__$1) : index_root_BANG_.call(null,app__$1));\r\n} else {\r\n}\r\n\r\ncom.fulcrologic.fulcro.algorithms.do_not_use.dev_check_query(com.fulcrologic.fulcro.raw.components.get_query.cljs$core$IFn$_invoke$arity$2(class_or_factory,cljs.core.deref(state_atom)),com.fulcrologic.fulcro.raw.components.component_name);\r\n\r\nif(cljs.core.truth_(schedule_render_BANG_)){\r\nvar G__55887 = app__$1;\r\nvar G__55888 = new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"force-root?\",\"force-root?\",-1598741683),true], null);\r\nreturn (schedule_render_BANG_.cljs$core$IFn$_invoke$arity$2 ? schedule_render_BANG_.cljs$core$IFn$_invoke$arity$2(G__55887,G__55888) : schedule_render_BANG_.call(null,G__55887,G__55888));\r\n} else {\r\nreturn null;\r\n}\r\n} else {\r\nif(cljs.core.truth_(goog.DEBUG)){\r\nreturn taoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$11(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.raw.components\",null,567,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay((function (){\r\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"Unable to set query. Invalid arguments. See https://book.fulcrologic.com/#err-comp-unable-set-q\"], null);\r\n}),null)),null,766114749,null);\r\n} else {\r\nreturn null;\r\n}\r\n}\r\n});\r\nvar __set_query_BANG_ = (function com$fulcrologic$fulcro$raw$components$__set_query_BANG_(app__$1,class_or_factory,p__55894){\r\nvar map__55895 = p__55894;\r\nvar map__55895__$1 = cljs.core.__destructure_map(map__55895);\r\nvar params = map__55895__$1;\r\nvar query = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__55895__$1,new cljs.core.Keyword(null,\"query\",\"query\",-1288509510));\r\nvar state_atom = new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"state-atom\",\"com.fulcrologic.fulcro.application/state-atom\",648128366).cljs$core$IFn$_invoke$arity$1(app__$1);\r\nvar queryid = ((typeof class_or_factory === 'string')?class_or_factory:(cljs.core.truth_((function (){var G__55896 = class_or_factory;\r\nvar G__55896__$1 = (((G__55896 == null))?null:cljs.core.meta(G__55896));\r\nif((G__55896__$1 == null)){\r\nreturn null;\r\n} else {\r\nreturn cljs.core.contains_QMARK_(G__55896__$1,new cljs.core.Keyword(null,\"queryid\",\"queryid\",-271432056));\r\n}\r\n})())?(function (){var G__55897 = class_or_factory;\r\nvar G__55897__$1 = (((G__55897 == null))?null:cljs.core.meta(G__55897));\r\nif((G__55897__$1 == null)){\r\nreturn null;\r\n} else {\r\nreturn new cljs.core.Keyword(null,\"queryid\",\"queryid\",-271432056).cljs$core$IFn$_invoke$arity$1(G__55897__$1);\r\n}\r\n})():com.fulcrologic.fulcro.raw.components.query_id(class_or_factory,null)\r\n));\r\nif(cljs.core.truth_((function (){var and__4251__auto__ = typeof queryid === 'string';\r\nif(and__4251__auto__){\r\nvar or__4253__auto__ = query;\r\nif(cljs.core.truth_(or__4253__auto__)){\r\nreturn or__4253__auto__;\r\n} else {\r\nreturn params;\r\n}\r\n} else {\r\nreturn and__4251__auto__;\r\n}\r\n})())){\r\nreturn cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(state_atom,com.fulcrologic.fulcro.raw.components.set_query_STAR_,class_or_factory,new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"queryid\",\"queryid\",-271432056),queryid,new cljs.core.Keyword(null,\"query\",\"query\",-1288509510),query,new cljs.core.Keyword(null,\"params\",\"params\",710516235),params], null));\r\n} else {\r\nif(cljs.core.truth_(goog.DEBUG)){\r\nreturn taoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$11(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"com.fulcrologic.fulcro.raw.components\",null,578,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay((function (){\r\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"Unable to set query. Invalid arguments. See https://book.fulcrologic.com/#err-comp-unable-set-q\"], null);\r\n}),null)),null,1888033024,null);\r\n} else {\r\nreturn null;\r\n}\r\n}\r\n});\r\n/**\r\n * Refresh the current dynamic queries in app state to reflect any updates to the static queries of the components.\r\n * \r\n *   This can be used at development time to update queries that have changed but that hot code reload does not\r\n *   reflect (because there is a current saved query in state). This is *not* always what you want, since a component\r\n *   may have a custom query whose prop-level elements are set to a particular thing on purpose.\r\n * \r\n *   An component that has `:preserve-dynamic-query? true` in its component options will be ignored by\r\n *   this function.\r\n */\r\ncom.fulcrologic.fulcro.raw.components.refresh_dynamic_queries_BANG_ = (function com$fulcrologic$fulcro$raw$components$refresh_dynamic_queries_BANG_(var_args){\r\nvar G__55901 = arguments.length;\r\nswitch (G__55901) {\r\ncase 3:\r\nreturn com.fulcrologic.fulcro.raw.components.refresh_dynamic_queries_BANG_.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\r\n\r\nbreak;\r\ncase 1:\r\nreturn com.fulcrologic.fulcro.raw.components.refresh_dynamic_queries_BANG_.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\r\n\r\nbreak;\r\ndefault:\r\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\r\n\r\n}\r\n});\r\n\r\n(com.fulcrologic.fulcro.raw.components.refresh_dynamic_queries_BANG_.cljs$core$IFn$_invoke$arity$3 = (function (app_ish,cls,force_QMARK_){\r\nvar app__$1 = com.fulcrologic.fulcro.raw.components.any__GT_app(app_ish);\r\nvar preserve_QMARK_ = (function (){var and__4251__auto__ = cljs.core.not(force_QMARK_);\r\nif(and__4251__auto__){\r\nreturn com.fulcrologic.fulcro.raw.components.component_options.cljs$core$IFn$_invoke$arity$variadic(cls,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"preserve-dynamic-query?\",\"preserve-dynamic-query?\",893339297)], 0));\r\n} else {\r\nreturn and__4251__auto__;\r\n}\r\n})();\r\nif(cljs.core.truth_(preserve_QMARK_)){\r\nreturn null;\r\n} else {\r\nreturn com.fulcrologic.fulcro.raw.components.set_query_BANG_(app__$1,cls,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"query\",\"query\",-1288509510),com.fulcrologic.fulcro.raw.components.get_query.cljs$core$IFn$_invoke$arity$2(cls,cljs.core.PersistentArrayMap.EMPTY)], null));\r\n}\r\n}));\r\n\r\n(com.fulcrologic.fulcro.raw.components.refresh_dynamic_queries_BANG_.cljs$core$IFn$_invoke$arity$1 = (function (app_ish){\r\nvar map__55902 = com.fulcrologic.fulcro.raw.components.any__GT_app(app_ish);\r\nvar map__55902__$1 = cljs.core.__destructure_map(map__55902);\r\nvar app__$1 = map__55902__$1;\r\nvar state_atom = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__55902__$1,new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"state-atom\",\"com.fulcrologic.fulcro.application/state-atom\",648128366));\r\nvar state_map = cljs.core.deref(state_atom);\r\nvar queries = cljs.core.get.cljs$core$IFn$_invoke$arity$2(state_map,new cljs.core.Keyword(\"com.fulcrologic.fulcro.components\",\"queries\",\"com.fulcrologic.fulcro.components/queries\",-1435852452));\r\nvar classnames = cljs.core.keys(queries);\r\nvar seq__55903_56053 = cljs.core.seq(classnames);\r\nvar chunk__55905_56054 = null;\r\nvar count__55906_56055 = (0);\r\nvar i__55907_56056 = (0);\r\nwhile(true){\r\nif((i__55907_56056 < count__55906_56055)){\r\nvar nm_56057 = chunk__55905_56054.cljs$core$IIndexed$_nth$arity$2(null,i__55907_56056);\r\nvar cls_56058 = com.fulcrologic.fulcro.raw.components.registry_key__GT_class(nm_56057);\r\nvar preserve_QMARK__56059 = com.fulcrologic.fulcro.raw.components.component_options.cljs$core$IFn$_invoke$arity$variadic(cls_56058,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"preserve-dynamic-query?\",\"preserve-dynamic-query?\",893339297)], 0));\r\nif(cljs.core.truth_(preserve_QMARK__56059)){\r\n} else {\r\n__set_query_BANG_(app__$1,cls_56058,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"query\",\"query\",-1288509510),com.fulcrologic.fulcro.raw.components.get_query.cljs$core$IFn$_invoke$arity$2(cls_56058,cljs.core.PersistentArrayMap.EMPTY)], null));\r\n}\r\n\r\n\r\nvar G__56061 = seq__55903_56053;\r\nvar G__56062 = chunk__55905_56054;\r\nvar G__56063 = count__55906_56055;\r\nvar G__56064 = (i__55907_56056 + (1));\r\nseq__55903_56053 = G__56061;\r\nchunk__55905_56054 = G__56062;\r\ncount__55906_56055 = G__56063;\r\ni__55907_56056 = G__56064;\r\ncontinue;\r\n} else {\r\nvar temp__5753__auto___56065 = cljs.core.seq(seq__55903_56053);\r\nif(temp__5753__auto___56065){\r\nvar seq__55903_56066__$1 = temp__5753__auto___56065;\r\nif(cljs.core.chunked_seq_QMARK_(seq__55903_56066__$1)){\r\nvar c__4679__auto___56067 = cljs.core.chunk_first(seq__55903_56066__$1);\r\nvar G__56068 = cljs.core.chunk_rest(seq__55903_56066__$1);\r\nvar G__56069 = c__4679__auto___56067;\r\nvar G__56070 = cljs.core.count(c__4679__auto___56067);\r\nvar G__56071 = (0);\r\nseq__55903_56053 = G__56068;\r\nchunk__55905_56054 = G__56069;\r\ncount__55906_56055 = G__56070;\r\ni__55907_56056 = G__56071;\r\ncontinue;\r\n} else {\r\nvar nm_56072 = cljs.core.first(seq__55903_56066__$1);\r\nvar cls_56073 = com.fulcrologic.fulcro.raw.components.registry_key__GT_class(nm_56072);\r\nvar preserve_QMARK__56074 = com.fulcrologic.fulcro.raw.components.component_options.cljs$core$IFn$_invoke$arity$variadic(cls_56073,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"preserve-dynamic-query?\",\"preserve-dynamic-query?\",893339297)], 0));\r\nif(cljs.core.truth_(preserve_QMARK__56074)){\r\n} else {\r\n__set_query_BANG_(app__$1,cls_56073,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"query\",\"query\",-1288509510),com.fulcrologic.fulcro.raw.components.get_query.cljs$core$IFn$_invoke$arity$2(cls_56073,cljs.core.PersistentArrayMap.EMPTY)], null));\r\n}\r\n\r\n\r\nvar G__56076 = cljs.core.next(seq__55903_56066__$1);\r\nvar G__56077 = null;\r\nvar G__56078 = (0);\r\nvar G__56079 = (0);\r\nseq__55903_56053 = G__56076;\r\nchunk__55905_56054 = G__56077;\r\ncount__55906_56055 = G__56078;\r\ni__55907_56056 = G__56079;\r\ncontinue;\r\n}\r\n} else {\r\n}\r\n}\r\nbreak;\r\n}\r\n\r\nvar index_root_BANG_ = com.fulcrologic.fulcro.algorithms.lookup.app_algorithm(app__$1,new cljs.core.Keyword(null,\"index-root!\",\"index-root!\",-981026266));\r\nvar schedule_render_BANG_ = com.fulcrologic.fulcro.algorithms.lookup.app_algorithm(app__$1,new cljs.core.Keyword(null,\"schedule-render!\",\"schedule-render!\",2095050350));\r\nif(cljs.core.truth_(index_root_BANG_)){\r\n(index_root_BANG_.cljs$core$IFn$_invoke$arity$1 ? index_root_BANG_.cljs$core$IFn$_invoke$arity$1(app__$1) : index_root_BANG_.call(null,app__$1));\r\n} else {\r\n}\r\n\r\nif(cljs.core.truth_(schedule_render_BANG_)){\r\nvar G__55910 = app__$1;\r\nvar G__55911 = new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"force-root?\",\"force-root?\",-1598741683),true], null);\r\nreturn (schedule_render_BANG_.cljs$core$IFn$_invoke$arity$2 ? schedule_render_BANG_.cljs$core$IFn$_invoke$arity$2(G__55910,G__55911) : schedule_render_BANG_.call(null,G__55910,G__55911));\r\n} else {\r\nreturn null;\r\n}\r\n}));\r\n\r\n(com.fulcrologic.fulcro.raw.components.refresh_dynamic_queries_BANG_.cljs$lang$maxFixedArity = 3);\r\n\r\n/**\r\n * Identical to `transact!` with `:compressible? true` option. This means that if more than one\r\n *   adjacent history transition edge is compressible, only the more recent of the sequence of them is kept. This\r\n *   is useful for things like form input fields, where storing every keystoke in history is undesirable. This\r\n *   also compress the transactions in Fulcro Inspect.\r\n * \r\n *   NOTE: history events that trigger remote interactions are not compressible, since they may be needed for\r\n *   automatic network error recovery handling.\r\n */\r\ncom.fulcrologic.fulcro.raw.components.compressible_transact_BANG_ = (function com$fulcrologic$fulcro$raw$components$compressible_transact_BANG_(var_args){\r\nvar G__55913 = arguments.length;\r\nswitch (G__55913) {\r\ncase 2:\r\nreturn com.fulcrologic.fulcro.raw.components.compressible_transact_BANG_.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\r\n\r\nbreak;\r\ncase 3:\r\nreturn com.fulcrologic.fulcro.raw.components.compressible_transact_BANG_.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\r\n\r\nbreak;\r\ndefault:\r\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\r\n\r\n}\r\n});\r\n\r\n(com.fulcrologic.fulcro.raw.components.compressible_transact_BANG_.cljs$core$IFn$_invoke$arity$2 = (function (app_ish,tx){\r\nreturn com.fulcrologic.fulcro.raw.components.transact_BANG_.cljs$core$IFn$_invoke$arity$3(app_ish,tx,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"compressible?\",\"compressible?\",153543246),true], null));\r\n}));\r\n\r\n(com.fulcrologic.fulcro.raw.components.compressible_transact_BANG_.cljs$core$IFn$_invoke$arity$3 = (function (app_ish,ref,tx){\r\nreturn com.fulcrologic.fulcro.raw.components.transact_BANG_.cljs$core$IFn$_invoke$arity$3(app_ish,tx,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"compressible?\",\"compressible?\",153543246),true,new cljs.core.Keyword(null,\"ref\",\"ref\",1289896967),ref], null));\r\n}));\r\n\r\n(com.fulcrologic.fulcro.raw.components.compressible_transact_BANG_.cljs$lang$maxFixedArity = 3);\r\n\r\n/**\r\n * Get any custom external configuration that was added to the app at creation-time.\r\n */\r\ncom.fulcrologic.fulcro.raw.components.external_config = (function com$fulcrologic$fulcro$raw$components$external_config(app_ish,k){\r\nvar G__55915 = app_ish;\r\nvar G__55915__$1 = (((G__55915 == null))?null:com.fulcrologic.fulcro.raw.components.any__GT_app(G__55915));\r\nif((G__55915__$1 == null)){\r\nreturn null;\r\n} else {\r\nreturn cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(G__55915__$1,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"com.fulcrologic.fulcro.application\",\"config\",\"com.fulcrologic.fulcro.application/config\",-1907926684),new cljs.core.Keyword(null,\"external-config\",\"external-config\",-471423941),k], null));\r\n}\r\n});\r\n/**\r\n * Walks the complete list of components in the component registry and looks for problems. Used during dev mode to\r\n * detect common problems that can cause runtime misbehavior.\r\n */\r\ncom.fulcrologic.fulcro.raw.components.check_component_registry_BANG_ = (function com$fulcrologic$fulcro$raw$components$check_component_registry_BANG_(){\r\nif(cljs.core.truth_(goog.DEBUG)){\r\nvar components = cljs.core.vals(cljs.core.deref(com.fulcrologic.fulcro.raw.components.component_registry));\r\nvar seq__55921 = cljs.core.seq(components);\r\nvar chunk__55922 = null;\r\nvar count__55923 = (0);\r\nvar i__55924 = (0);\r\nwhile(true){\r\nif((i__55924 < count__55923)){\r\nvar c = chunk__55922.cljs$core$IIndexed$_nth$arity$2(null,i__55924);\r\nvar ident_56087 = (function (){var and__4251__auto__ = com.fulcrologic.fulcro.raw.components.has_ident_QMARK_(c);\r\nif(and__4251__auto__){\r\nreturn com.fulcrologic.fulcro.raw.components.get_ident.cljs$core$IFn$_invoke$arity$2(c,cljs.core.PersistentArrayMap.EMPTY);\r\n} else {\r\nreturn and__4251__auto__;\r\n}\r\n})();\r\nvar query_56088 = com.fulcrologic.fulcro.raw.components.get_query.cljs$core$IFn$_invoke$arity$1(c);\r\nvar constant_ident_QMARK__56089 = (function (){var and__4251__auto__ = cljs.core.vector_QMARK_(ident_56087);\r\nif(and__4251__auto__){\r\nreturn cljs.core.second(ident_56087);\r\n} else {\r\nreturn and__4251__auto__;\r\n}\r\n})();\r\nif(cljs.core.truth_((function (){var and__4251__auto__ = constant_ident_QMARK__56089;\r\nif(cljs.core.truth_(and__4251__auto__)){\r\nreturn (((!(com.fulcrologic.fulcro.raw.components.has_initial_app_state_QMARK_(c)))) && (cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(\"com.fulcrologic.fulcro.algorithms.form-state/FormConfig\",com.fulcrologic.fulcro.raw.components.component_name(c))));\r\n} else {\r\nreturn and__4251__auto__;\r\n}\r\n})())){\r\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$11(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"warn\",\"warn\",-436710552),\"com.fulcrologic.fulcro.raw.components\",null,640,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay(((function (seq__55921,chunk__55922,count__55923,i__55924,ident_56087,query_56088,constant_ident_QMARK__56089,c,components){\r\nreturn (function (){\r\nreturn new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"Component\",com.fulcrologic.fulcro.raw.components.component_name(c),\"has a constant ident (id in the ident is not nil for empty props),\",\"but it has no initial state. This could cause this component's props to\",\"appear as nil unless you have a mutation or load that connects it to the graph after application startup. See https://book.fulcrologic.com/#warn-constant-ident-no-initial-state\"], null);\r\n});})(seq__55921,chunk__55922,count__55923,i__55924,ident_56087,query_56088,constant_ident_QMARK__56089,c,components))\r\n,null)),null,-1872482172,null);\r\n} else {\r\n}\r\n\r\nvar temp__5753__auto___56090 = (function (){var and__4251__auto__ = com.fulcrologic.fulcro.raw.components.has_initial_app_state_QMARK_(c);\r\nif(and__4251__auto__){\r\nreturn com.fulcrologic.fulcro.raw.components.get_initial_state.cljs$core$IFn$_invoke$arity$2(c,cljs.core.PersistentArrayMap.EMPTY);\r\n} else {\r\nreturn and__4251__auto__;\r\n}\r\n})();\r\nif(cljs.core.truth_(temp__5753__auto___56090)){\r\nvar initial_state_56091 = temp__5753__auto___56090;\r\nif(cljs.core.map_QMARK_(initial_state_56091)){\r\nvar initial_keys_56092 = cljs.core.set(cljs.core.keys(initial_state_56091));\r\nvar join_map_56093 = cljs.core.into.cljs$core$IFn$_invoke$arity$3(cljs.core.PersistentArrayMap.EMPTY,cljs.core.comp.cljs$core$IFn$_invoke$arity$2(cljs.core.filter.cljs$core$IFn$_invoke$arity$1(((function (seq__55921,chunk__55922,count__55923,i__55924,initial_keys_56092,initial_state_56091,temp__5753__auto___56090,ident_56087,query_56088,constant_ident_QMARK__56089,c,components){\r\nreturn (function (p1__55917_SHARP_){\r\nvar and__4251__auto__ = cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"join\",\"join\",-758861890),new cljs.core.Keyword(null,\"type\",\"type\",1174270348).cljs$core$IFn$_invoke$arity$1(p1__55917_SHARP_));\r\nif(and__4251__auto__){\r\nreturn cljs.core.keyword.cljs$core$IFn$_invoke$arity$1(new cljs.core.Keyword(null,\"key\",\"key\",-1516042587).cljs$core$IFn$_invoke$arity$1(p1__55917_SHARP_));\r\n} else {\r\nreturn and__4251__auto__;\r\n}\r\n});})(seq__55921,chunk__55922,count__55923,i__55924,initial_keys_56092,initial_state_56091,temp__5753__auto___56090,ident_56087,query_56088,constant_ident_QMARK__56089,c,components))\r\n),cljs.core.map.cljs$core$IFn$_invoke$arity$1(((function (seq__55921,chunk__55922,count__55923,i__55924,initial_keys_56092,initial_state_56091,temp__5753__auto___56090,ident_56087,query_56088,constant_ident_QMARK__56089,c,components){\r\nreturn (function (p__55948){\r\nvar map__55949 = p__55948;\r\nvar map__55949__$1 = cljs.core.__destructure_map(map__55949);\r\nvar key = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__55949__$1,new cljs.core.Keyword(null,\"key\",\"key\",-1516042587));\r\nvar component = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__55949__$1,new cljs.core.Keyword(null,\"component\",\"component\",1555936782));\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [key,component], null);\r\n});})(seq__55921,chunk__55922,count__55923,i__55924,initial_keys_56092,initial_state_56091,temp__5753__auto___56090,ident_56087,query_56088,constant_ident_QMARK__56089,c,components))\r\n)),(function (){var G__55950 = query_56088;\r\nvar G__55950__$1 = (((G__55950 == null))?null:edn_query_language.core.query__GT_ast(G__55950));\r\nif((G__55950__$1 == null)){\r\nreturn null;\r\n} else {\r\nreturn new cljs.core.Keyword(null,\"children\",\"children\",-940561982).cljs$core$IFn$_invoke$arity$1(G__55950__$1);\r\n}\r\n})());\r\nvar join_keys_56094 = cljs.core.set(cljs.core.keys(join_map_56093));\r\nvar temp__5753__auto___56097__$1 = cljs.core.seq(clojure.set.difference.cljs$core$IFn$_invoke$arity$2(join_keys_56094,initial_keys_56092));\r\nif(temp__5753__auto___56097__$1){\r\nvar missing_initial_keys_56098 = temp__5753__auto___56097__$1;\r\nvar seq__55951_56099 = cljs.core.seq(missing_initial_keys_56098);\r\nvar chunk__55953_56100 = null;\r\nvar count__55954_56101 = (0);\r\nvar i__55955_56102 = (0);\r\nwhile(true){\r\nif((i__55955_56102 < count__55954_56101)){\r\nvar k_56103 = chunk__55953_56100.cljs$core$IIndexed$_nth$arity$2(null,i__55955_56102);\r\nvar target_56104 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(join_map_56093,k_56103);\r\nif(((com.fulcrologic.fulcro.raw.components.has_initial_app_state_QMARK_(target_56104)) && (cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(com.fulcrologic.fulcro.raw.components.component_name(target_56104),\"com.fulcrologic.fulcro.algorithms.form-state/FormConfig\")))){\r\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$11(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"warn\",\"warn\",-436710552),\"com.fulcrologic.fulcro.raw.components\",null,657,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay(((function (seq__55951_56099,chunk__55953_56100,count__55954_56101,i__55955_56102,seq__55921,chunk__55922,count__55923,i__55924,target_56104,k_56103,missing_initial_keys_56098,temp__5753__auto___56097__$1,initial_keys_56092,join_map_56093,join_keys_56094,initial_state_56091,temp__5753__auto___56090,ident_56087,query_56088,constant_ident_QMARK__56089,c,components){\r\nreturn (function (){\r\nreturn new cljs.core.PersistentVector(null, 12, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"Component\",com.fulcrologic.fulcro.raw.components.component_name(c),\"does not INCLUDE initial state for\",com.fulcrologic.fulcro.raw.components.component_name(target_56104),\"at join key\",k_56103,\"; however, \",com.fulcrologic.fulcro.raw.components.component_name(target_56104),\"HAS initial state. This probably means your initial state graph is incomplete\",\"and props on\",com.fulcrologic.fulcro.raw.components.component_name(target_56104),\"will be nil. See https://book.fulcrologic.com/#warn-initial-state-incomplete\"], null);\r\n});})(seq__55951_56099,chunk__55953_56100,count__55954_56101,i__55955_56102,seq__55921,chunk__55922,count__55923,i__55924,target_56104,k_56103,missing_initial_keys_56098,temp__5753__auto___56097__$1,initial_keys_56092,join_map_56093,join_keys_56094,initial_state_56091,temp__5753__auto___56090,ident_56087,query_56088,constant_ident_QMARK__56089,c,components))\r\n,null)),null,2025498619,null);\r\n} else {\r\n}\r\n\r\n\r\nvar G__56107 = seq__55951_56099;\r\nvar G__56108 = chunk__55953_56100;\r\nvar G__56109 = count__55954_56101;\r\nvar G__56110 = (i__55955_56102 + (1));\r\nseq__55951_56099 = G__56107;\r\nchunk__55953_56100 = G__56108;\r\ncount__55954_56101 = G__56109;\r\ni__55955_56102 = G__56110;\r\ncontinue;\r\n} else {\r\nvar temp__5753__auto___56111__$2 = cljs.core.seq(seq__55951_56099);\r\nif(temp__5753__auto___56111__$2){\r\nvar seq__55951_56112__$1 = temp__5753__auto___56111__$2;\r\nif(cljs.core.chunked_seq_QMARK_(seq__55951_56112__$1)){\r\nvar c__4679__auto___56113 = cljs.core.chunk_first(seq__55951_56112__$1);\r\nvar G__56114 = cljs.core.chunk_rest(seq__55951_56112__$1);\r\nvar G__56115 = c__4679__auto___56113;\r\nvar G__56116 = cljs.core.count(c__4679__auto___56113);\r\nvar G__56117 = (0);\r\nseq__55951_56099 = G__56114;\r\nchunk__55953_56100 = G__56115;\r\ncount__55954_56101 = G__56116;\r\ni__55955_56102 = G__56117;\r\ncontinue;\r\n} else {\r\nvar k_56119 = cljs.core.first(seq__55951_56112__$1);\r\nvar target_56120 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(join_map_56093,k_56119);\r\nif(((com.fulcrologic.fulcro.raw.components.has_initial_app_state_QMARK_(target_56120)) && (cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(com.fulcrologic.fulcro.raw.components.component_name(target_56120),\"com.fulcrologic.fulcro.algorithms.form-state/FormConfig\")))){\r\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$11(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"warn\",\"warn\",-436710552),\"com.fulcrologic.fulcro.raw.components\",null,657,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay(((function (seq__55951_56099,chunk__55953_56100,count__55954_56101,i__55955_56102,seq__55921,chunk__55922,count__55923,i__55924,target_56120,k_56119,seq__55951_56112__$1,temp__5753__auto___56111__$2,missing_initial_keys_56098,temp__5753__auto___56097__$1,initial_keys_56092,join_map_56093,join_keys_56094,initial_state_56091,temp__5753__auto___56090,ident_56087,query_56088,constant_ident_QMARK__56089,c,components){\r\nreturn (function (){\r\nreturn new cljs.core.PersistentVector(null, 12, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"Component\",com.fulcrologic.fulcro.raw.components.component_name(c),\"does not INCLUDE initial state for\",com.fulcrologic.fulcro.raw.components.component_name(target_56120),\"at join key\",k_56119,\"; however, \",com.fulcrologic.fulcro.raw.components.component_name(target_56120),\"HAS initial state. This probably means your initial state graph is incomplete\",\"and props on\",com.fulcrologic.fulcro.raw.components.component_name(target_56120),\"will be nil. See https://book.fulcrologic.com/#warn-initial-state-incomplete\"], null);\r\n});})(seq__55951_56099,chunk__55953_56100,count__55954_56101,i__55955_56102,seq__55921,chunk__55922,count__55923,i__55924,target_56120,k_56119,seq__55951_56112__$1,temp__5753__auto___56111__$2,missing_initial_keys_56098,temp__5753__auto___56097__$1,initial_keys_56092,join_map_56093,join_keys_56094,initial_state_56091,temp__5753__auto___56090,ident_56087,query_56088,constant_ident_QMARK__56089,c,components))\r\n,null)),null,-1609265849,null);\r\n} else {\r\n}\r\n\r\n\r\nvar G__56124 = cljs.core.next(seq__55951_56112__$1);\r\nvar G__56125 = null;\r\nvar G__56126 = (0);\r\nvar G__56127 = (0);\r\nseq__55951_56099 = G__56124;\r\nchunk__55953_56100 = G__56125;\r\ncount__55954_56101 = G__56126;\r\ni__55955_56102 = G__56127;\r\ncontinue;\r\n}\r\n} else {\r\n}\r\n}\r\nbreak;\r\n}\r\n} else {\r\n}\r\n} else {\r\n}\r\n} else {\r\n}\r\n\r\n\r\nvar G__56128 = seq__55921;\r\nvar G__56129 = chunk__55922;\r\nvar G__56130 = count__55923;\r\nvar G__56131 = (i__55924 + (1));\r\nseq__55921 = G__56128;\r\nchunk__55922 = G__56129;\r\ncount__55923 = G__56130;\r\ni__55924 = G__56131;\r\ncontinue;\r\n} else {\r\nvar temp__5753__auto__ = cljs.core.seq(seq__55921);\r\nif(temp__5753__auto__){\r\nvar seq__55921__$1 = temp__5753__auto__;\r\nif(cljs.core.chunked_seq_QMARK_(seq__55921__$1)){\r\nvar c__4679__auto__ = cljs.core.chunk_first(seq__55921__$1);\r\nvar G__56132 = cljs.core.chunk_rest(seq__55921__$1);\r\nvar G__56133 = c__4679__auto__;\r\nvar G__56134 = cljs.core.count(c__4679__auto__);\r\nvar G__56135 = (0);\r\nseq__55921 = G__56132;\r\nchunk__55922 = G__56133;\r\ncount__55923 = G__56134;\r\ni__55924 = G__56135;\r\ncontinue;\r\n} else {\r\nvar c = cljs.core.first(seq__55921__$1);\r\nvar ident_56136 = (function (){var and__4251__auto__ = com.fulcrologic.fulcro.raw.components.has_ident_QMARK_(c);\r\nif(and__4251__auto__){\r\nreturn com.fulcrologic.fulcro.raw.components.get_ident.cljs$core$IFn$_invoke$arity$2(c,cljs.core.PersistentArrayMap.EMPTY);\r\n} else {\r\nreturn and__4251__auto__;\r\n}\r\n})();\r\nvar query_56137 = com.fulcrologic.fulcro.raw.components.get_query.cljs$core$IFn$_invoke$arity$1(c);\r\nvar constant_ident_QMARK__56138 = (function (){var and__4251__auto__ = cljs.core.vector_QMARK_(ident_56136);\r\nif(and__4251__auto__){\r\nreturn cljs.core.second(ident_56136);\r\n} else {\r\nreturn and__4251__auto__;\r\n}\r\n})();\r\nif(cljs.core.truth_((function (){var and__4251__auto__ = constant_ident_QMARK__56138;\r\nif(cljs.core.truth_(and__4251__auto__)){\r\nreturn (((!(com.fulcrologic.fulcro.raw.components.has_initial_app_state_QMARK_(c)))) && (cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(\"com.fulcrologic.fulcro.algorithms.form-state/FormConfig\",com.fulcrologic.fulcro.raw.components.component_name(c))));\r\n} else {\r\nreturn and__4251__auto__;\r\n}\r\n})())){\r\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$11(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"warn\",\"warn\",-436710552),\"com.fulcrologic.fulcro.raw.components\",null,640,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay(((function (seq__55921,chunk__55922,count__55923,i__55924,ident_56136,query_56137,constant_ident_QMARK__56138,c,seq__55921__$1,temp__5753__auto__,components){\r\nreturn (function (){\r\nreturn new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"Component\",com.fulcrologic.fulcro.raw.components.component_name(c),\"has a constant ident (id in the ident is not nil for empty props),\",\"but it has no initial state. This could cause this component's props to\",\"appear as nil unless you have a mutation or load that connects it to the graph after application startup. See https://book.fulcrologic.com/#warn-constant-ident-no-initial-state\"], null);\r\n});})(seq__55921,chunk__55922,count__55923,i__55924,ident_56136,query_56137,constant_ident_QMARK__56138,c,seq__55921__$1,temp__5753__auto__,components))\r\n,null)),null,-700243823,null);\r\n} else {\r\n}\r\n\r\nvar temp__5753__auto___56142__$1 = (function (){var and__4251__auto__ = com.fulcrologic.fulcro.raw.components.has_initial_app_state_QMARK_(c);\r\nif(and__4251__auto__){\r\nreturn com.fulcrologic.fulcro.raw.components.get_initial_state.cljs$core$IFn$_invoke$arity$2(c,cljs.core.PersistentArrayMap.EMPTY);\r\n} else {\r\nreturn and__4251__auto__;\r\n}\r\n})();\r\nif(cljs.core.truth_(temp__5753__auto___56142__$1)){\r\nvar initial_state_56144 = temp__5753__auto___56142__$1;\r\nif(cljs.core.map_QMARK_(initial_state_56144)){\r\nvar initial_keys_56145 = cljs.core.set(cljs.core.keys(initial_state_56144));\r\nvar join_map_56146 = cljs.core.into.cljs$core$IFn$_invoke$arity$3(cljs.core.PersistentArrayMap.EMPTY,cljs.core.comp.cljs$core$IFn$_invoke$arity$2(cljs.core.filter.cljs$core$IFn$_invoke$arity$1(((function (seq__55921,chunk__55922,count__55923,i__55924,initial_keys_56145,initial_state_56144,temp__5753__auto___56142__$1,ident_56136,query_56137,constant_ident_QMARK__56138,c,seq__55921__$1,temp__5753__auto__,components){\r\nreturn (function (p1__55917_SHARP_){\r\nvar and__4251__auto__ = cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"join\",\"join\",-758861890),new cljs.core.Keyword(null,\"type\",\"type\",1174270348).cljs$core$IFn$_invoke$arity$1(p1__55917_SHARP_));\r\nif(and__4251__auto__){\r\nreturn cljs.core.keyword.cljs$core$IFn$_invoke$arity$1(new cljs.core.Keyword(null,\"key\",\"key\",-1516042587).cljs$core$IFn$_invoke$arity$1(p1__55917_SHARP_));\r\n} else {\r\nreturn and__4251__auto__;\r\n}\r\n});})(seq__55921,chunk__55922,count__55923,i__55924,initial_keys_56145,initial_state_56144,temp__5753__auto___56142__$1,ident_56136,query_56137,constant_ident_QMARK__56138,c,seq__55921__$1,temp__5753__auto__,components))\r\n),cljs.core.map.cljs$core$IFn$_invoke$arity$1(((function (seq__55921,chunk__55922,count__55923,i__55924,initial_keys_56145,initial_state_56144,temp__5753__auto___56142__$1,ident_56136,query_56137,constant_ident_QMARK__56138,c,seq__55921__$1,temp__5753__auto__,components){\r\nreturn (function (p__55957){\r\nvar map__55958 = p__55957;\r\nvar map__55958__$1 = cljs.core.__destructure_map(map__55958);\r\nvar key = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__55958__$1,new cljs.core.Keyword(null,\"key\",\"key\",-1516042587));\r\nvar component = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__55958__$1,new cljs.core.Keyword(null,\"component\",\"component\",1555936782));\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [key,component], null);\r\n});})(seq__55921,chunk__55922,count__55923,i__55924,initial_keys_56145,initial_state_56144,temp__5753__auto___56142__$1,ident_56136,query_56137,constant_ident_QMARK__56138,c,seq__55921__$1,temp__5753__auto__,components))\r\n)),(function (){var G__55959 = query_56137;\r\nvar G__55959__$1 = (((G__55959 == null))?null:edn_query_language.core.query__GT_ast(G__55959));\r\nif((G__55959__$1 == null)){\r\nreturn null;\r\n} else {\r\nreturn new cljs.core.Keyword(null,\"children\",\"children\",-940561982).cljs$core$IFn$_invoke$arity$1(G__55959__$1);\r\n}\r\n})());\r\nvar join_keys_56147 = cljs.core.set(cljs.core.keys(join_map_56146));\r\nvar temp__5753__auto___56148__$2 = cljs.core.seq(clojure.set.difference.cljs$core$IFn$_invoke$arity$2(join_keys_56147,initial_keys_56145));\r\nif(temp__5753__auto___56148__$2){\r\nvar missing_initial_keys_56149 = temp__5753__auto___56148__$2;\r\nvar seq__55960_56150 = cljs.core.seq(missing_initial_keys_56149);\r\nvar chunk__55962_56151 = null;\r\nvar count__55963_56152 = (0);\r\nvar i__55964_56153 = (0);\r\nwhile(true){\r\nif((i__55964_56153 < count__55963_56152)){\r\nvar k_56154 = chunk__55962_56151.cljs$core$IIndexed$_nth$arity$2(null,i__55964_56153);\r\nvar target_56156 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(join_map_56146,k_56154);\r\nif(((com.fulcrologic.fulcro.raw.components.has_initial_app_state_QMARK_(target_56156)) && (cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(com.fulcrologic.fulcro.raw.components.component_name(target_56156),\"com.fulcrologic.fulcro.algorithms.form-state/FormConfig\")))){\r\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$11(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"warn\",\"warn\",-436710552),\"com.fulcrologic.fulcro.raw.components\",null,657,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay(((function (seq__55960_56150,chunk__55962_56151,count__55963_56152,i__55964_56153,seq__55921,chunk__55922,count__55923,i__55924,target_56156,k_56154,missing_initial_keys_56149,temp__5753__auto___56148__$2,initial_keys_56145,join_map_56146,join_keys_56147,initial_state_56144,temp__5753__auto___56142__$1,ident_56136,query_56137,constant_ident_QMARK__56138,c,seq__55921__$1,temp__5753__auto__,components){\r\nreturn (function (){\r\nreturn new cljs.core.PersistentVector(null, 12, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"Component\",com.fulcrologic.fulcro.raw.components.component_name(c),\"does not INCLUDE initial state for\",com.fulcrologic.fulcro.raw.components.component_name(target_56156),\"at join key\",k_56154,\"; however, \",com.fulcrologic.fulcro.raw.components.component_name(target_56156),\"HAS initial state. This probably means your initial state graph is incomplete\",\"and props on\",com.fulcrologic.fulcro.raw.components.component_name(target_56156),\"will be nil. See https://book.fulcrologic.com/#warn-initial-state-incomplete\"], null);\r\n});})(seq__55960_56150,chunk__55962_56151,count__55963_56152,i__55964_56153,seq__55921,chunk__55922,count__55923,i__55924,target_56156,k_56154,missing_initial_keys_56149,temp__5753__auto___56148__$2,initial_keys_56145,join_map_56146,join_keys_56147,initial_state_56144,temp__5753__auto___56142__$1,ident_56136,query_56137,constant_ident_QMARK__56138,c,seq__55921__$1,temp__5753__auto__,components))\r\n,null)),null,-469781096,null);\r\n} else {\r\n}\r\n\r\n\r\nvar G__56160 = seq__55960_56150;\r\nvar G__56161 = chunk__55962_56151;\r\nvar G__56162 = count__55963_56152;\r\nvar G__56163 = (i__55964_56153 + (1));\r\nseq__55960_56150 = G__56160;\r\nchunk__55962_56151 = G__56161;\r\ncount__55963_56152 = G__56162;\r\ni__55964_56153 = G__56163;\r\ncontinue;\r\n} else {\r\nvar temp__5753__auto___56164__$3 = cljs.core.seq(seq__55960_56150);\r\nif(temp__5753__auto___56164__$3){\r\nvar seq__55960_56165__$1 = temp__5753__auto___56164__$3;\r\nif(cljs.core.chunked_seq_QMARK_(seq__55960_56165__$1)){\r\nvar c__4679__auto___56166 = cljs.core.chunk_first(seq__55960_56165__$1);\r\nvar G__56167 = cljs.core.chunk_rest(seq__55960_56165__$1);\r\nvar G__56168 = c__4679__auto___56166;\r\nvar G__56169 = cljs.core.count(c__4679__auto___56166);\r\nvar G__56170 = (0);\r\nseq__55960_56150 = G__56167;\r\nchunk__55962_56151 = G__56168;\r\ncount__55963_56152 = G__56169;\r\ni__55964_56153 = G__56170;\r\ncontinue;\r\n} else {\r\nvar k_56171 = cljs.core.first(seq__55960_56165__$1);\r\nvar target_56172 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(join_map_56146,k_56171);\r\nif(((com.fulcrologic.fulcro.raw.components.has_initial_app_state_QMARK_(target_56172)) && (cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(com.fulcrologic.fulcro.raw.components.component_name(target_56172),\"com.fulcrologic.fulcro.algorithms.form-state/FormConfig\")))){\r\ntaoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$11(taoensso.timbre._STAR_config_STAR_,new cljs.core.Keyword(null,\"warn\",\"warn\",-436710552),\"com.fulcrologic.fulcro.raw.components\",null,657,new cljs.core.Keyword(null,\"p\",\"p\",151049309),new cljs.core.Keyword(null,\"auto\",\"auto\",-566279492),(new cljs.core.Delay(((function (seq__55960_56150,chunk__55962_56151,count__55963_56152,i__55964_56153,seq__55921,chunk__55922,count__55923,i__55924,target_56172,k_56171,seq__55960_56165__$1,temp__5753__auto___56164__$3,missing_initial_keys_56149,temp__5753__auto___56148__$2,initial_keys_56145,join_map_56146,join_keys_56147,initial_state_56144,temp__5753__auto___56142__$1,ident_56136,query_56137,constant_ident_QMARK__56138,c,seq__55921__$1,temp__5753__auto__,components){\r\nreturn (function (){\r\nreturn new cljs.core.PersistentVector(null, 12, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"Component\",com.fulcrologic.fulcro.raw.components.component_name(c),\"does not INCLUDE initial state for\",com.fulcrologic.fulcro.raw.components.component_name(target_56172),\"at join key\",k_56171,\"; however, \",com.fulcrologic.fulcro.raw.components.component_name(target_56172),\"HAS initial state. This probably means your initial state graph is incomplete\",\"and props on\",com.fulcrologic.fulcro.raw.components.component_name(target_56172),\"will be nil. See https://book.fulcrologic.com/#warn-initial-state-incomplete\"], null);\r\n});})(seq__55960_56150,chunk__55962_56151,count__55963_56152,i__55964_56153,seq__55921,chunk__55922,count__55923,i__55924,target_56172,k_56171,seq__55960_56165__$1,temp__5753__auto___56164__$3,missing_initial_keys_56149,temp__5753__auto___56148__$2,initial_keys_56145,join_map_56146,join_keys_56147,initial_state_56144,temp__5753__auto___56142__$1,ident_56136,query_56137,constant_ident_QMARK__56138,c,seq__55921__$1,temp__5753__auto__,components))\r\n,null)),null,-758380823,null);\r\n} else {\r\n}\r\n\r\n\r\nvar G__56176 = cljs.core.next(seq__55960_56165__$1);\r\nvar G__56177 = null;\r\nvar G__56178 = (0);\r\nvar G__56179 = (0);\r\nseq__55960_56150 = G__56176;\r\nchunk__55962_56151 = G__56177;\r\ncount__55963_56152 = G__56178;\r\ni__55964_56153 = G__56179;\r\ncontinue;\r\n}\r\n} else {\r\n}\r\n}\r\nbreak;\r\n}\r\n} else {\r\n}\r\n} else {\r\n}\r\n} else {\r\n}\r\n\r\n\r\nvar G__56180 = cljs.core.next(seq__55921__$1);\r\nvar G__56181 = null;\r\nvar G__56182 = (0);\r\nvar G__56183 = (0);\r\nseq__55921 = G__56180;\r\nchunk__55922 = G__56181;\r\ncount__55923 = G__56182;\r\ni__55924 = G__56183;\r\ncontinue;\r\n}\r\n} else {\r\nreturn null;\r\n}\r\n}\r\nbreak;\r\n}\r\n} else {\r\nreturn null;\r\n}\r\n});\r\n/**\r\n * Returns the keyword of the most likely ID attribute in the given props (the first one with the `name` \"id\").\r\n *   Returns nil if there isn't one. This is useful when trying to derive an ident from a sample tree of data, for example.\r\n */\r\ncom.fulcrologic.fulcro.raw.components.id_key = (function com$fulcrologic$fulcro$raw$components$id_key(props){\r\nreturn cljs.core.first(cljs.core.filter.cljs$core$IFn$_invoke$arity$2((function (p1__55966_SHARP_){\r\nreturn cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(\"id\",cljs.core.name(p1__55966_SHARP_));\r\n}),cljs.core.keys(props)));\r\n});\r\n/**\r\n * Returns the first child from a list of EQL AST nodes that looks like an entity ID key.\r\n */\r\ncom.fulcrologic.fulcro.raw.components.ast_id_key = (function com$fulcrologic$fulcro$raw$components$ast_id_key(children){\r\nreturn new cljs.core.Keyword(null,\"key\",\"key\",-1516042587).cljs$core$IFn$_invoke$arity$1(cljs.core.first(cljs.core.filter.cljs$core$IFn$_invoke$arity$2((function (p__55967){\r\nvar map__55968 = p__55967;\r\nvar map__55968__$1 = cljs.core.__destructure_map(map__55968);\r\nvar type = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__55968__$1,new cljs.core.Keyword(null,\"type\",\"type\",1174270348));\r\nvar key = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__55968__$1,new cljs.core.Keyword(null,\"key\",\"key\",-1516042587));\r\nreturn (((key instanceof cljs.core.Keyword)) && (((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"prop\",\"prop\",-515168332),type)) && (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(\"id\",cljs.core.name(key))))));\r\n}),children)));\r\n});\r\ncom.fulcrologic.fulcro.raw.components.normalize_STAR_ = (function com$fulcrologic$fulcro$raw$components$normalize_STAR_(p__55969,p__55970){\r\nvar map__55971 = p__55969;\r\nvar map__55971__$1 = cljs.core.__destructure_map(map__55971);\r\nvar original_node = map__55971__$1;\r\nvar children = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__55971__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\r\nvar type = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__55971__$1,new cljs.core.Keyword(null,\"type\",\"type\",1174270348));\r\nvar map__55972 = p__55970;\r\nvar map__55972__$1 = cljs.core.__destructure_map(map__55972);\r\nvar top_component_options = map__55972__$1;\r\nvar componentName = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__55972__$1,new cljs.core.Keyword(null,\"componentName\",\"componentName\",-2103437555));\r\nvar detected_id_key = com.fulcrologic.fulcro.raw.components.ast_id_key(children);\r\nvar real_id_key = detected_id_key;\r\nvar component = (function() { \r\nvar G__56189__delegate = function (args){\r\nreturn null;\r\n};\r\nvar G__56189 = function (var_args){\r\nvar args = null;\r\nif (arguments.length > 0) {\r\nvar G__56190__i = 0, G__56190__a = new Array(arguments.length -  0);\r\nwhile (G__56190__i < G__56190__a.length) {G__56190__a[G__56190__i] = arguments[G__56190__i + 0]; ++G__56190__i;}\r\n  args = new cljs.core.IndexedSeq(G__56190__a,0,null);\r\n} \r\nreturn G__56189__delegate.call(this,args);};\r\nG__56189.cljs$lang$maxFixedArity = 0;\r\nG__56189.cljs$lang$applyTo = (function (arglist__56191){\r\nvar args = cljs.core.seq(arglist__56191);\r\nreturn G__56189__delegate(args);\r\n});\r\nG__56189.cljs$core$IFn$_invoke$arity$variadic = G__56189__delegate;\r\nreturn G__56189;\r\n})()\r\n;\r\nvar new_children = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2((function (p__55973){\r\nvar map__55974 = p__55973;\r\nvar map__55974__$1 = cljs.core.__destructure_map(map__55974);\r\nvar node = map__55974__$1;\r\nvar type__$1 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__55974__$1,new cljs.core.Keyword(null,\"type\",\"type\",1174270348));\r\nif(((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(type__$1,new cljs.core.Keyword(null,\"join\",\"join\",-758861890))) && (cljs.core.not(new cljs.core.Keyword(null,\"component\",\"component\",1555936782).cljs$core$IFn$_invoke$arity$1(node))))){\r\nvar G__55975 = node;\r\nvar G__55976 = cljs.core.PersistentArrayMap.EMPTY;\r\nreturn (com.fulcrologic.fulcro.raw.components.normalize_STAR_.cljs$core$IFn$_invoke$arity$2 ? com.fulcrologic.fulcro.raw.components.normalize_STAR_.cljs$core$IFn$_invoke$arity$2(G__55975,G__55976) : com.fulcrologic.fulcro.raw.components.normalize_STAR_.call(null,G__55975,G__55976));\r\n} else {\r\nreturn node;\r\n}\r\n}),children);\r\nvar qatom = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(null);\r\nvar component__$1 = com.fulcrologic.fulcro.raw.components.configure_anonymous_component_BANG_(component,(function (){var G__55977 = cljs.core.with_meta(cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"initial-state\",\"initial-state\",-2021616806),(function() { \r\nvar G__56193__delegate = function (args){\r\nreturn cljs.core.PersistentArrayMap.EMPTY;\r\n};\r\nvar G__56193 = function (var_args){\r\nvar args = null;\r\nif (arguments.length > 0) {\r\nvar G__56197__i = 0, G__56197__a = new Array(arguments.length -  0);\r\nwhile (G__56197__i < G__56197__a.length) {G__56197__a[G__56197__i] = arguments[G__56197__i + 0]; ++G__56197__i;}\r\n  args = new cljs.core.IndexedSeq(G__56197__a,0,null);\r\n} \r\nreturn G__56193__delegate.call(this,args);};\r\nG__56193.cljs$lang$maxFixedArity = 0;\r\nG__56193.cljs$lang$applyTo = (function (arglist__56198){\r\nvar args = cljs.core.seq(arglist__56198);\r\nreturn G__56193__delegate(args);\r\n});\r\nG__56193.cljs$core$IFn$_invoke$arity$variadic = G__56193__delegate;\r\nreturn G__56193;\r\n})()\r\n], null),top_component_options,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"query\",\"query\",-1288509510),(function() { \r\nvar G__56200__delegate = function (args){\r\nreturn cljs.core.deref(qatom);\r\n};\r\nvar G__56200 = function (var_args){\r\nvar args = null;\r\nif (arguments.length > 0) {\r\nvar G__56201__i = 0, G__56201__a = new Array(arguments.length -  0);\r\nwhile (G__56201__i < G__56201__a.length) {G__56201__a[G__56201__i] = arguments[G__56201__i + 0]; ++G__56201__i;}\r\n  args = new cljs.core.IndexedSeq(G__56201__a,0,null);\r\n} \r\nreturn G__56200__delegate.call(this,args);};\r\nG__56200.cljs$lang$maxFixedArity = 0;\r\nG__56200.cljs$lang$applyTo = (function (arglist__56202){\r\nvar args = cljs.core.seq(arglist__56202);\r\nreturn G__56200__delegate(args);\r\n});\r\nG__56200.cljs$core$IFn$_invoke$arity$variadic = G__56200__delegate;\r\nreturn G__56200;\r\n})()\r\n,\"props\",new cljs.core.PersistentArrayMap(null, 1, [\"fulcro$queryid\",new cljs.core.Keyword(null,\"anonymous\",\"anonymous\",447897231)], null)], null)], 0)),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"query-id\",\"query-id\",1474128842),new cljs.core.Keyword(null,\"anonymous\",\"anonymous\",447897231)], null));\r\nvar G__55977__$1 = (cljs.core.truth_(componentName)?cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__55977,new cljs.core.Keyword(null,\"componentName\",\"componentName\",-2103437555),componentName):G__55977);\r\nif(cljs.core.truth_((function (){var and__4251__auto__ = real_id_key;\r\nif(cljs.core.truth_(and__4251__auto__)){\r\nreturn (!(cljs.core.contains_QMARK_(top_component_options,new cljs.core.Keyword(null,\"ident\",\"ident\",-742346))));\r\n} else {\r\nreturn and__4251__auto__;\r\n}\r\n})())){\r\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__55977__$1,new cljs.core.Keyword(null,\"ident\",\"ident\",-742346),(function (_,props){\r\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [real_id_key,cljs.core.get.cljs$core$IFn$_invoke$arity$2(props,real_id_key)], null);\r\n}));\r\n} else {\r\nreturn G__55977__$1;\r\n}\r\n})());\r\nvar updated_node = cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(original_node,new cljs.core.Keyword(null,\"children\",\"children\",-940561982),new_children,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"component\",\"component\",1555936782),component__$1], 0));\r\nvar query = ((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(type,new cljs.core.Keyword(null,\"join\",\"join\",-758861890)))?edn_query_language.core.ast__GT_query(cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(updated_node,new cljs.core.Keyword(null,\"type\",\"type\",1174270348),new cljs.core.Keyword(null,\"root\",\"root\",-448657453))):edn_query_language.core.ast__GT_query(updated_node));\r\nvar _ = cljs.core.reset_BANG_(qatom,query);\r\nreturn updated_node;\r\n});\r\n/**\r\n * Create an anonymous normalizing query component. By default the normalization will be auto-detected based on there being a prop at each\r\n * entity level that has (any) namespace, and a name of `id`. For example:\r\n * \r\n * ```\r\n * [:list/id :list/name {:list/items [:item/id :item/complete? :item/label]}]\r\n * ```\r\n * \r\n * will create a normalizing query that expects the top-level values to be normalized by `:list/id` and the nested\r\n * items to be normalized by `:item/id`. If there is more than one ID in your props, make sure the *first* one is\r\n * the one to use for normalization.\r\n * \r\n * The `top-component-options` becomes the options map of the component.\r\n * \r\n * You can include :componentName to push the resulting anonymous component definition into the component registry, which\r\n * is needed by some parts of Fulcro, like UISM.\r\n * \r\n * NOTE: `nc` is recursive, and *does* compose if you want to name the components at various levels. It can be used with queries from\r\n * other defsc components:\r\n * \r\n * ```\r\n * (def query (nc [:user/id\r\n *                 :user/name\r\n *                 ;; Generate an anonymous component that is available in the registry under ::Session\r\n *                 {:user/session-details (nc [:session/id :session/last-login] {:componentName ::Session})}\r\n *                 ;; Use a defsc query as the source\r\n *                 {:user/settings (comp/get-query Settings)}\r\n *                 ;; Autogenerates an anonymous address query component that has no name\r\n *                 {:user/address [:address/id :address/street]}]))\r\n * ```\r\n * \r\n */\r\ncom.fulcrologic.fulcro.raw.components.nc = (function com$fulcrologic$fulcro$raw$components$nc(var_args){\r\nvar G__55979 = arguments.length;\r\nswitch (G__55979) {\r\ncase 1:\r\nreturn com.fulcrologic.fulcro.raw.components.nc.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\r\n\r\nbreak;\r\ncase 2:\r\nreturn com.fulcrologic.fulcro.raw.components.nc.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\r\n\r\nbreak;\r\ndefault:\r\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\r\n\r\n}\r\n});\r\n\r\n(com.fulcrologic.fulcro.raw.components.nc.cljs$core$IFn$_invoke$arity$1 = (function (query){\r\nreturn com.fulcrologic.fulcro.raw.components.nc.cljs$core$IFn$_invoke$arity$2(query,cljs.core.PersistentArrayMap.EMPTY);\r\n}));\r\n\r\n(com.fulcrologic.fulcro.raw.components.nc.cljs$core$IFn$_invoke$arity$2 = (function (query,p__55980){\r\nvar map__55981 = p__55980;\r\nvar map__55981__$1 = cljs.core.__destructure_map(map__55981);\r\nvar top_component_options = map__55981__$1;\r\nvar componentName = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__55981__$1,new cljs.core.Keyword(null,\"componentName\",\"componentName\",-2103437555));\r\nvar ast = edn_query_language.core.query__GT_ast(query);\r\nreturn new cljs.core.Keyword(null,\"component\",\"component\",1555936782).cljs$core$IFn$_invoke$arity$1(com.fulcrologic.fulcro.raw.components.normalize_STAR_(ast,top_component_options));\r\n}));\r\n\r\n(com.fulcrologic.fulcro.raw.components.nc.cljs$lang$maxFixedArity = 2);\r\n\r\n/**\r\n * Creates a normalizing component from an entity tree. Every sub-element of the tree provided will generate an anonymous\r\n * normalizing component if that element has an ID field. For to-many relations only the first item is used for query/ident\r\n * generation.\r\n * \r\n * The returned anonymous component will have initial state that matches the provided entity data tree.\r\n * \r\n * This means you can use a sample tree to generate both the initial state for a subtree of your app and the components\r\n * necessary to do I/O on that tree.\r\n * \r\n * This kind of component will *not* be registered in the component registry unless you pass a :componentName\r\n * via the top-level-options. A registry entry is necessary for things that\r\n * require the registry, such as dynamic queries and UI state machines).\r\n * \r\n */\r\ncom.fulcrologic.fulcro.raw.components.entity__GT_component = (function com$fulcrologic$fulcro$raw$components$entity__GT_component(var_args){\r\nvar G__55983 = arguments.length;\r\nswitch (G__55983) {\r\ncase 1:\r\nreturn com.fulcrologic.fulcro.raw.components.entity__GT_component.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\r\n\r\nbreak;\r\ncase 2:\r\nreturn com.fulcrologic.fulcro.raw.components.entity__GT_component.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\r\n\r\nbreak;\r\ndefault:\r\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\r\n\r\n}\r\n});\r\n\r\n(com.fulcrologic.fulcro.raw.components.entity__GT_component.cljs$core$IFn$_invoke$arity$1 = (function (entity_data_tree){\r\nreturn com.fulcrologic.fulcro.raw.components.entity__GT_component.cljs$core$IFn$_invoke$arity$2(entity_data_tree,cljs.core.PersistentArrayMap.EMPTY);\r\n}));\r\n\r\n(com.fulcrologic.fulcro.raw.components.entity__GT_component.cljs$core$IFn$_invoke$arity$2 = (function (entity_data_tree,top_level_options){\r\nvar map__55984 = cljs.core.reduce_kv((function (result,k,v){\r\nif(((cljs.core.vector_QMARK_(v)) && (cljs.core.every_QMARK_(cljs.core.map_QMARK_,v)))){\r\nvar c = com.fulcrologic.fulcro.raw.components.entity__GT_component.cljs$core$IFn$_invoke$arity$1(cljs.core.first(v));\r\nreturn cljs.core.update.cljs$core$IFn$_invoke$arity$5(cljs.core.update.cljs$core$IFn$_invoke$arity$5(result,new cljs.core.Keyword(null,\"initial-state\",\"initial-state\",-2021616806),cljs.core.assoc,k,v),new cljs.core.Keyword(null,\"joins\",\"joins\",1033962699),cljs.core.assoc,k,com.fulcrologic.fulcro.raw.components.query(c));\r\n} else {\r\nif(cljs.core.map_QMARK_(v)){\r\nvar c = com.fulcrologic.fulcro.raw.components.entity__GT_component.cljs$core$IFn$_invoke$arity$1(v);\r\nreturn cljs.core.update.cljs$core$IFn$_invoke$arity$5(cljs.core.update.cljs$core$IFn$_invoke$arity$5(result,new cljs.core.Keyword(null,\"initial-state\",\"initial-state\",-2021616806),cljs.core.assoc,k,v),new cljs.core.Keyword(null,\"joins\",\"joins\",1033962699),cljs.core.assoc,k,com.fulcrologic.fulcro.raw.components.query(c));\r\n} else {\r\nreturn cljs.core.update.cljs$core$IFn$_invoke$arity$4(cljs.core.update.cljs$core$IFn$_invoke$arity$5(result,new cljs.core.Keyword(null,\"initial-state\",\"initial-state\",-2021616806),cljs.core.assoc,k,v),new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713),cljs.core.conj,k);\r\n\r\n}\r\n}\r\n}),new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713),cljs.core.PersistentHashSet.EMPTY,new cljs.core.Keyword(null,\"initial-state\",\"initial-state\",-2021616806),cljs.core.PersistentArrayMap.EMPTY,new cljs.core.Keyword(null,\"joins\",\"joins\",1033962699),cljs.core.PersistentArrayMap.EMPTY], null),entity_data_tree);\r\nvar map__55984__$1 = cljs.core.__destructure_map(map__55984);\r\nvar joins = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__55984__$1,new cljs.core.Keyword(null,\"joins\",\"joins\",1033962699));\r\nvar initial_state = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__55984__$1,new cljs.core.Keyword(null,\"initial-state\",\"initial-state\",-2021616806));\r\nvar attrs = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__55984__$1,new cljs.core.Keyword(null,\"attrs\",\"attrs\",-2090668713));\r\nvar query = cljs.core.into.cljs$core$IFn$_invoke$arity$3(cljs.core.vec(attrs),cljs.core.map.cljs$core$IFn$_invoke$arity$1((function com$fulcrologic$fulcro$raw$components$build_subquery_STAR_(p__55985){\r\nvar vec__55986 = p__55985;\r\nvar join_key = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__55986,(0),null);\r\nvar subquery = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__55986,(1),null);\r\nreturn cljs.core.PersistentArrayMap.createAsIfByAssoc([join_key,subquery]);\r\n})),joins);\r\nreturn com.fulcrologic.fulcro.raw.components.nc.cljs$core$IFn$_invoke$arity$2(query,cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"initial-state\",\"initial-state\",-2021616806),(function() { \r\nvar G__56214__delegate = function (args){\r\nreturn initial_state;\r\n};\r\nvar G__56214 = function (var_args){\r\nvar args = null;\r\nif (arguments.length > 0) {\r\nvar G__56216__i = 0, G__56216__a = new Array(arguments.length -  0);\r\nwhile (G__56216__i < G__56216__a.length) {G__56216__a[G__56216__i] = arguments[G__56216__i + 0]; ++G__56216__i;}\r\n  args = new cljs.core.IndexedSeq(G__56216__a,0,null);\r\n} \r\nreturn G__56214__delegate.call(this,args);};\r\nG__56214.cljs$lang$maxFixedArity = 0;\r\nG__56214.cljs$lang$applyTo = (function (arglist__56217){\r\nvar args = cljs.core.seq(arglist__56217);\r\nreturn G__56214__delegate(args);\r\n});\r\nG__56214.cljs$core$IFn$_invoke$arity$variadic = G__56214__delegate;\r\nreturn G__56214;\r\n})()\r\n], null),top_level_options], 0)));\r\n}));\r\n\r\n(com.fulcrologic.fulcro.raw.components.entity__GT_component.cljs$lang$maxFixedArity = 2);\r\n\r\nvar get_subquery_component_STAR_ = (function com$fulcrologic$fulcro$raw$components$get_subquery_component_STAR_(c,ast_nodes,query_path){\r\nwhile(true){\r\nif(cljs.core.empty_QMARK_(ast_nodes)){\r\nreturn c;\r\n} else {\r\nvar k = cljs.core.first(query_path);\r\nvar ks = cljs.core.rest(query_path);\r\nvar map__55991 = cljs.core.first(cljs.core.filter.cljs$core$IFn$_invoke$arity$2(((function (c,ast_nodes,query_path,k,ks){\r\nreturn (function (p1__55989_SHARP_){\r\nreturn cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(k,new cljs.core.Keyword(null,\"key\",\"key\",-1516042587).cljs$core$IFn$_invoke$arity$1(p1__55989_SHARP_));\r\n});})(c,ast_nodes,query_path,k,ks))\r\n,ast_nodes));\r\nvar map__55991__$1 = cljs.core.__destructure_map(map__55991);\r\nvar node = map__55991__$1;\r\nvar component = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__55991__$1,new cljs.core.Keyword(null,\"component\",\"component\",1555936782));\r\nvar children = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__55991__$1,new cljs.core.Keyword(null,\"children\",\"children\",-940561982));\r\nif(cljs.core.seq(ks)){\r\nvar G__56220 = component;\r\nvar G__56221 = children;\r\nvar G__56222 = ks;\r\nc = G__56220;\r\nast_nodes = G__56221;\r\nquery_path = G__56222;\r\ncontinue;\r\n} else {\r\nreturn component;\r\n}\r\n}\r\nbreak;\r\n}\r\n});\r\n/**\r\n * Obtains the normalizing component that is associated with the given query path on the given component.\r\n * \r\n *  For example `(get-subquery-component Person [:person/addresses])` would return the component for\r\n *  the `:person/addresses` join. If state-map is supplied then dynamic query support is possible; otherwise it\r\n *  will be the original static query.\r\n */\r\ncom.fulcrologic.fulcro.raw.components.get_subquery_component = (function com$fulcrologic$fulcro$raw$components$get_subquery_component(var_args){\r\nvar G__55993 = arguments.length;\r\nswitch (G__55993) {\r\ncase 2:\r\nreturn com.fulcrologic.fulcro.raw.components.get_subquery_component.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\r\n\r\nbreak;\r\ncase 3:\r\nreturn com.fulcrologic.fulcro.raw.components.get_subquery_component.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\r\n\r\nbreak;\r\ndefault:\r\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\r\n\r\n}\r\n});\r\n\r\n(com.fulcrologic.fulcro.raw.components.get_subquery_component.cljs$core$IFn$_invoke$arity$2 = (function (component,query_path){\r\nreturn com.fulcrologic.fulcro.raw.components.get_subquery_component.cljs$core$IFn$_invoke$arity$3(component,query_path,cljs.core.PersistentArrayMap.EMPTY);\r\n}));\r\n\r\n(com.fulcrologic.fulcro.raw.components.get_subquery_component.cljs$core$IFn$_invoke$arity$3 = (function (component,query_path,state_map){\r\nvar query = com.fulcrologic.fulcro.raw.components.get_query.cljs$core$IFn$_invoke$arity$2(component,state_map);\r\nvar ast_nodes = new cljs.core.Keyword(null,\"children\",\"children\",-940561982).cljs$core$IFn$_invoke$arity$1(edn_query_language.core.query__GT_ast(query));\r\nreturn get_subquery_component_STAR_(component,ast_nodes,query_path);\r\n}));\r\n\r\n(com.fulcrologic.fulcro.raw.components.get_subquery_component.cljs$lang$maxFixedArity = 3);\r\n\r\n/**\r\n * Uses `fdn/traced-db->tree` to get the props of the component at `ident`, and leverages those optimizations to return\r\n * `prior-props` if they are not stale.\r\n * \r\n * A subsequent call (e.g. on next render frame) of this function with the prior return value (as `prior-props`)\r\n * thus gives you an efficient non-react replacement for `shouldComponentUpdate`, etc.\r\n * \r\n */\r\ncom.fulcrologic.fulcro.raw.components.get_traced_props = (function com$fulcrologic$fulcro$raw$components$get_traced_props(state_map,component,ident,prior_props){\r\nvar query = com.fulcrologic.fulcro.raw.components.get_query.cljs$core$IFn$_invoke$arity$2(component,state_map);\r\nif(cljs.core.truth_(com.fulcrologic.fulcro.algorithms.denormalize.possibly_stale_QMARK_(state_map,prior_props))){\r\nreturn com.fulcrologic.fulcro.algorithms.denormalize.traced_db__GT_tree(state_map,ident,query);\r\n} else {\r\nreturn prior_props;\r\n}\r\n});\r\n/**\r\n * Returns true if there is already data at a component's `ident`\r\n */\r\ncom.fulcrologic.fulcro.raw.components.has_active_state_QMARK_ = (function com$fulcrologic$fulcro$raw$components$has_active_state_QMARK_(state_map,ident){\r\nvar current_value = cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(state_map,ident);\r\nreturn ((cljs.core.map_QMARK_(current_value)) && (cljs.core.seq(current_value)));\r\n});\r\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:doc","Fulcro base component functions. This namespace has no hard dependency on React, and includes all of the core routines\n   found in `components` (that ns just aliases to this one). There is no support in this namespace for creating standard\n   `defsc` components that work in React-based Fulcro, but instead this namespace includes support for building\n   \"normalizing component\" from EQL and sample instances. This gives you all of the general data management power\n   with no ties to React.","~:file","com/fulcrologic/fulcro/raw/components.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",42],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$clojure.spec.alpha","~$cljs.spec.alpha","~$clojure.core.async","~$cljs.core.async","~$clojure.pprint","~$cljs.pprint"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$com.fulcrologic.fulcro.raw.components","~:reader-aliases",["^ "],"~:op","~:ns","~:imports",null,"~:requires",["^ ","~$ah","~$com.fulcrologic.fulcro.algorithms.lookup","~$set","~$clojure.set","~$edn-query-language.core","^S","~$log","~$taoensso.timbre","~$eql","^S","~$com.fulcrologic.fulcro.algorithms.denormalize","^W","~$cljs.core","^X","~$gobj","~$goog.object","~$goog","^[","^Z","^Z","~$com.fulcrologic.fulcro.algorithms.transit","^10","^R","^R","~$util","~$com.fulcrologic.fulcro.algorithms.do-not-use","~$enc","~$taoensso.encore","^P","^P","^U","^U","~$transit","^10","~$str","~$clojure.string","^17","^17","^14","^14","~$fdn","^W","~$clojure.walk","^19","^12","^12"],"~:seen",["^G",["~:require"]],"~:uses",["^ ","~$prewalk","^19"],"~:require-macros",["^ ","^X","^X","^T","^U","^13","^14","^U","^U","^14","^14"],"~:form",["~#list",["~$ns","^I","Fulcro base component functions. This namespace has no hard dependency on React, and includes all of the core routines\n   found in `components` (that ns just aliases to this one). There is no support in this namespace for creating standard\n   `defsc` components that work in React-based Fulcro, but instead this namespace includes support for building\n   \"normalizing component\" from EQL and sample instances. This gives you all of the general data management power\n   with no ties to React.",["^1@",["^1;",["^Z","~:as","^Y"],["^R","^1B","^Q"],["^17","^1B","^16"],["^19","~:refer",["^1="]],["^W","^1B","^18"],["^12","^1B","^11"],["^P","^1B","^O"],["^10","^1B","^15"],["^S","^1B","^V"],["^14","^1B","^13"],["^U","^1B","^T"]]]]],"~:flags",["^ ","^1;",["^G",[]]],"~:js-deps",["^ "],"~:deps",["^[","^X","^Z","^R","^17","^19","^W","^12","^P","^10","^S","^14","^U"]],"^L","^I","~:resource-id",["~:shadow.build.classpath/resource","com/fulcrologic/fulcro/raw/components.cljc"],"~:compiled-at",1676259840676,"^J",["^ ","^O","^P","^Q","^R","^S","^S","^T","^U","^V","^S","^W","^W","^X","^X","^Y","^Z","^[","^[","^Z","^Z","^10","^10","^R","^R","^11","^12","^13","^14","^P","^P","^U","^U","^15","^10","^16","^17","^17","^17","^14","^14","^18","^W","^19","^19","^12","^12"],"~:resource-name","com/fulcrologic/fulcro/raw/components.cljc","~:warnings",[],"~:source","(ns com.fulcrologic.fulcro.raw.components\n  \"Fulcro base component functions. This namespace has no hard dependency on React, and includes all of the core routines\n   found in `components` (that ns just aliases to this one). There is no support in this namespace for creating standard\n   `defsc` components that work in React-based Fulcro, but instead this namespace includes support for building\n   \\\"normalizing component\\\" from EQL and sample instances. This gives you all of the general data management power\n   with no ties to React.\"\n  (:require\n    #?(:cljs [goog.object :as gobj])\n    [clojure.set :as set]\n    [clojure.string :as str]\n    [clojure.walk :refer [prewalk]]\n    [com.fulcrologic.fulcro.algorithms.denormalize :as fdn]\n    [com.fulcrologic.fulcro.algorithms.do-not-use :as util]\n    [com.fulcrologic.fulcro.algorithms.lookup :as ah]\n    [com.fulcrologic.fulcro.algorithms.transit :as transit]\n    [edn-query-language.core :as eql]\n    [taoensso.encore :as enc]\n    [taoensso.timbre :as log])\n  #?(:clj\n     (:import (clojure.lang IDeref))))\n\n(defonce ^:private component-registry (atom {}))\n\n;; Used internally by get-query for resolving dynamic queries (was created to prevent the need for external API change in 3.x)\n(def ^:dynamic *query-state* nil)\n\n(defn isoget-in\n  \"Like get-in, but for js objects, and in CLJC. In clj, it is just get-in. In cljs it is\n  gobj/getValueByKeys.\"\n  ([obj kvs]\n   (isoget-in obj kvs nil))\n  ([obj kvs default]\n   #?(:clj (get-in obj kvs default)\n      :cljs\n           (let [ks (mapv (fn [k] (some-> k name)) kvs)]\n             (or (apply gobj/getValueByKeys obj ks) default)))))\n\n(defn isoget\n  \"Like get, but for js objects, and in CLJC. In clj, it is just `get`. In cljs it is\n  `gobj/get`.\"\n  ([obj k] (isoget obj k nil))\n  ([obj k default]\n   #?(:clj  (get obj k default)\n      :cljs (or (gobj/get obj (some-> k (name))) default))))\n\n(defn register-component!\n  \"Add a component to Fulcro's component registry.  This is used by defsc to ensure that all Fulcro classes\n  that have been compiled (transitively required) will be accessible for lookup by fully-qualified symbol/keyword.\n  Not meant for public use, unless you're creating your own component macro that doesn't directly leverage defsc.\"\n  [k component-class]\n  (swap! component-registry assoc k component-class)\n  component-class)\n\n(defn newer-props\n  \"Returns whichever of the given Fulcro props were most recently generated according to `denormalization-time`. This\n  is part of props 'tunnelling', an optimization to get updated props to instances without going through the root.\"\n  [props-a props-b]\n  (cond\n    (nil? props-a) props-b\n    (nil? props-b) props-a\n    (> (or (fdn/denormalization-time props-a) 2) (or (fdn/denormalization-time props-b) 1)) props-a\n    :else props-b))\n\n\n(defn component-instance?\n  \"Returns true if the argument is a component. A component is defined as a *mounted component*.\n   This function returns false for component classes, and also returns false for the output of a Fulcro component factory.\"\n  #?(:cljs {:tag boolean})\n  [x]\n  (if-not (nil? x)\n    #?(:clj  (true? (:fulcro$isComponent x))\n       :cljs (true? (gobj/get x \"fulcro$isComponent\")))\n    false))\n\n(defn any->app\n  \"Attempt to coerce `x` to an app.  Legal inputs are a fulcro application, a mounted component,\n  or an atom holding any of the above.\"\n  [x]\n  (letfn [(fulcro-app? [x] (and (map? x) (contains? x :com.fulcrologic.fulcro.application/state-atom)))]\n    (cond\n      (component-instance? x) (isoget-in x [:props :fulcro$app])\n      (fulcro-app? x) x\n      #?(:clj  (instance? IDeref x)\n         :cljs (satisfies? IDeref x)) (any->app (deref x)))))\n\n(defn shared\n  \"Return the global shared properties of the root. See :shared and\n   :shared-fn app options. NOTE: Shared props only update on root render and by explicit calls to\n   `app/update-shared!`.\n\n   This version does not rely on the dynamic var *shared*, which is only available from the react-based components ns.\"\n  ([comp-or-app] (shared comp-or-app []))\n  ([comp-or-app k-or-ks]\n   (let [shared (some-> (any->app comp-or-app) :com.fulcrologic.fulcro.application/runtime-atom deref :com.fulcrologic.fulcro.application/shared-props)\n         ks     (cond-> k-or-ks\n                  (not (sequential? k-or-ks)) vector)]\n     (cond-> shared\n       (not (empty? ks)) (get-in ks)))))\n\n(def component?\n  \"Returns true if the argument is a component instance.\n\n   DEPRECATED for terminology clarity. Use `component-instance?` instead.\"\n  component-instance?)\n\n(defn component-class?\n  \"Returns true if the argument is a component class.\"\n  #?(:cljs {:tag boolean})\n  [x]\n  #?(:clj  (boolean (and (map? x) (:com.fulcrologic.fulcro.components/component-class? x)))\n     :cljs (boolean (gobj/containsKey x \"fulcro$class\"))))\n\n(defn component-name\n  \"Returns a string version of the given react component's name. Works on component instances and classes.\"\n  [class]\n  (isoget class :displayName))\n\n(defn class->registry-key\n  \"Returns the registry key for the given component class.\"\n  [class]\n  (isoget class :fulcro$registryKey))\n\n(defn registry-key->class\n  \"Look up the given component in Fulcro's global component registry. Will only be able to find components that have\n  been (transitively) required by your application.\n\n  `classname` can be a fully-qualified keyword or symbol.\"\n  [classname]\n  (cond\n    (keyword? classname) (get @component-registry classname)\n    (symbol? classname) (let [k (keyword (namespace classname) (name classname))]\n                          (get @component-registry k))\n    (and (string? classname)\n      (str/includes? classname \"/\")) (let [[nspc nm] (str/split classname #\"/\")\n                                           k (keyword nspc nm)]\n                                       (get @component-registry k))\n    :otherwise nil))\n\n(declare props)\n\n(defn computed\n  \"Add computed properties to props. This will *replace* any pre-existing computed properties. Computed props are\n  necessary when a parent component wishes to pass callbacks or other data to children that *have a query*. This\n  is not necessary for \\\"stateless\\\" components, though it will work properly for both.\n\n  Computed props are \\\"remembered\\\" so that a targeted update (which can only happen on a component with a query\n  and ident) can use new props from the database without \\\"losing\\\" the computed props that were originally passed\n  from the parent. If you pass things like callbacks through normal props, then targeted updates will seem to \\\"lose\n  track of\\\" them.\n  \"\n  [props computed-map]\n  (when-not (nil? props)\n    (if (vector? props)\n      (cond-> props\n        (not (empty? computed-map)) (vary-meta assoc :fulcro.client.primitives/computed computed-map))\n      (cond-> props\n        (not (empty? computed-map)) (assoc :fulcro.client.primitives/computed computed-map)))))\n\n(defn get-computed\n  \"Return the computed properties on a component or its props. Note that it requires that the normal properties are not nil.\"\n  ([x]\n   (get-computed x []))\n  ([x k-or-ks]\n   (when-not (nil? x)\n     (let [props (cond-> x (component-instance? x) props)\n           ks    (into [:fulcro.client.primitives/computed]\n                   (cond-> k-or-ks\n                     (not (sequential? k-or-ks)) vector))]\n       (if (vector? props)\n         (-> props meta (get-in ks))\n         (get-in props ks))))))\n\n(defn props\n  \"Return a component's props.\"\n  [component]\n  (let [props-from-parent    (isoget-in component [:props :fulcro$value])\n        computed-from-parent (get-computed props-from-parent)\n        props-from-updates   (computed (isoget-in component [:state :fulcro$value]) computed-from-parent)]\n    (newer-props props-from-parent props-from-updates)))\n\n(defn children\n  \"Get the sequence of react children of the given component.\"\n  [component]\n  (let [cs #?(:clj (get-in component [:children])\n              :cljs (gobj/getValueByKeys component \"props\" \"children\"))]\n    (if (or (coll? cs) #?(:cljs (array? cs))) cs [cs])))\n\n(defn component-type\n  \"Returns the component type, regardless of whether the component has been\n   mounted\"\n  [x]\n  #?(:clj  (if (component-class? x) x (:fulcro$class x))\n     :cljs (or (gobj/get x \"type\") (type x))))\n\n(defn get-class\n  \"Returns the react type (component class) of the given React element (instance). Is identity if used on a class.\"\n  [instance]\n  (component-type instance))\n\n(defn component-options\n  \"Returns the map of options that was specified (via `defsc`) for the component class.\"\n  ([instance-or-class & ks]\n   (let [c       (component-type instance-or-class)\n         options (or (isoget instance-or-class :fulcro$options) (isoget c :fulcro$options))]\n     (if (seq options)\n       (get-in options (vec ks))\n       options))))\n\n(defn has-feature? #?(:cljs {:tag boolean}) [component option-key] (contains? (component-options component) option-key))\n(defn has-initial-app-state? #?(:cljs {:tag boolean}) [component] (has-feature? component :initial-state))\n(defn has-ident? #?(:cljs {:tag boolean}) [component] (has-feature? component :ident))\n(defn has-query? #?(:cljs {:tag boolean}) [component] (has-feature? component :query))\n(defn has-pre-merge? #?(:cljs {:tag boolean}) [component] (has-feature? component :pre-merge))\n(defn ident [this props] (when (has-feature? this :ident) ((component-options this :ident) this props)))\n(defn query [this] (when (has-feature? this :query) ((component-options this :query) this)))\n(defn initial-state [clz params] (when (has-feature? clz :initial-state) ((component-options clz :initial-state) params)))\n(defn pre-merge [this data] (when (has-feature? this :pre-merge) ((component-options this :pre-merge) data)))\n\n(defn configure-anonymous-component!\n  \"Make a given `render-fn` (a plain fn) act like a a Fulcro component with the given component options map. Registers the\n  new component in the component-registry. Component options MUST contain :componentName as be a fully-qualified\n  keyword to name the component in the registry.\n\n  component-options *must* include a unique `:componentName` (keyword) that will be used for registering the given\n  function as the faux class in the component registry.\n\n  IMPORTANT: In CLJS this function adds extra things to the mutable js fn. In CLJ, components are just maps, and this\n  side-effect cannot modify it. As such it returns the configured component so you can use it in CLJ.\"\n  [render-fn component-options]\n  (let [k              (:componentName component-options)\n        faux-classname (if k\n                         (str/join \"/\" [(namespace k) (name k)])\n                         \"anonymous\")\n        result #?(:clj {:com.fulcrologic.fulcro.components/component-class? true\n                        :fulcro$options                                     component-options\n                        :fulcro$registryKey                                 k\n                        :displayName                                        faux-classname}\n                  :cljs (gobj/extend render-fn\n                          #js {:fulcro$options         component-options\n                               :displayName            faux-classname\n                               :fulcro$class           render-fn\n                               :type                   render-fn\n                               :cljs$lang$type         true\n                               :cljs$lang$ctorStr      faux-classname\n                               :cljs$lang$ctorPrWriter (fn [_ writer _] (cljs.core/-write writer faux-classname))\n                               :fulcro$registryKey     (:componentName component-options)}))]\n    (when k\n      (register-component! k #?(:cljs render-fn :clj result)))\n    #?(:cljs render-fn :clj result)))\n\n(defn get-initial-state\n  \"Get the declared :initial-state value for a component.\"\n  ([class]\n   (some-> (initial-state class {}) (with-meta {:computed true})))\n  ([class params]\n   (some-> (initial-state class params) (with-meta {:computed true}))))\n\n(defn get-ident\n  \"Get the ident for a mounted component OR using a component class.\n\n  That arity-2 will return the ident using the supplied props map.\n\n  The single-arity version should only be used with a mounted component (e.g. `this` from `render`), and will derive the\n  props that were sent to it most recently.\"\n  ([x]\n   {:pre [(component-instance? x)]}\n   (if-let [m (props x)]\n     (ident x m)\n     (when #?(:clj false :cljs goog.DEBUG)\n       (log/warn \"get-ident was invoked on \" (component-name x) \" with nil props (this could mean it wasn't yet mounted): \" x \"See https://book.fulcrologic.com/#warn-get-ident-with-nil-props\"))))\n  ([class props]\n   (when #?(:clj false :cljs (and goog.DEBUG (not (has-ident? class))))\n     (log/warn \"get-ident called with something that does not implement ident: \" class \"See https://book.fulcrologic.com/#warn-get-ident-invalid-class\"))\n   (if-let [id (ident class props)]\n     (do\n       (when (and #?(:clj false :cljs goog.DEBUG) (not (eql/ident? id)))\n         (log/warn (component-name class) \"get-ident returned invalid ident:\" id \"See https://book.fulcrologic.com/#warn-get-ident-invalid-ident\"))\n       (if (= :com.fulcrologic.fulcro.algorithms.merge/not-found (second id)) [(first id) nil] id))\n     nil)))\n\n(defn is-factory?\n  \"Returns true if the given argument is a component factory.\"\n  [class-or-factory]\n  (and (fn? class-or-factory)\n    (-> class-or-factory meta (contains? :qualifier))))\n\n(defn query-id\n  \"Returns a string ID for the query of the given class with qualifier.\"\n  [class qualifier]\n  (if (nil? class)\n    (when #?(:clj false :cljs goog.DEBUG)\n      (log/error \"Query ID received no class (if you see this warning, it probably means metadata was lost on your query) See https://book.fulcrologic.com/#err-comp-query-id-no-class\" (ex-info \"\" {})))\n    (when-let [classname (component-name class)]\n      (str classname (when qualifier (str \"$\" qualifier))))))\n\n(defn denormalize-query\n  \"Takes a state map that may contain normalized queries and a query ID. Returns the stored query or nil.\"\n  [state-map ID]\n  (let [get-stored-query (fn [id]\n                           (let [{:keys [query component-key]} (get-in state-map [:com.fulcrologic.fulcro.components/queries id])\n                                 component (registry-key->class component-key)]\n                             (when-not component (get-in state-map [:com.fulcrologic.fulcro.components/queries id]))\n                             (some-> query (vary-meta assoc :component component :queryid id))))]\n    (when-let [normalized-query (get-stored-query ID)]\n      (prewalk (fn [ele]\n                 (if-let [q (and (string? ele) (get-stored-query ele))]\n                   q\n                   ele)) normalized-query))))\n\n(defn- get-query-id\n  \"Get the query id that is cached in the component's props.\"\n  [component]\n  (isoget-in component #?(:clj  [:props :fulcro$queryid]\n                          :cljs [:props \"fulcro$queryid\"])))\n\n(defn get-query-by-id [state-map class queryid]\n  (let [query (or (denormalize-query state-map queryid) (query class))]\n    (with-meta query {:component class\n                      :queryid   queryid})))\n\n(defn get-query\n  \"Get the query for the given class or factory. If called without a state map, then you'll get the declared static\n  query of the class. If a state map is supplied, then the dynamically set queries in that state will result in\n  the current dynamically-set query according to that state.\"\n  ([class-or-factory]\n   (if (= \"anonymous\" (component-name class-or-factory))    ; anonymous classes are not in the registry and do not support dyn queries\n     (query class-or-factory)\n     (get-query class-or-factory *query-state*)))\n  ([class-or-factory state-map]\n   (when (nil? class-or-factory)\n     (throw (ex-info \"nil passed to get-query\" {})))\n   (binding [*query-state* state-map]\n     (let [class     (cond\n                       (is-factory? class-or-factory) (-> class-or-factory meta :class)\n                       (component-instance? class-or-factory) (component-type class-or-factory)\n                       :else class-or-factory)\n           ;; Hot code reload. Avoid classes that were cached on metadata using the registry.\n           class     (if #?(:cljs goog.DEBUG :clj false)\n                       (or (-> class class->registry-key registry-key->class) class)\n                       class)\n           qualifier (if (is-factory? class-or-factory)\n                       (-> class-or-factory meta :qualifier)\n                       nil)\n           queryid   (if (component-instance? class-or-factory)\n                       (get-query-id class-or-factory)\n                       (query-id class qualifier))]\n       (when (and class (has-query? class))\n         (get-query-by-id state-map class queryid))))))\n\n(def ^:dynamic *after-render*\n  \"Dynamic var that affects the activation of transactions run via `transact!`. Defaults to false. When set to true\n   this option prevents a transaction from running until after the next render is complete. This typically should not be set\n   to true in scenarios where you are unsure if a render will occur, since that could make the transaction appear to\n   \\\"hang\\\".\"\n  false)\n\n(defn transact!\n  \"Submit a transaction for processing.\n\n  The underlying transaction system is pluggable, but the *default* supported options are:\n\n  - `:optimistic?` - boolean. Should the transaction be processed optimistically?\n  - `:ref` - ident. The ident of the component used to submit this transaction. This is set automatically if you use a component to call this function.\n  - `:component` - React element. Set automatically if you call this function using a component.\n  - `:refresh` - Vector containing idents (of components) and keywords (of props). Things that have changed and should be re-rendered\n    on screen. Only necessary when the underlying rendering algorithm won't auto-detect, such as when UI is derived from the\n    state of other components or outside of the directly queried props. Interpretation depends on the renderer selected:\n    The ident-optimized render treats these as \\\"extras\\\".\n  - `:only-refresh` - Vector of idents/keywords.  If the underlying rendering configured algorithm supports it: The\n    components using these are the *only* things that will be refreshed in the UI.\n    This can be used to avoid the overhead of looking for stale data when you know exactly what\n    you want to refresh on screen as an extra optimization. Idents are *not* checked against queries.\n  - `:abort-id` - An ID (you make up) that makes it possible (if the plugins you're using support it) to cancel\n    the network portion of the transaction (assuming it has not already completed).\n  - `:compressible?` - boolean. Check compressible-transact! docs.\n  - `:synchronous?` - boolean. When turned on the transaction will run immediately on the calling thread. If run against\n  a component then the props will be immediately tunneled back to the calling component, allowing for React (raw) input\n  event handlers to behave as described in standard React Forms docs (uses setState behind the scenes). Any remote operations\n  will still be queued as normal. Calling `transact!!` is a shorthand for this option. WARNING: ONLY the given component will\n  be refreshed in the UI. If you have dependent data elsewhere in the UI you must either use `transact!` or schedule\n  your own global render using `app/schedule-render!`.\n  - `:after-render?` - Wait until the next render completes before allowing this transaction to run. This can be used\n  when calling `transact!` from *within* another mutation to ensure that the effects of the current mutation finish\n  before this transaction takes control of the CPU. This option defaults to `false`, but `defmutation` causes it to\n  be set to true for any transactions run within mutation action sections. You can affect the default for this value\n  in a dynamic scope by binding `*after-render*` to true\n  - `:parallel?` - Boolean. If true, the mutation(s) in the transaction will NOT go into a network queue, nor\n    will it block later mutations or queries.\n\n  You may add any additional keys to the option map (namespaced is ideal), and any value is legal in the options\n  map, including functions. The options will appear in the `env` of all mutations run in the transaction as\n  `:com.fulcrologic.fulcro.algorithms.tx-processing/options`. This is the preferred way of passing things like\n  lambdas (if you wanted something like a callback) to mutations. Note that mutation symbols are perfectly legal\n  as mutation *arguments*, so chaining mutations can already be done via the normal transaction mechanism, and\n  callbacks, while sometimes necessary/useful, should be limited to usages where there is no other clean way\n  to accomplish the goal.\n\n\n  NOTE: This function calls the application's `tx!` function (which is configurable). Fulcro 2 'follow-on reads' are\n  supported by the default version and are added to the `:refresh` entries. Your choice of rendering algorithm will\n  influence their necessity.\n\n  Returns the transaction ID of the submitted transaction.\n  \"\n  ([app-or-component tx options]\n   (when-let [app (any->app app-or-component)]\n     (let [tx!     (ah/app-algorithm app :tx!)\n           options (cond-> options\n                     (and (not (contains? options :after-render?)) (true? *after-render*)) (assoc :after-render? true)\n                     (and (nil? (:ref options)) (has-ident? app-or-component)) (assoc :ref (get-ident app-or-component))\n                     (and (nil? (:component options)) (component-instance? app-or-component)) (assoc :component app-or-component))]\n       (tx! app tx options))))\n  ([app-or-comp tx]\n   (transact! app-or-comp tx {})))\n\n(defn transact!!\n  \"Shorthand for exactly `(transact! component tx (merge options {:synchronous? true}))`.\n\n  Runs a synchronous transaction, which is an optimized mode where the optimistic behaviors of the mutations in the\n  transaction run on the calling thread, and new props are immediately made available to the calling component via\n  \\\"props tunneling\\\" (a behind-the-scenes mechanism using js/setState).\n\n  This mode is meant to be used in form input event handlers, since React is designed to only work properly with\n  raw DOM inputs via component-local state. This prevents things like the cursor jumping to the end of inputs\n  unexpectedly.\n\n  WARNING: Using an `app` instead of a component in synchronous transactions makes no sense. You must pass a component\n  that has an ident.\n\n  If you're using this, you can also set the compiler option:\n\n  ```\n  :compiler-options {:external-config {:fulcro     {:wrap-inputs? false}}}\n  ```\n\n  to turn off Fulcro DOM's generation of wrapped inputs (which try to solve this problem in a less-effective way).\n\n  WARNING: Synchronous rendering does *not* refresh the full UI, only the component.\n  \"\n  ([component tx] (transact!! component tx {}))\n  ([component tx options]\n   (transact! component tx (merge options {:synchronous? true}))))\n\n(declare normalize-query)\n\n(defn link-element\n  \"Part of internal implementation of dynamic queries.\"\n  [element]\n  (prewalk (fn link-element-helper [ele]\n             (let [{:keys [queryid]} (meta ele)]\n               (if queryid queryid ele))) element))\n\n(defn normalize-query-elements\n  \"Part of internal implementation of dynamic queries.\n\n  Determines if there are query elements in the `query` that need to be normalized. If so, it does so.\n\n  Returns the new state map containing potentially-updated normalized queries.\"\n  [state-map query]\n  (reduce\n    (fn normalize-query-elements-reducer [state ele]\n      (try\n        (let [parameterized? (seq? ele)\n              raw-element    (if parameterized? (first ele) ele)]\n          (cond\n            (util/union? raw-element) (let [union-alternates            (first (vals raw-element))\n                                            union-meta                  (-> union-alternates meta)\n                                            normalized-union-alternates (-> (into {} (map link-element union-alternates))\n                                                                          (with-meta union-meta))\n                                            union-query-id              (-> union-alternates meta :queryid)\n                                            union-component-key         (-> union-alternates meta :component class->registry-key)]\n                                        (assert union-query-id \"Union query has an ID. Did you use extended get-query?\")\n                                        (util/deep-merge\n                                          {:com.fulcrologic.fulcro.components/queries {union-query-id {:query         normalized-union-alternates\n                                                                                                       :component-key union-component-key\n                                                                                                       :id            union-query-id}}}\n                                          (reduce (fn normalize-union-reducer [s [_ subquery]]\n                                                    (normalize-query s subquery)) state union-alternates)))\n            (and\n              (util/join? raw-element)\n              (util/recursion? (util/join-value raw-element))) state\n            (util/join? raw-element) (normalize-query state (util/join-value raw-element))\n            :else state))\n        (catch #?(:clj Exception :cljs :default) e\n          (when #?(:clj false :cljs goog.DEBUG)\n            (log/error e \"Query normalization failed. Perhaps you tried to set a query with a syntax error? See https://book.fulcrologic.com/#err-comp-q-norm-failed\")))))\n    state-map query))\n\n(defn link-query\n  \"Part of dyn query implementation. Find all of the elements (only at the top level) of the given query and replace them\n  with their query ID.\"\n  [query]\n  (let [metadata (meta query)]\n    (if (map? query)\n      (with-meta\n        (enc/map-vals (fn [ele] (let [{:keys [queryid]} (meta ele)] queryid)) query)\n        metadata)\n      (with-meta\n        (mapv link-element query)\n        metadata))))\n\n(defn normalize-query\n  \"Given a state map and a query, returns a state map with the query normalized into the database. Query fragments\n  that already appear in the state will not be added.  Part of dynamic query implementation.\"\n  [state-map query]\n  (let [queryid       (some-> query meta :queryid)\n        component-key (class->registry-key (some-> query meta :component))\n        query'        (vary-meta query dissoc :queryid :component)\n        new-state     (normalize-query-elements state-map query')\n        new-state     (if (nil? (:com.fulcrologic.fulcro.components/queries new-state))\n                        (assoc new-state :com.fulcrologic.fulcro.components/queries {})\n                        new-state)\n        top-query     (link-query query')]\n    (if (and queryid component-key)\n      (util/deep-merge {:com.fulcrologic.fulcro.components/queries {queryid {:query top-query :id queryid :component-key component-key}}} new-state)\n      new-state)))\n\n(defn set-query*\n  \"Put a query in app state.\n\n  NOTE: Indexes must be rebuilt after setting a query, so this function should primarily be used to build\n  up an initial app state.\"\n  [state-map class-or-factory {:keys [query] :as args}]\n  (let [queryid   (cond\n                    (nil? class-or-factory)\n                    nil\n\n                    (some-> class-or-factory meta (contains? :queryid))\n                    (some-> class-or-factory meta :queryid)\n\n                    :otherwise (query-id class-or-factory nil))\n        component (or (-> class-or-factory meta :class) class-or-factory)\n        setq*     (fn [state]\n                    (normalize-query\n                      (update state :com.fulcrologic.fulcro.components/queries dissoc queryid)\n                      (vary-meta query assoc :queryid queryid :component component)))]\n    (if (string? queryid)\n      (cond-> state-map\n        (contains? args :query) (setq*))\n      (do\n        (when #?(:clj false :cljs goog.DEBUG)\n          (log/error \"Set query failed. There was no query ID. Use a class or factory for the second argument. See https://book.fulcrologic.com/#err-comp-set-q-failed\"))\n        state-map))))\n\n(defn set-query!\n  \"Public API for setting a dynamic query on a component. This function alters the query and rebuilds internal indexes.\n\n  * `x` : is anything that any->app accepts.\n  * `class-or-factory` : A component class or factory for that class (if using query qualifiers)\n  * `opts` : A map with `query` and optionally `params` (substitutions on queries)\n  \"\n  [x class-or-factory {:keys [query params] :as opts}]\n  (let [app        (any->app x)\n        state-atom (:com.fulcrologic.fulcro.application/state-atom app)\n        queryid    (cond\n                     (string? class-or-factory) class-or-factory\n                     (some-> class-or-factory meta (contains? :queryid)) (some-> class-or-factory meta :queryid)\n                     :otherwise (query-id class-or-factory nil))]\n    (if (and (string? queryid) (or query params))\n      (let [index-root!      (ah/app-algorithm app :index-root!)\n            schedule-render! (ah/app-algorithm app :schedule-render!)]\n        (swap! state-atom set-query* class-or-factory {:queryid queryid :query query :params params})\n        (when index-root! (index-root! app))\n        (util/dev-check-query (get-query class-or-factory @state-atom) component-name)\n        (when schedule-render! (schedule-render! app {:force-root? true})))\n      (when #?(:clj false :cljs goog.DEBUG)\n        (log/error \"Unable to set query. Invalid arguments. See https://book.fulcrologic.com/#err-comp-unable-set-q\")))))\n\n(letfn [(--set-query! [app class-or-factory {:keys [query] :as params}]\n          (let [state-atom (:com.fulcrologic.fulcro.application/state-atom app)\n                queryid    (cond\n                             (string? class-or-factory) class-or-factory\n                             (some-> class-or-factory meta (contains? :queryid)) (some-> class-or-factory meta :queryid)\n                             :otherwise (query-id class-or-factory nil))]\n            (if (and (string? queryid) (or query params))\n              (swap! state-atom set-query* class-or-factory {:queryid queryid :query query :params params})\n              (when #?(:clj false :cljs goog.DEBUG)\n                (log/error \"Unable to set query. Invalid arguments. See https://book.fulcrologic.com/#err-comp-unable-set-q\")))))]\n  (defn refresh-dynamic-queries!\n    \"Refresh the current dynamic queries in app state to reflect any updates to the static queries of the components.\n\n     This can be used at development time to update queries that have changed but that hot code reload does not\n     reflect (because there is a current saved query in state). This is *not* always what you want, since a component\n     may have a custom query whose prop-level elements are set to a particular thing on purpose.\n\n     An component that has `:preserve-dynamic-query? true` in its component options will be ignored by\n     this function.\"\n    ([app-ish cls force?]\n     (let [app (any->app app-ish)]\n       (let [preserve? (and (not force?) (component-options cls :preserve-dynamic-query?))]\n         (when-not preserve?\n           (set-query! app cls {:query (get-query cls {})})))))\n    ([app-ish]\n     (let [{:com.fulcrologic.fulcro.application/keys [state-atom] :as app} (any->app app-ish)\n           state-map  @state-atom\n           queries    (get state-map :com.fulcrologic.fulcro.components/queries)\n           classnames (keys queries)]\n       (doseq [nm classnames\n               :let [cls       (registry-key->class nm)\n                     preserve? (component-options cls :preserve-dynamic-query?)]]\n         (when-not preserve?\n           (--set-query! app cls {:query (get-query cls {})})))\n       (let [index-root!      (ah/app-algorithm app :index-root!)\n             schedule-render! (ah/app-algorithm app :schedule-render!)]\n         (when index-root! (index-root! app))\n         (when schedule-render! (schedule-render! app {:force-root? true})))))))\n\n(defn compressible-transact!\n  \"Identical to `transact!` with `:compressible? true` option. This means that if more than one\n  adjacent history transition edge is compressible, only the more recent of the sequence of them is kept. This\n  is useful for things like form input fields, where storing every keystoke in history is undesirable. This\n  also compress the transactions in Fulcro Inspect.\n\n  NOTE: history events that trigger remote interactions are not compressible, since they may be needed for\n  automatic network error recovery handling.\"\n  ([app-ish tx]\n   (transact! app-ish tx {:compressible? true}))\n  ([app-ish ref tx]\n   (transact! app-ish tx {:compressible? true\n                          :ref           ref})))\n\n(defn external-config\n  \"Get any custom external configuration that was added to the app at creation-time.\"\n  [app-ish k]\n  (some-> app-ish (any->app) (get-in [:com.fulcrologic.fulcro.application/config :external-config k])))\n\n(defn check-component-registry!\n  \"Walks the complete list of components in the component registry and looks for problems. Used during dev mode to\n   detect common problems that can cause runtime misbehavior.\"\n  []\n  (when #?(:clj false :cljs goog.DEBUG)\n    (let [components (vals @component-registry)]\n      (doseq [c components]\n        (let [ident           (and (has-ident? c) (get-ident c {}))\n              query           (get-query c)\n              constant-ident? (and (vector? ident) (second ident))]\n          (when (and constant-ident?\n                  (not (has-initial-app-state? c))\n                  (not= \"com.fulcrologic.fulcro.algorithms.form-state/FormConfig\" (component-name c)))\n            (log/warn \"Component\" (component-name c) \"has a constant ident (id in the ident is not nil for empty props),\"\n              \"but it has no initial state. This could cause this component's props to\"\n              \"appear as nil unless you have a mutation or load that connects it to the graph after application startup. See https://book.fulcrologic.com/#warn-constant-ident-no-initial-state\"))\n          (when-let [initial-state (and (has-initial-app-state? c) (get-initial-state c {}))]\n            (when (map? initial-state)\n              (let [initial-keys (set (keys initial-state))\n                    join-map     (into {}\n                                   (comp\n                                     (filter #(and (= :join (:type %)) (keyword (:key %))))\n                                     (map (fn [{:keys [key component]}] [key component])))\n                                   (some->> query (eql/query->ast) :children))\n                    join-keys    (set (keys join-map))]\n                (when-let [missing-initial-keys (seq (set/difference join-keys initial-keys))]\n                  (doseq [k missing-initial-keys\n                          :let [target (get join-map k)]]\n                    (when (and (has-initial-app-state? target)\n                            (not= (component-name target) \"com.fulcrologic.fulcro.algorithms.form-state/FormConfig\"))\n                      (log/warn \"Component\" (component-name c) \"does not INCLUDE initial state for\" (component-name target)\n                        \"at join key\" k \"; however, \" (component-name target) \"HAS initial state. This probably means your initial state graph is incomplete\"\n                        \"and props on\" (component-name target) \"will be nil. See https://book.fulcrologic.com/#warn-initial-state-incomplete\"))))))))))))\n\n(defn id-key\n  \"Returns the keyword of the most likely ID attribute in the given props (the first one with the `name` \\\"id\\\").\n  Returns nil if there isn't one. This is useful when trying to derive an ident from a sample tree of data, for example.\"\n  [props]\n  (first (filter #(= \"id\" (name %)) (keys props))))\n\n(defn ast-id-key\n  \"Returns the first child from a list of EQL AST nodes that looks like an entity ID key.\"\n  [children]\n  (:key\n    (first\n      (filter (fn [{:keys [type key]}]\n                (and\n                  (keyword? key)\n                  (= :prop type)\n                  (= \"id\" (name key))))\n        children))))\n\n(defn- normalize* [{:keys [children type] :as original-node} {:keys [componentName] :as top-component-options}]\n  (let [detected-id-key (ast-id-key children)\n        real-id-key     (or detected-id-key)\n        component       (fn [& args])\n        new-children    (mapv\n                          (fn [{:keys [type] :as node}]\n                            (if (and (= type :join) (not (:component node)))\n                              (normalize* node {})\n                              node))\n                          children)\n        qatom           (atom nil)\n        component       (configure-anonymous-component! component\n                          (cond-> (with-meta\n                                    (merge\n                                      {:initial-state (fn [& args] {})}\n                                      top-component-options\n                                      {:query  (fn [& args] @qatom)\n                                       \"props\" {\"fulcro$queryid\" :anonymous}})\n                                    {:query-id :anonymous})\n\n                            componentName (assoc :componentName componentName)\n\n                            (and real-id-key\n                              (not (contains? top-component-options :ident)))\n                            (assoc :ident (fn [_ props] [real-id-key (get props real-id-key)]))))\n        updated-node    (assoc original-node :children new-children :component component)\n        query           (if (= type :join)\n                          (eql/ast->query (assoc updated-node :type :root))\n                          (eql/ast->query updated-node))\n        _               (reset! qatom query)]\n    updated-node))\n\n(defn nc\n  \"Create an anonymous normalizing query component. By default the normalization will be auto-detected based on there being a prop at each\n   entity level that has (any) namespace, and a name of `id`. For example:\n\n   ```\n   [:list/id :list/name {:list/items [:item/id :item/complete? :item/label]}]\n   ```\n\n   will create a normalizing query that expects the top-level values to be normalized by `:list/id` and the nested\n   items to be normalized by `:item/id`. If there is more than one ID in your props, make sure the *first* one is\n   the one to use for normalization.\n\n   The `top-component-options` becomes the options map of the component.\n\n   You can include :componentName to push the resulting anonymous component definition into the component registry, which\n   is needed by some parts of Fulcro, like UISM.\n\n   NOTE: `nc` is recursive, and *does* compose if you want to name the components at various levels. It can be used with queries from\n   other defsc components:\n\n   ```\n   (def query (nc [:user/id\n                   :user/name\n                   ;; Generate an anonymous component that is available in the registry under ::Session\n                   {:user/session-details (nc [:session/id :session/last-login] {:componentName ::Session})}\n                   ;; Use a defsc query as the source\n                   {:user/settings (comp/get-query Settings)}\n                   ;; Autogenerates an anonymous address query component that has no name\n                   {:user/address [:address/id :address/street]}]))\n   ```\n   \"\n  ([query] (nc query {}))\n  ([query {:keys [componentName] :as top-component-options}]\n   (let [ast (eql/query->ast query)]\n     (:component (normalize* ast top-component-options)))))\n\n(defn entity->component\n  \"Creates a normalizing component from an entity tree. Every sub-element of the tree provided will generate an anonymous\n   normalizing component if that element has an ID field. For to-many relations only the first item is used for query/ident\n   generation.\n\n   The returned anonymous component will have initial state that matches the provided entity data tree.\n\n   This means you can use a sample tree to generate both the initial state for a subtree of your app and the components\n   necessary to do I/O on that tree.\n\n   This kind of component will *not* be registered in the component registry unless you pass a :componentName\n   via the top-level-options. A registry entry is necessary for things that\n   require the registry, such as dynamic queries and UI state machines).\n   \"\n  ([entity-data-tree]\n   (entity->component entity-data-tree {}))\n  ([entity-data-tree top-level-options]\n   (let [{:keys [joins initial-state attrs]} (reduce-kv\n                                               (fn [result k v]\n                                                 (cond\n                                                   (and (vector? v) (every? map? v))\n                                                   (let [c (entity->component (first v))]\n                                                     (-> result\n                                                       (update :initial-state assoc k v)\n                                                       (update :joins assoc k (query c))))\n                                                   (map? v) (let [c (entity->component v)]\n                                                              (-> result\n                                                                (update :initial-state assoc k v)\n                                                                (update :joins assoc k (query c))))\n                                                   :else (-> result\n                                                           (update :initial-state assoc k v)\n                                                           (update :attrs conj k))))\n                                               {:attrs         #{}\n                                                :initial-state {}\n                                                :joins         {}}\n                                               entity-data-tree)\n         query (into (vec attrs)\n                 (map (fn build-subquery* [[join-key subquery]] {join-key subquery}))\n                 joins)]\n     (nc query (merge\n                 {:initial-state (fn [& args] initial-state)}\n                 top-level-options)))))\n\n(letfn [(get-subquery-component*\n          [c ast-nodes query-path]\n          (if (empty? ast-nodes)\n            c\n            (let [k  (first query-path)\n                  ks (rest query-path)\n                  {:keys [component children] :as node} (first (filter #(= k (:key %)) ast-nodes))]\n              (if (seq ks)\n                (recur component children ks)\n                component))))]\n\n  (defn get-subquery-component\n    \"Obtains the normalizing component that is associated with the given query path on the given component.\n\n    For example `(get-subquery-component Person [:person/addresses])` would return the component for\n    the `:person/addresses` join. If state-map is supplied then dynamic query support is possible; otherwise it\n    will be the original static query.\"\n    ([component query-path]\n     (get-subquery-component component query-path {}))\n    ([component query-path state-map]\n     (let [query     (get-query component state-map)\n           ast-nodes (-> query eql/query->ast :children)]\n       (get-subquery-component* component ast-nodes query-path)))))\n\n(defn get-traced-props\n  \"Uses `fdn/traced-db->tree` to get the props of the component at `ident`, and leverages those optimizations to return\n   `prior-props` if they are not stale.\n\n   A subsequent call (e.g. on next render frame) of this function with the prior return value (as `prior-props`)\n   thus gives you an efficient non-react replacement for `shouldComponentUpdate`, etc.\n   \"\n  [state-map component ident prior-props]\n  (let [query (get-query component state-map)]\n    (if (fdn/possibly-stale? state-map prior-props)\n      (fdn/traced-db->tree state-map ident query)\n      prior-props)))\n\n(defn has-active-state?\n  \"Returns true if there is already data at a component's `ident`\"\n  [state-map ident]\n  (let [current-value (get-in state-map ident)]\n    (and (map? current-value) (seq current-value))))\n\n(comment\n  (def Person (entity->component\n                {:person/id        1\n                 :ui/checked?      true\n                 :person/name      \"Bob\"\n                 :person/addresses [{:ui/autocomplete \"\"\n                                     :address/id      11\n                                     :address/street  \"111 Main St\"}\n                                    {:ui/autocomplete \"\"\n                                     :address/id      12\n                                     :address/street  \"222 Main St\"}]}\n                {:componentName ::MyThing}))\n\n  (def Address (get-subquery-component Person [:person/addresses]))\n\n  (get-ident Address {:address/id 99})\n  )\n","~:reader-features",["^G",["~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings","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","names",["js/com","js/com.fulcrologic","js/com.fulcrologic.fulcro","js/com.fulcrologic.fulcro.raw","js/com.fulcrologic.fulcro.raw.components","js/com.fulcrologic.fulcro.raw.components.component-registry","com.fulcrologic.fulcro.raw.components/component-registry","cljs.core.atom","com.fulcrologic.fulcro.raw.components/*query-state*","var_args","G__55675","com.fulcrologic.fulcro.raw.components/isoget-in","js/Error","obj","kvs","com.fulcrologic.fulcro.raw.components.isoget_in","default","ks","cljs.core.mapv","k","G__55677","cljs.core/name","or__4253__auto__","cljs.core.apply","com.fulcrologic.fulcro.raw.components.goog$module$goog$object.getValueByKeys","G__55679","com.fulcrologic.fulcro.raw.components/isoget","com.fulcrologic.fulcro.raw.components.isoget","com.fulcrologic.fulcro.raw.components.goog$module$goog$object.get","G__55681","com.fulcrologic.fulcro.raw.components/register-component!","component-class","cljs.core.swap_BANG_","cljs.core/assoc","com.fulcrologic.fulcro.raw.components/newer-props","props-a","props-b","com.fulcrologic.fulcro.algorithms.denormalize/denormalization-time","com.fulcrologic.fulcro.raw.components/component-instance?","x","com.fulcrologic.fulcro.raw.components/any->app","cljs.core/map?","cljs.core/contains?","fulcro-app?","cljs.core/PROTOCOL_SENTINEL","cljs.core/native-satisfies?","cljs.core/IDeref","G__55692","cljs.core/deref","G__55694","com.fulcrologic.fulcro.raw.components/shared","comp-or-app","com.fulcrologic.fulcro.raw.components.shared","k-or-ks","shared","G__55695","G__55696","cljs.core/PersistentVector","cljs.core/sequential?","G__55699","cljs.core/empty?","cljs.core.get_in","com.fulcrologic.fulcro.raw.components/component?","com.fulcrologic.fulcro.raw.components/component-class?","cljs.core/boolean","com.fulcrologic.fulcro.raw.components.goog$module$goog$object.containsKey","com.fulcrologic.fulcro.raw.components/component-name","class","com.fulcrologic.fulcro.raw.components/class->registry-key","com.fulcrologic.fulcro.raw.components/registry-key->class","classname","cljs.core/Keyword","cljs.core.get","cljs.core/Symbol","cljs.core.keyword","cljs.core/namespace","clojure.string/includes?","vec__55729","cljs.core.nth","nspc","nm","clojure.string.split","com.fulcrologic.fulcro.raw.components/computed","props","computed-map","cljs.core/vector?","G__55733","cljs.core.vary_meta","G__55734","cljs.core.assoc","G__55739","com.fulcrologic.fulcro.raw.components/get-computed","com.fulcrologic.fulcro.raw.components.get_computed","G__55744","com.fulcrologic.fulcro.raw.components/props","cljs.core.into","G__55745","cljs.core/meta","component","props-from-parent","computed-from-parent","props-from-updates","com.fulcrologic.fulcro.raw.components/children","cs","cljs.core/coll?","cljs.core/array?","com.fulcrologic.fulcro.raw.components/component-type","cljs.core/type","com.fulcrologic.fulcro.raw.components/get-class","instance","args__4870__auto__","len__4864__auto__","i__4865__auto__","argseq__4871__auto__","cljs.core/IndexedSeq","com.fulcrologic.fulcro.raw.components/component-options","seq55754","G__55755","cljs.core/first","cljs.core/next","self__4851__auto__","instance-or-class","c","options","cljs.core/seq","cljs.core/vec","com.fulcrologic.fulcro.raw.components/has-feature?","option-key","com.fulcrologic.fulcro.raw.components/has-initial-app-state?","com.fulcrologic.fulcro.raw.components/has-ident?","com.fulcrologic.fulcro.raw.components/has-query?","com.fulcrologic.fulcro.raw.components/has-pre-merge?","com.fulcrologic.fulcro.raw.components/ident","this","fexpr__55761","com.fulcrologic.fulcro.raw.components.component_options","com.fulcrologic.fulcro.raw.components/query","fexpr__55762","com.fulcrologic.fulcro.raw.components/initial-state","clz","params","fexpr__55764","com.fulcrologic.fulcro.raw.components/pre-merge","data","fexpr__55765","com.fulcrologic.fulcro.raw.components/configure-anonymous-component!","render-fn","component-options","faux-classname","clojure.string.join","result","com.fulcrologic.fulcro.raw.components.goog$module$goog$object.extend","_","writer","cljs.core/-write","G__55774","com.fulcrologic.fulcro.raw.components/get-initial-state","G__55775","cljs.core/with-meta","G__55776","G__55778","com.fulcrologic.fulcro.raw.components/get-ident","temp__5751__auto__","m","js/goog.DEBUG","taoensso.timbre._log_BANG_","taoensso.timbre/*config*","cljs.core/Delay","and__4251__auto__","id","edn-query-language.core/ident?","cljs.core._EQ_","cljs.core/second","com.fulcrologic.fulcro.raw.components/is-factory?","class-or-factory","cljs.core/fn?","com.fulcrologic.fulcro.raw.components/query-id","qualifier","cljs.core.ex_info","temp__5753__auto__","com.fulcrologic.fulcro.raw.components/denormalize-query","state-map","ID","get-stored-query","map__55791","cljs.core/--destructure-map","query","component-key","G__55792","normalized-query","clojure.walk/prewalk","ele","q","com.fulcrologic.fulcro.raw.components/get-query-id","com.fulcrologic.fulcro.raw.components/get-query-by-id","queryid","G__55799","com.fulcrologic.fulcro.raw.components/get-query","com.fulcrologic.fulcro.raw.components.get_query","*query-state*-orig-val__55805","*query-state*-temp-val__55806","com.fulcrologic.fulcro.raw.components/*after-render*","G__55812","com.fulcrologic.fulcro.raw.components/transact!","app-or-component","tx","app","tx!","com.fulcrologic.fulcro.algorithms.lookup/app-algorithm","G__55814","com.fulcrologic.fulcro.raw.components.get_ident","app-or-comp","com.fulcrologic.fulcro.raw.components.transact_BANG_","G__55816","com.fulcrologic.fulcro.raw.components/transact!!","com.fulcrologic.fulcro.raw.components.transact_BANG__BANG_","cljs.core.merge","com.fulcrologic.fulcro.raw.components/link-element","element","map__55818","com.fulcrologic.fulcro.raw.components/normalize-query-elements","cljs.core.reduce","state","e55819","parameterized?","cljs.core/seq?","raw-element","com.fulcrologic.fulcro.algorithms.do-not-use/union?","union-alternates","cljs.core/vals","union-meta","normalized-union-alternates","cljs.core.map","union-query-id","union-component-key","com.fulcrologic.fulcro.algorithms.do_not_use.deep_merge","p__55821","vec__55822","s","subquery","com.fulcrologic.fulcro.raw.components/normalize-query","com.fulcrologic.fulcro.algorithms.do-not-use/join?","com.fulcrologic.fulcro.algorithms.do-not-use/recursion?","com.fulcrologic.fulcro.algorithms.do-not-use/join-value","G__55825","G__55826","e","com.fulcrologic.fulcro.raw.components/link-query","metadata","taoensso.encore/map-vals","map__55830","G__55834","G__55837","query'","cljs.core/dissoc","new-state","top-query","p__55840","map__55841","com.fulcrologic.fulcro.raw.components/set-query*","args","G__55842","G__55843","setq*","cljs.core.update","G__55844","p__55858","map__55863","com.fulcrologic.fulcro.raw.components/set-query!","opts","state-atom","G__55867","G__55876","index-root!","schedule-render!","com.fulcrologic.fulcro.algorithms.do-not-use/dev-check-query","G__55887","G__55888","p__55894","map__55895","G__55896","G__55897","G__55901","com.fulcrologic.fulcro.raw.components/refresh-dynamic-queries!","app-ish","cls","force?","preserve?","cljs.core/not","map__55902","queries","classnames","cljs.core/keys","seq__55903","chunk__55905","count__55906","i__55907","cljs.core/chunked-seq?","c__4679__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","--set-query!","G__55910","G__55911","G__55913","com.fulcrologic.fulcro.raw.components/compressible-transact!","ref","com.fulcrologic.fulcro.raw.components/external-config","G__55915","com.fulcrologic.fulcro.raw.components/check-component-registry!","components","seq__55921","chunk__55922","count__55923","i__55924","ident","constant-ident?","cljs.core.not_EQ_","initial-state","com.fulcrologic.fulcro.raw.components.get_initial_state","initial-keys","cljs.core/set","join-map","cljs.core.comp","p1__55917#","cljs.core.filter","p__55948","map__55949","p__55957","map__55958","key","G__55950","G__55959","edn-query-language.core/query->ast","join-keys","missing-initial-keys","clojure.set.difference","seq__55951","chunk__55953","count__55954","i__55955","seq__55960","chunk__55962","count__55963","i__55964","target","com.fulcrologic.fulcro.raw.components/id-key","p1__55966#","com.fulcrologic.fulcro.raw.components/ast-id-key","children","p__55967","map__55968","type","p__55969","p__55970","map__55971","map__55972","com.fulcrologic.fulcro.raw.components/normalize*","original-node","componentName","top-component-options","detected-id-key","real-id-key","new-children","p__55973","map__55974","node","G__55975","G__55976","qatom","G__55977","updated-node","edn-query-language.core/ast->query","cljs.core/reset!","G__55979","com.fulcrologic.fulcro.raw.components/nc","p__55980","map__55981","com.fulcrologic.fulcro.raw.components.nc","ast","G__55983","com.fulcrologic.fulcro.raw.components/entity->component","entity-data-tree","com.fulcrologic.fulcro.raw.components.entity__GT_component","top-level-options","map__55984","joins","attrs","cljs.core/reduce-kv","v","cljs.core/every?","cljs.core/conj","p__55985","vec__55986","join-key","ast-nodes","query-path","map__55991","cljs.core/rest","p1__55989#","G__55993","com.fulcrologic.fulcro.raw.components/get-subquery-component","com.fulcrologic.fulcro.raw.components.get_subquery_component","get-subquery-component*","com.fulcrologic.fulcro.raw.components/get-traced-props","prior-props","com.fulcrologic.fulcro.algorithms.denormalize/possibly-stale?","com.fulcrologic.fulcro.algorithms.denormalize/traced-db->tree","com.fulcrologic.fulcro.raw.components/has-active-state?","current-value"]],"~:used-vars",["^G",["~$cljs.core/array?","~$cljs.core/--destructure-map","~$clojure.string/join","~$cljs.core/PROTOCOL_SENTINEL","~$cljs.core/comp","~$cljs.core/rest","~$cljs.core/keyword","~$com.fulcrologic.fulcro.raw.components/register-component!","~$com.fulcrologic.fulcro.algorithms.do-not-use/dev-check-query","~$com.fulcrologic.fulcro.raw.components/set-query!","~$com.fulcrologic.fulcro.raw.components/transact!!","~$com.fulcrologic.fulcro.raw.components/id-key","~$cljs.core/sequential?","~$com.fulcrologic.fulcro.raw.components/registry-key->class","~$com.fulcrologic.fulcro.raw.components/ast-id-key","~$com.fulcrologic.fulcro.raw.components/check-component-registry!","~$com.fulcrologic.fulcro.raw.components/has-active-state?","~$com.fulcrologic.fulcro.raw.components/pre-merge","~$com.fulcrologic.fulcro.raw.components/component-class?","~$edn-query-language.core/query->ast","~$com.fulcrologic.fulcro.algorithms.do-not-use/join?","~$com.fulcrologic.fulcro.raw.components/get-ident","~$clojure.string/split","~$com.fulcrologic.fulcro.raw.components/computed","~$cljs.core/vector?","~$cljs.core/filter","~$cljs.core/=","~$cljs.core/keys","~$com.fulcrologic.fulcro.raw.components/*after-render*","~$com.fulcrologic.fulcro.raw.components/component-registry","~$js/com.fulcrologic.fulcro.raw","~$clojure.walk/prewalk","~$cljs.core/-write","~$taoensso.timbre/-log!","~$com.fulcrologic.fulcro.raw.components/ident","~$cljs.core/IndexedSeq","~$edn-query-language.core/ident?","~$com.fulcrologic.fulcro.raw.components/component-options","~$com.fulcrologic.fulcro.algorithms.do-not-use/recursion?","~$cljs.core/count","~$cljs.core/deref","~$cljs.core/reduce","~$cljs.core/seq","~$cljs.core/chunk-first","~$com.fulcrologic.fulcro.raw.components/get-traced-props","~$cljs.core/apply","~$com.fulcrologic.fulcro.raw.components/normalize*","~$js/com.fulcrologic.fulcro","~$cljs.core/Keyword","~$taoensso.encore/map-vals","~$cljs.core/mapv","~$com.fulcrologic.fulcro.raw.components/get-subquery-component","~$cljs.core/not=","~$com.fulcrologic.fulcro.raw.components/get-computed","~$cljs.core/dissoc","~$cljs.core/Delay","~$cljs.core/chunk-rest","~$cljs.core/atom","~$com.fulcrologic.fulcro.raw.components/normalize-query","~$com.fulcrologic.fulcro.raw.components/initial-state","~$com.fulcrologic.fulcro.raw.components/is-factory?","~$com.fulcrologic.fulcro.raw.components/any->app","~$clojure.string/includes?","~$cljs.core/set","~$cljs.core/native-satisfies?","~$com.fulcrologic.fulcro.raw.components/set-query*","~$cljs.core/empty?","~$com.fulcrologic.fulcro.raw.components/has-ident?","~$com.fulcrologic.fulcro.raw.components/props","~$cljs.core/contains?","~$com.fulcrologic.fulcro.raw.components.goog$module$goog$object.extend","~$cljs.core/into","~$cljs.core/map?","~$cljs.core/reset!","~$cljs.core/conj","~$taoensso.timbre/*config*","~$cljs.core/vary-meta","~$com.fulcrologic.fulcro.raw.components/compressible-transact!","~$com.fulcrologic.fulcro.raw.components/refresh-dynamic-queries!","~$cljs.core/update","~$com.fulcrologic.fulcro.algorithms.do-not-use/join-value","~$cljs.core/with-meta","~$cljs.core/namespace","~$com.fulcrologic.fulcro.raw.components/isoget-in","~$cljs.core/map","~$com.fulcrologic.fulcro.raw.components/has-query?","~$js/com.fulcrologic","~$cljs.core/fn?","~$com.fulcrologic.fulcro.algorithms.do-not-use/union?","~$cljs.core/PersistentVector","~$com.fulcrologic.fulcro.raw.components/children","~$cljs.core/get-in","~$cljs.core/vals","~$cljs.core/swap!","~$com.fulcrologic.fulcro.raw.components/component-instance?","~$com.fulcrologic.fulcro.raw.components.goog$module$goog$object.get","~$com.fulcrologic.fulcro.raw.components.goog$module$goog$object.containsKey","~$com.fulcrologic.fulcro.raw.components.goog$module$goog$object.getValueByKeys","~$cljs.core/get","~$com.fulcrologic.fulcro.raw.components/get-query-by-id","~$com.fulcrologic.fulcro.raw.components/has-pre-merge?","~$com.fulcrologic.fulcro.raw.components/transact!","~$cljs.core/-nth","~$com.fulcrologic.fulcro.raw.components/configure-anonymous-component!","~$js/com","~$js/com.fulcrologic.fulcro.raw.components","~$com.fulcrologic.fulcro.raw.components/newer-props","~$com.fulcrologic.fulcro.raw.components/has-feature?","~$clojure.set/difference","~$com.fulcrologic.fulcro.raw.components/component-name","~$com.fulcrologic.fulcro.raw.components/component?","~$cljs.core/nth","~$cljs.core/ex-info","~$cljs.core/meta","~$cljs.core/second","~$com.fulcrologic.fulcro.algorithms.do-not-use/deep-merge","~$js/goog.DEBUG","~$com.fulcrologic.fulcro.raw.components/normalize-query-elements","~$com.fulcrologic.fulcro.raw.components/get-query-id","~$com.fulcrologic.fulcro.raw.components/shared","~$cljs.core/next","~$cljs.core/vec","~$cljs.core/IDeref","~$com.fulcrologic.fulcro.raw.components/query-id","~$com.fulcrologic.fulcro.raw.components/has-initial-app-state?","~$com.fulcrologic.fulcro.raw.components/get-initial-state","~$cljs.core/not","~$com.fulcrologic.fulcro.algorithms.lookup/app-algorithm","~$com.fulcrologic.fulcro.raw.components/denormalize-query","~$com.fulcrologic.fulcro.raw.components/nc","~$cljs.core/assoc","~$com.fulcrologic.fulcro.raw.components/get-class","~$cljs.core/Symbol","~$com.fulcrologic.fulcro.raw.components/class->registry-key","~$cljs.core/coll?","~$com.fulcrologic.fulcro.raw.components/*query-state*","~$com.fulcrologic.fulcro.raw.components/external-config","~$cljs.core/reduce-kv","~$com.fulcrologic.fulcro.raw.components/entity->component","~$com.fulcrologic.fulcro.algorithms.denormalize/traced-db->tree","~$com.fulcrologic.fulcro.algorithms.denormalize/denormalization-time","~$cljs.core/first","~$edn-query-language.core/ast->query","~$js/com.fulcrologic.fulcro.raw.components.component-registry","~$cljs.core/seq?","~$com.fulcrologic.fulcro.raw.components/link-query","~$com.fulcrologic.fulcro.algorithms.denormalize/possibly-stale?","~$cljs.core/name","~$cljs.core/merge","~$com.fulcrologic.fulcro.raw.components/link-element","~$cljs.core/every?","~$com.fulcrologic.fulcro.raw.components/get-query","~$com.fulcrologic.fulcro.raw.components/query","~$js/Error","~$cljs.core/boolean","~$com.fulcrologic.fulcro.raw.components/component-type","~$cljs.core/type","~$com.fulcrologic.fulcro.raw.components/isoget","~$cljs.core/chunked-seq?"]]],"~:cache-keys",["~#cmap",[["^1H","goog/dom/tagname.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^G",[]],"~:deps-syms",["^[","~$goog.dom.HtmlElement"]]],["^1H","goog/async/freelist.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5E",["^ ","^5F",null,"^5G",["^G",[]],"^5H",["^["]]],["^1H","cljs/core/async/impl/ioc_helpers.cljs"],["c55a0f6d67abac2efcfddf7621cac07d90298cab","^5E",["^ ","^5F",null,"^5G",["^G",[]],"^5H",["^[","^X","~$cljs.core.async.impl.protocols"]]],["^1H","goog/i18n/datetimesymbols.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5E",["^ ","^5F",null,"^5G",["^G",[]],"^5H",["^["]]],["^1H","goog/labs/useragent/platform.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5E",["^ ","^5F",null,"^5G",["^G",[]],"^5H",["^[","~$goog.string.internal","~$goog.labs.userAgent.util"]]],["^1H","expound/util.cljc"],["f84ecd45aeef38fd6f1c53d8323e6abc5dc5a0e4","^5E",["^ ","^5F",null,"^5G",["^G",[]],"^5H",["^[","^X"]]],["^1H","goog/crypt/crypt.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5E",["^ ","^5F",null,"^5G",["^G",[]],"^5H",["^[","~$goog.asserts"]]],["^1H","cljs/core/async.cljs"],["c55a0f6d67abac2efcfddf7621cac07d90298cab","^5E",["^ ","^5F",null,"^5G",["^G",[]],"^5H",["^[","^X","^5J","~$cljs.core.async.impl.channels","~$cljs.core.async.impl.buffers","~$cljs.core.async.impl.timers","~$cljs.core.async.impl.dispatch","~$cljs.core.async.impl.ioc-helpers","~$goog.array"]]],["^1H","goog/timer/timer.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5E",["^ ","^5F",null,"^5G",["^G",[]],"^5H",["^[","~$goog.Promise","~$goog.events.EventTarget","~$goog.Thenable"]]],["^1H","com/fulcrologic/fulcro/algorithms/lookup.cljc"],["aa10be524799b8f5dcb1cab659b996577fc15d41","^5E",["^ ","^5F",null,"^5G",["^G",[]],"^5H",["^[","^X","^U"]]],["^1H","cljs/spec/gen/alpha.cljs"],["e2ad9a4500a5ecabaf01429c4f0d6f7fac146951","^5E",["^ ","^5F",null,"^5G",["^G",[]],"^5H",["^[","^X","~$goog.Uri"]]],["^1H","cljs/tools/reader/impl/utils.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^5E",["^ ","^5F",null,"^5G",["^G",[]],"^5H",["^[","^X","^17","~$goog.string"]]],["^1H","goog/math/math.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5E",["^ ","^5F",null,"^5G",["^G",[]],"^5H",["^[","^5M"]]],["^1H","goog/html/trustedtypes.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5E",["^ ","^5F",null,"^5G",["^G",[]],"^5H",["^["]]],["^1H","goog/string/stringformat.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5E",["^ ","^5F",null,"^5G",["^G",[]],"^5H",["^[","^5X"]]],["^1H","goog/events/eventtype.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5E",["^ ","^5F",null,"^5G",["^G",[]],"^5H",["^[","~$goog.events.BrowserFeature","~$goog.userAgent"]]],["^1H","goog/labs/useragent/browser.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5E",["^ ","^5F",null,"^5G",["^G",[]],"^5H",["^[","^5S","^Z","^5L","^5K"]]],["^1H","goog/html/safeurl.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5E",["^ ","^5F",null,"^5G",["^G",[]],"^5H",["^[","^5M","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.i18n.bidi.Dir","~$goog.i18n.bidi.DirectionalString","~$goog.string.Const","~$goog.string.TypedString","^5K"]]],["^1H","goog/array/array.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5E",["^ ","^5F",null,"^5G",["^G",[]],"^5H",["^[","^5M"]]],["^1H","com/fulcrologic/fulcro/algorithms/do_not_use.cljc"],["aa10be524799b8f5dcb1cab659b996577fc15d41","^5E",["^ ","^5F",null,"^5G",["^G",[]],"^5H",["^[","^X","^U","^17","^S","^Z","~$goog.crypt","~$goog.crypt.base64","^@"]]],["^1H","expound/problems.cljc"],["f84ecd45aeef38fd6f1c53d8323e6abc5dc5a0e4","^5E",["^ ","^5F",null,"^5G",["^G",[]],"^5H",["^[","^X","~$expound.paths","^@"]]],["^1H","goog/useragent/useragent.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5E",["^ ","^5F",null,"^5G",["^G",[]],"^5H",["^[","~$goog.labs.userAgent.browser","~$goog.labs.userAgent.engine","~$goog.labs.userAgent.platform","^5L","~$goog.reflect","^5K"]]],["^1H","goog/structs/prioritypool.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5E",["^ ","^5F",null,"^5G",["^G",[]],"^5H",["^[","~$goog.structs.Pool","~$goog.structs.PriorityQueue"]]],["^1H","goog/events/eventlike.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5E",["^ ","^5F",null,"^5G",["^G",[]],"^5H",["^[","~$goog.events.Event","~$goog.events.EventId"]]],["^1H","goog/async/run.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5E",["^ ","^5F",null,"^5G",["^G",[]],"^5H",["^[","~$goog.async.WorkQueue","~$goog.async.nextTick","~$goog.async.throwException"]]],["^1H","com/cognitect/transit/impl/reader.js"],["f8b4f570ca4d41649190efecac27a5932cc11429","^5E",["^ ","^5F",null,"^5G",["^G",[]],"^5H",["^[","~$com.cognitect.transit.impl.decoder","~$com.cognitect.transit.caching"]]],["^1H","goog/debug/error.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5E",["^ ","^5F",null,"^5G",["^G",[]],"^5H",["^["]]],["^1H","goog/async/workqueue.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5E",["^ ","^5F",null,"^5G",["^G",[]],"^5H",["^[","~$goog.async.FreeList","^5M"]]],["^1H","goog/events/events.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5E",["^ ","^5F",null,"^5G",["^G",[]],"^5H",["^[","^5M","~$goog.debug.entryPointRegistry","~$goog.events.BrowserEvent","^5Y","~$goog.events.Listenable","~$goog.events.ListenerMap","~$goog.debug.ErrorHandler","^6?","~$goog.events.EventLike","~$goog.events.EventWrapper","~$goog.events.ListenableKey","~$goog.events.Listener"]]],["^1H","goog/promise/resolver.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5E",["^ ","^5F",null,"^5G",["^G",[]],"^5H",["^[","^5T"]]],["^1H","goog/events/browserfeature.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5E",["^ ","^5F",null,"^5G",["^G",[]],"^5H",["^["]]],["^1H","cljs/tools/reader/edn.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^5E",["^ ","^5F",null,"^5G",["^G",[]],"^5H",["^[","^X","~$cljs.tools.reader.impl.errors","~$cljs.tools.reader.reader-types","~$cljs.tools.reader.impl.utils","~$cljs.tools.reader.impl.commons","~$cljs.tools.reader","^5X","~$goog.string.StringBuffer"]]],["^1H","goog/structs/priorityqueue.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5E",["^ ","^5F",null,"^5G",["^G",[]],"^5H",["^[","~$goog.structs.Heap"]]],["^1H","goog/net/xhrio.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5E",["^ ","^5F",null,"^5G",["^G",[]],"^5H",["^[","~$goog.Timer","^5S","^5M","~$goog.collections.maps","^6F","^5U","~$goog.json.hybrid","~$goog.log","~$goog.net.ErrorCode","~$goog.net.EventType","~$goog.net.HttpStatus","~$goog.net.XmlHttp","^Z","^5X","~$goog.uri.utils","^5Z","^5W","^6J","~$goog.net.XhrLike","~$goog.net.XmlHttpFactory"]]],["^1H","goog/promise/thenable.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5E",["^ ","^5F",null,"^5G",["^G",[]],"^5H",["^[","^5T"]]],["^1H","goog/collections/iters.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5E",["^ ","^5F",null,"^5G",["^G",[]],"^5H",["^["]]],["^1H","com/fulcrologic/fulcro/algorithms/transit.cljc"],["aa10be524799b8f5dcb1cab659b996577fc15d41","^5E",["^ ","^5F",null,"^5G",["^G",[]],"^5H",["^[","^X","~$cognitect.transit","~$com.fulcrologic.guardrails.core","^@","~$com.fulcrologic.fulcro.algorithms.tempid"]]],["^1H","goog/dom/nodetype.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5E",["^ ","^5F",null,"^5G",["^G",[]],"^5H",["^["]]],["^1H","com/fulcrologic/guardrails/utils.cljc"],["1c3188d13b2f3b2324bad6f65cc78cd4b193445e","^5E",["^ ","^5F",null,"^5G",["^G",[]],"^5H",["^[","^X","^19"]]],["^1H","cljs/tools/reader/impl/inspect.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^5E",["^ ","^5F",null,"^5G",["^G",[]],"^5H",["^[","^X"]]],["^1H","com/cognitect/transit/util.js"],["f8b4f570ca4d41649190efecac27a5932cc11429","^5E",["^ ","^5F",null,"^5G",["^G",[]],"^5H",["^[","^Z"]]],["^1H","cljs/pprint.cljs"],["e2ad9a4500a5ecabaf01429c4f0d6f7fac146951","^5E",["^ ","^5F",null,"^5G",["^G",[]],"^5H",["^[","^X","^17","^5X","^6T"]]],["^1H","cljs/tools/reader.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^5E",["^ ","^5F",null,"^5G",["^G",[]],"^5H",["^[","^X","^6P","^6Q","^6R","^6O","^5S","^5X","^6T"]]],["^1H","expound/alpha.cljc"],["f84ecd45aeef38fd6f1c53d8323e6abc5dc5a0e4","^5E",["^ ","^5F",null,"^5G",["^G",[]],"^5H",["^[","^X","~$expound.problems","^@","^17","^R","~$expound.printer","~$expound.util","~$expound.ansi"]]],["^1H","taoensso/timbre.cljc"],["ed86c0ab3cf1c4771c5f9bf201405e20c3027ced","^5E",["^ ","^5F",null,"^5G",["^G",[]],"^5H",["^[","^X","^17","~$goog.i18n.DateTimeFormat","^14","~$taoensso.timbre.appenders.core"]]],["^1H","goog/net/wrapperxmlhttpfactory.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5E",["^ ","^5F",null,"^5G",["^G",[]],"^5H",["^[","^73","^74"]]],["^1H","goog/date/utcdatetime.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5E",["^ ","^5F",null,"^5G",["^G",[]],"^5H",["^[","~$goog.date","~$goog.date.Date","~$goog.date.DateTime","~$goog.date.Interval"]]],["^1H","goog/i18n/nativelocaledigits.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5E",["^ ","^5F",null,"^5G",["^G",[]],"^5H",["^["]]],["^1H","goog/events/eventtarget.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5E",["^ ","^5F",null,"^5G",["^G",[]],"^5H",["^[","~$goog.Disposable","^5M","~$goog.events","^6>","^6H","^6I","^Z","^6?","^6K","^6M"]]],["^1H","com/fulcrologic/guardrails/core.cljc"],["1c3188d13b2f3b2324bad6f65cc78cd4b193445e","^5E",["^ ","^5F",null,"^5G",["^G",[]],"^5H",["^[","^X","~$com.fulcrologic.guardrails.impl.externs","~$com.fulcrologic.guardrails.utils","^B","^@","^17","~$expound.alpha"]]],["^1H","goog/disposable/disposable.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5E",["^ ","^5F",null,"^5G",["^G",[]],"^5H",["^[","~$goog.disposable.IDisposable","~$goog.dispose","~$goog.disposeAll"]]],["^1H","expound/ansi.cljc"],["f84ecd45aeef38fd6f1c53d8323e6abc5dc5a0e4","^5E",["^ ","^5F",null,"^5G",["^G",[]],"^5H",["^[","^X","^17"]]],["^1H","goog/string/typedstring.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5E",["^ ","^5F",null,"^5G",["^G",[]],"^5H",["^["]]],["^1H","goog/object/object.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5E",["^ ","^5F",null,"^5G",["^G",[]],"^5H",["^["]]],["^1H","goog/dom/asserts.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5E",["^ ","^5F",null,"^5G",["^G",[]],"^5H",["^[","^5M"]]],["^1H","taoensso/encore.cljc"],["8ce32d99c08a853f8a56322b5aab80e59c3bd4d6","^5E",["^ ","^5F",null,"^5G",["^G",[]],"^5H",["^[","^X","^17","^R","~$cljs.reader","~$cljs.tools.reader.edn","^Z","^5S","^5X","~$goog.string.format","^6T","^7C","~$goog.net.XhrIo","~$goog.net.XhrIoPool","~$goog.Uri.QueryData","^6[","^6Z","~$taoensso.truss"]]],["^1H","goog/structs/set.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5E",["^ ","^5F",null,"^5G",["^G",[]],"^5H",["^[","~$goog.structs","~$goog.structs.Collection","~$goog.structs.Map","~$goog.iter.Iterator"]]],"~:SHADOW-TIMESTAMP",[1676259735000,1676259735000,1676259734000],["^1H","taoensso/timbre/appenders/core.cljc"],["ed86c0ab3cf1c4771c5f9bf201405e20c3027ced","^5E",["^ ","^5F",null,"^5G",["^G",[]],"^5H",["^[","^X","^17","^14"]]],["^1H","goog/math/long.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5E",["^ ","^5F",null,"^5G",["^G",[]],"^5H",["^[","^5M","^6;"]]],["^1H","goog/events/listener.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5E",["^ ","^5F",null,"^5G",["^G",[]],"^5H",["^[","^6M","^6H"]]],["^1H","goog/html/trustedresourceurl.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5E",["^ ","^5F",null,"^5G",["^G",[]],"^5H",["^[","^5M","~$goog.fs.blob","^5[","~$goog.html.SafeScript","~$goog.html.trustedtypes","^61","^62","^63","^64"]]],["^1H","cljs/core/async/impl/channels.cljs"],["c55a0f6d67abac2efcfddf7621cac07d90298cab","^5E",["^ ","^5F",null,"^5G",["^G",[]],"^5H",["^[","^X","^5J","^5Q","^5O"]]],["^1H","goog/events/listenermap.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5E",["^ ","^5F",null,"^5G",["^G",[]],"^5H",["^[","^5S","^6N","^Z","^6?","^6H","^6M"]]],["^1H","goog/events/eventid.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5E",["^ ","^5F",null,"^5G",["^G",[]],"^5H",["^["]]],["^1H","taoensso/truss.cljs"],["02c08dae83153a50eb946c4d742f574a24bb2a76","^5E",["^ ","^5F",null,"^5G",["^G",[]],"^5H",["^[","^X","~$taoensso.truss.impl"]]],["^1H","com/fulcrologic/guardrails/registry.cljc"],["1c3188d13b2f3b2324bad6f65cc78cd4b193445e","^5E",["^ ","^5F",null,"^5G",["^G",[]],"^5H",["^[","^X"]]],["^1H","goog/string/internal.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5E",["^ ","^5F",null,"^5G",["^G",[]],"^5H",["^["]]],["^1H","goog/events/eventwrapper.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5E",["^ ","^5F",null,"^5G",["^G",[]],"^5H",["^[","~$goog.events.EventHandler","~$goog.events.ListenableType"]]],["^1H","edn_query_language/core.cljc"],["839028d06d9cc88b18b20c77c53a2bb77140d1f7","^5E",["^ ","^5F",null,"^5G",["^G",[]],"^5H",["^[","^X","^@"]]],["^1H","goog/functions/functions.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5E",["^ ","^5F",null,"^5G",["^G",[]],"^5H",["^["]]],["^1H","cljs/core/async/impl/dispatch.cljs"],["c55a0f6d67abac2efcfddf7621cac07d90298cab","^5E",["^ ","^5F",null,"^5G",["^G",[]],"^5H",["^[","^X","^5O","^6A"]]],["^1H","goog/html/safestyle.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5E",["^ ","^5F",null,"^5G",["^G",[]],"^5H",["^[","^63","~$goog.html.SafeUrl","^64","^5M","^5K"]]],["^1H","goog/dom/safe.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5E",["^ ","^5F",null,"^5G",["^G",[]],"^5H",["^[","^5M","~$goog.dom.asserts","~$goog.functions","~$goog.html.SafeHtml","^7W","~$goog.html.SafeStyle","^80","^60","~$goog.html.uncheckedconversions","^63","^5K"]]],["^1H","expound/paths.cljc"],["f84ecd45aeef38fd6f1c53d8323e6abc5dc5a0e4","^5E",["^ ","^5F",null,"^5G",["^G",[]],"^5H",["^[","^X","^@","^7:"]]],["^1H","taoensso/truss/impl.cljs"],["02c08dae83153a50eb946c4d742f574a24bb2a76","^5E",["^ ","^5F",null,"^5G",["^G",[]],"^5H",["^[","^X","^R"]]],["^1H","clojure/walk.cljs"],["e2ad9a4500a5ecabaf01429c4f0d6f7fac146951","^5E",["^ ","^5F",null,"^5G",["^G",[]],"^5H",["^[","^X"]]],["^1H","goog/useragent/product.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5E",["^ ","^5F",null,"^5G",["^G",[]],"^5H",["^[","^68","^6:","^5Z"]]],["^1H","cljs/core/async/impl/protocols.cljs"],["c55a0f6d67abac2efcfddf7621cac07d90298cab","^5E",["^ ","^5F",null,"^5G",["^G",[]],"^5H",["^[","^X"]]],["^1H","goog/net/eventtype.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5E",["^ ","^5F",null,"^5G",["^G",[]],"^5H",["^["]]],["^1H","goog/structs/map.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5E",["^ ","^5F",null,"^5G",["^G",[]],"^5H",["^[","~$goog.collections.iters","^7T","~$goog.iter.StopIteration","~$goog.iter.es6"]]],["^1H","goog/net/xhriopool.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5E",["^ ","^5F",null,"^5G",["^G",[]],"^5H",["^[","^7M","~$goog.structs.PriorityPool","^7S"]]],["^1H","com/cognitect/transit/delimiters.js"],["f8b4f570ca4d41649190efecac27a5932cc11429","^5E",["^ ","^5F",null,"^5G",["^G",[]],"^5H",["^["]]],["^1H","goog/date/date.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5E",["^ ","^5F",null,"^5G",["^G",[]],"^5H",["^[","^5M","~$goog.i18n.DateTimeSymbols","^5X"]]],["^1H","goog/html/safehtml.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5E",["^ ","^5F",null,"^5G",["^G",[]],"^5H",["^[","^63","^61","^62","^7W","^84","~$goog.html.SafeStyleSheet","^80","~$goog.dom.TagName","^60","^64","^5M","^68","^5S","^Z","^5K","~$goog.dom.tags","^7X"]]],["^1H","goog/dom/tags.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5E",["^ ","^5F",null,"^5G",["^G",[]],"^5H",["^[","^Z"]]],["^1H","goog/math/size.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5E",["^ ","^5F",null,"^5G",["^G",[]],"^5H",["^["]]],["^1H","com/fulcrologic/fulcro/raw/components.cljc"],["aa10be524799b8f5dcb1cab659b996577fc15d41","^5E",["^ ","^5F",null,"^5G",["^G",[]],"^5H",["^[","^X","^Z","^R","^17","^19","^W","^12","^P","^10","^S","^14","^U"]]],["^1H","goog/structs/queue.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5E",["^ ","^5F",null,"^5G",["^G",[]],"^5H",["^[","^5S"]]],["^1H","goog/labs/useragent/engine.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5E",["^ ","^5F",null,"^5G",["^G",[]],"^5H",["^[","^5S","^5K","^5L"]]],["^1H","com/cognitect/transit/impl/decoder.js"],["f8b4f570ca4d41649190efecac27a5932cc11429","^5E",["^ ","^5F",null,"^5G",["^G",[]],"^5H",["^[","~$com.cognitect.transit.util","~$com.cognitect.transit.delimiters","^6D","~$com.cognitect.transit.types"]]],["^1H","goog/fs/blob.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5E",["^ ","^5F",null,"^5G",["^G",[]],"^5H",["^["]]],["^1H","cljs/reader.cljs"],["e2ad9a4500a5ecabaf01429c4f0d6f7fac146951","^5E",["^ ","^5F",null,"^5G",["^G",[]],"^5H",["^[","^X","^Z","^6S","^7K","^6T"]]],["^1H","goog/dom/dom.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5E",["^ ","^5F",null,"^5G",["^G",[]],"^5H",["^[","^5S","^5M","~$goog.dom.BrowserFeature","~$goog.dom.NodeType","^8<","~$goog.dom.safe","^83","^85","~$goog.math.Coordinate","~$goog.math.Size","^Z","^5X","^63","~$goog.string.Unicode","^5Z"]]],["^1H","com/fulcrologic/guardrails/impl/externs.cljc"],["1c3188d13b2f3b2324bad6f65cc78cd4b193445e","^5E",["^ ","^5F",null,"^5G",["^G",[]],"^5H",["^[","^X","~$com.fulcrologic.guardrails.registry","^7E"]]],["^1H","goog/asserts/asserts.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5E",["^ ","^5F",null,"^5G",["^G",[]],"^5H",["^[","~$goog.debug.Error","^8B"]]],["^1H","cljs/core/async/impl/buffers.cljs"],["c55a0f6d67abac2efcfddf7621cac07d90298cab","^5E",["^ ","^5F",null,"^5G",["^G",[]],"^5H",["^[","^X","^5J"]]],["^1H","goog/i18n/timezone.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5E",["^ ","^5F",null,"^5G",["^G",[]],"^5H",["^[","^5S","~$goog.date.DateLike","^Z","^5X"]]],["^1H","goog/uri/uri.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5E",["^ ","^5F",null,"^5G",["^G",[]],"^5H",["^[","^5S","^5M","^6W","^5X","^7Q","^72","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^1H","goog/net/errorcode.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5E",["^ ","^5F",null,"^5G",["^G",[]],"^5H",["^["]]],["^1H","goog/collections/maps.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5E",["^ ","^5F",null,"^5G",["^G",[]],"^5H",["^["]]],["^1H","goog/iter/es6.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5E",["^ ","^5F",null,"^5G",["^G",[]],"^5H",["^[","~$goog.iter.Iterable","^7T","^87"]]],["^1H","goog/i18n/bidi.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5E",["^ ","^5F",null,"^5G",["^G",[]],"^5H",["^["]]],["^1H","goog/debug/errorhandler.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5E",["^ ","^5F",null,"^5G",["^G",[]],"^5H",["^[","^7B","^5M","~$goog.debug.EntryPointMonitor","^8H"]]],["^1H","goog/disposable/idisposable.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5E",["^ ","^5F",null,"^5G",["^G",[]],"^5H",["^["]]],["^1H","goog/promise/promise.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5E",["^ ","^5F",null,"^5G",["^G",[]],"^5H",["^[","^5V","^5M","^6E","~$goog.async.run","^6B","^8H","~$goog.promise.Resolver"]]],["^1H","cljs/core/async/impl/timers.cljs"],["c55a0f6d67abac2efcfddf7621cac07d90298cab","^5E",["^ ","^5F",null,"^5G",["^G",[]],"^5H",["^[","^X","^5J","^5N","^5Q"]]],["^1H","cljs/spec/alpha.cljs"],["e2ad9a4500a5ecabaf01429c4f0d6f7fac146951","^5E",["^ ","^5F",null,"^5G",["^G",[]],"^5H",["^[","^X","^Z","^19","~$cljs.spec.gen.alpha","^17"]]],["^1H","goog/fs/url.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5E",["^ ","^5F",null,"^5G",["^G",[]],"^5H",["^["]]],["^1H","goog/base.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5E",["^ ","^5F",null,"^5G",["^G",[]],"^5H",[]]],["^1H","goog/json/hybrid.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5E",["^ ","^5F",null,"^5G",["^G",[]],"^5H",["^[","^5M","~$goog.json"]]],["^1H","goog/structs/structs.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5E",["^ ","^5F",null,"^5G",["^G",[]],"^5H",["^[","^5S","^Z"]]],["^1H","cljs/tools/reader/impl/errors.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^5E",["^ ","^5F",null,"^5G",["^G",[]],"^5H",["^[","^X","^6P","^17","~$cljs.tools.reader.impl.inspect"]]],["^1H","goog/disposable/dispose.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5E",["^ ","^5F",null,"^5G",["^G",[]],"^5H",["^["]]],["^1H","clojure/string.cljs"],["e2ad9a4500a5ecabaf01429c4f0d6f7fac146951","^5E",["^ ","^5F",null,"^5G",["^G",[]],"^5H",["^[","^X","^5X","^6T"]]],["^1H","com/fulcrologic/fulcro/algorithms/tempid.cljc"],["aa10be524799b8f5dcb1cab659b996577fc15d41","^5E",["^ ","^5F",null,"^5G",["^G",[]],"^5H",["^[","^X","^U","^19"]]],["^1H","goog/structs/pool.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5E",["^ ","^5F",null,"^5G",["^G",[]],"^5H",["^[","^7B","~$goog.structs.Queue","~$goog.structs.Set"]]],["^1H","goog/net/httpstatus.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5E",["^ ","^5F",null,"^5G",["^G",[]],"^5H",["^["]]],["^1H","goog/i18n/datetimeformat.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5E",["^ ","^5F",null,"^5G",["^G",[]],"^5H",["^[","^5M","^7>","~$goog.date.UtcDateTime","^8:","~$goog.i18n.LocaleFeature","~$goog.i18n.NativeLocaleDigits","~$goog.i18n.TimeZone","^5X","~$goog.i18n.DateTimeSymbolsType"]]],["^1H","com/cognitect/transit/handlers.js"],["f8b4f570ca4d41649190efecac27a5932cc11429","^5E",["^ ","^5F",null,"^5G",["^G",[]],"^5H",["^[","^8>","^8@","~$goog.math.Long"]]],["^1H","goog/structs/heap.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5E",["^ ","^5F",null,"^5G",["^G",[]],"^5H",["^[","^5S","^Z","~$goog.structs.Node"]]],["^1H","goog/debug/entrypointregistry.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5E",["^ ","^5F",null,"^5G",["^G",[]],"^5H",["^[","^5M"]]],["^1H","goog/string/string.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5E",["^ ","^5F",null,"^5G",["^G",[]],"^5H",["^[","^8C","^85","^63","^5K"]]],["^1H","com/cognitect/transit/types.js"],["f8b4f570ca4d41649190efecac27a5932cc11429","^5E",["^ ","^5F",null,"^5G",["^G",[]],"^5H",["^[","^8>","~$com.cognitect.transit.eq","^8Z"]]],["^1H","goog/reflect/reflect.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5E",["^ ","^5F",null,"^5G",["^G",[]],"^5H",["^["]]],["^1H","goog/labs/useragent/util.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5E",["^ ","^5F",null,"^5G",["^G",[]],"^5H",["^[","~$goog.labs.userAgent","^5K"]]],["^1H","expound/printer.cljc"],["f84ecd45aeef38fd6f1c53d8323e6abc5dc5a0e4","^5E",["^ ","^5F",null,"^5G",["^G",[]],"^5H",["^[","^X","^17","^@","^D","^R","^7:","^7;","^67","^19","^7L","^5X"]]],["^1H","com/cognitect/transit/eq.js"],["f8b4f570ca4d41649190efecac27a5932cc11429","^5E",["^ ","^5F",null,"^5G",["^G",[]],"^5H",["^[","^8>"]]],["^1H","goog/debug/debug.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5E",["^ ","^5F",null,"^5G",["^G",[]],"^5H",["^[","^5S","~$goog.debug.errorcontext"]]],["^1H","goog/string/stringbuffer.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5E",["^ ","^5F",null,"^5G",["^G",[]],"^5H",["^["]]],["^1H","goog/math/coordinate.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5E",["^ ","^5F",null,"^5G",["^G",[]],"^5H",["^[","~$goog.math"]]],["^1H","goog/debug/errorcontext.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5E",["^ ","^5F",null,"^5G",["^G",[]],"^5H",["^["]]],["^1H","cljs/tools/reader/reader_types.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^5E",["^ ","^5F",null,"^5G",["^G",[]],"^5H",["^[","^X","^6Q","^5X","^6T"]]],["^1H","goog/iter/iter.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5E",["^ ","^5F",null,"^5G",["^G",[]],"^5H",["^[","^5S","^5M","~$goog.debug","^82","^93"]]],["^1H","goog/labs/useragent/useragent.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5E",["^ ","^5F",null,"^5G",["^G",[]],"^5H",["^["]]],["^1H","goog/async/nexttick.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5E",["^ ","^5F",null,"^5G",["^G",[]],"^5H",["^[","^6F","~$goog.dom","^8<","^82","^68","^69"]]],["^1H","goog/html/uncheckedconversions.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5E",["^ ","^5F",null,"^5G",["^G",[]],"^5H",["^[","^5M","^83","^7W","^84","^8;","^80","^60","^63","^5K","^61"]]],["^1H","com/cognitect/transit/caching.js"],["f8b4f570ca4d41649190efecac27a5932cc11429","^5E",["^ ","^5F",null,"^5G",["^G",[]],"^5H",["^[","^8?"]]],["^1H","goog/events/event.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5E",["^ ","^5F",null,"^5G",["^G",[]],"^5H",["^[","^7B","^6?"]]],["^1H","cljs/tools/reader/impl/commons.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^5E",["^ ","^5F",null,"^5G",["^G",[]],"^5H",["^[","^X","^6O","^6P","^6Q"]]],["^1H","goog/events/eventhandler.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5E",["^ ","^5F",null,"^5G",["^G",[]],"^5H",["^[","^7B","^7C","^Z","^6>","^6?","^5U","^6L"]]],["^1H","goog/dom/htmlelement.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5E",["^ ","^5F",null,"^5G",["^G",[]],"^5H",["^["]]],["^1H","cljs/core.cljs"],["e2ad9a4500a5ecabaf01429c4f0d6f7fac146951","^5E",["^ ","^5F",null,"^5G",["^G",[]],"^5H",["^[","^8Z","~$goog.math.Integer","^5X","^Z","^5S","^5W","^6T"]]],["^1H","com/cognitect/transit.js"],["f8b4f570ca4d41649190efecac27a5932cc11429","^5E",["^ ","^5F",null,"^5G",["^G",[]],"^5H",["^[","^8>","~$com.cognitect.transit.impl.reader","~$com.cognitect.transit.impl.writer","^8@","^90","^6C","^6D"]]],["^1H","goog/html/safescript.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5E",["^ ","^5F",null,"^5G",["^G",[]],"^5H",["^[","^63","^64","^7X","^5M"]]],["^1H","goog/log/log.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5E",["^ ","^5F",null,"^5G",["^G",[]],"^5H",["^[","^5M","^94"]]],["^1H","goog/async/throwexception.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5E",["^ ","^5F",null,"^5G",["^G",[]],"^5H",["^["]]],["^1H","goog/html/safestylesheet.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5E",["^ ","^5F",null,"^5G",["^G",[]],"^5H",["^[","^63","^84","^64","^Z","^5M","^5K"]]],["^1H","goog/structs/collection.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5E",["^ ","^5F",null,"^5G",["^G",[]],"^5H",["^["]]],["^1H","goog/events/browserevent.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5E",["^ ","^5F",null,"^5G",["^G",[]],"^5H",["^[","^94","^6>","~$goog.events.EventType","^6;","^5Z"]]],["^1H","goog/math/integer.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5E",["^ ","^5F",null,"^5G",["^G",[]],"^5H",["^[","^6;"]]],["^1H","goog/structs/node.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5E",["^ ","^5F",null,"^5G",["^G",[]],"^5H",["^["]]],["^1H","goog/dom/browserfeature.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5E",["^ ","^5F",null,"^5G",["^G",[]],"^5H",["^[","^5Z"]]],["^1H","clojure/set.cljs"],["e2ad9a4500a5ecabaf01429c4f0d6f7fac146951","^5E",["^ ","^5F",null,"^5G",["^G",[]],"^5H",["^[","^X"]]],["^1H","goog/uri/utils.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5E",["^ ","^5F",null,"^5G",["^G",[]],"^5H",["^[","^5M","^5X"]]],["^1H","goog/string/const.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5E",["^ ","^5F",null,"^5G",["^G",[]],"^5H",["^[","^5M","^64"]]],["^1H","goog/disposable/disposeall.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5E",["^ ","^5F",null,"^5G",["^G",[]],"^5H",["^[","^7H"]]],["^1H","goog/json/json.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5E",["^ ","^5F",null,"^5G",["^G",[]],"^5H",["^["]]],["^1H","goog/i18n/localefeature.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5E",["^ ","^5F",null,"^5G",["^G",[]],"^5H",["^["]]],["^1H","goog/events/listenable.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5E",["^ ","^5F",null,"^5G",["^G",[]],"^5H",["^[","^6?","^6K","^6M"]]],["^1H","goog/events/listenablekey.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5E",["^ ","^5F",null,"^5G",["^G",[]],"^5H",["^[","^6H"]]],["^1H","com/cognitect/transit/impl/writer.js"],["f8b4f570ca4d41649190efecac27a5932cc11429","^5E",["^ ","^5F",null,"^5G",["^G",[]],"^5H",["^[","^8>","^6D","~$com.cognitect.transit.handlers","^8@","^8?","^8Z"]]],["^1H","goog/net/xmlhttpfactory.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5E",["^ ","^5F",null,"^5G",["^G",[]],"^5H",["^[","^73"]]],["^1H","com/fulcrologic/fulcro/algorithms/denormalize.cljc"],["aa10be524799b8f5dcb1cab659b996577fc15d41","^5E",["^ ","^5F",null,"^5G",["^G",[]],"^5H",["^[","^X","^R","^S","^U"]]],["^1H","goog/net/xmlhttp.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5E",["^ ","^5F",null,"^5G",["^G",[]],"^5H",["^[","^5M","~$goog.net.WrapperXmlHttpFactory","^74","^73"]]],["^1H","goog/net/xhrlike.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5E",["^ ","^5F",null,"^5G",["^G",[]],"^5H",["^["]]],["^1H","cognitect/transit.cljs"],["ae688999ee978d238bffd4df0c0323e552d6d8dc","^5E",["^ ","^5F",null,"^5G",["^G",[]],"^5H",["^[","^X","~$com.cognitect.transit","^8@","^90","^8Z"]]],["^1H","goog/crypt/base64.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^5E",["^ ","^5F",null,"^5G",["^G",[]],"^5H",["^[","^5M","^65","^5K","^5Z","~$goog.userAgent.product"]]]]],"~:clj-info",["^ ","jar:file:/C:/Users/carre/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/main.clj",1675466804000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader.clj",1675288215000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/impl/errors.clj",1675288215000,"jar:file:/C:/Users/carre/.m2/repository/com/taoensso/truss/1.6.0/truss-1.6.0.jar!/taoensso/truss.clj",1676259735000,"jar:file:/C:/Users/carre/.m2/repository/com/fulcrologic/guardrails/1.1.4/guardrails-1.1.4.jar!/com/fulcrologic/guardrails/impl/externs.cljc",1676259733000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/tools.analyzer/1.1.0/tools.analyzer-1.1.0.jar!/clojure/tools/analyzer/ast.clj",1675288214000,"jar:file:/C:/Users/carre/.m2/repository/com/taoensso/timbre/5.1.1/timbre-5.1.1.jar!/taoensso/timbre/appenders/core.cljc",1676259736000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/core.async/1.4.627/core.async-1.4.627.jar!/clojure/core/async/impl/ioc_macros.clj",1676259738000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/default_data_readers.clj",1675288215000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/clojurescript/1.10.914/clojurescript-1.10.914.jar!/cljs/util.cljc",1676259734000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/core.async/1.4.627/core.async-1.4.627.jar!/clojure/core/async/impl/buffers.clj",1676259738000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/data.json/2.4.0/data.json-2.4.0.jar!/clojure/data/json.clj",1675288214000,"jar:file:/C:/Users/carre/.m2/repository/com/fulcrologic/guardrails/1.1.4/guardrails-1.1.4.jar!/com/fulcrologic/guardrails/impl/parser.clj",1676259733000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/tools.analyzer/1.1.0/tools.analyzer-1.1.0.jar!/clojure/tools/analyzer/env.clj",1675288214000,"jar:file:/C:/Users/carre/.m2/repository/io/aviso/pretty/0.1.37/pretty-0.1.37.jar!/io/aviso/columns.clj",1676259734000,"jar:file:/C:/Users/carre/.m2/repository/com/fulcrologic/guardrails/1.1.4/guardrails-1.1.4.jar!/com/fulcrologic/guardrails/utils.cljc",1676259733000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/clojurescript/1.10.914/clojurescript-1.10.914.jar!/cljs/reader.clj",1676259734000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/spec.alpha/0.2.194/spec.alpha-0.2.194.jar!/clojure/spec/gen/alpha.clj",1675466804000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/clojurescript/1.10.914/clojurescript-1.10.914.jar!/cljs/analyzer/passes.cljc",1676259734000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/core.async/1.4.627/core.async-1.4.627.jar!/clojure/core/async/impl/timers.clj",1676259738000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/clojurescript/1.10.914/clojurescript-1.10.914.jar!/cljs/source_map/base64.clj",1676259734000,"jar:file:/C:/Users/carre/.m2/repository/expound/expound/0.8.9/expound-0.8.9.jar!/expound/problems.cljc",1676259733000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/clojurescript/1.10.914/clojurescript-1.10.914.jar!/cljs/analyzer.cljc",1676259734000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/tools.analyzer.jvm/1.2.0/tools.analyzer.jvm-1.2.0.jar!/clojure/tools/analyzer/jvm/utils.clj",1676259734000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/clojurescript/1.10.914/clojurescript-1.10.914.jar!/cljs/source_map.clj",1676259734000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/stacktrace.clj",1675466804000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/edn.clj",1675466804000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/clojurescript/1.10.914/clojurescript-1.10.914.jar!/cljs/source_map/base64_vlq.clj",1676259734000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/impl/inspect.clj",1675288215000,"jar:file:/C:/Users/carre/.m2/repository/com/fulcrologic/guardrails/1.1.4/guardrails-1.1.4.jar!/com/fulcrologic/guardrails/core.cljc",1676259733000,"jar:file:/C:/Users/carre/.m2/repository/com/taoensso/truss/1.6.0/truss-1.6.0.jar!/taoensso/truss/impl.clj",1676259735000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/clojurescript/1.10.914/clojurescript-1.10.914.jar!/cljs/spec/alpha.cljc",1676259734000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/core.async/1.4.627/core.async-1.4.627.jar!/cljs/core/async/impl/ioc_macros.clj",1676259738000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/clojurescript/1.10.914/clojurescript-1.10.914.jar!/cljs/js_deps.cljc",1676259734000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/tools.analyzer/1.1.0/tools.analyzer-1.1.0.jar!/clojure/tools/analyzer/utils.clj",1675288214000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/cljs/tools/reader/reader_types.clj",1675288215000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/instant.clj",1675466804000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/clojurescript/1.10.914/clojurescript-1.10.914.jar!/cljs/core.cljc",1676259734000,"jar:file:/C:/Users/carre/.m2/repository/expound/expound/0.8.9/expound-0.8.9.jar!/expound/paths.cljc",1676259733000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/java/io.clj",1675466804000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/clojurescript/1.10.914/clojurescript-1.10.914.jar!/cljs/env.cljc",1676259734000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/clojurescript/1.10.914/clojurescript-1.10.914.jar!/cljs/instant.clj",1676259734000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/spec.alpha/0.2.194/spec.alpha-0.2.194.jar!/clojure/spec/alpha.clj",1675466804000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/core.async/1.4.627/core.async-1.4.627.jar!/clojure/core/async/impl/exec/threadpool.clj",1676259738000,"jar:file:/C:/Users/carre/.m2/repository/io/aviso/pretty/0.1.37/pretty-0.1.37.jar!/io/aviso/ansi.clj",1676259734000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/core.clj",1675466804000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/clojurescript/1.10.914/clojurescript-1.10.914.jar!/cljs/analyzer/passes/and_or.cljc",1676259734000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/core.async/1.4.627/core.async-1.4.627.jar!/clojure/core/async/impl/mutex.clj",1676259738000,"jar:file:/C:/Users/carre/.m2/repository/io/aviso/pretty/0.1.37/pretty-0.1.37.jar!/io/aviso/exception.clj",1676259734000,"jar:file:/C:/Users/carre/.m2/repository/expound/expound/0.8.9/expound-0.8.9.jar!/expound/util.cljc",1676259733000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/clojurescript/1.10.914/clojurescript-1.10.914.jar!/cljs/analyzer/impl.cljc",1676259734000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/clojurescript/1.10.914/clojurescript-1.10.914.jar!/cljs/pprint.cljc",1676259734000,"jar:file:/C:/Users/carre/.m2/repository/expound/expound/0.8.9/expound-0.8.9.jar!/expound/printer.cljc",1676259733000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/core.async/1.4.627/core.async-1.4.627.jar!/cljs/core/async.clj",1676259738000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/pprint.clj",1675466804000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/reader_types.clj",1675288215000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/core.async/1.4.627/core.async-1.4.627.jar!/clojure/core/async/impl/dispatch.clj",1676259738000,"jar:file:/C:/Users/carre/.m2/repository/com/taoensso/timbre/5.1.1/timbre-5.1.1.jar!/taoensso/timbre.cljc",1676259736000,"jar:file:/C:/Users/carre/.m2/repository/expound/expound/0.8.9/expound-0.8.9.jar!/expound/alpha.cljc",1676259733000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/core.async/1.4.627/core.async-1.4.627.jar!/clojure/core/async/impl/channels.clj",1676259738000,"jar:file:/C:/Users/carre/.m2/repository/expound/expound/0.8.9/expound-0.8.9.jar!/expound/ansi.cljc",1676259733000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/core.async/1.4.627/core.async-1.4.627.jar!/clojure/core/async/impl/concurrent.clj",1676259738000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/set.clj",1675466804000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/walk.clj",1675466804000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/string.clj",1675466804000,"jar:file:/C:/Users/carre/.m2/repository/com/fulcrologic/guardrails/1.1.4/guardrails-1.1.4.jar!/com/fulcrologic/guardrails/impl/pro.cljc",1676259733000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/clojurescript/1.10.914/clojurescript-1.10.914.jar!/cljs/tagged_literals.cljc",1676259734000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/tools.analyzer/1.1.0/tools.analyzer-1.1.0.jar!/clojure/tools/analyzer.clj",1675288214000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/clojurescript/1.10.914/clojurescript-1.10.914.jar!/cljs/compiler.cljc",1676259734000,"jar:file:/C:/Users/carre/.m2/repository/com/fulcrologic/guardrails/1.1.4/guardrails-1.1.4.jar!/com/fulcrologic/guardrails/registry.cljc",1676259733000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/reflect.clj",1675466804000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/core.async/1.4.627/core.async-1.4.627.jar!/clojure/core/async.clj",1676259738000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/clojurescript/1.10.914/clojurescript-1.10.914.jar!/cljs/spec/gen/alpha.cljc",1676259734000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/clojurescript/1.10.914/clojurescript-1.10.914.jar!/cljs/externs.clj",1676259734000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/edn.clj",1675288215000,"jar:file:/C:/Users/carre/.m2/repository/com/fulcrologic/guardrails/1.1.4/guardrails-1.1.4.jar!/com/fulcrologic/guardrails/config.cljc",1676259733000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/tools.analyzer.jvm/1.2.0/tools.analyzer.jvm-1.2.0.jar!/clojure/tools/analyzer/jvm.clj",1676259734000,"jar:file:/C:/Users/carre/.m2/repository/com/taoensso/encore/3.10.1/encore-3.10.1.jar!/taoensso/encore.cljc",1676259733000,"jar:file:/C:/Users/carre/.m2/repository/binaryage/devtools/1.0.4/devtools-1.0.4.jar!/devtools/defaults.clj",1676259736000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/core.async/1.4.627/core.async-1.4.627.jar!/clojure/core/async/impl/protocols.clj",1676259738000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","Fulcro base component functions. This namespace has no hard dependency on React, and includes all of the core routines\n   found in `components` (that ns just aliases to this one). There is no support in this namespace for creating standard\n   `defsc` components that work in React-based Fulcro, but instead this namespace includes support for building\n   \"normalizing component\" from EQL and sample instances. This gives you all of the general data management power\n   with no ties to React.","^7","com/fulcrologic/fulcro/raw/components.cljc","^8",1,"^9",5,"^:",1,"^;",42],"^<",["^ ","^=","^>","^?","^@","^A","^B","^C","^D"],"^E",null,"^F",["^G",[]],"^H","^I","^J",["^ "],"^M",null,"^N",["^ ","^O","^P","^Q","^R","^S","^S","^T","^U","^V","^S","^W","^W","^X","^X","^Y","^Z","^[","^[","^Z","^Z","^10","^10","^R","^R","^11","^12","^13","^14","^P","^P","^U","^U","^15","^10","^16","^17","^17","^17","^14","^14","^18","^W","^19","^19","^12","^12"],"^1:",["^G",["^1;"]],"~:shadow/js-access-global",["^G",["Error"]],"^1<",["^ ","^1=","^19"],"~:defs",["^ ","~$denormalize-query",["^ ","~:protocol-inline",null,"^5",["^ ","^7","com/fulcrologic/fulcro/raw/components.cljc","^8",296,"^9",7,"^:",296,"^;",24,"~:arglists",["^1@",["~$quote",["^1@",[["~$state-map","~$ID"]]]]],"^6","Takes a state map that may contain normalized queries and a query ID. Returns the stored query or nil."],"^H","^4P","^7","com/fulcrologic/fulcro/raw/components.cljc","^;",24,"~:method-params",["^1@",[["^;>","^;?"]]],"~:protocol-impl",null,"~:arglists-meta",["^1@",[null,null]],"^9",1,"~:variadic?",false,"^8",296,"~:ret-tag",["^G",["~$any","~$clj-nil"]],"^:",296,"~:max-fixed-arity",2,"~:fn-var",true,"^;<",["^1@",["^;=",["^1@",[["^;>","^;?"]]]]],"^6","Takes a state map that may contain normalized queries and a query ID. Returns the stored query or nil."],"~$initial-state",["^ ","^;;",null,"^5",["^ ","^7","com/fulcrologic/fulcro/raw/components.cljc","^8",216,"^9",7,"^:",216,"^;",20,"^;<",["^1@",["^;=",["^1@",[["~$clz","~$params"]]]]]],"^H","^37","^7","com/fulcrologic/fulcro/raw/components.cljc","^;",20,"^;@",["^1@",[["^;J","^;K"]]],"^;A",null,"^;B",["^1@",[null,null]],"^9",1,"^;C",false,"^8",216,"^;D",["^G",["^;E","^;F"]],"^:",216,"^;G",2,"^;H",true,"^;<",["^1@",["^;=",["^1@",[["^;J","^;K"]]]]]],"~$query",["^ ","^;;",null,"^5",["^ ","^7","com/fulcrologic/fulcro/raw/components.cljc","^8",215,"^9",7,"^:",215,"^;",12,"^;<",["^1@",["^;=",["^1@",[["~$this"]]]]]],"^H","^5<","^7","com/fulcrologic/fulcro/raw/components.cljc","^;",12,"^;@",["^1@",[["^;M"]]],"^;A",null,"^;B",["^1@",[null,null]],"^9",1,"^;C",false,"^8",215,"^;D",["^G",["^;E","^;F"]],"^:",215,"^;G",1,"^;H",true,"^;<",["^1@",["^;=",["^1@",[["^;M"]]]]]],"~$is-factory?",["^ ","^;;",null,"^5",["^ ","^7","com/fulcrologic/fulcro/raw/components.cljc","^8",281,"^9",7,"^:",281,"^;",18,"^;<",["^1@",["^;=",["^1@",[["~$class-or-factory"]]]]],"^6","Returns true if the given argument is a component factory."],"^H","^38","^7","com/fulcrologic/fulcro/raw/components.cljc","^;",18,"^;@",["^1@",[["^;O"]]],"^;A",null,"^;B",["^1@",[null,null]],"^9",1,"^;C",false,"^8",281,"^;D","~$boolean","^:",281,"^;G",1,"^;H",true,"^;<",["^1@",["^;=",["^1@",[["^;O"]]]]],"^6","Returns true if the given argument is a component factory."],"~$external-config",["^ ","^;;",null,"^5",["^ ","^7","com/fulcrologic/fulcro/raw/components.cljc","^8",622,"^9",7,"^:",622,"^;",22,"^;<",["^1@",["^;=",["^1@",[["~$app-ish","~$k"]]]]],"^6","Get any custom external configuration that was added to the app at creation-time."],"^H","^4X","^7","com/fulcrologic/fulcro/raw/components.cljc","^;",22,"^;@",["^1@",[["^;R","~$k"]]],"^;A",null,"^;B",["^1@",[null,null]],"^9",1,"^;C",false,"^8",622,"^;D",["^G",[null,"^;E","^;F"]],"^:",622,"^;G",2,"^;H",true,"^;<",["^1@",["^;=",["^1@",[["^;R","~$k"]]]]],"^6","Get any custom external configuration that was added to the app at creation-time."],"~$normalize-query",["^ ","^;;",null,"^5",["^ ","^7","com/fulcrologic/fulcro/raw/components.cljc","^8",502,"^9",7,"^:",502,"^;",22,"^;<",["^1@",["^;=",["^1@",[["^;>","^;L"]]]]],"^6","Given a state map and a query, returns a state map with the query normalized into the database. Query fragments\n  that already appear in the state will not be added.  Part of dynamic query implementation."],"^H","^36","^7","com/fulcrologic/fulcro/raw/components.cljc","^;",22,"^;@",["^1@",[["^;>","^;L"]]],"^;A",null,"^;B",["^1@",[null,null]],"^9",1,"^;C",false,"^8",502,"^;D",["^G",[null,"~$clj","^;E","^;F"]],"^:",502,"^;G",2,"^;H",true,"^;<",["^1@",["^;=",["^1@",[["^;>","^;L"]]]]],"^6","Given a state map and a query, returns a state map with the query normalized into the database. Query fragments\n  that already appear in the state will not be added.  Part of dynamic query implementation."],"~$get-class",["^ ","^;;",null,"^5",["^ ","^7","com/fulcrologic/fulcro/raw/components.cljc","^8",195,"^9",7,"^:",195,"^;",16,"^;<",["^1@",["^;=",["^1@",[["~$instance"]]]]],"^6","Returns the react type (component class) of the given React element (instance). Is identity if used on a class."],"^H","^4S","^7","com/fulcrologic/fulcro/raw/components.cljc","^;",16,"^;@",["^1@",[["^;V"]]],"^;A",null,"^;B",["^1@",[null,null]],"^9",1,"^;C",false,"^8",195,"^;D",["^G",["^;E","^;F"]],"^:",195,"^;G",1,"^;H",true,"^;<",["^1@",["^;=",["^1@",[["^;V"]]]]],"^6","Returns the react type (component class) of the given React element (instance). Is identity if used on a class."],"~$component-class?",["^ ","^;;",null,"^5",["^ ","^7","com/fulcrologic/fulcro/raw/components.cljc","^8",106,"^9",7,"^:",106,"^;",23,"^;<",["^1@",["^;=",["^1@",[["~$x"]]]]],"^6","Returns true if the argument is a component class.","~:tag","^;P"],"^H","^2:","^7","com/fulcrologic/fulcro/raw/components.cljc","^;",23,"^;@",["^1@",[["~$x"]]],"^;A",null,"^;B",["^1@",[null,null]],"^9",1,"^;C",false,"^8",106,"^;D","^;P","^:",106,"^;G",1,"^;X","^;P","^;H",true,"^;<",["^1@",["^;=",["^1@",[["~$x"]]]]],"^6","Returns true if the argument is a component class."],"~$compressible-transact!",["^ ","^;;",null,"^5",["^ ","^7","com/fulcrologic/fulcro/raw/components.cljc","^8",608,"^9",7,"^:",608,"^;",29,"^;<",["^1@",["^;=",["^1@",[["^;R","~$tx"],["^;R","~$ref","^;Z"]]]]],"^6","Identical to `transact!` with `:compressible? true` option. This means that if more than one\n  adjacent history transition edge is compressible, only the more recent of the sequence of them is kept. This\n  is useful for things like form input fields, where storing every keystoke in history is undesirable. This\n  also compress the transactions in Fulcro Inspect.\n\n  NOTE: history events that trigger remote interactions are not compressible, since they may be needed for\n  automatic network error recovery handling.","~:top-fn",["^ ","^;C",false,"~:fixed-arity",3,"^;G",3,"^;@",[["^;R","^;Z"],["^;R","^;[","^;Z"]],"^;<",["^1@",[["^;R","^;Z"],["^;R","^;[","^;Z"]]],"^;B",["^1@",[null,null]]]],"^H","^3I","^7","com/fulcrologic/fulcro/raw/components.cljc","^;",29,"^<0",["^ ","^;C",false,"^<1",3,"^;G",3,"^;@",[["^;R","^;Z"],["^;R","^;[","^;Z"]],"^;<",["^1@",[["^;R","^;Z"],["^;R","^;[","^;Z"]]],"^;B",["^1@",[null,null]]],"^;@",[["^;R","^;Z"],["^;R","^;[","^;Z"]],"^;A",null,"^<1",3,"^;B",["^1@",[null,null]],"^9",1,"^;C",false,"~:methods",[["^ ","^<1",2,"^;C",false,"^;X",["^G",["^;E","^;F"]]],["^ ","^<1",3,"^;C",false,"^;X",["^G",["^;E","^;F"]]]],"^8",608,"^:",608,"^;G",3,"^;H",true,"^;<",["^1@",[["^;R","^;Z"],["^;R","^;[","^;Z"]]],"^6","Identical to `transact!` with `:compressible? true` option. This means that if more than one\n  adjacent history transition edge is compressible, only the more recent of the sequence of them is kept. This\n  is useful for things like form input fields, where storing every keystoke in history is undesirable. This\n  also compress the transactions in Fulcro Inspect.\n\n  NOTE: history events that trigger remote interactions are not compressible, since they may be needed for\n  automatic network error recovery handling."],"~$set-query!",["^ ","^;;",null,"^5",["^ ","^7","com/fulcrologic/fulcro/raw/components.cljc","^8",545,"^9",7,"^:",545,"^;",17,"^;<",["^1@",["^;=",["^1@",[["~$x","^;O",["^ ","~:keys",["^;L","^;K"],"^1B","~$opts"]]]]]],"^6","Public API for setting a dynamic query on a component. This function alters the query and rebuilds internal indexes.\n\n  * `x` : is anything that any->app accepts.\n  * `class-or-factory` : A component class or factory for that class (if using query qualifiers)\n  * `opts` : A map with `query` and optionally `params` (substitutions on queries)\n  "],"^H","^21","^7","com/fulcrologic/fulcro/raw/components.cljc","^;",17,"^;@",["^1@",[["~$x","^;O","~$p__55858"]]],"^;A",null,"^;B",["^1@",[null,null]],"^9",1,"^;C",false,"^8",545,"^;D",["^G",["^;E","^;F"]],"^:",545,"^;G",3,"^;H",true,"^;<",["^1@",["^;=",["^1@",[["~$x","^;O",["^ ","^<4",["^;L","^;K"],"^1B","^<5"]]]]]],"^6","Public API for setting a dynamic query on a component. This function alters the query and rebuilds internal indexes.\n\n  * `x` : is anything that any->app accepts.\n  * `class-or-factory` : A component class or factory for that class (if using query qualifiers)\n  * `opts` : A map with `query` and optionally `params` (substitutions on queries)\n  "],"~$props",["^ ","^;;",null,"^5",["^ ","^7","com/fulcrologic/fulcro/raw/components.cljc","^8",173,"^9",7,"^:",173,"^;",12,"^;<",["^1@",["^;=",["^1@",[["~$component"]]]]],"^6","Return a component's props."],"^H","^3@","^7","com/fulcrologic/fulcro/raw/components.cljc","^;",12,"^;@",["^1@",[["^<8"]]],"^;A",null,"^;B",["^1@",[null,null]],"^9",1,"^;C",false,"^8",173,"^;D","^;E","^:",173,"^;G",1,"^;H",true,"^;<",["^1@",["^;=",["^1@",[["^<8"]]]]],"^6","Return a component's props."],"~$has-ident?",["^ ","^;;",null,"^5",["^ ","^7","com/fulcrologic/fulcro/raw/components.cljc","^8",211,"^9",7,"^:",211,"^;",17,"^;<",["^1@",["^;=",["^1@",[["^<8"]]]]],"^;X","^;P"],"^H","^3?","^7","com/fulcrologic/fulcro/raw/components.cljc","^;",17,"^;@",["^1@",[["^<8"]]],"^;A",null,"^;B",["^1@",[null,null]],"^9",1,"^;C",false,"^8",211,"^;D","^;P","^:",211,"^;G",1,"^;X","^;P","^;H",true,"^;<",["^1@",["^;=",["^1@",[["^<8"]]]]]],"~$isoget",["^ ","^;;",null,"^5",["^ ","^7","com/fulcrologic/fulcro/raw/components.cljc","^8",38,"^9",7,"^:",38,"^;",13,"^;<",["^1@",["^;=",["^1@",[["~$obj","~$k"],["^<;","~$k","~$default"]]]]],"^6","Like get, but for js objects, and in CLJC. In clj, it is just `get`. In cljs it is\n  `gobj/get`.","^<0",["^ ","^;C",false,"^<1",3,"^;G",3,"^;@",[["^<;","~$k"],["^<;","~$k","^<<"]],"^;<",["^1@",[["^<;","~$k"],["^<;","~$k","^<<"]]],"^;B",["^1@",[null,null]]]],"^H","^5A","^7","com/fulcrologic/fulcro/raw/components.cljc","^;",13,"^<0",["^ ","^;C",false,"^<1",3,"^;G",3,"^;@",[["^<;","~$k"],["^<;","~$k","^<<"]],"^;<",["^1@",[["^<;","~$k"],["^<;","~$k","^<<"]]],"^;B",["^1@",[null,null]]],"^;@",[["^<;","~$k"],["^<;","~$k","^<<"]],"^;A",null,"^<1",3,"^;B",["^1@",[null,null]],"^9",1,"^;C",false,"^<2",[["^ ","^<1",2,"^;C",false,"^;X","^;E"],["^ ","^<1",3,"^;C",false,"^;X",["^G",[null,"^;E"]]]],"^8",38,"^:",38,"^;G",3,"^;H",true,"^;<",["^1@",[["^<;","~$k"],["^<;","~$k","^<<"]]],"^6","Like get, but for js objects, and in CLJC. In clj, it is just `get`. In cljs it is\n  `gobj/get`."],"~$get-traced-props",["^ ","^;;",null,"^5",["^ ","^7","com/fulcrologic/fulcro/raw/components.cljc","^8",814,"^9",7,"^:",814,"^;",23,"^;<",["^1@",["^;=",["^1@",[["^;>","^<8","~$ident","~$prior-props"]]]]],"^6","Uses `fdn/traced-db->tree` to get the props of the component at `ident`, and leverages those optimizations to return\n   `prior-props` if they are not stale.\n\n   A subsequent call (e.g. on next render frame) of this function with the prior return value (as `prior-props`)\n   thus gives you an efficient non-react replacement for `shouldComponentUpdate`, etc.\n   "],"^H","^2T","^7","com/fulcrologic/fulcro/raw/components.cljc","^;",23,"^;@",["^1@",[["^;>","^<8","^<>","^<?"]]],"^;A",null,"^;B",["^1@",[null,null]],"^9",1,"^;C",false,"^8",814,"^;D",["^G",[null,"^;E"]],"^:",814,"^;G",4,"^;H",true,"^;<",["^1@",["^;=",["^1@",[["^;>","^<8","^<>","^<?"]]]]],"^6","Uses `fdn/traced-db->tree` to get the props of the component at `ident`, and leverages those optimizations to return\n   `prior-props` if they are not stale.\n\n   A subsequent call (e.g. on next render frame) of this function with the prior return value (as `prior-props`)\n   thus gives you an efficient non-react replacement for `shouldComponentUpdate`, etc.\n   "],"~$children",["^ ","^;;",null,"^5",["^ ","^7","com/fulcrologic/fulcro/raw/components.cljc","^8",181,"^9",7,"^:",181,"^;",15,"^;<",["^1@",["^;=",["^1@",[["^<8"]]]]],"^6","Get the sequence of react children of the given component."],"^H","^3V","^7","com/fulcrologic/fulcro/raw/components.cljc","^;",15,"^;@",["^1@",[["^<8"]]],"^;A",null,"^;B",["^1@",[null,null]],"^9",1,"^;C",false,"^8",181,"^;D",["^G",["~$cljs.core/IVector","^;E"]],"^:",181,"^;G",1,"^;H",true,"^;<",["^1@",["^;=",["^1@",[["^<8"]]]]],"^6","Get the sequence of react children of the given component."],"~$configure-anonymous-component!",["^ ","^;;",null,"^5",["^ ","^7","com/fulcrologic/fulcro/raw/components.cljc","^8",219,"^9",7,"^:",219,"^;",37,"^;<",["^1@",["^;=",["^1@",[["~$render-fn","~$component-options"]]]]],"^6","Make a given `render-fn` (a plain fn) act like a a Fulcro component with the given component options map. Registers the\n  new component in the component-registry. Component options MUST contain :componentName as be a fully-qualified\n  keyword to name the component in the registry.\n\n  component-options *must* include a unique `:componentName` (keyword) that will be used for registering the given\n  function as the faux class in the component registry.\n\n  IMPORTANT: In CLJS this function adds extra things to the mutable js fn. In CLJ, components are just maps, and this\n  side-effect cannot modify it. As such it returns the configured component so you can use it in CLJ."],"^H","^47","^7","com/fulcrologic/fulcro/raw/components.cljc","^;",37,"^;@",["^1@",[["^<C","^<D"]]],"^;A",null,"^;B",["^1@",[null,null]],"^9",1,"^;C",false,"^8",219,"^:",219,"^;G",2,"^;H",true,"^;<",["^1@",["^;=",["^1@",[["^<C","^<D"]]]]],"^6","Make a given `render-fn` (a plain fn) act like a a Fulcro component with the given component options map. Registers the\n  new component in the component-registry. Component options MUST contain :componentName as be a fully-qualified\n  keyword to name the component in the registry.\n\n  component-options *must* include a unique `:componentName` (keyword) that will be used for registering the given\n  function as the faux class in the component registry.\n\n  IMPORTANT: In CLJS this function adds extra things to the mutable js fn. In CLJ, components are just maps, and this\n  side-effect cannot modify it. As such it returns the configured component so you can use it in CLJ."],"~$get-ident",["^ ","^;;",null,"^5",["^ ","^7","com/fulcrologic/fulcro/raw/components.cljc","^8",258,"^9",7,"^:",258,"^;",16,"^;<",["^1@",["^;=",["^1@",[["~$x"],["~$class","^<7"]]]]],"^6","Get the ident for a mounted component OR using a component class.\n\n  That arity-2 will return the ident using the supplied props map.\n\n  The single-arity version should only be used with a mounted component (e.g. `this` from `render`), and will derive the\n  props that were sent to it most recently.","^<0",["^ ","^;C",false,"^<1",2,"^;G",2,"^;@",[["~$x"],["^<F","^<7"]],"^;<",["^1@",[["~$x"],["^<F","^<7"]]],"^;B",["^1@",[null,null]]]],"^H","^2=","^7","com/fulcrologic/fulcro/raw/components.cljc","^;",16,"^<0",["^ ","^;C",false,"^<1",2,"^;G",2,"^;@",[["~$x"],["^<F","^<7"]],"^;<",["^1@",[["~$x"],["^<F","^<7"]]],"^;B",["^1@",[null,null]]],"^;@",[["~$x"],["^<F","^<7"]],"^;A",null,"^<1",2,"^;B",["^1@",[null,null]],"^9",1,"^;C",false,"^<2",[["^ ","^<1",1,"^;C",false,"^;X",["^G",["^;E","^;F"]]],["^ ","^<1",2,"^;C",false,"^;X",["^G",["^<A","^;E","^;F"]]]],"^8",258,"^:",258,"^;G",2,"^;H",true,"^;<",["^1@",[["~$x"],["^<F","^<7"]]],"^6","Get the ident for a mounted component OR using a component class.\n\n  That arity-2 will return the ident using the supplied props map.\n\n  The single-arity version should only be used with a mounted component (e.g. `this` from `render`), and will derive the\n  props that were sent to it most recently."],"~$newer-props",["^ ","^;;",null,"^5",["^ ","^7","com/fulcrologic/fulcro/raw/components.cljc","^8",54,"^9",7,"^:",54,"^;",18,"^;<",["^1@",["^;=",["^1@",[["~$props-a","~$props-b"]]]]],"^6","Returns whichever of the given Fulcro props were most recently generated according to `denormalization-time`. This\n  is part of props 'tunnelling', an optimization to get updated props to instances without going through the root."],"^H","^4:","^7","com/fulcrologic/fulcro/raw/components.cljc","^;",18,"^;@",["^1@",[["^<H","^<I"]]],"^;A",null,"^;B",["^1@",[null,null]],"^9",1,"^;C",false,"^8",54,"^:",54,"^;G",2,"^;H",true,"^;<",["^1@",["^;=",["^1@",[["^<H","^<I"]]]]],"^6","Returns whichever of the given Fulcro props were most recently generated according to `denormalization-time`. This\n  is part of props 'tunnelling', an optimization to get updated props to instances without going through the root."],"~$pre-merge",["^ ","^;;",null,"^5",["^ ","^7","com/fulcrologic/fulcro/raw/components.cljc","^8",217,"^9",7,"^:",217,"^;",16,"^;<",["^1@",["^;=",["^1@",[["^;M","~$data"]]]]]],"^H","^29","^7","com/fulcrologic/fulcro/raw/components.cljc","^;",16,"^;@",["^1@",[["^;M","^<K"]]],"^;A",null,"^;B",["^1@",[null,null]],"^9",1,"^;C",false,"^8",217,"^;D",["^G",["^;E","^;F"]],"^:",217,"^;G",2,"^;H",true,"^;<",["^1@",["^;=",["^1@",[["^;M","^<K"]]]]]],"~$id-key",["^ ","^;;",null,"^5",["^ ","^7","com/fulcrologic/fulcro/raw/components.cljc","^8",661,"^9",7,"^:",661,"^;",13,"^;<",["^1@",["^;=",["^1@",[["^<7"]]]]],"^6","Returns the keyword of the most likely ID attribute in the given props (the first one with the `name` \"id\").\n  Returns nil if there isn't one. This is useful when trying to derive an ident from a sample tree of data, for example."],"^H","^23","^7","com/fulcrologic/fulcro/raw/components.cljc","^;",13,"^;@",["^1@",[["^<7"]]],"^;A",null,"^;B",["^1@",[null,null]],"^9",1,"^;C",false,"^8",661,"^;D",["^G",["^;E","^;F"]],"^:",661,"^;G",1,"^;H",true,"^;<",["^1@",["^;=",["^1@",[["^<7"]]]]],"^6","Returns the keyword of the most likely ID attribute in the given props (the first one with the `name` \"id\").\n  Returns nil if there isn't one. This is useful when trying to derive an ident from a sample tree of data, for example."],"~$normalize-query-elements",["^ ","^;;",null,"^5",["^ ","^7","com/fulcrologic/fulcro/raw/components.cljc","^8",453,"^9",7,"^:",453,"^;",31,"^;<",["^1@",["^;=",["^1@",[["^;>","^;L"]]]]],"^6","Part of internal implementation of dynamic queries.\n\n  Determines if there are query elements in the `query` that need to be normalized. If so, it does so.\n\n  Returns the new state map containing potentially-updated normalized queries."],"^H","^4E","^7","com/fulcrologic/fulcro/raw/components.cljc","^;",31,"^;@",["^1@",[["^;>","^;L"]]],"^;A",null,"^;B",["^1@",[null,null]],"^9",1,"^;C",false,"^8",453,"^;D",["^G",[null,"^;E"]],"^:",453,"^;G",2,"^;H",true,"^;<",["^1@",["^;=",["^1@",[["^;>","^;L"]]]]],"^6","Part of internal implementation of dynamic queries.\n\n  Determines if there are query elements in the `query` that need to be normalized. If so, it does so.\n\n  Returns the new state map containing potentially-updated normalized queries."],"~$computed",["^ ","^;;",null,"^5",["^ ","^7","com/fulcrologic/fulcro/raw/components.cljc","^8",141,"^9",7,"^:",141,"^;",15,"^;<",["^1@",["^;=",["^1@",[["^<7","~$computed-map"]]]]],"^6","Add computed properties to props. This will *replace* any pre-existing computed properties. Computed props are\n  necessary when a parent component wishes to pass callbacks or other data to children that *have a query*. This\n  is not necessary for \"stateless\" components, though it will work properly for both.\n\n  Computed props are \"remembered\" so that a targeted update (which can only happen on a component with a query\n  and ident) can use new props from the database without \"losing\" the computed props that were originally passed\n  from the parent. If you pass things like callbacks through normal props, then targeted updates will seem to \"lose\n  track of\" them.\n  "],"^H","^2?","^7","com/fulcrologic/fulcro/raw/components.cljc","^;",15,"^;@",["^1@",[["^<7","^<O"]]],"^;A",null,"^;B",["^1@",[null,null]],"^9",1,"^;C",false,"^8",141,"^;D",["^G",[null,"^;T","^;E","~$cljs.core/MetaFn","^;F"]],"^:",141,"^;G",2,"^;H",true,"^;<",["^1@",["^;=",["^1@",[["^<7","^<O"]]]]],"^6","Add computed properties to props. This will *replace* any pre-existing computed properties. Computed props are\n  necessary when a parent component wishes to pass callbacks or other data to children that *have a query*. This\n  is not necessary for \"stateless\" components, though it will work properly for both.\n\n  Computed props are \"remembered\" so that a targeted update (which can only happen on a component with a query\n  and ident) can use new props from the database without \"losing\" the computed props that were originally passed\n  from the parent. If you pass things like callbacks through normal props, then targeted updates will seem to \"lose\n  track of\" them.\n  "],"~$normalize*",["^ ","^;;",null,"^5",["^ ","^7","com/fulcrologic/fulcro/raw/components.cljc","^8",679,"^9",8,"^:",679,"^;",18,"~:private",true,"^;<",["^1@",["^;=",["^1@",[[["^ ","^<4",["^<@","~$type"],"^1B","~$original-node"],["^ ","^<4",["~$componentName"],"^1B","~$top-component-options"]]]]]]],"^<R",true,"^H","^2V","^7","com/fulcrologic/fulcro/raw/components.cljc","^;",18,"^;@",["^1@",[["~$p__55969","~$p__55970"]]],"^;A",null,"^;B",["^1@",[null,null]],"^9",1,"^;C",false,"^8",679,"^;D",["^G",["^;T","^;E"]],"^:",679,"^;G",2,"^;H",true,"^;<",["^1@",["^;=",["^1@",[[["^ ","^<4",["^<@","^<S"],"^1B","^<T"],["^ ","^<4",["^<U"],"^1B","^<V"]]]]]]],"~$component-name",["^ ","^;;",null,"^5",["^ ","^7","com/fulcrologic/fulcro/raw/components.cljc","^8",113,"^9",7,"^:",113,"^;",21,"^;<",["^1@",["^;=",["^1@",[["^<F"]]]]],"^6","Returns a string version of the given react component's name. Works on component instances and classes."],"^H","^4=","^7","com/fulcrologic/fulcro/raw/components.cljc","^;",21,"^;@",["^1@",[["^<F"]]],"^;A",null,"^;B",["^1@",[null,null]],"^9",1,"^;C",false,"^8",113,"^;D","^;E","^:",113,"^;G",1,"^;H",true,"^;<",["^1@",["^;=",["^1@",[["^<F"]]]]],"^6","Returns a string version of the given react component's name. Works on component instances and classes."],"~$entity->component",["^ ","^;;",null,"^5",["^ ","^7","com/fulcrologic/fulcro/raw/components.cljc","^8",747,"^9",7,"^:",747,"^;",24,"^;<",["^1@",["^;=",["^1@",[["~$entity-data-tree"],["^<[","~$top-level-options"]]]]],"^6","Creates a normalizing component from an entity tree. Every sub-element of the tree provided will generate an anonymous\n   normalizing component if that element has an ID field. For to-many relations only the first item is used for query/ident\n   generation.\n\n   The returned anonymous component will have initial state that matches the provided entity data tree.\n\n   This means you can use a sample tree to generate both the initial state for a subtree of your app and the components\n   necessary to do I/O on that tree.\n\n   This kind of component will *not* be registered in the component registry unless you pass a :componentName\n   via the top-level-options. A registry entry is necessary for things that\n   require the registry, such as dynamic queries and UI state machines).\n   ","^<0",["^ ","^;C",false,"^<1",2,"^;G",2,"^;@",[["^<["],["^<[","^=0"]],"^;<",["^1@",[["^<["],["^<[","^=0"]]],"^;B",["^1@",[null,null]]]],"^H","^4Z","^7","com/fulcrologic/fulcro/raw/components.cljc","^;",24,"^<0",["^ ","^;C",false,"^<1",2,"^;G",2,"^;@",[["^<["],["^<[","^=0"]],"^;<",["^1@",[["^<["],["^<[","^=0"]]],"^;B",["^1@",[null,null]]],"^;@",[["^<["],["^<[","^=0"]],"^;A",null,"^<1",2,"^;B",["^1@",[null,null]],"^9",1,"^;C",false,"^<2",[["^ ","^<1",1,"^;C",false,"^;X","^;E"],["^ ","^<1",2,"^;C",false,"^;X","^;E"]],"^8",747,"^:",747,"^;G",2,"^;H",true,"^;<",["^1@",[["^<["],["^<[","^=0"]]],"^6","Creates a normalizing component from an entity tree. Every sub-element of the tree provided will generate an anonymous\n   normalizing component if that element has an ID field. For to-many relations only the first item is used for query/ident\n   generation.\n\n   The returned anonymous component will have initial state that matches the provided entity data tree.\n\n   This means you can use a sample tree to generate both the initial state for a subtree of your app and the components\n   necessary to do I/O on that tree.\n\n   This kind of component will *not* be registered in the component registry unless you pass a :componentName\n   via the top-level-options. A registry entry is necessary for things that\n   require the registry, such as dynamic queries and UI state machines).\n   "],"~$get-computed",["^ ","^;;",null,"^5",["^ ","^7","com/fulcrologic/fulcro/raw/components.cljc","^8",159,"^9",7,"^:",159,"^;",19,"^;<",["^1@",["^;=",["^1@",[["~$x"],["~$x","~$k-or-ks"]]]]],"^6","Return the computed properties on a component or its props. Note that it requires that the normal properties are not nil.","^<0",["^ ","^;C",false,"^<1",2,"^;G",2,"^;@",[["~$x"],["~$x","^=2"]],"^;<",["^1@",[["~$x"],["~$x","^=2"]]],"^;B",["^1@",[null,null]]]],"^H","^31","^7","com/fulcrologic/fulcro/raw/components.cljc","^;",19,"^<0",["^ ","^;C",false,"^<1",2,"^;G",2,"^;@",[["~$x"],["~$x","^=2"]],"^;<",["^1@",[["~$x"],["~$x","^=2"]]],"^;B",["^1@",[null,null]]],"^;@",[["~$x"],["~$x","^=2"]],"^;A",null,"^<1",2,"^;B",["^1@",[null,null]],"^9",1,"^;C",false,"^<2",[["^ ","^<1",1,"^;C",false,"^;X","^;E"],["^ ","^<1",2,"^;C",false,"^;X",["^G",[null,"^;E","^;F"]]]],"^8",159,"^:",159,"^;G",2,"^;H",true,"^;<",["^1@",[["~$x"],["~$x","^=2"]]],"^6","Return the computed properties on a component or its props. Note that it requires that the normal properties are not nil."],"~$get-subquery-component",["^ ","^;;",null,"^5",["^ ","^7","com/fulcrologic/fulcro/raw/components.cljc","^8",801,"^9",9,"^:",801,"^;",31,"^;<",["^1@",["^;=",["^1@",[["^<8","~$query-path"],["^<8","^=4","^;>"]]]]],"^6","Obtains the normalizing component that is associated with the given query path on the given component.\n\n    For example `(get-subquery-component Person [:person/addresses])` would return the component for\n    the `:person/addresses` join. If state-map is supplied then dynamic query support is possible; otherwise it\n    will be the original static query.","^<0",["^ ","^;C",false,"^<1",3,"^;G",3,"^;@",[["^<8","^=4"],["^<8","^=4","^;>"]],"^;<",["^1@",[["^<8","^=4"],["^<8","^=4","^;>"]]],"^;B",["^1@",[null,null]]]],"^H","^2[","^7","com/fulcrologic/fulcro/raw/components.cljc","^;",31,"^<0",["^ ","^;C",false,"^<1",3,"^;G",3,"^;@",[["^<8","^=4"],["^<8","^=4","^;>"]],"^;<",["^1@",[["^<8","^=4"],["^<8","^=4","^;>"]]],"^;B",["^1@",[null,null]]],"^;@",[["^<8","^=4"],["^<8","^=4","^;>"]],"^;A",null,"^<1",3,"^;B",["^1@",[null,null]],"^9",3,"^;C",false,"^<2",[["^ ","^<1",2,"^;C",false,"^;X","^;E"],["^ ","^<1",3,"^;C",false,"^;X","^;E"]],"^8",801,"^:",801,"^;G",3,"^;H",true,"^;<",["^1@",[["^<8","^=4"],["^<8","^=4","^;>"]]],"^6","Obtains the normalizing component that is associated with the given query path on the given component.\n\n    For example `(get-subquery-component Person [:person/addresses])` would return the component for\n    the `:person/addresses` join. If state-map is supplied then dynamic query support is possible; otherwise it\n    will be the original static query."],"~$has-query?",["^ ","^;;",null,"^5",["^ ","^7","com/fulcrologic/fulcro/raw/components.cljc","^8",212,"^9",7,"^:",212,"^;",17,"^;<",["^1@",["^;=",["^1@",[["^<8"]]]]],"^;X","^;P"],"^H","^3Q","^7","com/fulcrologic/fulcro/raw/components.cljc","^;",17,"^;@",["^1@",[["^<8"]]],"^;A",null,"^;B",["^1@",[null,null]],"^9",1,"^;C",false,"^8",212,"^;D","^;P","^:",212,"^;G",1,"^;X","^;P","^;H",true,"^;<",["^1@",["^;=",["^1@",[["^<8"]]]]]],"~$nc",["^ ","^;;",null,"^5",["^ ","^7","com/fulcrologic/fulcro/raw/components.cljc","^8",711,"^9",7,"^:",711,"^;",9,"^;<",["^1@",["^;=",["^1@",[["^;L"],["^;L",["^ ","^<4",["^<U"],"^1B","^<V"]]]]]],"^6","Create an anonymous normalizing query component. By default the normalization will be auto-detected based on there being a prop at each\n   entity level that has (any) namespace, and a name of `id`. For example:\n\n   ```\n   [:list/id :list/name {:list/items [:item/id :item/complete? :item/label]}]\n   ```\n\n   will create a normalizing query that expects the top-level values to be normalized by `:list/id` and the nested\n   items to be normalized by `:item/id`. If there is more than one ID in your props, make sure the *first* one is\n   the one to use for normalization.\n\n   The `top-component-options` becomes the options map of the component.\n\n   You can include :componentName to push the resulting anonymous component definition into the component registry, which\n   is needed by some parts of Fulcro, like UISM.\n\n   NOTE: `nc` is recursive, and *does* compose if you want to name the components at various levels. It can be used with queries from\n   other defsc components:\n\n   ```\n   (def query (nc [:user/id\n                   :user/name\n                   ;; Generate an anonymous component that is available in the registry under ::Session\n                   {:user/session-details (nc [:session/id :session/last-login] {:componentName ::Session})}\n                   ;; Use a defsc query as the source\n                   {:user/settings (comp/get-query Settings)}\n                   ;; Autogenerates an anonymous address query component that has no name\n                   {:user/address [:address/id :address/street]}]))\n   ```\n   ","^<0",["^ ","^;C",false,"^<1",2,"^;G",2,"^;@",[["^;L"],["^;L",["^ ","^<4",["^<U"],"^1B","^<V"]]],"^;<",["^1@",[["^;L"],["^;L",["^ ","^<4",["^<U"],"^1B","^<V"]]]],"^;B",["^1@",[null,null]]]],"^H","^4Q","^7","com/fulcrologic/fulcro/raw/components.cljc","^;",9,"^<0",["^ ","^;C",false,"^<1",2,"^;G",2,"^;@",[["^;L"],["^;L",["^ ","^<4",["^<U"],"^1B","^<V"]]],"^;<",["^1@",[["^;L"],["^;L",["^ ","^<4",["^<U"],"^1B","^<V"]]]],"^;B",["^1@",[null,null]]],"^;@",[["^;L"],["^;L",["^ ","^<4",["^<U"],"^1B","^<V"]]],"^;A",null,"^<1",2,"^;B",["^1@",[null,null]],"^9",1,"^;C",false,"^<2",[["^ ","^<1",1,"^;C",false,"^;X","^;E"],["^ ","^<1",2,"^;C",false,"^;X","^;E"]],"^8",711,"^:",711,"^;G",2,"^;H",true,"^;<",["^1@",[["^;L"],["^;L",["^ ","^<4",["^<U"],"^1B","^<V"]]]],"^6","Create an anonymous normalizing query component. By default the normalization will be auto-detected based on there being a prop at each\n   entity level that has (any) namespace, and a name of `id`. For example:\n\n   ```\n   [:list/id :list/name {:list/items [:item/id :item/complete? :item/label]}]\n   ```\n\n   will create a normalizing query that expects the top-level values to be normalized by `:list/id` and the nested\n   items to be normalized by `:item/id`. If there is more than one ID in your props, make sure the *first* one is\n   the one to use for normalization.\n\n   The `top-component-options` becomes the options map of the component.\n\n   You can include :componentName to push the resulting anonymous component definition into the component registry, which\n   is needed by some parts of Fulcro, like UISM.\n\n   NOTE: `nc` is recursive, and *does* compose if you want to name the components at various levels. It can be used with queries from\n   other defsc components:\n\n   ```\n   (def query (nc [:user/id\n                   :user/name\n                   ;; Generate an anonymous component that is available in the registry under ::Session\n                   {:user/session-details (nc [:session/id :session/last-login] {:componentName ::Session})}\n                   ;; Use a defsc query as the source\n                   {:user/settings (comp/get-query Settings)}\n                   ;; Autogenerates an anonymous address query component that has no name\n                   {:user/address [:address/id :address/street]}]))\n   ```\n   "],"~$isoget-in",["^ ","^;;",null,"^5",["^ ","^7","com/fulcrologic/fulcro/raw/components.cljc","^8",27,"^9",7,"^:",27,"^;",16,"^;<",["^1@",["^;=",["^1@",[["^<;","~$kvs"],["^<;","^=8","^<<"]]]]],"^6","Like get-in, but for js objects, and in CLJC. In clj, it is just get-in. In cljs it is\n  gobj/getValueByKeys.","^<0",["^ ","^;C",false,"^<1",3,"^;G",3,"^;@",[["^<;","^=8"],["^<;","^=8","^<<"]],"^;<",["^1@",[["^<;","^=8"],["^<;","^=8","^<<"]]],"^;B",["^1@",[null,null]]]],"^H","^3O","^7","com/fulcrologic/fulcro/raw/components.cljc","^;",16,"^<0",["^ ","^;C",false,"^<1",3,"^;G",3,"^;@",[["^<;","^=8"],["^<;","^=8","^<<"]],"^;<",["^1@",[["^<;","^=8"],["^<;","^=8","^<<"]]],"^;B",["^1@",[null,null]]],"^;@",[["^<;","^=8"],["^<;","^=8","^<<"]],"^;A",null,"^<1",3,"^;B",["^1@",[null,null]],"^9",1,"^;C",false,"^<2",[["^ ","^<1",2,"^;C",false,"^;X","^;E"],["^ ","^<1",3,"^;C",false,"^;X",["^G",[null,"^;E"]]]],"^8",27,"^:",27,"^;G",3,"^;H",true,"^;<",["^1@",[["^<;","^=8"],["^<;","^=8","^<<"]]],"^6","Like get-in, but for js objects, and in CLJC. In clj, it is just get-in. In cljs it is\n  gobj/getValueByKeys."],"~$query-id",["^ ","^;;",null,"^5",["^ ","^7","com/fulcrologic/fulcro/raw/components.cljc","^8",287,"^9",7,"^:",287,"^;",15,"^;<",["^1@",["^;=",["^1@",[["^<F","~$qualifier"]]]]],"^6","Returns a string ID for the query of the given class with qualifier."],"^H","^4K","^7","com/fulcrologic/fulcro/raw/components.cljc","^;",15,"^;@",["^1@",[["^<F","^=:"]]],"^;A",null,"^;B",["^1@",[null,null]],"^9",1,"^;C",false,"^8",287,"^;D",["^G",["~$string","^;F"]],"^:",287,"^;G",2,"^;H",true,"^;<",["^1@",["^;=",["^1@",[["^<F","^=:"]]]]],"^6","Returns a string ID for the query of the given class with qualifier."],"~$refresh-dynamic-queries!",["^ ","^;;",null,"^5",["^ ","^7","com/fulcrologic/fulcro/raw/components.cljc","^8",579,"^9",9,"^:",579,"^;",33,"^;<",["^1@",["^;=",["^1@",[["^;R","~$cls","~$force?"],["^;R"]]]]],"^6","Refresh the current dynamic queries in app state to reflect any updates to the static queries of the components.\n\n     This can be used at development time to update queries that have changed but that hot code reload does not\n     reflect (because there is a current saved query in state). This is *not* always what you want, since a component\n     may have a custom query whose prop-level elements are set to a particular thing on purpose.\n\n     An component that has `:preserve-dynamic-query? true` in its component options will be ignored by\n     this function.","^<0",["^ ","^;C",false,"^<1",3,"^;G",3,"^;@",[["^;R","^==","^=>"],["^;R"]],"^;<",["^1@",[["^;R","^==","^=>"],["^;R"]]],"^;B",["^1@",[null,null]]]],"^H","^3J","^7","com/fulcrologic/fulcro/raw/components.cljc","^;",33,"^<0",["^ ","^;C",false,"^<1",3,"^;G",3,"^;@",[["^;R","^==","^=>"],["^;R"]],"^;<",["^1@",[["^;R","^==","^=>"],["^;R"]]],"^;B",["^1@",[null,null]]],"^;@",[["^;R","^==","^=>"],["^;R"]],"^;A",null,"^<1",3,"^;B",["^1@",[null,null]],"^9",3,"^;C",false,"^<2",[["^ ","^<1",3,"^;C",false,"^;X",["^G",["^;E","^;F"]]],["^ ","^<1",1,"^;C",false,"^;X",["^G",["^;E","^;F"]]]],"^8",579,"^:",579,"^;G",3,"^;H",true,"^;<",["^1@",[["^;R","^==","^=>"],["^;R"]]],"^6","Refresh the current dynamic queries in app state to reflect any updates to the static queries of the components.\n\n     This can be used at development time to update queries that have changed but that hot code reload does not\n     reflect (because there is a current saved query in state). This is *not* always what you want, since a component\n     may have a custom query whose prop-level elements are set to a particular thing on purpose.\n\n     An component that has `:preserve-dynamic-query? true` in its component options will be ignored by\n     this function."],"~$get-initial-state",["^ ","^;;",null,"^5",["^ ","^7","com/fulcrologic/fulcro/raw/components.cljc","^8",251,"^9",7,"^:",251,"^;",24,"^;<",["^1@",["^;=",["^1@",[["^<F"],["^<F","^;K"]]]]],"^6","Get the declared :initial-state value for a component.","^<0",["^ ","^;C",false,"^<1",2,"^;G",2,"^;@",[["^<F"],["^<F","^;K"]],"^;<",["^1@",[["^<F"],["^<F","^;K"]]],"^;B",["^1@",[null,null]]]],"^H","^4M","^7","com/fulcrologic/fulcro/raw/components.cljc","^;",24,"^<0",["^ ","^;C",false,"^<1",2,"^;G",2,"^;@",[["^<F"],["^<F","^;K"]],"^;<",["^1@",[["^<F"],["^<F","^;K"]]],"^;B",["^1@",[null,null]]],"^;@",[["^<F"],["^<F","^;K"]],"^;A",null,"^<1",2,"^;B",["^1@",[null,null]],"^9",1,"^;C",false,"^<2",[["^ ","^<1",1,"^;C",false,"^;X",["^G",["^;T","^<P","^;F"]]],["^ ","^<1",2,"^;C",false,"^;X",["^G",["^;T","^<P","^;F"]]]],"^8",251,"^:",251,"^;G",2,"^;H",true,"^;<",["^1@",[["^<F"],["^<F","^;K"]]],"^6","Get the declared :initial-state value for a component."],"~$any->app",["^ ","^;;",null,"^5",["^ ","^7","com/fulcrologic/fulcro/raw/components.cljc","^8",75,"^9",7,"^:",75,"^;",15,"^;<",["^1@",["^;=",["^1@",[["~$x"]]]]],"^6","Attempt to coerce `x` to an app.  Legal inputs are a fulcro application, a mounted component,\n  or an atom holding any of the above."],"^H","^39","^7","com/fulcrologic/fulcro/raw/components.cljc","^;",15,"^;@",["^1@",[["~$x"]]],"^;A",null,"^;B",["^1@",[null,null]],"^9",1,"^;C",false,"^8",75,"^:",75,"^;G",1,"^;H",true,"^;<",["^1@",["^;=",["^1@",[["~$x"]]]]],"^6","Attempt to coerce `x` to an app.  Legal inputs are a fulcro application, a mounted component,\n  or an atom holding any of the above."],"~$set-query*",["^ ","^;;",null,"^5",["^ ","^7","com/fulcrologic/fulcro/raw/components.cljc","^8",518,"^9",7,"^:",518,"^;",17,"^;<",["^1@",["^;=",["^1@",[["^;>","^;O",["^ ","^<4",["^;L"],"^1B","~$args"]]]]]],"^6","Put a query in app state.\n\n  NOTE: Indexes must be rebuilt after setting a query, so this function should primarily be used to build\n  up an initial app state."],"^H","^3=","^7","com/fulcrologic/fulcro/raw/components.cljc","^;",17,"^;@",["^1@",[["^;>","^;O","~$p__55840"]]],"^;A",null,"^;B",["^1@",[null,null]],"^9",1,"^;C",false,"^8",518,"^;D",["^G",[null,"^;T","^;E","^;F"]],"^:",518,"^;G",3,"^;H",true,"^;<",["^1@",["^;=",["^1@",[["^;>","^;O",["^ ","^<4",["^;L"],"^1B","^=B"]]]]]],"^6","Put a query in app state.\n\n  NOTE: Indexes must be rebuilt after setting a query, so this function should primarily be used to build\n  up an initial app state."],"~$link-element",["^ ","^;;",null,"^5",["^ ","^7","com/fulcrologic/fulcro/raw/components.cljc","^8",446,"^9",7,"^:",446,"^;",19,"^;<",["^1@",["^;=",["^1@",[["~$element"]]]]],"^6","Part of internal implementation of dynamic queries."],"^H","^59","^7","com/fulcrologic/fulcro/raw/components.cljc","^;",19,"^;@",["^1@",[["^=E"]]],"^;A",null,"^;B",["^1@",[null,null]],"^9",1,"^;C",false,"^8",446,"^;D","^;E","^:",446,"^;G",1,"^;H",true,"^;<",["^1@",["^;=",["^1@",[["^=E"]]]]],"^6","Part of internal implementation of dynamic queries."],"~$transact!",["^ ","^;;",null,"^5",["^ ","^7","com/fulcrologic/fulcro/raw/components.cljc","^8",357,"^9",7,"^:",357,"^;",16,"^;<",["^1@",["^;=",["^1@",[["~$app-or-component","^;Z","~$options"],["~$app-or-comp","^;Z"]]]]],"^6","Submit a transaction for processing.\n\n  The underlying transaction system is pluggable, but the *default* supported options are:\n\n  - `:optimistic?` - boolean. Should the transaction be processed optimistically?\n  - `:ref` - ident. The ident of the component used to submit this transaction. This is set automatically if you use a component to call this function.\n  - `:component` - React element. Set automatically if you call this function using a component.\n  - `:refresh` - Vector containing idents (of components) and keywords (of props). Things that have changed and should be re-rendered\n    on screen. Only necessary when the underlying rendering algorithm won't auto-detect, such as when UI is derived from the\n    state of other components or outside of the directly queried props. Interpretation depends on the renderer selected:\n    The ident-optimized render treats these as \"extras\".\n  - `:only-refresh` - Vector of idents/keywords.  If the underlying rendering configured algorithm supports it: The\n    components using these are the *only* things that will be refreshed in the UI.\n    This can be used to avoid the overhead of looking for stale data when you know exactly what\n    you want to refresh on screen as an extra optimization. Idents are *not* checked against queries.\n  - `:abort-id` - An ID (you make up) that makes it possible (if the plugins you're using support it) to cancel\n    the network portion of the transaction (assuming it has not already completed).\n  - `:compressible?` - boolean. Check compressible-transact! docs.\n  - `:synchronous?` - boolean. When turned on the transaction will run immediately on the calling thread. If run against\n  a component then the props will be immediately tunneled back to the calling component, allowing for React (raw) input\n  event handlers to behave as described in standard React Forms docs (uses setState behind the scenes). Any remote operations\n  will still be queued as normal. Calling `transact!!` is a shorthand for this option. WARNING: ONLY the given component will\n  be refreshed in the UI. If you have dependent data elsewhere in the UI you must either use `transact!` or schedule\n  your own global render using `app/schedule-render!`.\n  - `:after-render?` - Wait until the next render completes before allowing this transaction to run. This can be used\n  when calling `transact!` from *within* another mutation to ensure that the effects of the current mutation finish\n  before this transaction takes control of the CPU. This option defaults to `false`, but `defmutation` causes it to\n  be set to true for any transactions run within mutation action sections. You can affect the default for this value\n  in a dynamic scope by binding `*after-render*` to true\n  - `:parallel?` - Boolean. If true, the mutation(s) in the transaction will NOT go into a network queue, nor\n    will it block later mutations or queries.\n\n  You may add any additional keys to the option map (namespaced is ideal), and any value is legal in the options\n  map, including functions. The options will appear in the `env` of all mutations run in the transaction as\n  `:com.fulcrologic.fulcro.algorithms.tx-processing/options`. This is the preferred way of passing things like\n  lambdas (if you wanted something like a callback) to mutations. Note that mutation symbols are perfectly legal\n  as mutation *arguments*, so chaining mutations can already be done via the normal transaction mechanism, and\n  callbacks, while sometimes necessary/useful, should be limited to usages where there is no other clean way\n  to accomplish the goal.\n\n\n  NOTE: This function calls the application's `tx!` function (which is configurable). Fulcro 2 'follow-on reads' are\n  supported by the default version and are added to the `:refresh` entries. Your choice of rendering algorithm will\n  influence their necessity.\n\n  Returns the transaction ID of the submitted transaction.\n  ","^<0",["^ ","^;C",false,"^<1",3,"^;G",3,"^;@",[["^=G","^;Z","^=H"],["^=I","^;Z"]],"^;<",["^1@",[["^=G","^;Z","^=H"],["^=I","^;Z"]]],"^;B",["^1@",[null,null]]]],"^H","^45","^7","com/fulcrologic/fulcro/raw/components.cljc","^;",16,"^<0",["^ ","^;C",false,"^<1",3,"^;G",3,"^;@",[["^=G","^;Z","^=H"],["^=I","^;Z"]],"^;<",["^1@",[["^=G","^;Z","^=H"],["^=I","^;Z"]]],"^;B",["^1@",[null,null]]],"^;@",[["^=G","^;Z","^=H"],["^=I","^;Z"]],"^;A",null,"^<1",3,"^;B",["^1@",[null,null]],"^9",1,"^;C",false,"^<2",[["^ ","^<1",3,"^;C",false,"^;X",["^G",["^;E","^;F"]]],["^ ","^<1",2,"^;C",false,"^;X",["^G",["^;E","^;F"]]]],"^8",357,"^:",357,"^;G",3,"^;H",true,"^;<",["^1@",[["^=G","^;Z","^=H"],["^=I","^;Z"]]],"^6","Submit a transaction for processing.\n\n  The underlying transaction system is pluggable, but the *default* supported options are:\n\n  - `:optimistic?` - boolean. Should the transaction be processed optimistically?\n  - `:ref` - ident. The ident of the component used to submit this transaction. This is set automatically if you use a component to call this function.\n  - `:component` - React element. Set automatically if you call this function using a component.\n  - `:refresh` - Vector containing idents (of components) and keywords (of props). Things that have changed and should be re-rendered\n    on screen. Only necessary when the underlying rendering algorithm won't auto-detect, such as when UI is derived from the\n    state of other components or outside of the directly queried props. Interpretation depends on the renderer selected:\n    The ident-optimized render treats these as \"extras\".\n  - `:only-refresh` - Vector of idents/keywords.  If the underlying rendering configured algorithm supports it: The\n    components using these are the *only* things that will be refreshed in the UI.\n    This can be used to avoid the overhead of looking for stale data when you know exactly what\n    you want to refresh on screen as an extra optimization. Idents are *not* checked against queries.\n  - `:abort-id` - An ID (you make up) that makes it possible (if the plugins you're using support it) to cancel\n    the network portion of the transaction (assuming it has not already completed).\n  - `:compressible?` - boolean. Check compressible-transact! docs.\n  - `:synchronous?` - boolean. When turned on the transaction will run immediately on the calling thread. If run against\n  a component then the props will be immediately tunneled back to the calling component, allowing for React (raw) input\n  event handlers to behave as described in standard React Forms docs (uses setState behind the scenes). Any remote operations\n  will still be queued as normal. Calling `transact!!` is a shorthand for this option. WARNING: ONLY the given component will\n  be refreshed in the UI. If you have dependent data elsewhere in the UI you must either use `transact!` or schedule\n  your own global render using `app/schedule-render!`.\n  - `:after-render?` - Wait until the next render completes before allowing this transaction to run. This can be used\n  when calling `transact!` from *within* another mutation to ensure that the effects of the current mutation finish\n  before this transaction takes control of the CPU. This option defaults to `false`, but `defmutation` causes it to\n  be set to true for any transactions run within mutation action sections. You can affect the default for this value\n  in a dynamic scope by binding `*after-render*` to true\n  - `:parallel?` - Boolean. If true, the mutation(s) in the transaction will NOT go into a network queue, nor\n    will it block later mutations or queries.\n\n  You may add any additional keys to the option map (namespaced is ideal), and any value is legal in the options\n  map, including functions. The options will appear in the `env` of all mutations run in the transaction as\n  `:com.fulcrologic.fulcro.algorithms.tx-processing/options`. This is the preferred way of passing things like\n  lambdas (if you wanted something like a callback) to mutations. Note that mutation symbols are perfectly legal\n  as mutation *arguments*, so chaining mutations can already be done via the normal transaction mechanism, and\n  callbacks, while sometimes necessary/useful, should be limited to usages where there is no other clean way\n  to accomplish the goal.\n\n\n  NOTE: This function calls the application's `tx!` function (which is configurable). Fulcro 2 'follow-on reads' are\n  supported by the default version and are added to the `:refresh` entries. Your choice of rendering algorithm will\n  influence their necessity.\n\n  Returns the transaction ID of the submitted transaction.\n  "],"~$has-pre-merge?",["^ ","^;;",null,"^5",["^ ","^7","com/fulcrologic/fulcro/raw/components.cljc","^8",213,"^9",7,"^:",213,"^;",21,"^;<",["^1@",["^;=",["^1@",[["^<8"]]]]],"^;X","^;P"],"^H","^44","^7","com/fulcrologic/fulcro/raw/components.cljc","^;",21,"^;@",["^1@",[["^<8"]]],"^;A",null,"^;B",["^1@",[null,null]],"^9",1,"^;C",false,"^8",213,"^;D","^;P","^:",213,"^;G",1,"^;X","^;P","^;H",true,"^;<",["^1@",["^;=",["^1@",[["^<8"]]]]]],"~$get-query",["^ ","^;;",null,"^5",["^ ","^7","com/fulcrologic/fulcro/raw/components.cljc","^8",321,"^9",7,"^:",321,"^;",16,"^;<",["^1@",["^;=",["^1@",[["^;O"],["^;O","^;>"]]]]],"^6","Get the query for the given class or factory. If called without a state map, then you'll get the declared static\n  query of the class. If a state map is supplied, then the dynamically set queries in that state will result in\n  the current dynamically-set query according to that state.","^<0",["^ ","^;C",false,"^<1",2,"^;G",2,"^;@",[["^;O"],["^;O","^;>"]],"^;<",["^1@",[["^;O"],["^;O","^;>"]]],"^;B",["^1@",[null,null]]]],"^H","^5;","^7","com/fulcrologic/fulcro/raw/components.cljc","^;",16,"^<0",["^ ","^;C",false,"^<1",2,"^;G",2,"^;@",[["^;O"],["^;O","^;>"]],"^;<",["^1@",[["^;O"],["^;O","^;>"]]],"^;B",["^1@",[null,null]]],"^;@",[["^;O"],["^;O","^;>"]],"^;A",null,"^<1",2,"^;B",["^1@",[null,null]],"^9",1,"^;C",false,"^<2",[["^ ","^<1",1,"^;C",false,"^;X",["^G",["^;E","^;F"]]],["^ ","^<1",2,"^;C",false]],"^8",321,"^:",321,"^;G",2,"^;H",true,"^;<",["^1@",[["^;O"],["^;O","^;>"]]],"^6","Get the query for the given class or factory. If called without a state map, then you'll get the declared static\n  query of the class. If a state map is supplied, then the dynamically set queries in that state will result in\n  the current dynamically-set query according to that state."],"~$component-instance?",["^ ","^;;",null,"^5",["^ ","^7","com/fulcrologic/fulcro/raw/components.cljc","^8",65,"^9",7,"^:",65,"^;",26,"^;<",["^1@",["^;=",["^1@",[["~$x"]]]]],"^6","Returns true if the argument is a component. A component is defined as a *mounted component*.\n   This function returns false for component classes, and also returns false for the output of a Fulcro component factory.","^;X","^;P"],"^H","^3Z","^7","com/fulcrologic/fulcro/raw/components.cljc","^;",26,"^;@",["^1@",[["~$x"]]],"^;A",null,"^;B",["^1@",[null,null]],"^9",1,"^;C",false,"^8",65,"^;D","^;P","^:",65,"^;G",1,"^;X","^;P","^;H",true,"^;<",["^1@",["^;=",["^1@",[["~$x"]]]]],"^6","Returns true if the argument is a component. A component is defined as a *mounted component*.\n   This function returns false for component classes, and also returns false for the output of a Fulcro component factory."],"~$link-query",["^ ","^;;",null,"^5",["^ ","^7","com/fulcrologic/fulcro/raw/components.cljc","^8",489,"^9",7,"^:",489,"^;",17,"^;<",["^1@",["^;=",["^1@",[["^;L"]]]]],"^6","Part of dyn query implementation. Find all of the elements (only at the top level) of the given query and replace them\n  with their query ID."],"^H","^55","^7","com/fulcrologic/fulcro/raw/components.cljc","^;",17,"^;@",["^1@",[["^;L"]]],"^;A",null,"^;B",["^1@",[null,null]],"^9",1,"^;C",false,"^8",489,"^;D",["^G",["^;T","^<P","^;F"]],"^:",489,"^;G",1,"^;H",true,"^;<",["^1@",["^;=",["^1@",[["^;L"]]]]],"^6","Part of dyn query implementation. Find all of the elements (only at the top level) of the given query and replace them\n  with their query ID."],"~$component-type",["^ ","^;;",null,"^5",["^ ","^7","com/fulcrologic/fulcro/raw/components.cljc","^8",188,"^9",7,"^:",188,"^;",21,"^;<",["^1@",["^;=",["^1@",[["~$x"]]]]],"^6","Returns the component type, regardless of whether the component has been\n   mounted"],"^H","^5?","^7","com/fulcrologic/fulcro/raw/components.cljc","^;",21,"^;@",["^1@",[["~$x"]]],"^;A",null,"^;B",["^1@",[null,null]],"^9",1,"^;C",false,"^8",188,"^;D",["^G",["^;E","^;F"]],"^:",188,"^;G",1,"^;H",true,"^;<",["^1@",["^;=",["^1@",[["~$x"]]]]],"^6","Returns the component type, regardless of whether the component has been\n   mounted"],"~$get-query-by-id",["^ ","^;;",null,"^5",["^ ","^7","com/fulcrologic/fulcro/raw/components.cljc","^8",316,"^9",7,"^:",316,"^;",22,"^;<",["^1@",["^;=",["^1@",[["^;>","^<F","~$queryid"]]]]]],"^H","^43","^7","com/fulcrologic/fulcro/raw/components.cljc","^;",22,"^;@",["^1@",[["^;>","^<F","^=P"]]],"^;A",null,"^;B",["^1@",[null,null]],"^9",1,"^;C",false,"^8",316,"^;D",["^G",["^;T","^<P","^;F"]],"^:",316,"^;G",3,"^;H",true,"^;<",["^1@",["^;=",["^1@",[["^;>","^<F","^=P"]]]]]],"~$transact!!",["^ ","^;;",null,"^5",["^ ","^7","com/fulcrologic/fulcro/raw/components.cljc","^8",416,"^9",7,"^:",416,"^;",17,"^;<",["^1@",["^;=",["^1@",[["^<8","^;Z"],["^<8","^;Z","^=H"]]]]],"^6","Shorthand for exactly `(transact! component tx (merge options {:synchronous? true}))`.\n\n  Runs a synchronous transaction, which is an optimized mode where the optimistic behaviors of the mutations in the\n  transaction run on the calling thread, and new props are immediately made available to the calling component via\n  \"props tunneling\" (a behind-the-scenes mechanism using js/setState).\n\n  This mode is meant to be used in form input event handlers, since React is designed to only work properly with\n  raw DOM inputs via component-local state. This prevents things like the cursor jumping to the end of inputs\n  unexpectedly.\n\n  WARNING: Using an `app` instead of a component in synchronous transactions makes no sense. You must pass a component\n  that has an ident.\n\n  If you're using this, you can also set the compiler option:\n\n  ```\n  :compiler-options {:external-config {:fulcro     {:wrap-inputs? false}}}\n  ```\n\n  to turn off Fulcro DOM's generation of wrapped inputs (which try to solve this problem in a less-effective way).\n\n  WARNING: Synchronous rendering does *not* refresh the full UI, only the component.\n  ","^<0",["^ ","^;C",false,"^<1",3,"^;G",3,"^;@",[["^<8","^;Z"],["^<8","^;Z","^=H"]],"^;<",["^1@",[["^<8","^;Z"],["^<8","^;Z","^=H"]]],"^;B",["^1@",[null,null]]]],"^H","^22","^7","com/fulcrologic/fulcro/raw/components.cljc","^;",17,"^<0",["^ ","^;C",false,"^<1",3,"^;G",3,"^;@",[["^<8","^;Z"],["^<8","^;Z","^=H"]],"^;<",["^1@",[["^<8","^;Z"],["^<8","^;Z","^=H"]]],"^;B",["^1@",[null,null]]],"^;@",[["^<8","^;Z"],["^<8","^;Z","^=H"]],"^;A",null,"^<1",3,"^;B",["^1@",[null,null]],"^9",1,"^;C",false,"^<2",[["^ ","^<1",2,"^;C",false,"^;X","^;E"],["^ ","^<1",3,"^;C",false,"^;X",["^G",["^;E","^;F"]]]],"^8",416,"^:",416,"^;G",3,"^;H",true,"^;<",["^1@",[["^<8","^;Z"],["^<8","^;Z","^=H"]]],"^6","Shorthand for exactly `(transact! component tx (merge options {:synchronous? true}))`.\n\n  Runs a synchronous transaction, which is an optimized mode where the optimistic behaviors of the mutations in the\n  transaction run on the calling thread, and new props are immediately made available to the calling component via\n  \"props tunneling\" (a behind-the-scenes mechanism using js/setState).\n\n  This mode is meant to be used in form input event handlers, since React is designed to only work properly with\n  raw DOM inputs via component-local state. This prevents things like the cursor jumping to the end of inputs\n  unexpectedly.\n\n  WARNING: Using an `app` instead of a component in synchronous transactions makes no sense. You must pass a component\n  that has an ident.\n\n  If you're using this, you can also set the compiler option:\n\n  ```\n  :compiler-options {:external-config {:fulcro     {:wrap-inputs? false}}}\n  ```\n\n  to turn off Fulcro DOM's generation of wrapped inputs (which try to solve this problem in a less-effective way).\n\n  WARNING: Synchronous rendering does *not* refresh the full UI, only the component.\n  "],"~$register-component!",["^ ","^;;",null,"^5",["^ ","^7","com/fulcrologic/fulcro/raw/components.cljc","^8",46,"^9",7,"^:",46,"^;",26,"^;<",["^1@",["^;=",["^1@",[["~$k","~$component-class"]]]]],"^6","Add a component to Fulcro's component registry.  This is used by defsc to ensure that all Fulcro classes\n  that have been compiled (transitively required) will be accessible for lookup by fully-qualified symbol/keyword.\n  Not meant for public use, unless you're creating your own component macro that doesn't directly leverage defsc."],"^H","^1[","^7","com/fulcrologic/fulcro/raw/components.cljc","^;",26,"^;@",["^1@",[["~$k","^=S"]]],"^;A",null,"^;B",["^1@",[null,null]],"^9",1,"^;C",false,"^8",46,"^:",46,"^;G",2,"^;H",true,"^;<",["^1@",["^;=",["^1@",[["~$k","^=S"]]]]],"^6","Add a component to Fulcro's component registry.  This is used by defsc to ensure that all Fulcro classes\n  that have been compiled (transitively required) will be accessible for lookup by fully-qualified symbol/keyword.\n  Not meant for public use, unless you're creating your own component macro that doesn't directly leverage defsc."],"~$get-query-id",["^ ","^;;",null,"^5",["^ ","^7","com/fulcrologic/fulcro/raw/components.cljc","^8",310,"^9",8,"^:",310,"^;",20,"^<R",true,"^;<",["^1@",["^;=",["^1@",[["^<8"]]]]],"^6","Get the query id that is cached in the component's props."],"^<R",true,"^H","^4F","^7","com/fulcrologic/fulcro/raw/components.cljc","^;",20,"^;@",["^1@",[["^<8"]]],"^;A",null,"^;B",["^1@",[null,null]],"^9",1,"^;C",false,"^8",310,"^;D","^;E","^:",310,"^;G",1,"^;H",true,"^;<",["^1@",["^;=",["^1@",[["^<8"]]]]],"^6","Get the query id that is cached in the component's props."],"~$has-active-state?",["^ ","^;;",null,"^5",["^ ","^7","com/fulcrologic/fulcro/raw/components.cljc","^8",827,"^9",7,"^:",827,"^;",24,"^;<",["^1@",["^;=",["^1@",[["^;>","^<>"]]]]],"^6","Returns true if there is already data at a component's `ident`"],"^H","^28","^7","com/fulcrologic/fulcro/raw/components.cljc","^;",24,"^;@",["^1@",[["^;>","^<>"]]],"^;A",null,"^;B",["^1@",[null,null]],"^9",1,"^;C",false,"^8",827,"^;D","^;P","^:",827,"^;G",2,"^;H",true,"^;<",["^1@",["^;=",["^1@",[["^;>","^<>"]]]]],"^6","Returns true if there is already data at a component's `ident`"],"~$registry-key->class",["^ ","^;;",null,"^5",["^ ","^7","com/fulcrologic/fulcro/raw/components.cljc","^8",123,"^9",7,"^:",123,"^;",26,"^;<",["^1@",["^;=",["^1@",[["~$classname"]]]]],"^6","Look up the given component in Fulcro's global component registry. Will only be able to find components that have\n  been (transitively) required by your application.\n\n  `classname` can be a fully-qualified keyword or symbol."],"^H","^25","^7","com/fulcrologic/fulcro/raw/components.cljc","^;",26,"^;@",["^1@",[["^=W"]]],"^;A",null,"^;B",["^1@",[null,null]],"^9",1,"^;C",false,"^8",123,"^;D",["^G",["^;E","^;F"]],"^:",123,"^;G",1,"^;H",true,"^;<",["^1@",["^;=",["^1@",[["^=W"]]]]],"^6","Look up the given component in Fulcro's global component registry. Will only be able to find components that have\n  been (transitively) required by your application.\n\n  `classname` can be a fully-qualified keyword or symbol."],"~$ast-id-key",["^ ","^;;",null,"^5",["^ ","^7","com/fulcrologic/fulcro/raw/components.cljc","^8",667,"^9",7,"^:",667,"^;",17,"^;<",["^1@",["^;=",["^1@",[["^<@"]]]]],"^6","Returns the first child from a list of EQL AST nodes that looks like an entity ID key."],"^H","^26","^7","com/fulcrologic/fulcro/raw/components.cljc","^;",17,"^;@",["^1@",[["^<@"]]],"^;A",null,"^;B",["^1@",[null,null]],"^9",1,"^;C",false,"^8",667,"^;D","^;E","^:",667,"^;G",1,"^;H",true,"^;<",["^1@",["^;=",["^1@",[["^<@"]]]]],"^6","Returns the first child from a list of EQL AST nodes that looks like an entity ID key."],"~$has-feature?",["^ ","^;;",null,"^5",["^ ","^7","com/fulcrologic/fulcro/raw/components.cljc","^8",209,"^9",7,"^:",209,"^;",19,"^;<",["^1@",["^;=",["^1@",[["^<8","~$option-key"]]]]],"^;X","^;P"],"^H","^4;","^7","com/fulcrologic/fulcro/raw/components.cljc","^;",19,"^;@",["^1@",[["^<8","^=Z"]]],"^;A",null,"^;B",["^1@",[null,null]],"^9",1,"^;C",false,"^8",209,"^;D","^;P","^:",209,"^;G",2,"^;X","^;P","^;H",true,"^;<",["^1@",["^;=",["^1@",[["^<8","^=Z"]]]]]],"~$check-component-registry!",["^ ","^;;",null,"^5",["^ ","^7","com/fulcrologic/fulcro/raw/components.cljc","^8",627,"^9",7,"^:",627,"^;",32,"^;<",["^1@",["^;=",["^1@",[[]]]]],"^6","Walks the complete list of components in the component registry and looks for problems. Used during dev mode to\n   detect common problems that can cause runtime misbehavior."],"^H","^27","^7","com/fulcrologic/fulcro/raw/components.cljc","^;",32,"^;@",["^1@",[[]]],"^;A",null,"^;B",["^1@",[null,null]],"^9",1,"^;C",false,"^8",627,"^;D","^;F","^:",627,"^;G",0,"^;H",true,"^;<",["^1@",["^;=",["^1@",[[]]]]],"^6","Walks the complete list of components in the component registry and looks for problems. Used during dev mode to\n   detect common problems that can cause runtime misbehavior."],"~$component-registry",["^ ","^5",["^ ","^7","com/fulcrologic/fulcro/raw/components.cljc","^8",22,"^9",20,"^:",22,"^;",38,"^<R",true],"^<R",true,"^H","^2E","^7","com/fulcrologic/fulcro/raw/components.cljc","^;",38,"^9",1,"^8",22,"^:",22,"^;X","~$cljs.core/Atom"],"~$*query-state*",["^ ","^5",["^ ","^7","com/fulcrologic/fulcro/raw/components.cljc","^8",25,"^9",16,"^:",25,"^;",29,"~:dynamic",true],"^H","^4W","^7","com/fulcrologic/fulcro/raw/components.cljc","^;",29,"^9",1,"^>3",true,"^8",25,"^:",25,"^;X","^;E"],"~$*after-render*",["^ ","^5",["^ ","^7","com/fulcrologic/fulcro/raw/components.cljc","^8",350,"^9",16,"^:",350,"^;",30,"^>3",true],"^H","^2D","^7","com/fulcrologic/fulcro/raw/components.cljc","^;",30,"^9",1,"^>3",true,"^8",350,"^:",350,"^;X","^;E","^6","Dynamic var that affects the activation of transactions run via `transact!`. Defaults to false. When set to true\n   this option prevents a transaction from running until after the next render is complete. This typically should not be set\n   to true in scenarios where you are unsure if a render will occur, since that could make the transaction appear to\n   \"hang\"."],"~$class->registry-key",["^ ","^;;",null,"^5",["^ ","^7","com/fulcrologic/fulcro/raw/components.cljc","^8",118,"^9",7,"^:",118,"^;",26,"^;<",["^1@",["^;=",["^1@",[["^<F"]]]]],"^6","Returns the registry key for the given component class."],"^H","^4U","^7","com/fulcrologic/fulcro/raw/components.cljc","^;",26,"^;@",["^1@",[["^<F"]]],"^;A",null,"^;B",["^1@",[null,null]],"^9",1,"^;C",false,"^8",118,"^;D","^;E","^:",118,"^;G",1,"^;H",true,"^;<",["^1@",["^;=",["^1@",[["^<F"]]]]],"^6","Returns the registry key for the given component class."],"~$component?",["^ ","^5",["^ ","^7","com/fulcrologic/fulcro/raw/components.cljc","^8",100,"^9",6,"^:",100,"^;",16],"^H","^4>","^7","com/fulcrologic/fulcro/raw/components.cljc","^;",16,"^9",1,"^8",100,"^:",100,"^;X","^;P","^6","Returns true if the argument is a component instance.\n\n   DEPRECATED for terminology clarity. Use `component-instance?` instead."],"^<>",["^ ","^;;",null,"^5",["^ ","^7","com/fulcrologic/fulcro/raw/components.cljc","^8",214,"^9",7,"^:",214,"^;",12,"^;<",["^1@",["^;=",["^1@",[["^;M","^<7"]]]]]],"^H","^2J","^7","com/fulcrologic/fulcro/raw/components.cljc","^;",12,"^;@",["^1@",[["^;M","^<7"]]],"^;A",null,"^;B",["^1@",[null,null]],"^9",1,"^;C",false,"^8",214,"^;D",["^G",["^;E","^;F"]],"^:",214,"^;G",2,"^;H",true,"^;<",["^1@",["^;=",["^1@",[["^;M","^<7"]]]]]],"^<D",["^ ","^;;",null,"^5",["^ ","^7","com/fulcrologic/fulcro/raw/components.cljc","^8",200,"^9",7,"^:",200,"^;",24,"^;<",["^1@",["^;=",["^1@",[["~$instance-or-class","~$&","~$ks"]]]]],"^6","Returns the map of options that was specified (via `defsc`) for the component class.","^<0",["^ ","^;C",true,"^<1",1,"^;G",1,"^;@",[["^1@",["^>7","^>8"]]],"^;<",["^1@",[["^>7","~$&","^>8"]]],"^;B",["^1@",[null]]]],"^H","^2M","^7","com/fulcrologic/fulcro/raw/components.cljc","^;",24,"^<0",["^ ","^;C",true,"^<1",1,"^;G",1,"^;@",[["^1@",["^>7","^>8"]]],"^;<",["^1@",[["^>7","~$&","^>8"]]],"^;B",["^1@",[null]]],"^;@",[["^1@",["^>7","^>8"]]],"^;A",null,"^<1",1,"^;B",["^1@",[null]],"^9",1,"^;C",true,"^<2",[["^ ","^<1",1,"^;C",true,"^;X",["^G",[null,"^;E"]]]],"^8",200,"^;D","^;E","^:",200,"^;G",1,"^;H",true,"^;<",["^1@",[["^>7","~$&","^>8"]]],"^6","Returns the map of options that was specified (via `defsc`) for the component class."],"~$shared",["^ ","^;;",null,"^5",["^ ","^7","com/fulcrologic/fulcro/raw/components.cljc","^8",86,"^9",7,"^:",86,"^;",13,"^;<",["^1@",["^;=",["^1@",[["~$comp-or-app"],["^>:","^=2"]]]]],"^6","Return the global shared properties of the root. See :shared and\n   :shared-fn app options. NOTE: Shared props only update on root render and by explicit calls to\n   `app/update-shared!`.\n\n   This version does not rely on the dynamic var *shared*, which is only available from the react-based components ns.","^<0",["^ ","^;C",false,"^<1",2,"^;G",2,"^;@",[["^>:"],["^>:","^=2"]],"^;<",["^1@",[["^>:"],["^>:","^=2"]]],"^;B",["^1@",[null,null]]]],"^H","^4G","^7","com/fulcrologic/fulcro/raw/components.cljc","^;",13,"^<0",["^ ","^;C",false,"^<1",2,"^;G",2,"^;@",[["^>:"],["^>:","^=2"]],"^;<",["^1@",[["^>:"],["^>:","^=2"]]],"^;B",["^1@",[null,null]]],"^;@",[["^>:"],["^>:","^=2"]],"^;A",null,"^<1",2,"^;B",["^1@",[null,null]],"^9",1,"^;C",false,"^<2",[["^ ","^<1",1,"^;C",false,"^;X","^;E"],["^ ","^<1",2,"^;C",false,"^;X",["^G",[null,"^;E","^;F"]]]],"^8",86,"^:",86,"^;G",2,"^;H",true,"^;<",["^1@",[["^>:"],["^>:","^=2"]]],"^6","Return the global shared properties of the root. See :shared and\n   :shared-fn app options. NOTE: Shared props only update on root render and by explicit calls to\n   `app/update-shared!`.\n\n   This version does not rely on the dynamic var *shared*, which is only available from the react-based components ns."],"~$has-initial-app-state?",["^ ","^;;",null,"^5",["^ ","^7","com/fulcrologic/fulcro/raw/components.cljc","^8",210,"^9",7,"^:",210,"^;",29,"^;<",["^1@",["^;=",["^1@",[["^<8"]]]]],"^;X","^;P"],"^H","^4L","^7","com/fulcrologic/fulcro/raw/components.cljc","^;",29,"^;@",["^1@",[["^<8"]]],"^;A",null,"^;B",["^1@",[null,null]],"^9",1,"^;C",false,"^8",210,"^;D","^;P","^:",210,"^;G",1,"^;X","^;P","^;H",true,"^;<",["^1@",["^;=",["^1@",[["^<8"]]]]]]],"^1>",["^ ","^X","^X","^T","^U","^13","^14","^U","^U","^14","^14"],"~:cljs.analyzer/constants",["^ ","^1:",["^G",["~:preserve-dynamic-query?","~:children","~:com.fulcrologic.fulcro.application/config","~:pre-merge","~:key","~:computed","~:fulcro$app","~:else","~:index-root!","~:ref","~:synchronous?","~:displayName","~:queryid","~:warn","~:tx!","~:qualifier","~:fulcro$registryKey","~:query-id","~:joins","~:params","~:type","~:state","~:componentName","~:force-root?","~:after-render?","~:component","~:compressible?","~:schedule-render!","~:com.fulcrologic.fulcro.application/state-atom","~:otherwise","~:anonymous","~:root","~:com.fulcrologic.fulcro.application/runtime-atom","~:id","~:class","~:prop","~:fulcro$options","~:ident","~:attrs","~:error","~:component-key","~:fulcro$value","~:initial-state","~:fulcro.client.primitives/computed","~:query","~:external-config","~:com.fulcrologic.fulcro.application/shared-props","~:com.fulcrologic.fulcro.components/queries","~:auto","~:p","~:com.fulcrologic.fulcro.algorithms.merge/not-found","~:join","~:props"]],"~:order",["^>D","^>Y","^?D","^>C","^?1","^??","^>H","^>M","^>Z","^?<","^?:","^>R","^?5","^?;","^?6","^?=","^>@","^>S","^>B","^>J","~:p","^?A","^?B","^>L","^?8","^?@","^?9","^>V","^>I","^?3","^>K","^>U","^>F","^>G","^?2","^>P","^>E","^>X","^>T","^>=","^>W","^>?","^?>","^?C","^>Q","^>A","^>>","^?4","^>[","^>N","^?0","^>O","^?7"]],"^1D",["^ ","^1;",["^G",[]]],"^1E",["^ "],"^1F",["^[","^X","^Z","^R","^17","^19","^W","^12","^P","^10","^S","^14","^U"]],"^L","^I","~:ns-specs",["^ "],"~:ns-spec-vars",["^G",[]],"~:compiler-options",["^5D",[["^?H","~:static-fns"],true,["^?H","~:shadow-tweaks"],null,["^?H","~:source-map-inline"],null,["^?H","~:elide-asserts"],false,["^?H","~:optimize-constants"],null,["^?H","^1K"],null,["^?H","^?>"],null,["^?H","~:tooling-config"],null,["^?H","~:emit-constants"],null,["^?H","~:load-tests"],null,["^?H","~:form-size-threshold"],null,["^?H","~:global-goog-object&array"],null,["^?H","~:data-readers"],null,["^?H","~:infer-externs"],"^?A",["^?H","^1M"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^?H","~:fn-invoke-direct"],null,["^?H","~:source-map"],"/dev/null"]]]