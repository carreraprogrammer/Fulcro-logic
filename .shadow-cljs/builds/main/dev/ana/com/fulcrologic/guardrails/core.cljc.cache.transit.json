["^ ","~:output",["^ ","~:js","goog.provide('com.fulcrologic.guardrails.core');\r\ncom.fulcrologic.guardrails.core._EQ__GT_ = new cljs.core.Keyword(null,\"ret\",\"ret\",-468222814);\r\ncom.fulcrologic.guardrails.core._BAR_ = new cljs.core.Keyword(null,\"st\",\"st\",1455255828);\r\ncom.fulcrologic.guardrails.core._LT__ = new cljs.core.Keyword(null,\"gen\",\"gen\",142575302);\r\nif((typeof com !== 'undefined') && (typeof com.fulcrologic !== 'undefined') && (typeof com.fulcrologic.guardrails !== 'undefined') && (typeof com.fulcrologic.guardrails.core !== 'undefined') && (typeof com.fulcrologic.guardrails.core.pending_check_channel !== 'undefined')){\r\n} else {\r\ncom.fulcrologic.guardrails.core.pending_check_channel = cljs.core.async.chan.cljs$core$IFn$_invoke$arity$1(cljs.core.async.dropping_buffer((10000)));\r\n}\r\nif((typeof com !== 'undefined') && (typeof com.fulcrologic !== 'undefined') && (typeof com.fulcrologic.guardrails !== 'undefined') && (typeof com.fulcrologic.guardrails.core !== 'undefined') && (typeof com.fulcrologic.guardrails.core.async_go_channel !== 'undefined')){\r\n} else {\r\ncom.fulcrologic.guardrails.core.async_go_channel = (function (){var c__49738__auto__ = cljs.core.async.chan.cljs$core$IFn$_invoke$arity$1((1));\r\ncljs.core.async.impl.dispatch.run((function (){\r\nvar f__49739__auto__ = (function (){var switch__49646__auto__ = (function (state_55423){\r\nvar state_val_55424 = (state_55423[(1)]);\r\nif((state_val_55424 === (7))){\r\nvar inst_55419 = (state_55423[(2)]);\r\nvar state_55423__$1 = state_55423;\r\nvar statearr_55425_55486 = state_55423__$1;\r\n(statearr_55425_55486[(2)] = inst_55419);\r\n\r\n(statearr_55425_55486[(1)] = (4));\r\n\r\n\r\nreturn new cljs.core.Keyword(null,\"recur\",\"recur\",-437573268);\r\n} else {\r\nif((state_val_55424 === (1))){\r\nvar state_55423__$1 = state_55423;\r\nreturn cljs.core.async.impl.ioc_helpers.take_BANG_(state_55423__$1,(2),com.fulcrologic.guardrails.core.pending_check_channel);\r\n} else {\r\nif((state_val_55424 === (4))){\r\nvar inst_55421 = (state_55423[(2)]);\r\nvar state_55423__$1 = state_55423;\r\nreturn cljs.core.async.impl.ioc_helpers.return_chan(state_55423__$1,inst_55421);\r\n} else {\r\nif((state_val_55424 === (6))){\r\nvar inst_55417 = cljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"Guardrails ASYNC LOOP STOPPED ****************************************\"], 0));\r\nvar state_55423__$1 = state_55423;\r\nvar statearr_55428_55487 = state_55423__$1;\r\n(statearr_55428_55487[(2)] = inst_55417);\r\n\r\n(statearr_55428_55487[(1)] = (7));\r\n\r\n\r\nreturn new cljs.core.Keyword(null,\"recur\",\"recur\",-437573268);\r\n} else {\r\nif((state_val_55424 === (3))){\r\nvar inst_55397 = (state_55423[(7)]);\r\nvar state_55423__$1 = state_55423;\r\nif(cljs.core.truth_(inst_55397)){\r\nvar statearr_55431_55488 = state_55423__$1;\r\n(statearr_55431_55488[(1)] = (5));\r\n\r\n} else {\r\nvar statearr_55432_55489 = state_55423__$1;\r\n(statearr_55432_55489[(1)] = (6));\r\n\r\n}\r\n\r\nreturn new cljs.core.Keyword(null,\"recur\",\"recur\",-437573268);\r\n} else {\r\nif((state_val_55424 === (12))){\r\nvar inst_55414 = (state_55423[(2)]);\r\nvar inst_55397 = inst_55414;\r\nvar state_55423__$1 = (function (){var statearr_55434 = state_55423;\r\n(statearr_55434[(7)] = inst_55397);\r\n\r\nreturn statearr_55434;\r\n})();\r\nvar statearr_55435_55490 = state_55423__$1;\r\n(statearr_55435_55490[(2)] = null);\r\n\r\n(statearr_55435_55490[(1)] = (3));\r\n\r\n\r\nreturn new cljs.core.Keyword(null,\"recur\",\"recur\",-437573268);\r\n} else {\r\nif((state_val_55424 === (2))){\r\nvar inst_55396 = (state_55423[(2)]);\r\nvar inst_55397 = inst_55396;\r\nvar state_55423__$1 = (function (){var statearr_55436 = state_55423;\r\n(statearr_55436[(7)] = inst_55397);\r\n\r\nreturn statearr_55436;\r\n})();\r\nvar statearr_55437_55491 = state_55423__$1;\r\n(statearr_55437_55491[(2)] = null);\r\n\r\n(statearr_55437_55491[(1)] = (3));\r\n\r\n\r\nreturn new cljs.core.Keyword(null,\"recur\",\"recur\",-437573268);\r\n} else {\r\nif((state_val_55424 === (11))){\r\nvar _ = (function (){var statearr_55438 = state_55423;\r\n(statearr_55438[(4)] = cljs.core.rest((state_55423[(4)])));\r\n\r\nreturn statearr_55438;\r\n})();\r\nvar state_55423__$1 = state_55423;\r\nvar ex55433 = (state_55423__$1[(2)]);\r\nvar statearr_55439_55492 = state_55423__$1;\r\n(statearr_55439_55492[(5)] = ex55433);\r\n\r\n\r\nvar statearr_55440_55493 = state_55423__$1;\r\n(statearr_55440_55493[(1)] = (10));\r\n\r\n(statearr_55440_55493[(5)] = null);\r\n\r\n\r\n\r\nreturn new cljs.core.Keyword(null,\"recur\",\"recur\",-437573268);\r\n} else {\r\nif((state_val_55424 === (9))){\r\nvar inst_55409 = (state_55423[(2)]);\r\nvar state_55423__$1 = (function (){var statearr_55442 = state_55423;\r\n(statearr_55442[(8)] = inst_55409);\r\n\r\nreturn statearr_55442;\r\n})();\r\nreturn cljs.core.async.impl.ioc_helpers.take_BANG_(state_55423__$1,(12),com.fulcrologic.guardrails.core.pending_check_channel);\r\n} else {\r\nif((state_val_55424 === (5))){\r\nvar state_55423__$1 = state_55423;\r\nvar statearr_55443_55495 = state_55423__$1;\r\n(statearr_55443_55495[(2)] = null);\r\n\r\n(statearr_55443_55495[(1)] = (8));\r\n\r\n\r\nreturn new cljs.core.Keyword(null,\"recur\",\"recur\",-437573268);\r\n} else {\r\nif((state_val_55424 === (10))){\r\nvar inst_55400 = (state_55423[(2)]);\r\nvar state_55423__$1 = (function (){var statearr_55444 = state_55423;\r\n(statearr_55444[(9)] = inst_55400);\r\n\r\nreturn statearr_55444;\r\n})();\r\nvar statearr_55445_55496 = state_55423__$1;\r\n(statearr_55445_55496[(2)] = null);\r\n\r\n(statearr_55445_55496[(1)] = (9));\r\n\r\n\r\nreturn new cljs.core.Keyword(null,\"recur\",\"recur\",-437573268);\r\n} else {\r\nif((state_val_55424 === (8))){\r\nvar inst_55397 = (state_55423[(7)]);\r\nvar _ = (function (){var statearr_55446 = state_55423;\r\n(statearr_55446[(4)] = cljs.core.cons((11),(state_55423[(4)])));\r\n\r\nreturn statearr_55446;\r\n})();\r\nvar inst_55406 = (inst_55397.cljs$core$IFn$_invoke$arity$0 ? inst_55397.cljs$core$IFn$_invoke$arity$0() : inst_55397.call(null));\r\nvar ___$1 = (function (){var statearr_55447 = state_55423;\r\n(statearr_55447[(4)] = cljs.core.rest((state_55423[(4)])));\r\n\r\nreturn statearr_55447;\r\n})();\r\nvar state_55423__$1 = state_55423;\r\nvar statearr_55448_55499 = state_55423__$1;\r\n(statearr_55448_55499[(2)] = inst_55406);\r\n\r\n(statearr_55448_55499[(1)] = (9));\r\n\r\n\r\nreturn new cljs.core.Keyword(null,\"recur\",\"recur\",-437573268);\r\n} else {\r\nreturn null;\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n}\r\n});\r\nreturn (function() {\r\nvar com$fulcrologic$guardrails$core$state_machine__49647__auto__ = null;\r\nvar com$fulcrologic$guardrails$core$state_machine__49647__auto____0 = (function (){\r\nvar statearr_55449 = [null,null,null,null,null,null,null,null,null,null];\r\n(statearr_55449[(0)] = com$fulcrologic$guardrails$core$state_machine__49647__auto__);\r\n\r\n(statearr_55449[(1)] = (1));\r\n\r\nreturn statearr_55449;\r\n});\r\nvar com$fulcrologic$guardrails$core$state_machine__49647__auto____1 = (function (state_55423){\r\nwhile(true){\r\nvar ret_value__49648__auto__ = (function (){try{while(true){\r\nvar result__49649__auto__ = switch__49646__auto__(state_55423);\r\nif(cljs.core.keyword_identical_QMARK_(result__49649__auto__,new cljs.core.Keyword(null,\"recur\",\"recur\",-437573268))){\r\ncontinue;\r\n} else {\r\nreturn result__49649__auto__;\r\n}\r\nbreak;\r\n}\r\n}catch (e55450){var ex__49650__auto__ = e55450;\r\nvar statearr_55451_55501 = state_55423;\r\n(statearr_55451_55501[(2)] = ex__49650__auto__);\r\n\r\n\r\nif(cljs.core.seq((state_55423[(4)]))){\r\nvar statearr_55452_55502 = state_55423;\r\n(statearr_55452_55502[(1)] = cljs.core.first((state_55423[(4)])));\r\n\r\n} else {\r\nthrow ex__49650__auto__;\r\n}\r\n\r\nreturn new cljs.core.Keyword(null,\"recur\",\"recur\",-437573268);\r\n}})();\r\nif(cljs.core.keyword_identical_QMARK_(ret_value__49648__auto__,new cljs.core.Keyword(null,\"recur\",\"recur\",-437573268))){\r\nvar G__55503 = state_55423;\r\nstate_55423 = G__55503;\r\ncontinue;\r\n} else {\r\nreturn ret_value__49648__auto__;\r\n}\r\nbreak;\r\n}\r\n});\r\ncom$fulcrologic$guardrails$core$state_machine__49647__auto__ = function(state_55423){\r\nswitch(arguments.length){\r\ncase 0:\r\nreturn com$fulcrologic$guardrails$core$state_machine__49647__auto____0.call(this);\r\ncase 1:\r\nreturn com$fulcrologic$guardrails$core$state_machine__49647__auto____1.call(this,state_55423);\r\n}\r\nthrow(new Error('Invalid arity: ' + arguments.length));\r\n};\r\ncom$fulcrologic$guardrails$core$state_machine__49647__auto__.cljs$core$IFn$_invoke$arity$0 = com$fulcrologic$guardrails$core$state_machine__49647__auto____0;\r\ncom$fulcrologic$guardrails$core$state_machine__49647__auto__.cljs$core$IFn$_invoke$arity$1 = com$fulcrologic$guardrails$core$state_machine__49647__auto____1;\r\nreturn com$fulcrologic$guardrails$core$state_machine__49647__auto__;\r\n})()\r\n})();\r\nvar state__49740__auto__ = (function (){var statearr_55453 = f__49739__auto__();\r\n(statearr_55453[(6)] = c__49738__auto__);\r\n\r\nreturn statearr_55453;\r\n})();\r\nreturn cljs.core.async.impl.ioc_helpers.run_state_machine_wrapped(state__49740__auto__);\r\n}));\r\n\r\nreturn c__49738__auto__;\r\n})();\r\n}\r\ncom.fulcrologic.guardrails.core.output_fn = (function com$fulcrologic$guardrails$core$output_fn(data){\r\nvar map__55454 = data;\r\nvar map__55454__$1 = cljs.core.__destructure_map(map__55454);\r\nvar level = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__55454__$1,new cljs.core.Keyword(null,\"level\",\"level\",1290497552));\r\nvar _QMARK_err = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__55454__$1,new cljs.core.Keyword(null,\"?err\",\"?err\",549653299));\r\nvar msg_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__55454__$1,new cljs.core.Keyword(null,\"msg_\",\"msg_\",-1925147000));\r\nvar _QMARK_ns_str = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__55454__$1,new cljs.core.Keyword(null,\"?ns-str\",\"?ns-str\",2012733966));\r\nvar _QMARK_file = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__55454__$1,new cljs.core.Keyword(null,\"?file\",\"?file\",1533429675));\r\nvar hostname_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__55454__$1,new cljs.core.Keyword(null,\"hostname_\",\"hostname_\",-2091647379));\r\nvar timestamp_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__55454__$1,new cljs.core.Keyword(null,\"timestamp_\",\"timestamp_\",-954533417));\r\nvar _QMARK_line = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__55454__$1,new cljs.core.Keyword(null,\"?line\",\"?line\",-631853385));\r\nreturn [clojure.string.upper_case(cljs.core.name(level)),\" \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.force(msg_)),(function (){var temp__5753__auto__ = _QMARK_err;\r\nif(cljs.core.truth_(temp__5753__auto__)){\r\nvar err = temp__5753__auto__;\r\nreturn [\"\\n\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(com.fulcrologic.guardrails.utils.stacktrace.cljs$core$IFn$_invoke$arity$1(err))].join('');\r\n} else {\r\nreturn null;\r\n}\r\n})()].join('');\r\n});\r\ncom.fulcrologic.guardrails.core.now_ms = (function com$fulcrologic$guardrails$core$now_ms(){\r\nreturn cljs.core.inst_ms((new Date()));\r\n});\r\ncom.fulcrologic.guardrails.core.run_check = (function com$fulcrologic$guardrails$core$run_check(p__55460,spec,value){\r\nvar map__55461 = p__55460;\r\nvar map__55461__$1 = cljs.core.__destructure_map(map__55461);\r\nvar args_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__55461__$1,new cljs.core.Keyword(null,\"args?\",\"args?\",-1963723548));\r\nvar vararg_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__55461__$1,new cljs.core.Keyword(null,\"vararg?\",\"vararg?\",1908105777));\r\nvar callsite = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__55461__$1,new cljs.core.Keyword(null,\"callsite\",\"callsite\",243654023));\r\nvar throw_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__55461__$1,new cljs.core.Keyword(null,\"throw?\",\"throw?\",-2036749118));\r\nvar fn_name = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__55461__$1,new cljs.core.Keyword(null,\"fn-name\",\"fn-name\",-766594004));\r\nvar expound_opts = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__55461__$1,new cljs.core.Keyword(null,\"expound-opts\",\"expound-opts\",623087481));\r\nvar start_55509 = com.fulcrologic.guardrails.core.now_ms();\r\nvar vargs_QMARK__55510 = (function (){var and__4251__auto__ = args_QMARK_;\r\nif(cljs.core.truth_(and__4251__auto__)){\r\nreturn vararg_QMARK_;\r\n} else {\r\nreturn and__4251__auto__;\r\n}\r\n})();\r\nvar varg_55511 = (cljs.core.truth_(vargs_QMARK__55510)?cljs.core.last(cljs.core.seq(value)):null);\r\nvar specable_args_55512 = (cljs.core.truth_(vargs_QMARK__55510)?((cljs.core.map_QMARK_(varg_55511))?cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.vec(cljs.core.butlast(value)),cljs.core.flatten(cljs.core.seq(varg_55511))):cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.vec(cljs.core.butlast(value)),cljs.core.seq(varg_55511))):value);\r\nvar valid_exception_55513 = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(null);\r\ntry{if(cljs.spec.alpha.valid_QMARK_.cljs$core$IFn$_invoke$arity$2(spec,specable_args_55512)){\r\n} else {\r\nvar problem_55515 = expound.alpha.expound_str.cljs$core$IFn$_invoke$arity$3(spec,specable_args_55512,expound_opts);\r\nvar description_55516 = [\"\\n\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(fn_name),(cljs.core.truth_(args_QMARK_)?\" argument list\":\" return type\"),\"\\n\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(problem_55515)].join('');\r\nif(cljs.core.truth_(throw_QMARK_)){\r\ncljs.core.reset_BANG_(valid_exception_55513,cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2(description_55516,cljs.core.with_meta(new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),new cljs.core.Keyword(\"com.fulcrologic.guardrails\",\"validation-error\",\"com.fulcrologic.guardrails/validation-error\",776351266),new cljs.core.Keyword(\"com.fulcrologic.guardrails\",\"fn-name\",\"com.fulcrologic.guardrails/fn-name\",-762819408),fn_name,new cljs.core.Keyword(\"com.fulcrologic.guardrails\",\"failure-point\",\"com.fulcrologic.guardrails/failure-point\",340797326),(cljs.core.truth_(args_QMARK_)?new cljs.core.Keyword(null,\"args\",\"args\",1315556576):new cljs.core.Keyword(null,\"ret\",\"ret\",-468222814)),new cljs.core.Keyword(\"com.fulcrologic.guardrails\",\"spec\",\"com.fulcrologic.guardrails/spec\",343160061),spec], null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"com.fulcrologic.guardrails\",\"val\",\"com.fulcrologic.guardrails/val\",132345656),specable_args_55512], null))));\r\n} else {\r\ncom.fulcrologic.guardrails.utils.report_problem([description_55516,\"\\n\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(com.fulcrologic.guardrails.utils.stacktrace.cljs$core$IFn$_invoke$arity$1((function (){var or__4253__auto__ = callsite;\r\nif(cljs.core.truth_(or__4253__auto__)){\r\nreturn or__4253__auto__;\r\n} else {\r\nreturn cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2(\"\",cljs.core.PersistentArrayMap.EMPTY);\r\n}\r\n})()))].join(''));\r\n}\r\n}\r\n}catch (e55462){var e_55522 = e55462;\r\ncom.fulcrologic.guardrails.utils.report_exception(e_55522,\"BUG: Internal error in expound or clojure spec.\\n\");\r\n}finally {var duration_55523 = (com.fulcrologic.guardrails.core.now_ms() - start_55509);\r\nif((duration_55523 > (100))){\r\ncom.fulcrologic.guardrails.utils.report_problem([\"WARNING: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(fn_name),\" \",(cljs.core.truth_(args_QMARK_)?\"argument specs\":\"return spec\"),\" took \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(duration_55523),\"ms to run.\"].join(''));\r\n} else {\r\n}\r\n}\r\nif(cljs.core.truth_(cljs.core.deref(valid_exception_55513))){\r\nthrow cljs.core.deref(valid_exception_55513);\r\n} else {\r\n}\r\n\r\nreturn null;\r\n});\r\ncom.fulcrologic.guardrails.core.callsite_exception = (function com$fulcrologic$guardrails$core$callsite_exception(){\r\nreturn (new Error(\"\"));\r\n});\r\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","com/fulcrologic/guardrails/core.cljc","~:line",10,"~:column",5,"~:end-line",10,"~:end-column",36],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$clojure.spec.alpha","~$cljs.spec.alpha","~$clojure.core.async","~$cljs.core.async","~$clojure.pprint","~$cljs.pprint"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:macros",["^ ","~$>defn-",["^ ","~:arglists",["~#list",[["~$name","~$doc-string?","~$attr-map?",["~$params*"],"~$gspec","~$prepost-map?","~$body?"],["^K","^L","^M",["^J",[["^N"],"^O","^P","^Q"]],"~$+","^M"]]],"~:doc","Like defn-, but requires a (nilable) gspec definition and generates\n       additional `s/fdef`, generative tests, instrumentation code, an\n       fspec-based stub, and/or tracing code, depending on the configuration\n       metadata and the existence of a valid gspec and non-nil body.","^7",737,"^8",6,"^6","com/fulcrologic/guardrails/core.cljc","~:name","~$com.fulcrologic.guardrails.core/>defn-","~:ns","~$com.fulcrologic.guardrails.core","~:macro",true],"~$>fdef",["^ ","^I",["^J",[["^K",["^N"],"^O"],["^K",["^J",[["^N"],"^O"]],"~$+"]]],"^R","Defines an fspec using gspec syntax – pretty much a `>defn` without the body.\n\n       `name` can be a symbol or a qualified keyword, depending on whether the\n       fspec is meant to be registered as a top-level fspec (=> s/fdef fn-sym\n       ...) or used in other specs (=> s/def ::spec-keyword (s/fspec ...)). ","^7",763,"^8",6,"^6","com/fulcrologic/guardrails/core.cljc","^S","~$com.fulcrologic.guardrails.core/>fdef","^U","^V","^W",true],"~$>def",["^ ","^I",["^J",[["~$k","~$spec-form"],["~$k","~$_doc","^["]]],"^R","DEPRECATED: to be removed","^7",749,"^8",6,"^6","com/fulcrologic/guardrails/core.cljc","^S","~$com.fulcrologic.guardrails.core/>def","^U","^V","^W",true],"~$?",["^ ","^I",["^J",[["~$&","~$forms"]]],"^7",119,"^8",4,"^6","com/fulcrologic/guardrails/core.cljc","^S","~$com.fulcrologic.guardrails.core/?","^U","^V","^W",true],"~$>defn",["^ ","^I",["^J",[["^K","^L","^M",["^N"],"^O","^P","^Q"],["^K","^L","^M",["^J",[["^N"],"^O","^P","^Q"]],"~$+","^M"]]],"^R","Like defn, but requires a (nilable) gspec definition and generates\n       additional `s/fdef`, generative tests, instrumentation code, an\n       fspec-based stub, and/or tracing code, depending on the configuration\n       metadata and the existence of a valid gspec and non-nil body.","^7",725,"^8",6,"^6","com/fulcrologic/guardrails/core.cljc","^S","~$com.fulcrologic.guardrails.core/>defn","^U","^V","^W",true],"~$>fn",["^ ","^I",["^J",[["~$&","^12"]]],"^7",781,"^8",6,"^6","com/fulcrologic/guardrails/core.cljc","^S","~$com.fulcrologic.guardrails.core/>fn","^U","^V","^W",true],"~$>fspec",["^ ","^I",["^J",[["~$&","^12"]]],"^7",783,"^8",6,"^6","com/fulcrologic/guardrails/core.cljc","^S","~$com.fulcrologic.guardrails.core/>fspec","^U","^V","^W",true]],"^S","^V","~:reader-aliases",["^ "],"~:op","^U","~:imports",null,"~:requires",["^ ","^>","^?","~$com.fulcrologic.guardrails.impl.externs","^1>","~$async","^A","~$expound.alpha","^1@","~$cljs.core","^1A","~$goog","^1B","^A","^A","^@","^A","~$exp","^1@","~$s","^?","~$string","~$clojure.string","~$com.fulcrologic.guardrails.utils","^1F","~$utils","^1F","^1E","^1E","^?","^?"],"~:seen",["^F",["~:require","~:require-macros"]],"~:uses",null,"^1J",["^ ","^>","^?","^V","^V","^1?","^A","^1A","^1A","^A","^A","^@","^A","~$s","^?","^1F","^1F","^1G","^1F","^?","^?"],"~:form",["^J",["~$ns","^V",["^J",["^1J","^V"]],["^J",["^1I",["^1>"],["^1F","~:as","^1G"],["^@","^1N","^1?"],["^>","^1N","~$s"],["^1E","^1N","^1D"],["^1@","^1N","^1C"]]]]],"~:flags",["^ ","^1J",["^F",[]],"^1I",["^F",[]]],"~:js-deps",["^ "],"~:deps",["^1B","^1A","^1>","^1F","^A","^?","^1E","^1@"]],"^U","^V","~:resource-id",["~:shadow.build.classpath/resource","com/fulcrologic/guardrails/core.cljc"],"~:compiled-at",1676259840223,"^1:",["^ ","^>","^?","^V","^V","^1>","^1>","^1?","^A","^1@","^1@","^1A","^1A","^1B","^1B","^A","^A","^@","^A","^1C","^1@","~$s","^?","^1D","^1E","^1F","^1F","^1G","^1F","^1E","^1E","^?","^?"],"~:resource-name","com/fulcrologic/guardrails/core.cljc","~:warnings",[],"~:source",";; Copyright (c) George Lipov. All rights reserved.\n;; Additional code Copyright Fulcrologic, LLC.\n;; The use and distribution terms for this software are covered by the\n;; Eclipse Public License 2.0 (https://choosealicense.com/licenses/epl-2.0/)\n;; which can be found in the file LICENSE at the root of this distribution.\n;; By using this software in any fashion, you are agreeing to be bound by\n;; the terms of this license.\n;; You must not remove this notice, or any other, from this software.\n\n(ns com.fulcrologic.guardrails.core\n  #?(:cljs (:require-macros com.fulcrologic.guardrails.core))\n  (:require\n    #?@(:clj [[clojure.walk :as walk]\n              [com.fulcrologic.guardrails.config :as gr.cfg]\n              [com.fulcrologic.guardrails.impl.pro :as gr.pro]\n              [com.fulcrologic.guardrails.utils :refer [cljs-env? clj->cljs]]])\n    #?@(:cljs [[com.fulcrologic.guardrails.impl.externs]])\n    [com.fulcrologic.guardrails.utils :as utils]\n    [clojure.core.async :as async]\n    [clojure.spec.alpha :as s]\n    [clojure.string :as string]\n    [expound.alpha :as exp]))\n\n;; It doesn't actually matter what these are bound to, they are stripped by\n;; the macros they're used in and never end up in the final code. This is just\n;; so they can be used without '=> cannot be resolved' errors in the IDE.\n(def => :ret)\n(def | :st)\n(def <- :gen)\n\n(defonce pending-check-channel (async/chan (async/dropping-buffer 10000)))\n\n(defonce async-go-channel\n  (async/go-loop [check (async/<! pending-check-channel)]\n    (if check\n      (do\n        (try\n          (check)\n          (catch #?(:clj Exception :cljs :default) _))\n        (recur (async/<! pending-check-channel)))\n      (println \"Guardrails ASYNC LOOP STOPPED ****************************************\"))))\n\n;; runtime checking (both clj and cljs\n(defn- output-fn [data]\n  (let [{:keys [level ?err msg_ ?ns-str ?file hostname_\n                timestamp_ ?line]} data]\n    (str\n      (string/upper-case (name level)) \" \"\n      (force msg_)\n      (when-let [err ?err]\n        (str \"\\n\" (utils/stacktrace err))))))\n\n(defn now-ms [] #?(:clj  (System/currentTimeMillis)\n                   :cljs (inst-ms (js/Date.))))\n\n(defn run-check [{:keys [args? vararg? callsite throw? fn-name expound-opts]} spec value]\n  (let [start           (now-ms)\n        vargs?          (and args? vararg?)\n        varg            (if vargs? (last (seq value)) nil)\n        specable-args   (if vargs?\n                          (if (map? varg)\n                            (into (vec (butlast value)) (flatten (seq varg)))\n                            (into (vec (butlast value)) (seq varg)))\n                          value)\n        valid-exception (atom nil)]\n    (try\n      (when-not (s/valid? spec specable-args)\n        (let [problem     (exp/expound-str spec specable-args expound-opts)\n              description (str\n                            \"\\n\"\n                            fn-name\n                            (if args? \" argument list\" \" return type\") \"\\n\"\n                            problem)]\n          (if throw?\n            (reset! valid-exception\n              (ex-info description\n                (with-meta\n                  #:com.fulcrologic.guardrails\n                      {:_/type        :com.fulcrologic.guardrails/validation-error\n                       :fn-name       fn-name\n                       :failure-point (if args? :args :ret)\n                       :spec          spec}\n                  #:com.fulcrologic.guardrails\n                      {:val specable-args})))\n            (utils/report-problem (str description \"\\n\" (utils/stacktrace (or callsite (ex-info \"\" {}))))))))\n      (catch #?(:cljs :default :clj Throwable) e\n        (utils/report-exception e (str \"BUG: Internal error in expound or clojure spec.\\n\")))\n      (finally\n        (let [duration (- (now-ms) start)]\n          (when (> duration 100)\n            (utils/report-problem (str \"WARNING: \" fn-name \" \" (if args? \"argument specs\" \"return spec\") \" took \" duration \"ms to run.\"))))))\n    (when @valid-exception\n      (throw @valid-exception)))\n  nil)\n\n#?(:clj\n   (defn clean-defn\n     \"This removes the gspec and returns a\n     clean defn for use in production builds.\"\n     [op forms]\n     (let [single-arity? (fn [fn-forms] (boolean (some vector? fn-forms)))\n           strip-gspec   (fn [body] (let [[args _gspec & more] body]\n                                      (cons args more)))]\n       (->> (if (single-arity? forms)\n              (let [[head-forms body-forms] (split-with (complement vector?) forms)]\n                `(~op ~@head-forms ~@(strip-gspec body-forms)))\n              (let [[head-forms body-forms tail-attr-map] (partition-by (complement seq?) forms)]\n                `(~op ~@head-forms ~@(map strip-gspec body-forms) ~@tail-attr-map)))\n         (remove nil?)))))\n\n#?(:clj\n   (defn- count-args\n     \"Returns a tuple with the number of regular and non-variadic arguments.\"\n     [conformed-args]\n     [(count (:args conformed-args))\n      (if (:varargs conformed-args) 1 0)]))\n\n#?(:clj\n   (defmacro ? [& forms]\n     (cond-> `(s/nilable ~@forms)\n       (cljs-env? &env) clj->cljs)))\n\n#?(:clj\n   (do\n     (s/def ::defn-macro string?)\n     (s/def ::expound (s/map-of keyword? any?))\n     (s/def ::throw? boolean?)\n\n     (s/def ::guardrails-config\n       (s/keys\n         :opt-un [::defn-macro\n                  ::expound\n                  ::throw?]))\n\n     ;; These are lifted straight from clojure.core.specs.alpha, because it\n     ;; didn't seem possible to access them directly in the original namespace.\n     (s/def ::local-name (s/and simple-symbol? #(not= '& %)))\n\n     ;; sequential destructuring\n     (s/def ::seq-binding-form\n       (s/and vector?\n         (s/cat :elems (s/* ::binding-form)\n           :rest (s/? (s/cat :amp #{'&} :form ::binding-form))\n           :as (s/? (s/cat :as #{:as} :sym ::local-name)))))\n\n     ;; map destructuring\n     (s/def ::keys (s/coll-of ident? :kind vector?))\n     (s/def ::syms (s/coll-of symbol? :kind vector?))\n     (s/def ::strs (s/coll-of simple-symbol? :kind vector?))\n     (s/def ::or (s/map-of simple-symbol? any?))\n     (s/def ::as ::local-name)\n\n     (s/def ::map-special-binding\n       (s/keys :opt-un [::as ::or ::keys ::syms ::strs]))\n\n     (s/def ::map-binding (s/tuple ::binding-form any?))\n\n     (s/def ::ns-keys\n       (s/tuple\n         (s/and qualified-keyword? #(-> % name #{\"keys\" \"syms\"}))\n         (s/coll-of simple-symbol? :kind vector?)))\n\n     (s/def ::map-bindings\n       (s/every (s/or :mb ::map-binding\n                  :nsk ::ns-keys\n                  :msb (s/tuple #{:as :or :keys :syms :strs} any?))\n         :into {}))\n\n     (s/def ::map-binding-form (s/merge ::map-bindings ::map-special-binding))\n\n     (s/def ::binding-form\n       (s/or :sym ::local-name\n         :seq ::seq-binding-form\n         :map ::map-binding-form))\n\n     ;;; Function and >defn specs\n\n     (s/def ::arg-list\n       (s/and vector?\n         (s/cat :args (s/* ::binding-form)\n           :varargs (s/? (s/cat :amp #{'&} :form ::binding-form)))))\n\n     (s/def ::pred-arg-list\n       (s/and vector?\n         (s/cat :args (s/* (s/or :sym ::local-name)))))\n\n     (s/def ::anon-args+body\n       (s/cat :args ::arg-list\n         :body (s/* any?)))\n\n     (s/def ::anon-fn\n       (s/and seq?\n         (s/cat :op #{'fn* 'fn}\n           :name (s/? simple-symbol?)\n           :bs (s/alt :arity-1 ::anon-args+body\n                 :arity-n (s/+ (s/spec ::anon-args+body))))))\n\n     (s/def ::pred-fn\n       (s/and seq?\n         (s/cat :op #{'fn* 'fn}\n           :name (s/? simple-symbol?)\n           :args ::pred-arg-list\n           :body any?)))\n\n     (s/def ::spec-elem\n       (s/or :set set?\n         :pred-sym (s/and symbol?\n                     (complement #{'| '=>})\n                     ;; REVIEW: should the `?` be a requirement?\n                     #(string/ends-with? (str %) \"?\"))\n         :gspec (s/or :nilable-gspec ::nilable-gspec :gspec ::gspec)\n         :spec-key qualified-keyword?\n         :fun ::pred-fn\n         :list seq?))\n\n     (s/def ::such-that-op #{:st '|})\n     (s/def ::ret-op #{:ret '=>})\n     (s/def ::gen-op #{:gen '<-})\n\n     (s/def ::gspec\n       (s/and vector?\n         (s/cat :args (s/? (s/cat :args (s/+ ::spec-elem)\n                             :args-such-that (s/? (s/cat :op ::such-that-op\n                                                    :preds (s/+ ::pred-fn)))))\n           :ret-op ::ret-op\n           :ret ::spec-elem\n           :fn-such-that (s/? (s/cat :op ::such-that-op\n                                :preds (s/+ ::pred-fn)))\n           :gen (s/? (s/cat :op ::gen-op\n                       :gen-fn (s/? (some-fn seq? symbol?)))))))\n\n     (s/def ::nilable-gspec\n       (s/and vector?\n         (s/cat :maybe #{'? 's/nilable}\n           :gspec ::gspec)))\n\n     (s/def ::prepost (s/map-of #{:pre :post}\n                        (s/coll-of seq?\n                          :kind vector?\n                          :distinct true)))\n\n     (s/def ::args+body\n       (s/cat :args ::arg-list\n         :body (s/alt :prepost+body (s/cat :prepost ::prepost\n                                      :body (s/+ any?))\n                 :body (s/* any?))))\n\n     (s/def ::args+gspec+body\n       (s/&\n         (s/cat :args ::arg-list\n           :gspec (s/nilable ::gspec)\n           :body (s/alt :prepost+body (s/cat :prepost ::prepost\n                                        :body (s/+ any?))\n                   :body (s/* any?)))\n         (fn arg-specs-match-param-count? [{:keys [args gspec]}]\n           (if-not gspec\n             true\n             (let [argcount  (->> args count-args (apply +))\n                   spec-args (:args gspec)]\n               (if spec-args\n                 (-> spec-args :args count (= argcount))\n                 (= argcount 0)))))))\n\n\n     (s/def ::defn\n       (s/and seq?\n         (s/cat :op #{'defn 'defn-}\n           :name simple-symbol?\n           :docstring (s/? string?)\n           :meta (s/? map?)\n           :bs (s/alt :arity-1 ::args+body\n                 :arity-n (s/cat :bodies (s/+ (s/spec ::args+body))\n                            :attr (s/? map?))))))\n\n     ;;;; Main code generating functions\n\n     (defn- unscrew-vec-unform\n       \"Half-arsed workaround for spec bugs CLJ-2003 and CLJ-2021.\"\n       [unformed-arg]\n       (if-not (sequential? unformed-arg)\n         unformed-arg\n         (let [malformed-seq-destructuring? (every-pred seq? (comp #{:as '&} first))\n               [unformed malformed] (split-with (complement malformed-seq-destructuring?) unformed-arg)]\n           (vec (concat unformed (apply concat malformed))))))\n\n\n     (defn- gspec->fspec*\n       [conformed-arg-list conformed-gspec anon-fspec? multi-arity-args? nilable?]\n       (let [{argspec-def              :args\n              retspec                  :ret\n              fn-such-that             :fn-such-that\n              {:keys [gen-fn] :as gen} :gen}\n             conformed-gspec]\n         (if (and anon-fspec?\n               argspec-def\n               (not gen)\n               (some #{'any?} (-> argspec-def :args vals)))\n           (if nilable? `(s/nilable ifn?) `ifn?)\n           (let [extract-spec\n                 (fn extract-spec [[spec-type spec]]\n                   (if (= spec-type :gspec)\n                     (if (= (key spec) :nilable-gspec)\n                       (gspec->fspec* nil (-> spec val :gspec) true false true)\n                       (gspec->fspec* nil (val spec) true false false))\n                     spec))\n\n                 named-conformed-args\n                 (when argspec-def\n                   (let [all-args     (remove nil? (concat (:args conformed-arg-list)\n                                                     [(-> conformed-arg-list :varargs :form)]))\n                         gen-arg-name (fn [index] (str \"arg\" (inc index)))\n                         gen-name     (fn [index [arg-type arg :as full-arg]]\n                                        (let [arg-name (if-not arg-type\n                                                         (gen-arg-name index)\n                                                         (case arg-type\n                                                           :sym arg\n                                                           :seq (or (-> arg :as :sym)\n                                                                  (gen-arg-name index))\n                                                           :map (or (-> arg :as)\n                                                                  (gen-arg-name index))))]\n                                          [(keyword arg-name) full-arg]))]\n                     (map-indexed gen-name (or (seq all-args)\n                                             (-> argspec-def :args count (repeat nil))))))\n\n                 arg-binding-map\n                 (if-not conformed-arg-list\n                   {}\n                   (if (every? #(= (-> % second key) :sym) named-conformed-args)\n                     `{:keys ~(vec (map #(-> % first name symbol) named-conformed-args))}\n                     (->> named-conformed-args\n                       (map (fn [[arg-key conformed-arg]]\n                              [(->> conformed-arg (s/unform ::binding-form) unscrew-vec-unform)\n                               arg-key]))\n                       (into {}))))\n\n                 process-arg-pred\n                 (fn process-arg-pred [{:keys [name args body]}]\n                   (let [bindings (if-let [anon-arg (some-> args :args first second)]\n                                    (assoc arg-binding-map :as anon-arg)\n                                    arg-binding-map)]\n                     (remove nil? `(fn ~name [~bindings] ~body))))\n\n                 processed-args\n                 (if-not argspec-def\n                   `(s/cat)\n                   (let [wrapped-params (->> argspec-def\n                                          :args\n                                          (map extract-spec)\n                                          (interleave (map first named-conformed-args))\n                                          (cons `s/cat))]\n                     (if-let [args-such-that (:args-such-that argspec-def)]\n                       (->> args-such-that\n                         :preds\n                         (map process-arg-pred)\n                         (list* `s/and wrapped-params))\n                       wrapped-params)))\n\n                 process-ret-pred\n                 (fn process-ret-pred [{:keys [name args body]}]\n                   (let [anon-arg       (some-> args :args first second)\n                         ret-sym        (gensym \"ret__\")\n                         bindings       [{(if multi-arity-args?\n                                            ['_ arg-binding-map]\n                                            arg-binding-map) :args\n                                          ret-sym            :ret}]\n                         processed-body (if anon-arg\n                                          (walk/postwalk-replace {anon-arg ret-sym} body)\n                                          body)]\n                     (remove nil? `(fn ~name ~bindings ~processed-body))))\n\n                 fn-spec\n                 (when fn-such-that\n                   (let [processed-ret-preds (map process-ret-pred (:preds fn-such-that))]\n                     (if (next processed-ret-preds)\n                       (cons `s/and processed-ret-preds)\n                       (first processed-ret-preds))))\n\n                 final-fspec\n                 (concat (when anon-fspec? [`s/fspec])\n                   [:args processed-args]\n                   [:ret (extract-spec retspec)]\n                   (when fn-spec [:fn fn-spec])\n                   (when gen-fn [:gen gen-fn]))]\n             (if nilable? `(s/nilable ~final-fspec) final-fspec)))))\n\n\n\n     ;; TODO make sure we check whether the variadic bodies are legit\n     ;; Can not have more than one\n     ;; Can not have one with more regular args than the variadic one\n     ;; To what extent does the compiler already check this?\n     (let [get-fspecs    (fn [fn-body]\n                           (let [[param-count variadic] (-> fn-body :args count-args)\n                                 gspec (or (:gspec fn-body)\n                                         (s/conform ::gspec\n                                           (vec (concat (repeat param-count 'any?)\n                                                  (when (> variadic 0)\n                                                    `[(s/* any?)])\n                                                  '[=> any?]))))]\n                             [(->> (if (> variadic 0) \"n\" param-count)\n                                (str \"arity-\")\n                                keyword)\n                              (gspec->fspec* (:args fn-body) gspec false true false)]))\n           get-spec-part (fn [part spec]\n                           (->> spec\n                             (drop-while (complement #{part}))\n                             second))]\n       (defn- generate-fspec-body [fn-bodies]\n         (case (key fn-bodies)\n           :arity-1\n           (when-let [gspec (-> fn-bodies val :gspec)]\n             (gspec->fspec* (-> fn-bodies val :args) gspec false false false))\n\n           :arity-n\n           (when (some :gspec (val fn-bodies))\n             (let [fspecs           (map get-fspecs (val fn-bodies))\n                   arg-specs        (mapcat (fn [[arity spec]]\n                                              [arity (or (get-spec-part :args spec) `empty?)])\n                                      fspecs)\n                   fn-param         (gensym \"p1__\")\n                   multi-ret-specs  (when (->> fspecs\n                                            (map #(get-spec-part :ret (second %)))\n                                            distinct\n                                            count\n                                            (not= 1))\n                                      (mapcat (fn [[arity spec]]\n                                                [arity `(s/valid? ~(get-spec-part :ret spec)\n                                                          (:ret ~fn-param))])\n                                        fspecs))\n                   get-fn-clause    (partial get-spec-part :fn)\n                   fn-specs         (when (->> fspecs (map second) (some get-fn-clause))\n                                      (mapcat (fn [[arity spec]]\n                                                [arity (if-let [fn-spec (get-fn-clause spec)]\n                                                         `(s/valid? ~fn-spec ~fn-param)\n                                                         true)])\n                                        fspecs))\n                   ;; NOTE: destructure args and ret in the arg vec\n                   multi-ret-clause (when multi-ret-specs\n                                      `(fn ~'valid-multi-arity-ret? [~fn-param]\n                                         (case (-> ~fn-param :args key)\n                                           ~@multi-ret-specs)))\n                   multi-fn-clause  (when fn-specs\n                                      `(fn ~'valid-multi-arity-fn? [~fn-param]\n                                         (case (-> ~fn-param :args key)\n                                           ~@fn-specs)))]\n               ;; Using s/or here even though s/alt seems to be more common\n               ;; for multi-arity specs in the wild. The spec error reporting\n               ;; is much better and it's immediately clear what didn't match.\n               (concat [:args `(s/or ~@arg-specs)]\n                 (when-not multi-ret-clause\n                   [:ret (get-spec-part :ret (-> fspecs first second))])\n                 (when (or multi-ret-clause multi-fn-clause)\n                   [:fn (if multi-fn-clause\n                          (if multi-ret-clause\n                            `(s/and ~multi-ret-clause ~multi-fn-clause)\n                            multi-fn-clause)\n                          multi-ret-clause)])))))))\n\n     (def ^:private spec-op->type\n       (let [map-prot     \"cljs.core.IMap\"\n             coll-prot    \"cljs.core.ICollection\"\n             ;; Needed because Closure compiler/JS doesn't consider strings seqable\n             seqable-prot \"(cljs.core.ISeqable|string)\"]\n         {'number?      \"number\"\n          'integer?     \"number\"\n          'int?         \"number\"\n          'nat-int?     \"number\"\n          'pos-int?     \"number\"\n          'neg-int?     \"number\"\n          'float?       \"number\"\n          'double?      \"number\"\n          'int-in       \"number\"\n          'double-in    \"number\"\n\n          'string?      \"string\"\n\n          'boolean?     \"boolean\"\n\n          'keys         map-prot\n          'map-of       map-prot\n          'map?         map-prot\n          'merge        map-prot\n\n          'set?         \"cljs.core.ISet\"\n          'vector?      \"cljs.core.IVector\"\n          'tuple        \"cljs.core.IVector\"\n          'seq?         \"cljs.core.ISeq\"\n          'seqable?     seqable-prot\n          'associative? \"cljs.core.IAssociative\"\n          'atom?        \"cljs.core.IAtom\"\n\n          'coll-of      coll-prot\n          'every        coll-prot\n\n          'keyword?     \"cljs.core.Keyword\"\n          'ifn?         \"cljs.core.IFn\"\n          'fn?          \"Function\"}))\n\n     (declare get-gspec-type)\n\n     (defn- get-type [recursive-call conformed-spec-elem]\n       (let [[spec-type spec-def] conformed-spec-elem\n             spec-op\n             ;; REVIEW: This kinda wants to be a multi-method when it grows up.\n             (case spec-type\n               :list (let [op (-> spec-def first name symbol)]\n                       (cond\n                         (#{'nilable '?} op) (concat (->> spec-def\n                                                       second\n                                                       (s/conform ::spec-elem)\n                                                       (get-type true))\n                                               [::nilable])\n                         (#{'* '+} op) (concat (->> spec-def\n                                                 second\n                                                 (s/conform ::spec-elem)\n                                                 (get-type true))\n                                         [::variadic])\n                         (#{'and} op) [(-> spec-def second)] ; TODO\n                         (#{'coll-of 'every} op) [(or (->> spec-def\n                                                        (drop-while (complement #{:kind}))\n                                                        second)\n                                                    op)]\n                         :else [op]))\n               ;;TODO support (some-fn and (s/or\n               :gspec (let [gspec-def (val spec-def)]\n                        (if (= (key spec-def) :nilable-gspec)\n                          [(get-gspec-type (:gspec gspec-def)) ::nilable]\n                          [(get-gspec-type gspec-def)]))\n               :pred-sym [spec-def]\n               [nil])]\n         (if recursive-call\n           spec-op\n           (if-let [js-type (spec-op->type (first spec-op))]\n             (let [modifiers (set (rest spec-op))]\n               (as-> js-type t\n                 (str (if (::nilable modifiers) \"?\" \"!\") t)\n                 (str (when (::variadic modifiers) \"...\") t)))\n             \"*\"))))\n\n\n     (defn- get-gspec-type [conformed-gspec]\n       (let [argspec-def (:args conformed-gspec)\n             args-jstype (if-not argspec-def\n                           \"\"\n                           (->> (-> conformed-gspec :args :args)\n                             (map (partial get-type false))\n                             (string/join \", \")))\n             ret-jstype  (get-type false (:ret conformed-gspec))]\n         (str \"function(\" args-jstype \"): \" ret-jstype)))\n\n     (defn- generate-type-annotations [env conformed-bs]\n       (when (cljs-env? env)\n         (case (key conformed-bs)\n           :arity-1 (when-let [gspec (-> conformed-bs val :gspec)]\n                      {:jsdoc [(str \"@type {\" (get-gspec-type gspec) \"}\")]})\n           ;; REVIEW: There doesn't seem to be a way to get valid annotations for args of\n           ;; multi-arity functions and attempts to just annotate the return value(s) failed\n           ;; as well. It wasn't possible to put together an annotation which was both\n           ;; considered valid and resulted in a successful type check.\n           :arity-n nil #_(when-let [ret-types (as-> (val conformed-bs) x\n                                                 (map #(get-type false (-> % :gspec :ret)) x)\n                                                 (distinct x)\n                                                 (when (not-any? #{\"*\" \"?\"} x) x))]\n                            {:jsdoc [(str \"@return {\" (string/join \"|\" ret-types) \"}\")]}))))\n\n     (defn- generate-fdef\n       [env forms]\n       (let [{[type fn-name] :name bs :bs} (s/conform ::>fdef-args forms)]\n         (case type\n           :sym (let [fdef `(s/fdef ~fn-name ~@(generate-fspec-body bs))]\n                  fdef)\n           :key `(s/def ~fn-name (s/fspec ~@(generate-fspec-body bs))))))))\n\n(defn callsite-exception []\n  #?(:cljs (js/Error. \"\")\n     :clj  (AssertionError. \"\")))\n\n#?(:clj\n   (do\n     (defn- process-defn-body\n       [cfg fspec args+gspec+body]\n       (let [{:keys            [env fn-name]\n              {:keys [throw?]} :config} cfg\n             {:keys [async-checks?]} env\n             {:keys [args body]} args+gspec+body\n             cljs?         (cljs-env? env)\n             [prepost orig-body-forms] (case (key body)\n                                         :prepost+body [(-> body val :prepost)\n                                                        (-> body val :body)]\n                                         :body [nil (val body)])\n             process-arg   (fn [[arg-type arg]]\n                             (as-> arg arg\n                               (case arg-type\n                                 :sym [arg-type arg]\n                                 :seq [arg-type (update arg :as #(or % {:as :as :sym (gensym \"arg_\")}))]\n                                 :map [arg-type (update arg :as #(or % (gensym \"arg_\")))])))\n             ;; NOTE: usage of extract-arg isn't elegant, there's duplication, refactor\n             extract-arg   (fn [[arg-type arg]]\n                             (case arg-type\n                               :sym arg\n                               :seq (get-in arg [:as :sym])\n                               :map (:as arg)\n                               nil))\n             {:keys [file line]} (if cljs?\n                                   (meta fn-name)\n                                   {:file #?(:clj *file* :cljs \"N/A\")\n                                    :line (some-> env :form meta :line)})\n             unform-arg    #(->> % (s/unform ::binding-form) unscrew-vec-unform)\n             reg-args      (->> args :args (mapv process-arg))\n             arg->sym      #(let [f (into {} [%])]\n                              (or\n                                (:sym f)\n                                (some-> f :seq :as :sym)\n                                (some-> f :map :as)))\n             reg-arg-names (mapv arg->sym reg-args)\n             var-arg       (some-> args :varargs :form process-arg)\n             arg-list      (vec (concat (map unform-arg reg-args)\n                                  (when var-arg ['& (unform-arg var-arg)])))\n             sym-arg-list  (if var-arg\n                             (conj reg-arg-names (arg->sym var-arg))\n                             reg-arg-names)\n             body-forms    orig-body-forms\n             where         (str file \":\" line \" \" fn-name \"'s\")\n             argspec       (gensym \"argspec\")\n             opts          {:fn-name      where\n                            :throw?       throw?\n                            :vararg?      (boolean var-arg)\n                            :expound-opts (get (gr.cfg/get-env-config) :expound {})}\n             gosym         (if cljs? 'cljs.core.async/go 'clojure.core.async/go)\n             putsym        (if cljs? 'cljs.core.async/>! 'clojure.core.async/>!)\n             args-check    (if async-checks?\n                             `(let [e# (callsite-exception)]\n                                (~gosym\n                                  (~putsym pending-check-channel (fn [] (when ~argspec (run-check (assoc\n                                                                                                    ~(assoc opts :args? true)\n                                                                                                    :callsite e#)\n                                                                                         ~argspec ~sym-arg-list))))))\n                             `(when ~argspec (run-check ~(assoc opts :args? true) ~argspec ~sym-arg-list)))\n             retspec       (gensym \"retspec\")\n             ret           (gensym \"ret\")\n             ret-check     (if async-checks?\n                             `(let [e# (callsite-exception)]\n                                (~gosym\n                                  (~putsym pending-check-channel (fn [] (when ~retspec (run-check (assoc\n                                                                                                    ~(assoc opts :args? false)\n                                                                                                    :callsite e#) ~retspec ~ret))))))\n                             `(when ~retspec (run-check ~(assoc opts :args? false) ~retspec ~ret)))\n             real-function `(fn ~arg-list ~@body-forms)\n             f             (gensym \"f\")\n             call          (if (boolean var-arg)\n                             `(cond\n                                (map? ~(last sym-arg-list)) (apply ~f ~@(butlast sym-arg-list) (apply concat (last ~sym-arg-list)))\n                                (seq ~(last sym-arg-list)) (apply ~f ~@sym-arg-list)\n                                :else (~f ~@(butlast sym-arg-list)))\n                             `(~f ~@sym-arg-list))]\n         `(~@(remove nil? [arg-list prepost])\n            (let [{~argspec :args ~retspec :ret} ~fspec]\n              ~args-check\n              (let [~f ~real-function\n                    ~ret ~call]\n                ~ret-check\n                ~ret)))))\n\n     (defn- generate-defn\n       [forms private env]\n       (let [conformed-gdefn   (s/conform ::>defn-args forms)\n             fn-bodies         (:bs conformed-gdefn)\n             arity             (key fn-bodies)\n             fn-name           (:name conformed-gdefn)\n             docstring         (:docstring conformed-gdefn)\n             meta-map          (merge (:meta conformed-gdefn)\n                                 (generate-type-annotations env fn-bodies)\n                                 {::guardrails true})\n             ;;; Assemble the config\n             {:keys [defn-macro] :as config} (gr.cfg/merge-config env (meta fn-name) meta-map)\n             defn-sym          (cond defn-macro (with-meta (symbol defn-macro) {:private private})\n                                     private 'defn-\n                                     :else 'defn)\n             ;;; Code generation\n             fdef-body         (generate-fspec-body fn-bodies)\n             fdef              (when fdef-body `(s/fdef ~fn-name ~@fdef-body))\n             individual-arity-fspecs\n                               (map (fn [{:keys [args gspec]}]\n                                      (when gspec\n                                        (gspec->fspec* args gspec true false false)))\n                                 (val fn-bodies))\n\n             process-fn-bodies (fn []\n                                 (let [process-cfg {:env     env\n                                                    :config  config\n                                                    :fn-name fn-name}]\n                                   (case arity\n                                     :arity-1 (->> fn-bodies val (process-defn-body process-cfg `(s/fspec ~@fdef-body)))\n                                     :arity-n (map (partial process-defn-body process-cfg)\n                                                individual-arity-fspecs\n                                                (val fn-bodies)))))\n             main-defn         `(~@(remove nil? [defn-sym fn-name docstring meta-map])\n                                  ~@(process-fn-bodies))]\n         `(do ~fdef (declare ~fn-name) ~main-defn)))\n\n     ;;;; Main macros and public API\n\n     (s/def ::>defn-args\n       (s/and seq?                                          ; REVIEW\n         (s/cat :name simple-symbol?\n           :docstring (s/? string?)\n           :meta (s/? map?)\n           :bs (s/alt :arity-1 ::args+gspec+body\n                 ;; TODO: add tail-attr-map support after this\n                 :arity-n (s/+ (s/and seq? ::args+gspec+body))))))\n\n     (defn >defn* [env form body {:keys [private?] :as opts}]\n       (let [cfg    (gr.cfg/get-env-config)\n             mode   (gr.cfg/mode cfg)\n             async? (gr.cfg/async? cfg)]\n         (cond\n           (not cfg) (clean-defn 'defn body)\n           (#{:copilot :pro} mode) `(do (defn ~@body)\n                                        ~(gr.pro/>defn-impl env body opts))\n           (#{:runtime :all} mode)\n           (cond-> (remove nil? (generate-defn body private? (assoc env :form form :async-checks? async?)))\n             (cljs-env? env) clj->cljs\n             (= :all mode) (-> vec (conj (gr.pro/>defn-impl env body opts)) seq)))))\n\n     (defmacro >defn\n       \"Like defn, but requires a (nilable) gspec definition and generates\n       additional `s/fdef`, generative tests, instrumentation code, an\n       fspec-based stub, and/or tracing code, depending on the configuration\n       metadata and the existence of a valid gspec and non-nil body.\"\n       {:arglists '([name doc-string? attr-map? [params*] gspec prepost-map? body?]\n                    [name doc-string? attr-map? ([params*] gspec prepost-map? body?) + attr-map?])}\n       [& forms]\n       (>defn* &env &form forms {:private false}))\n\n     (s/fdef >defn :args ::>defn-args)\n\n     (defmacro >defn-\n       \"Like defn-, but requires a (nilable) gspec definition and generates\n       additional `s/fdef`, generative tests, instrumentation code, an\n       fspec-based stub, and/or tracing code, depending on the configuration\n       metadata and the existence of a valid gspec and non-nil body.\"\n       {:arglists '([name doc-string? attr-map? [params*] gspec prepost-map? body?]\n                    [name doc-string? attr-map? ([params*] gspec prepost-map? body?) + attr-map?])}\n       [& forms]\n       (>defn* &env &form forms {:private true}))\n\n     (s/fdef >defn- :args ::>defn-args)\n\n     (defmacro >def\n       \"DEPRECATED: to be removed\"\n       ([k spec-form]\n        (cond-> `(s/def ~k ~spec-form)\n          (cljs-env? &env) clj->cljs))\n       ([k _doc spec-form]\n        `(>def ~k ~spec-form)))\n\n     (s/def ::>fdef-args\n       (s/and seq?                                          ;REVIEW\n         (s/cat :name (s/or :sym symbol? :key qualified-keyword?)\n           :bs (s/alt :arity-1 ::args+gspec+body\n                 :arity-n (s/+ (s/and seq? ::args+gspec+body))))))\n\n     (defmacro >fdef\n       \"Defines an fspec using gspec syntax – pretty much a `>defn` without the body.\n\n       `name` can be a symbol or a qualified keyword, depending on whether the\n       fspec is meant to be registered as a top-level fspec (=> s/fdef fn-sym\n       ...) or used in other specs (=> s/def ::spec-keyword (s/fspec ...)). \"\n       {:arglists '([name [params*] gspec]\n                    [name ([params*] gspec) +])}\n       [& forms]\n       (when-let [cfg (gr.cfg/get-env-config)]\n         `(do ~(when (#{:pro :copilot :all} (gr.cfg/mode cfg))\n                 (gr.pro/>fdef-impl &env forms))\n              ~(cond-> (remove nil? (generate-fdef &env forms))\n                 (cljs-env? &env) clj->cljs))))\n\n     (s/fdef >fdef :args ::>fdef-args)\n\n     ;; TODO: clean >fn (no gspec)\n     (defmacro >fn [& forms] `(fn ~@forms))\n\n     (defmacro >fspec [& forms]\n       (gr.pro/>fspec-impl &env forms))))\n","~:reader-features",["^F",["~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings","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","names",["com.fulcrologic.guardrails.core/=>","com.fulcrologic.guardrails.core/|","com.fulcrologic.guardrails.core/<-","js/com","js/com.fulcrologic","js/com.fulcrologic.guardrails","js/com.fulcrologic.guardrails.core","js/com.fulcrologic.guardrails.core.pending-check-channel","com.fulcrologic.guardrails.core/pending-check-channel","cljs.core.async.chan","cljs.core.async/dropping-buffer","js/com.fulcrologic.guardrails.core.async-go-channel","com.fulcrologic.guardrails.core/async-go-channel","c__49738__auto__","cljs.core.async.impl.dispatch/run","f__49739__auto__","switch__49646__auto__","state_55423","state_val_55424","inst_55419","statearr-55425","cljs.core.async.impl.ioc-helpers/take!","inst_55421","cljs.core.async.impl.ioc-helpers/return-chan","inst_55417","statearr-55428","inst_55397","statearr-55431","statearr-55432","inst_55414","statearr-55434","statearr-55435","inst_55396","statearr-55436","statearr-55437","_","statearr-55438","cljs.core/rest","ex55433","statearr-55439","statearr-55440","inst_55409","statearr-55442","statearr-55443","inst_55400","statearr-55444","statearr-55445","statearr-55446","cljs.core/cons","inst_55406","statearr-55447","statearr-55448","statearr-55449","state-machine__49647__auto__","ret-value__49648__auto__","result__49649__auto__","cljs.core/keyword-identical?","ex__49650__auto__","e55450","statearr-55451","cljs.core/seq","statearr-55452","cljs.core/first","state__49740__auto__","statearr-55453","cljs.core.async.impl.ioc-helpers/USER-START-IDX","cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","cljs.core.println","com.fulcrologic.guardrails.core/output-fn","data","map__55454","cljs.core/--destructure-map","cljs.core.get","level","?err","msg_","?ns-str","?file","hostname_","timestamp_","?line","clojure.string/upper-case","cljs.core/name","cljs.core/force","temp__5753__auto__","err","com.fulcrologic.guardrails.utils.stacktrace","com.fulcrologic.guardrails.core/now-ms","cljs.core/inst-ms","js/Date","p__55460","map__55461","com.fulcrologic.guardrails.core/run-check","args?","vararg?","callsite","throw?","fn-name","expound-opts","spec","value","start","vargs?","and__4251__auto__","varg","cljs.core/last","specable-args","cljs.core/map?","cljs.core.into","cljs.core/vec","cljs.core/butlast","cljs.core/flatten","valid-exception","cljs.core.atom","e55462","cljs.spec.alpha.valid_QMARK_","problem","expound.alpha.expound_str","description","cljs.core/reset!","cljs.core.ex_info","cljs.core/with-meta","com.fulcrologic.guardrails.utils/report-problem","or__4253__auto__","e","com.fulcrologic.guardrails.utils/report-exception","duration","cljs.core/deref","com.fulcrologic.guardrails.core/callsite-exception","js/Error"]],"~:used-vars",["^F",["~$cljs.core/--destructure-map","~$cljs.core/rest","~$com.fulcrologic.guardrails.core/async-go-channel","~$clojure.string/upper-case","~$js/Date","~$js/com.fulcrologic.guardrails.core.async-go-channel","~$com.fulcrologic.guardrails.core/=>","~$cljs.core/deref","~$cljs.core/seq","~$cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","~$cljs.core/last","~$cljs.core/keyword-identical?","~$cljs.core/atom","~$com.fulcrologic.guardrails.core/callsite-exception","~$js/com.fulcrologic.guardrails","~$js/com.fulcrologic.guardrails.core","~$com.fulcrologic.guardrails.core/output-fn","~$cljs.core.async.impl.ioc-helpers/take!","~$cljs.core/inst-ms","~$cljs.core/into","~$cljs.core/map?","~$cljs.core/reset!","~$cljs.core/with-meta","~$js/com.fulcrologic","~$cljs.core.async.impl.dispatch/run","~$com.fulcrologic.guardrails.core/pending-check-channel","~$cljs.core.async/chan","~$cljs.core.async/dropping-buffer","~$cljs.core/get","~$cljs.core/flatten","~$cljs.core.async.impl.ioc-helpers/USER-START-IDX","~$js/com","~$cljs.spec.alpha/valid?","~$cljs.core/ex-info","~$cljs.core/force","~$cljs.core/println","~$cljs.core/vec","~$cljs.core.async.impl.ioc-helpers/return-chan","~$com.fulcrologic.guardrails.core/now-ms","~$cljs.core/cons","~$expound.alpha/expound-str","~$cljs.core/first","~$cljs.core/butlast","~$com.fulcrologic.guardrails.utils/stacktrace","~$com.fulcrologic.guardrails.core/<-","~$com.fulcrologic.guardrails.core/run-check","~$cljs.core/name","~$com.fulcrologic.guardrails.utils/report-problem","~$com.fulcrologic.guardrails.core/|","~$js/Error","~$com.fulcrologic.guardrails.utils/report-exception","~$js/com.fulcrologic.guardrails.core.pending-check-channel"]]],"~:cache-keys",["~#cmap",[["^1S","goog/dom/tagname.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^F",[]],"~:deps-syms",["^1B","~$goog.dom.HtmlElement"]]],["^1S","cljs/core/async/impl/ioc_helpers.cljs"],["c55a0f6d67abac2efcfddf7621cac07d90298cab","^3=",["^ ","^3>",null,"^3?",["^F",[]],"^3@",["^1B","^1A","~$cljs.core.async.impl.protocols"]]],["^1S","goog/labs/useragent/platform.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3=",["^ ","^3>",null,"^3?",["^F",[]],"^3@",["^1B","~$goog.string.internal","~$goog.labs.userAgent.util"]]],["^1S","expound/util.cljc"],["f84ecd45aeef38fd6f1c53d8323e6abc5dc5a0e4","^3=",["^ ","^3>",null,"^3?",["^F",[]],"^3@",["^1B","^1A"]]],["^1S","cljs/core/async.cljs"],["c55a0f6d67abac2efcfddf7621cac07d90298cab","^3=",["^ ","^3>",null,"^3?",["^F",[]],"^3@",["^1B","^1A","^3B","~$cljs.core.async.impl.channels","~$cljs.core.async.impl.buffers","~$cljs.core.async.impl.timers","~$cljs.core.async.impl.dispatch","~$cljs.core.async.impl.ioc-helpers","~$goog.array"]]],["^1S","cljs/spec/gen/alpha.cljs"],["e2ad9a4500a5ecabaf01429c4f0d6f7fac146951","^3=",["^ ","^3>",null,"^3?",["^F",[]],"^3@",["^1B","^1A","~$goog.Uri"]]],["^1S","goog/math/math.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3=",["^ ","^3>",null,"^3?",["^F",[]],"^3@",["^1B","~$goog.asserts"]]],["^1S","goog/html/trustedtypes.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3=",["^ ","^3>",null,"^3?",["^F",[]],"^3@",["^1B"]]],["^1S","goog/string/stringformat.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3=",["^ ","^3>",null,"^3?",["^F",[]],"^3@",["^1B","~$goog.string"]]],["^1S","goog/labs/useragent/browser.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3=",["^ ","^3>",null,"^3?",["^F",[]],"^3@",["^1B","^3J","~$goog.object","^3D","^3C"]]],["^1S","goog/html/safeurl.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3=",["^ ","^3>",null,"^3?",["^F",[]],"^3@",["^1B","^3L","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.i18n.bidi.Dir","~$goog.i18n.bidi.DirectionalString","~$goog.string.Const","~$goog.string.TypedString","^3C"]]],["^1S","goog/array/array.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3=",["^ ","^3>",null,"^3?",["^F",[]],"^3@",["^1B","^3L"]]],["^1S","expound/problems.cljc"],["f84ecd45aeef38fd6f1c53d8323e6abc5dc5a0e4","^3=",["^ ","^3>",null,"^3?",["^F",[]],"^3@",["^1B","^1A","~$expound.paths","^?"]]],["^1S","goog/useragent/useragent.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3=",["^ ","^3>",null,"^3?",["^F",[]],"^3@",["^1B","~$goog.labs.userAgent.browser","~$goog.labs.userAgent.engine","~$goog.labs.userAgent.platform","^3D","~$goog.reflect","^3C"]]],["^1S","goog/debug/error.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3=",["^ ","^3>",null,"^3?",["^F",[]],"^3@",["^1B"]]],["^1S","goog/dom/nodetype.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3=",["^ ","^3>",null,"^3?",["^F",[]],"^3@",["^1B"]]],["^1S","com/fulcrologic/guardrails/utils.cljc"],["1c3188d13b2f3b2324bad6f65cc78cd4b193445e","^3=",["^ ","^3>",null,"^3?",["^F",[]],"^3@",["^1B","^1A","~$clojure.walk"]]],["^1S","cljs/pprint.cljs"],["e2ad9a4500a5ecabaf01429c4f0d6f7fac146951","^3=",["^ ","^3>",null,"^3?",["^F",[]],"^3@",["^1B","^1A","^1E","^3M","~$goog.string.StringBuffer"]]],["^1S","expound/alpha.cljc"],["f84ecd45aeef38fd6f1c53d8323e6abc5dc5a0e4","^3=",["^ ","^3>",null,"^3?",["^F",[]],"^3@",["^1B","^1A","~$expound.problems","^?","^1E","~$clojure.set","~$expound.printer","~$expound.util","~$expound.ansi"]]],["^1S","com/fulcrologic/guardrails/core.cljc"],["1c3188d13b2f3b2324bad6f65cc78cd4b193445e","^3=",["^ ","^3>",null,"^3?",["^F",[]],"^3@",["^1B","^1A","^1>","^1F","^A","^?","^1E","^1@"]]],["^1S","expound/ansi.cljc"],["f84ecd45aeef38fd6f1c53d8323e6abc5dc5a0e4","^3=",["^ ","^3>",null,"^3?",["^F",[]],"^3@",["^1B","^1A","^1E"]]],["^1S","goog/string/typedstring.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3=",["^ ","^3>",null,"^3?",["^F",[]],"^3@",["^1B"]]],["^1S","goog/object/object.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3=",["^ ","^3>",null,"^3?",["^F",[]],"^3@",["^1B"]]],["^1S","goog/dom/asserts.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3=",["^ ","^3>",null,"^3?",["^F",[]],"^3@",["^1B","^3L"]]],"~:SHADOW-TIMESTAMP",[1676259735000,1676259735000,1676259734000],["^1S","goog/math/long.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3=",["^ ","^3>",null,"^3?",["^F",[]],"^3@",["^1B","^3L","^3Y"]]],["^1S","goog/html/trustedresourceurl.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3=",["^ ","^3>",null,"^3?",["^F",[]],"^3@",["^1B","^3L","~$goog.fs.blob","^3O","~$goog.html.SafeScript","~$goog.html.trustedtypes","^3Q","^3R","^3S","^3T"]]],["^1S","cljs/core/async/impl/channels.cljs"],["c55a0f6d67abac2efcfddf7621cac07d90298cab","^3=",["^ ","^3>",null,"^3?",["^F",[]],"^3@",["^1B","^1A","^3B","^3H","^3F"]]],["^1S","com/fulcrologic/guardrails/registry.cljc"],["1c3188d13b2f3b2324bad6f65cc78cd4b193445e","^3=",["^ ","^3>",null,"^3?",["^F",[]],"^3@",["^1B","^1A"]]],["^1S","goog/string/internal.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3=",["^ ","^3>",null,"^3?",["^F",[]],"^3@",["^1B"]]],["^1S","goog/functions/functions.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3=",["^ ","^3>",null,"^3?",["^F",[]],"^3@",["^1B"]]],["^1S","cljs/core/async/impl/dispatch.cljs"],["c55a0f6d67abac2efcfddf7621cac07d90298cab","^3=",["^ ","^3>",null,"^3?",["^F",[]],"^3@",["^1B","^1A","^3F","~$goog.async.nextTick"]]],["^1S","goog/html/safestyle.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3=",["^ ","^3>",null,"^3?",["^F",[]],"^3@",["^1B","^3S","~$goog.html.SafeUrl","^3T","^3L","^3C"]]],["^1S","goog/dom/safe.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3=",["^ ","^3>",null,"^3?",["^F",[]],"^3@",["^1B","^3L","~$goog.dom.asserts","~$goog.functions","~$goog.html.SafeHtml","^47","~$goog.html.SafeStyle","^4:","^3P","~$goog.html.uncheckedconversions","^3S","^3C"]]],["^1S","expound/paths.cljc"],["f84ecd45aeef38fd6f1c53d8323e6abc5dc5a0e4","^3=",["^ ","^3>",null,"^3?",["^F",[]],"^3@",["^1B","^1A","^?","^43"]]],["^1S","clojure/walk.cljs"],["e2ad9a4500a5ecabaf01429c4f0d6f7fac146951","^3=",["^ ","^3>",null,"^3?",["^F",[]],"^3@",["^1B","^1A"]]],["^1S","cljs/core/async/impl/protocols.cljs"],["c55a0f6d67abac2efcfddf7621cac07d90298cab","^3=",["^ ","^3>",null,"^3?",["^F",[]],"^3@",["^1B","^1A"]]],["^1S","goog/html/safehtml.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3=",["^ ","^3>",null,"^3?",["^F",[]],"^3@",["^1B","^3S","^3Q","^3R","^47","^4>","~$goog.html.SafeStyleSheet","^4:","~$goog.dom.TagName","^3P","^3T","^3L","^3V","^3J","^3N","^3C","~$goog.dom.tags","^48"]]],["^1S","goog/dom/tags.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3=",["^ ","^3>",null,"^3?",["^F",[]],"^3@",["^1B","^3N"]]],["^1S","goog/math/size.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3=",["^ ","^3>",null,"^3?",["^F",[]],"^3@",["^1B"]]],["^1S","goog/labs/useragent/engine.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3=",["^ ","^3>",null,"^3?",["^F",[]],"^3@",["^1B","^3J","^3C","^3D"]]],["^1S","goog/fs/blob.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3=",["^ ","^3>",null,"^3?",["^F",[]],"^3@",["^1B"]]],["^1S","goog/dom/dom.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3=",["^ ","^3>",null,"^3?",["^F",[]],"^3@",["^1B","^3J","^3L","~$goog.dom.BrowserFeature","~$goog.dom.NodeType","^4A","~$goog.dom.safe","^4=","^4?","~$goog.math.Coordinate","~$goog.math.Size","^3N","^3M","^3S","~$goog.string.Unicode","~$goog.userAgent"]]],["^1S","com/fulcrologic/guardrails/impl/externs.cljc"],["1c3188d13b2f3b2324bad6f65cc78cd4b193445e","^3=",["^ ","^3>",null,"^3?",["^F",[]],"^3@",["^1B","^1A","~$com.fulcrologic.guardrails.registry","^1F"]]],["^1S","goog/asserts/asserts.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3=",["^ ","^3>",null,"^3?",["^F",[]],"^3@",["^1B","~$goog.debug.Error","^4D"]]],["^1S","cljs/core/async/impl/buffers.cljs"],["c55a0f6d67abac2efcfddf7621cac07d90298cab","^3=",["^ ","^3>",null,"^3?",["^F",[]],"^3@",["^1B","^1A","^3B"]]],["^1S","goog/uri/uri.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3=",["^ ","^3>",null,"^3?",["^F",[]],"^3@",["^1B","^3J","^3L","~$goog.collections.maps","^3M","~$goog.structs","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^1S","goog/collections/maps.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3=",["^ ","^3>",null,"^3?",["^F",[]],"^3@",["^1B"]]],["^1S","goog/i18n/bidi.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3=",["^ ","^3>",null,"^3?",["^F",[]],"^3@",["^1B"]]],["^1S","cljs/core/async/impl/timers.cljs"],["c55a0f6d67abac2efcfddf7621cac07d90298cab","^3=",["^ ","^3>",null,"^3?",["^F",[]],"^3@",["^1B","^1A","^3B","^3E","^3H"]]],["^1S","cljs/spec/alpha.cljs"],["e2ad9a4500a5ecabaf01429c4f0d6f7fac146951","^3=",["^ ","^3>",null,"^3?",["^F",[]],"^3@",["^1B","^1A","^3N","^3Z","~$cljs.spec.gen.alpha","^1E"]]],["^1S","goog/fs/url.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3=",["^ ","^3>",null,"^3?",["^F",[]],"^3@",["^1B"]]],["^1S","goog/base.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3=",["^ ","^3>",null,"^3?",["^F",[]],"^3@",[]]],["^1S","goog/structs/structs.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3=",["^ ","^3>",null,"^3?",["^F",[]],"^3@",["^1B","^3J","^3N"]]],["^1S","clojure/string.cljs"],["e2ad9a4500a5ecabaf01429c4f0d6f7fac146951","^3=",["^ ","^3>",null,"^3?",["^F",[]],"^3@",["^1B","^1A","^3M","^3["]]],["^1S","goog/debug/entrypointregistry.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3=",["^ ","^3>",null,"^3?",["^F",[]],"^3@",["^1B","^3L"]]],["^1S","goog/string/string.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3=",["^ ","^3>",null,"^3?",["^F",[]],"^3@",["^1B","^4E","^4?","^3S","^3C"]]],["^1S","goog/reflect/reflect.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3=",["^ ","^3>",null,"^3?",["^F",[]],"^3@",["^1B"]]],["^1S","goog/labs/useragent/util.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3=",["^ ","^3>",null,"^3?",["^F",[]],"^3@",["^1B","~$goog.labs.userAgent","^3C"]]],["^1S","expound/printer.cljc"],["f84ecd45aeef38fd6f1c53d8323e6abc5dc5a0e4","^3=",["^ ","^3>",null,"^3?",["^F",[]],"^3@",["^1B","^1A","^1E","^?","^C","^41","^43","^44","^3U","^3Z","~$goog.string.format","^3M"]]],["^1S","goog/string/stringbuffer.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3=",["^ ","^3>",null,"^3?",["^F",[]],"^3@",["^1B"]]],["^1S","goog/math/coordinate.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3=",["^ ","^3>",null,"^3?",["^F",[]],"^3@",["^1B","~$goog.math"]]],["^1S","goog/labs/useragent/useragent.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3=",["^ ","^3>",null,"^3?",["^F",[]],"^3@",["^1B"]]],["^1S","goog/async/nexttick.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3=",["^ ","^3>",null,"^3?",["^F",[]],"^3@",["^1B","~$goog.debug.entryPointRegistry","~$goog.dom","^4A","^4<","^3V","^3W"]]],["^1S","goog/html/uncheckedconversions.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3=",["^ ","^3>",null,"^3?",["^F",[]],"^3@",["^1B","^3L","^4=","^47","^4>","^4@","^4:","^3P","^3S","^3C","^3Q"]]],["^1S","goog/dom/htmlelement.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3=",["^ ","^3>",null,"^3?",["^F",[]],"^3@",["^1B"]]],["^1S","cljs/core.cljs"],["e2ad9a4500a5ecabaf01429c4f0d6f7fac146951","^3=",["^ ","^3>",null,"^3?",["^F",[]],"^3@",["^1B","~$goog.math.Long","~$goog.math.Integer","^3M","^3N","^3J","^3K","^3["]]],["^1S","goog/html/safescript.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3=",["^ ","^3>",null,"^3?",["^F",[]],"^3@",["^1B","^3S","^3T","^48","^3L"]]],["^1S","goog/html/safestylesheet.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3=",["^ ","^3>",null,"^3?",["^F",[]],"^3@",["^1B","^3S","^4>","^3T","^3N","^3L","^3C"]]],["^1S","goog/math/integer.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3=",["^ ","^3>",null,"^3?",["^F",[]],"^3@",["^1B","^3Y"]]],["^1S","goog/dom/browserfeature.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3=",["^ ","^3>",null,"^3?",["^F",[]],"^3@",["^1B","^4I"]]],["^1S","clojure/set.cljs"],["e2ad9a4500a5ecabaf01429c4f0d6f7fac146951","^3=",["^ ","^3>",null,"^3?",["^F",[]],"^3@",["^1B","^1A"]]],["^1S","goog/uri/utils.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3=",["^ ","^3>",null,"^3?",["^F",[]],"^3@",["^1B","^3L","^3M"]]],["^1S","goog/string/const.js"],["e7c400433b3c1fadb574d4cc5a65cddccff5500f","^3=",["^ ","^3>",null,"^3?",["^F",[]],"^3@",["^1B","^3L","^3T"]]]]],"~:clj-info",["^ ","jar:file:/C:/Users/carre/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/main.clj",1675466804000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader.clj",1675288215000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/impl/errors.clj",1675288215000,"jar:file:/C:/Users/carre/.m2/repository/com/fulcrologic/guardrails/1.1.4/guardrails-1.1.4.jar!/com/fulcrologic/guardrails/impl/externs.cljc",1676259733000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/tools.analyzer/1.1.0/tools.analyzer-1.1.0.jar!/clojure/tools/analyzer/ast.clj",1675288214000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/core.async/1.4.627/core.async-1.4.627.jar!/clojure/core/async/impl/ioc_macros.clj",1676259738000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/default_data_readers.clj",1675288215000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/clojurescript/1.10.914/clojurescript-1.10.914.jar!/cljs/util.cljc",1676259734000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/core.async/1.4.627/core.async-1.4.627.jar!/clojure/core/async/impl/buffers.clj",1676259738000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/data.json/2.4.0/data.json-2.4.0.jar!/clojure/data/json.clj",1675288214000,"jar:file:/C:/Users/carre/.m2/repository/com/fulcrologic/guardrails/1.1.4/guardrails-1.1.4.jar!/com/fulcrologic/guardrails/impl/parser.clj",1676259733000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/tools.analyzer/1.1.0/tools.analyzer-1.1.0.jar!/clojure/tools/analyzer/env.clj",1675288214000,"jar:file:/C:/Users/carre/.m2/repository/com/fulcrologic/guardrails/1.1.4/guardrails-1.1.4.jar!/com/fulcrologic/guardrails/utils.cljc",1676259733000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/spec.alpha/0.2.194/spec.alpha-0.2.194.jar!/clojure/spec/gen/alpha.clj",1675466804000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/clojurescript/1.10.914/clojurescript-1.10.914.jar!/cljs/analyzer/passes.cljc",1676259734000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/core.async/1.4.627/core.async-1.4.627.jar!/clojure/core/async/impl/timers.clj",1676259738000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/clojurescript/1.10.914/clojurescript-1.10.914.jar!/cljs/source_map/base64.clj",1676259734000,"jar:file:/C:/Users/carre/.m2/repository/expound/expound/0.8.9/expound-0.8.9.jar!/expound/problems.cljc",1676259733000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/clojurescript/1.10.914/clojurescript-1.10.914.jar!/cljs/analyzer.cljc",1676259734000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/tools.analyzer.jvm/1.2.0/tools.analyzer.jvm-1.2.0.jar!/clojure/tools/analyzer/jvm/utils.clj",1676259734000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/clojurescript/1.10.914/clojurescript-1.10.914.jar!/cljs/source_map.clj",1676259734000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/stacktrace.clj",1675466804000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/edn.clj",1675466804000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/clojurescript/1.10.914/clojurescript-1.10.914.jar!/cljs/source_map/base64_vlq.clj",1676259734000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/impl/inspect.clj",1675288215000,"jar:file:/C:/Users/carre/.m2/repository/com/fulcrologic/guardrails/1.1.4/guardrails-1.1.4.jar!/com/fulcrologic/guardrails/core.cljc",1676259733000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/clojurescript/1.10.914/clojurescript-1.10.914.jar!/cljs/spec/alpha.cljc",1676259734000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/core.async/1.4.627/core.async-1.4.627.jar!/cljs/core/async/impl/ioc_macros.clj",1676259738000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/clojurescript/1.10.914/clojurescript-1.10.914.jar!/cljs/js_deps.cljc",1676259734000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/tools.analyzer/1.1.0/tools.analyzer-1.1.0.jar!/clojure/tools/analyzer/utils.clj",1675288214000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/instant.clj",1675466804000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/clojurescript/1.10.914/clojurescript-1.10.914.jar!/cljs/core.cljc",1676259734000,"jar:file:/C:/Users/carre/.m2/repository/expound/expound/0.8.9/expound-0.8.9.jar!/expound/paths.cljc",1676259733000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/java/io.clj",1675466804000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/clojurescript/1.10.914/clojurescript-1.10.914.jar!/cljs/env.cljc",1676259734000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/clojurescript/1.10.914/clojurescript-1.10.914.jar!/cljs/instant.clj",1676259734000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/spec.alpha/0.2.194/spec.alpha-0.2.194.jar!/clojure/spec/alpha.clj",1675466804000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/core.async/1.4.627/core.async-1.4.627.jar!/clojure/core/async/impl/exec/threadpool.clj",1676259738000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/core.clj",1675466804000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/clojurescript/1.10.914/clojurescript-1.10.914.jar!/cljs/analyzer/passes/and_or.cljc",1676259734000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/core.async/1.4.627/core.async-1.4.627.jar!/clojure/core/async/impl/mutex.clj",1676259738000,"jar:file:/C:/Users/carre/.m2/repository/expound/expound/0.8.9/expound-0.8.9.jar!/expound/util.cljc",1676259733000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/clojurescript/1.10.914/clojurescript-1.10.914.jar!/cljs/analyzer/impl.cljc",1676259734000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/clojurescript/1.10.914/clojurescript-1.10.914.jar!/cljs/pprint.cljc",1676259734000,"jar:file:/C:/Users/carre/.m2/repository/expound/expound/0.8.9/expound-0.8.9.jar!/expound/printer.cljc",1676259733000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/core.async/1.4.627/core.async-1.4.627.jar!/cljs/core/async.clj",1676259738000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/pprint.clj",1675466804000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/reader_types.clj",1675288215000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/core.async/1.4.627/core.async-1.4.627.jar!/clojure/core/async/impl/dispatch.clj",1676259738000,"jar:file:/C:/Users/carre/.m2/repository/expound/expound/0.8.9/expound-0.8.9.jar!/expound/alpha.cljc",1676259733000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/core.async/1.4.627/core.async-1.4.627.jar!/clojure/core/async/impl/channels.clj",1676259738000,"jar:file:/C:/Users/carre/.m2/repository/expound/expound/0.8.9/expound-0.8.9.jar!/expound/ansi.cljc",1676259733000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/core.async/1.4.627/core.async-1.4.627.jar!/clojure/core/async/impl/concurrent.clj",1676259738000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/set.clj",1675466804000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/walk.clj",1675466804000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/string.clj",1675466804000,"jar:file:/C:/Users/carre/.m2/repository/com/fulcrologic/guardrails/1.1.4/guardrails-1.1.4.jar!/com/fulcrologic/guardrails/impl/pro.cljc",1676259733000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/clojurescript/1.10.914/clojurescript-1.10.914.jar!/cljs/tagged_literals.cljc",1676259734000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/tools.analyzer/1.1.0/tools.analyzer-1.1.0.jar!/clojure/tools/analyzer.clj",1675288214000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/clojurescript/1.10.914/clojurescript-1.10.914.jar!/cljs/compiler.cljc",1676259734000,"jar:file:/C:/Users/carre/.m2/repository/com/fulcrologic/guardrails/1.1.4/guardrails-1.1.4.jar!/com/fulcrologic/guardrails/registry.cljc",1676259733000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/reflect.clj",1675466804000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/core.async/1.4.627/core.async-1.4.627.jar!/clojure/core/async.clj",1676259738000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/clojurescript/1.10.914/clojurescript-1.10.914.jar!/cljs/spec/gen/alpha.cljc",1676259734000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/clojurescript/1.10.914/clojurescript-1.10.914.jar!/cljs/externs.clj",1676259734000,"jar:file:/C:/Users/carre/.m2/repository/com/fulcrologic/guardrails/1.1.4/guardrails-1.1.4.jar!/com/fulcrologic/guardrails/config.cljc",1676259733000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/tools.analyzer.jvm/1.2.0/tools.analyzer.jvm-1.2.0.jar!/clojure/tools/analyzer/jvm.clj",1676259734000,"jar:file:/C:/Users/carre/.m2/repository/binaryage/devtools/1.0.4/devtools-1.0.4.jar!/devtools/defaults.clj",1676259736000,"jar:file:/C:/Users/carre/.m2/repository/org/clojure/core.async/1.4.627/core.async-1.4.627.jar!/clojure/core/async/impl/protocols.clj",1676259738000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","com/fulcrologic/guardrails/core.cljc","^7",10,"^8",5,"^9",10,"^:",36],"^;",["^ ","^<","^=","^>","^?","^@","^A","^B","^C"],"^D",null,"^E",["^F",[]],"^G",["^ ","^H",["^ ","^I",["^J",[["^K","^L","^M",["^N"],"^O","^P","^Q"],["^K","^L","^M",["^J",[["^N"],"^O","^P","^Q"]],"~$+","^M"]]],"^R","Like defn-, but requires a (nilable) gspec definition and generates\n       additional `s/fdef`, generative tests, instrumentation code, an\n       fspec-based stub, and/or tracing code, depending on the configuration\n       metadata and the existence of a valid gspec and non-nil body.","^7",737,"^8",6,"^6","com/fulcrologic/guardrails/core.cljc","^S","^T","^U","^V","^W",true],"^X",["^ ","^I",["^J",[["^K",["^N"],"^O"],["^K",["^J",[["^N"],"^O"]],"~$+"]]],"^R","Defines an fspec using gspec syntax – pretty much a `>defn` without the body.\n\n       `name` can be a symbol or a qualified keyword, depending on whether the\n       fspec is meant to be registered as a top-level fspec (=> s/fdef fn-sym\n       ...) or used in other specs (=> s/def ::spec-keyword (s/fspec ...)). ","^7",763,"^8",6,"^6","com/fulcrologic/guardrails/core.cljc","^S","^Y","^U","^V","^W",true],"^Z",["^ ","^I",["^J",[["~$k","^["],["~$k","^10","^["]]],"^R","DEPRECATED: to be removed","^7",749,"^8",6,"^6","com/fulcrologic/guardrails/core.cljc","^S","^11","^U","^V","^W",true],"~$?",["^ ","^I",["^J",[["~$&","^12"]]],"^7",119,"^8",4,"^6","com/fulcrologic/guardrails/core.cljc","^S","^13","^U","^V","^W",true],"^14",["^ ","^I",["^J",[["^K","^L","^M",["^N"],"^O","^P","^Q"],["^K","^L","^M",["^J",[["^N"],"^O","^P","^Q"]],"~$+","^M"]]],"^R","Like defn, but requires a (nilable) gspec definition and generates\n       additional `s/fdef`, generative tests, instrumentation code, an\n       fspec-based stub, and/or tracing code, depending on the configuration\n       metadata and the existence of a valid gspec and non-nil body.","^7",725,"^8",6,"^6","com/fulcrologic/guardrails/core.cljc","^S","^15","^U","^V","^W",true],"^16",["^ ","^I",["^J",[["~$&","^12"]]],"^7",781,"^8",6,"^6","com/fulcrologic/guardrails/core.cljc","^S","^17","^U","^V","^W",true],"^18",["^ ","^I",["^J",[["~$&","^12"]]],"^7",783,"^8",6,"^6","com/fulcrologic/guardrails/core.cljc","^S","^19","^U","^V","^W",true]],"^S","^V","^1:",["^ "],"^1<",null,"^1=",["^ ","^>","^?","^1>","^1>","^1?","^A","^1@","^1@","^1A","^1A","^1B","^1B","^A","^A","^@","^A","^1C","^1@","~$s","^?","^1D","^1E","^1F","^1F","^1G","^1F","^1E","^1E","^?","^?"],"^1H",["^F",["^1I","^1J"]],"~:shadow/js-access-global",["^F",["Date","Error"]],"^1K",null,"~:defs",["^ ","~$now-ms",["^ ","~:protocol-inline",null,"^5",["^ ","^6","com/fulcrologic/guardrails/core.cljc","^7",53,"^8",7,"^9",53,"^:",13,"^I",["^J",["~$quote",["^J",[[]]]]]],"^S","^2Y","^6","com/fulcrologic/guardrails/core.cljc","^:",13,"~:method-params",["^J",[[]]],"~:protocol-impl",null,"~:arglists-meta",["^J",[null,null]],"^8",1,"~:variadic?",false,"^7",53,"~:ret-tag","~$any","^9",53,"~:max-fixed-arity",0,"~:fn-var",true,"^I",["^J",["^6L",["^J",[[]]]]]],"~$<-",["^ ","^S","^33","^6","com/fulcrologic/guardrails/core.cljc","^7",29,"^8",1,"^9",29,"^:",8,"^5",["^ ","^6","com/fulcrologic/guardrails/core.cljc","^7",29,"^8",6,"^9",29,"^:",8],"~:tag","~$cljs.core/Keyword"],"~$run-check",["^ ","^6K",null,"^5",["^ ","^6","com/fulcrologic/guardrails/core.cljc","^7",56,"^8",7,"^9",56,"^:",16,"^I",["^J",["^6L",["^J",[[["^ ","~:keys",["~$args?","~$vararg?","~$callsite","~$throw?","~$fn-name","~$expound-opts"]],"~$spec","~$value"]]]]]],"^S","^34","^6","com/fulcrologic/guardrails/core.cljc","^:",16,"^6M",["^J",[["~$p__55460","^74","^75"]]],"^6N",null,"^6O",["^J",[null,null]],"^8",1,"^6P",false,"^7",56,"^6Q","~$clj-nil","^9",56,"^6S",3,"^6T",true,"^I",["^J",["^6L",["^J",[[["^ ","^6Y",["^6Z","^6[","^70","^71","^72","^73"]],"^74","^75"]]]]]],"~$|",["^ ","^S","^37","^6","com/fulcrologic/guardrails/core.cljc","^7",28,"^8",1,"^9",28,"^:",7,"^5",["^ ","^6","com/fulcrologic/guardrails/core.cljc","^7",28,"^8",6,"^9",28,"^:",7],"^6V","^6W"],"~$pending-check-channel",["^ ","^S","^2L","^6","com/fulcrologic/guardrails/core.cljc","^7",31,"^8",1,"^9",31,"^:",31,"^5",["^ ","^6","com/fulcrologic/guardrails/core.cljc","^7",31,"^8",10,"^9",31,"^:",31],"^6V","^6R"],"~$async-go-channel",["^ ","^S","^25","^6","com/fulcrologic/guardrails/core.cljc","^7",33,"^8",1,"^9",33,"^:",26,"^5",["^ ","^6","com/fulcrologic/guardrails/core.cljc","^7",33,"^8",10,"^9",33,"^:",26],"^6V","^6R"],"~$=>",["^ ","^S","^29","^6","com/fulcrologic/guardrails/core.cljc","^7",27,"^8",1,"^9",27,"^:",8,"^5",["^ ","^6","com/fulcrologic/guardrails/core.cljc","^7",27,"^8",6,"^9",27,"^:",8],"^6V","^6W"],"~$callsite-exception",["^ ","^6K",null,"^5",["^ ","^6","com/fulcrologic/guardrails/core.cljc","^7",574,"^8",7,"^9",574,"^:",25,"^I",["^J",["^6L",["^J",[[]]]]]],"^S","^2@","^6","com/fulcrologic/guardrails/core.cljc","^:",25,"^6M",["^J",[[]]],"^6N",null,"^6O",["^J",[null,null]],"^8",1,"^6P",false,"^7",574,"^6Q","^38","^9",574,"^6S",0,"^6T",true,"^I",["^J",["^6L",["^J",[[]]]]]],"~$output-fn",["^ ","^6K",null,"^5",["^ ","^6","com/fulcrologic/guardrails/core.cljc","^7",44,"^8",8,"^9",44,"^:",17,"~:private",true,"^I",["^J",["^6L",["^J",[["~$data"]]]]]],"^7=",true,"^S","^2C","^6","com/fulcrologic/guardrails/core.cljc","^:",17,"^6M",["^J",[["^7>"]]],"^6N",null,"^6O",["^J",[null,null]],"^8",1,"^6P",false,"^7",44,"^6Q","^1D","^9",44,"^6S",1,"^6T",true,"^I",["^J",["^6L",["^J",[["^7>"]]]]]]],"^1J",["^ ","^>","^?","^V","^V","^1?","^A","^1A","^1A","^A","^A","^@","^A","~$s","^?","^1F","^1F","^1G","^1F","^?","^?"],"~:cljs.analyzer/constants",["^ ","^1H",["^F",["~:args","~:ret","~:throw?","~:com.fulcrologic.guardrails/validation-error","~:args?","~:else","~:gen","~:callsite","~:msg_","~:?file","~:fn-name","~:recur","~:type","~:hostname_","~:?ns-str","~:com.fulcrologic.guardrails/failure-point","~:com.fulcrologic.guardrails/fn-name","~:level","~:vararg?","~:?err","~:st","~:timestamp_","~:?line","~:com.fulcrologic.guardrails/val","~:expound-opts","~:com.fulcrologic.guardrails/spec"]],"~:order",["^7A","^7T","^7F","^7K","^7E","^7Q","^7S","^7H","^7N","^7I","^7M","^7U","^7V","^7D","^7R","^7G","^7B","^7J","^7X","^7L","^7P","^7O","^7Y","^7C","^7@","^7W"]],"^1O",["^ ","^1J",["^F",[]],"^1I",["^F",[]]],"^1P",["^ "],"^1Q",["^1B","^1A","^1>","^1F","^A","^?","^1E","^1@"]],"^U","^V","~:ns-specs",["^ "],"~:ns-spec-vars",["^F",[]],"~:compiler-options",["^3<",[["^81","~:static-fns"],true,["^81","~:shadow-tweaks"],null,["^81","~:source-map-inline"],null,["^81","~:elide-asserts"],false,["^81","~:optimize-constants"],null,["^81","^1V"],null,["^81","~:external-config"],null,["^81","~:tooling-config"],null,["^81","~:emit-constants"],null,["^81","~:load-tests"],null,["^81","~:form-size-threshold"],null,["^81","~:global-goog-object&array"],null,["^81","~:data-readers"],null,["^81","~:infer-externs"],"~:auto",["^81","^1X"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^81","~:fn-invoke-direct"],null,["^81","~:source-map"],"/dev/null"]]]